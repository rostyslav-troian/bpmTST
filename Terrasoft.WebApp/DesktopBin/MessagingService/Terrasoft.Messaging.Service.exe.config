<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="superSocket" type="SuperSocket.SocketEngine.Configuration.SocketServiceConfig, SuperSocket.SocketEngine" />
    <sectionGroup name="common">
      <section name="logging" type="Terrasoft.Common.LoggingConfigurationSectionHandler, Terrasoft.Common" />
    </sectionGroup>
    <section name="asterisk" type="Terrasoft.Messaging.Asterisk.AsteriskConfig, Terrasoft.Messaging.Asterisk" />
    <section name="callway" type="Terrasoft.Messaging.Callway.CallwayConfig, Terrasoft.Messaging.Callway" />
    <section name="infinity" type="Terrasoft.Messaging.Infinity.InfinityConfig, Terrasoft.Messaging.Infinity" />
    <section name="avaya" type="Terrasoft.Messaging.Avaya.AvayaConfig, Terrasoft.Messaging.Avaya" />
    <section name="tapi" type="Terrasoft.Messaging.Tapi.TapiConfig, Terrasoft.Messaging.Tapi" />
  </configSections>
  <appSettings>
    <add key="ServiceName" value="TerrasoftMessagingService" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />
    <add key="ServiceIndependentMode" value="false" />
    <add key="MsgUserPasswordDESCryptoServiceKey" value="SegFOF6gUpo=" />
  </appSettings>
  <superSocket disablePerformanceDataCollector="true" logFactory="CommonLoggingLogFactory">
    <servers>
      <server name="ClientWebSocketService" serviceName="ClientWebSocketService" ip="Any" port="2013" mode="Tcp" idleSessionTimeOut="10000" maxCommandLength="4096" maxConnectionNumber="10000"></server>
      <!-- Support for WebSocket secure connection. Replace previous and set correct certificate name and password.
				<server name="ClientWebSocketService" serviceName="ClientWebSocketService" ip="Any" port="2013" mode="Tcp" idleSessionTimeOut="10000" maxCommandLength="4096" security="tls" >
					<certificate filePath="certificate.pfx" password="111"></certificate>
				</server>
			-->
    </servers>
    <serverTypes>
      <add name="ClientWebSocketService" type="SuperWebSocket.WebSocketServer, SuperWebSocket" />
    </serverTypes>
    <logFactories>
      <add name="CommonLoggingLogFactory" type="Terrasoft.Messaging.Service.Logging.CommonLoggingLogFactory, Terrasoft.Messaging.Service" />
    </logFactories>
  </superSocket>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
  <startup useLegacyV2RuntimeActivationPolicy="true">
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="SuperSocket.SocketBase" publicKeyToken="6c80000676988ebb" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.3.0" newVersion="1.5.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="SuperSocket.Common" publicKeyToken="6c80000676988ebb" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.3.0" newVersion="1.5.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging" publicKeyToken="af08829b84f0328e" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.4.1.0" newVersion="3.4.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging.Core" publicKeyToken="af08829b84f0328e" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.4.1.0" newVersion="3.4.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.15.0" newVersion="1.2.15.0" />
      </dependentAssembly>
    </assemblyBinding>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Extensions.DependencyInjection.Abstractions" publicKeyToken="adb9793829ddae60" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0" />
      </dependentAssembly>
    </assemblyBinding>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.3.0" newVersion="1.2.3.0" />
      </dependentAssembly>
    </assemblyBinding>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.4.1" newVersion="4.0.4.1" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <common>
    <logging>
      <!--<factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net1215">
				<arg key="configType" value="EXTERNAL" />
			</factoryAdapter>-->
      <factoryAdapter type="Common.Logging.NLog.NLogLoggerFactoryAdapter, Common.Logging.NLog45">
        <arg key="configType" value="FILE" />
        <arg key="configFile" value="~/Config/nlog.config" />
      </factoryAdapter>
    </logging>
  </common>
  <!--
		packetInfoConfig: Settings for getting packet parameters in the configuration. Parameters are passed to configuration in the 
		PrivateData field of MsgEventInfo. PrivateData is a serialization of Dictionary<string, object>.
		packetInfoConfig must be created as a serialized form of Dictionary<string, List<string>>, where Key of dictionary is used
		to compare with packet Event parameter. First checked if packet produces event passed to configuration and Event parameter match 
		to the regular expression in Key. Then packet parameters are checked with a regular expression in Value list. Matching parameters 
		are sent to the configuration.
		
		Examples: 
		1) We need to receive parameters starting with CallerID from Dial packet. Then packetInfoConfig will look like
			"{&quot;^Dial$&quot;:[&quot;^CallerID\\w+&quot;]}". On RingStarted event we will receive in PrivateData field 
			data like {"CallerIDNum":"111","CallerIDName":"112","UniqueID":"1431505934.12345"}
		2) We need to receive parameters Channel1 and Channel2 from Bridge packet. Then packetInfoConfig will look like
			"{&quot;^Bridge$&quot;:[&quot;^Channel1$&quot;,&quot;^Channel2$&quot;]}". On CommutationStarted event we will receive 
			in PrivateData field data like {"Channel1":"SIP/111-0000489e","Channel2":"SIP/112-0000489f"}
		3) We need to receive parameter Cause-txt from Hangup packet. Then packetInfoConfig will look like
			"{&quot;^Hangup$&quot;:[&quot;^Cause-txt$&quot;]}". On RingFinished event we will receive 
			in PrivateData field data like {"Cause-txt":"Normal Clearing"}
		4) We need to receive parameters from events describe in examples 1-3.Then packetInfoConfig will look 
			like "{&quot;^Dial$&quot;:[&quot;^CallerID\\w+&quot;,&quot;^UniqueID&quot;], &quot;^Bridge$&quot;:[&quot;^Channel1$&quot;,&quot;^Channel2$&quot;], &quot;^Hangup$&quot;:[&quot;^Cause-txt$quot;]}".
	-->
  <asterisk url="" port="5038" userName="" secret="" originateContext="" parkingLotContext="" autoPauseOnCommutationStart="true" queueExtensionFormat="Local/{0}@from-queue/n" asyncOriginate="true" sendRingStartedOnRingingState="true" traceQueuesState="false" packetInfoConfig="" filePath="" />
  <infinity infinityXClientPath="\Client" thirdPartyIntegrationLogin="" thirdPartyIntegrationPassword="" logFileName="" />
  <callway url="" port="34600" login="" password="" restoreConnectionInterval="2000" />
  <avaya serverIp="" port="4721" useSecureSockets="False" ctiUser="" psw="" protocolVersion="http://www.ecma-international.org/standards/ecma-323/csta/ed3/priv6" switchName="CM" />
  <!--
		lineNameSearchPattern: Regex pattern for search line number by name. Pattern can contain lineNameMacrosName key value
		lineNameMacrosName: macros name which will be replaced by user configured line name into lineNameSearchPattern
		
		Example: 
		User have line: "Cisco Line: [SEP002AAA5D46810] (100)"
		When MAC address changed, user will be have next line: "Cisco Line: [SEPAA2DDD5D22546] (100)"
		We need to find user line only having line number: "100" (user configured in profile)
		
		Change configuration parameters like this:
			lineNameSearchPattern="^Cisco Line: \[SEP.*\] \(USER_LINE_NUMBER_FROM_PROFILE\)" lineNameMacrosName="USER_LINE_NUMBER_FROM_PROFILE"
		After this, Messaging Service receives user configured line number: 100.
		Then replace macros tag in lineNameSearchPattern (in this example USER_LINE_NUMBER_FROM_PROFILE) on user line number - 100
		In the result we get regex pattern like this: "^Cisco Line: \[SEP.*\] \(100\)"
		And now, Messaging Service start find line using this regexp
		
		addressForwardingSupported: Is Tapi driver supports address forwarding. Used for dnd function. Default = false.
			If Call Center doesn't support this function (e.g. Cisco), this option should be set to false.
	-->
  <tapi useNumberTranslation="true" useEmptySetupTransferParams="false" useTransferDialOnDialtoneEvent="false" useDialFeatureFromTapiCall="true" lineNameSearchPattern="^line$" lineNameMacrosName="line" addressForwardingSupported="false" ignoreCanMakeCallFeature="true" />
</configuration>