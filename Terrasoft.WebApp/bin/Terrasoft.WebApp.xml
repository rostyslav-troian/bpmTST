<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terrasoft.WebApp</name>
    </assembly>
    <members>
        <member name="T:Terrasoft.WebApp.ConfigurationBuild.IConfigurationBuildNotifier">
            <summary>
            Provides methods for notifying of the build process.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.ConfigurationBuild.IConfigurationBuildNotifier.NotifyOnBuildCompleted">
            <summary>
            Notifies current user when build has been completed.
            </summary>
        </member>
        <member name="T:Terrasoft.WebApp.PreAppStart">
            <summary>
            Class that is responsible for registering of ${iis-application-name} macro for NLog.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PreAppStart.PreApplicationStartMethod">
            <summary>
            Registers layout renderer.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.Nui.ApplicationInstallation.Head1">
            <summary>
            Head1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Terrasoft.WebApp.Nui.Feedback">
            <summary>
            A class that allows to load feedback modules and pages.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.AllowedFeedbackModules">
            <summary>
            A set of allowed feedback modules.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.RequestedModule">
            <summary>
            Requested module.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.Token">
            <summary>
            Request token parameter.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.PreferredUserCulture">
            <summary>
            Preferred user culture from Http context.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.FeedbackSchemaName">
            <summary>
            Request feedback schema name parameter.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.GetIsAllowedUser(System.String)">
            <summary>
            Gets is user allowed.
            </summary>
            <param name="userName">User name.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.SetupLocalizableStrings">
            <summary>
            Sets up localizable strings by user culture from HTTP context.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.SetupResources">
            <summary>
            Setup resources to response.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.SetResponseImage(System.String)">
            <summary>
            Sets image to response from system settings.
            </summary>
            <param name="imageCode">System setting image code.</param>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Page load event handler.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Terrasoft.WebApp.Nui.Feedback.FeedbackForm">
            <summary>
            FeedbackForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Terrasoft.WebApp.Nui.Index.IndexForm">
            <summary>
            IndexForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.UserManagement.PreferredUserCulture">
            <summary>
            Preferred user culture from Http context.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.UserManagement.SetupLocalizableStrings">
            <summary>
            Sets up localizable strings by user culture from HTTP context.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.Nui.UserManagement.UserManagementForm">
            <summary>
            UserManagementForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Terrasoft.WebApp.PackageExporter.IPackageExporter">
            <summary>
            Provides methods to export packages.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageExporter.IPackageExporter.ExportToFile(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports collection of packages to file.
            </summary>
            <param name="packageNames">Names of packages to export.</param>
            <returns>Path to file with packages.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.AppInstallerServiceInternal.DownloadApp(System.Uri)">
            <summary>
            Downloads archive of packages by URL to current application temporary storage.
            </summary>
            <param name="uri">Download URI.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.AppInstallerServiceInternal.InstallApp(Terrasoft.Core.Packages.IInstalledAppInfo)">
            <summary>
            Installs application to current application persistence storage.
            </summary>
            <param name="installedAppInfo">Installing application info.</param>
            <returns>
            Returns <c>true</c> if application has been installed successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.AppInstallerServiceInternal.OrderAppLicense(Terrasoft.Core.Packages.IInstalledAppInfo,Terrasoft.Core.ILicManager,Terrasoft.WebApp.ServiceModel.IWebLicRequest)">
            <summary>
            Orders and adds application licenses if needed.
            </summary>
            <param name="appInfo">Installing application information.</param>
            /// <param name="licManager">License manager.</param>
            /// <param name="webLicRequest">Web license request.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.AppInstallerServiceInternal.UninstallApp(System.Guid,System.Collections.Generic.IList{System.String})">
            <summary>
            Uninstalls application.
            </summary>
            <param name="appId">Application identifier.</param>
            <param name="errorMessages">Error messages.</param>
            <returns>
            Returns <c>true</c> if application has been uninstalled successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.AppInstallerServiceInternal.DeletePackage(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Deletes package.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="errorMessages">Error messages.</param>
            <returns>
            Returns <c>true</c> if package has been deleted successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IAppInstallerServiceInternal">
            <summary>
            Defines methods to install application persistence storage.
            Implementation of this interface should encapsulate business logic of <see cref="T:Terrasoft.Core.ServiceModelContract.IAppInstallerService"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IAppInstallerServiceInternal.DownloadApp(System.Uri)">
            <summary>
            Downloads archive of packages by URL to current application temporary storage.
            </summary>
            <param name="uri">Download URI.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IAppInstallerServiceInternal.InstallApp(Terrasoft.Core.Packages.IInstalledAppInfo)">
            <summary>
            Installs application to current application persistence storage.
            </summary>
            <param name="installedAppInfo">Installing application info.</param>
            <returns>
            Returns <c>true</c> if application has been installed successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IAppInstallerServiceInternal.UninstallApp(System.Guid,System.Collections.Generic.IList{System.String})">
            <summary>
            Uninstalls application.
            </summary>
            <param name="appId">Application identifier.</param>
            <param name="errorMessages">Error messages.</param>
            <returns>
            Returns <c>true</c> if application has been installed successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IAppInstallerServiceInternal.DeletePackage(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Deletes package.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="errorMessages">Error messages.</param>
            <returns>
            Returns <c>true</c> if application has been uninstalled successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IAppInstallerServiceInternal.OrderAppLicense(Terrasoft.Core.Packages.IInstalledAppInfo,Terrasoft.Core.ILicManager,Terrasoft.WebApp.ServiceModel.IWebLicRequest)">
            <summary>
            Orders and adds application licenses if needed.
            </summary>
            <param name="appInfo">Installing application information.</param>
            /// <param name="licManager">License manager.</param>
            /// <param name="webLicRequest">Web license request.</param>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.ILoggerFileAppender">
            <summary>
            Represents a skeleton for appending a log file to a logger.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.ILoggerFileAppender.AppendFile(System.String)">
            <summary>
            Adds an appender.
            </summary>
            <param name="filePath">File path for added logger.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.ILoggerFileAppender.RemoveFile">
            <summary>
            Removes an appender.
            </summary>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal">
            <summary>
            Defines methods to install archive with packages to current application persistence storage.
            Implementation of this interface should encapsulate business logic of <see cref="T:Terrasoft.Core.ServiceModelContract.IPackageInstallerService"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.UploadPackage(Terrasoft.WebApp.PackageInstaller.IUploadFileInfo)">
            <summary>
            Uploads archive of packages to current application temporary storage.
            </summary>
            <param name="uploadingFileInfo">Instance of <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.InstallPackage(System.String)">
            <summary>
            Installs archive of packages to current application persistence storage.
            </summary>
            <param name="zipPackageName">Name of uploaded archive to install.</param>
            <returns>
            Returns <c>true</c> if archive of packages has been installed successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.GetLogFile">
            <summary>
            Returns <see cref="T:System.IO.Stream"/> that contains installation log file data.
            </summary>
            <returns><see cref="T:System.IO.Stream"/> that contains installation log file data.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.GetLogFileName">
            <summary>
            Returns name of installation log file.
            </summary>
            <returns>Name of installation log file.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.CreateBackup(Terrasoft.Core.ServiceModelContract.InstalledAppInfo)">
            <summary>
            Creates backup that contains difference in data between system packages and archive of packages 
            provided by <paramref name="appInfo"/>.
            </summary>
            <param name="appInfo">Application info.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.RestoreFromBackup(System.String)">
            <summary>
            Restores configuration from backup.
            </summary>
            <param name="appCode">Application code.</param>
            <returns>
            Returns <c>true</c> if configuration has been restored successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.GetZipPackages(System.Collections.Generic.IList{System.String})">
            <summary>
            Get zip packages.
            </summary>
            <param name="packageNames">Package names.</param>
            <returns><see cref="T:System.IO.Stream"/> that contains zip packages.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IPackageInstallFileLogAppender">
            <summary>
            Defines methods to register file appender for logging package installation process.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallFileLogAppender.Register(System.String)">
            <summary>
            Registers file appender in package installation logger.
            </summary>
            <param name="filePath">Path to file where logs will be saved.</param>
            <returns><see cref="T:System.IDisposable"/> instance which unregisters file provider.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            In case if <c>null</c> or empty string passed as value of parameter <paramref name="filePath"/>.
            </exception>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IStreamToFileSaver">
            <summary>
            Provides methods to save stream to a file.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IStreamToFileSaver.Save(System.IO.Stream,System.String)">
            <summary>
            Saves <paramref name="stream"/> to a file.
            </summary>
            <param name="stream">Instance of <see cref="T:System.IO.Stream"/>.</param>
            <param name="filePath">Path to a file to which <paramref name="stream"/> should be saved.</param>
            <remarks>
            This method creates directory provided by <paramref name="filePath"/> in case if it does not exist.
            If file provided by <paramref name="filePath"/> already exists it will be overwritten.
            </remarks>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="filePath"/> is read-only or
            an I/O error occurred while creating the file. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> contains one or more invalid characters 
            as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="filePath"/> exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="filePath"/> is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Creating a directory with only the colon (:) character was attempted.
            </exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            <paramref name="stream"/> or <paramref name="filePath"/> is null or empty.
            </exception>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IStreamToFileSaver.Append(System.IO.Stream,System.String)">
            <summary>
            Appends <paramref name="stream"/> to a file.
            </summary>
            <param name="stream">Instance of <see cref="T:System.IO.Stream"/>.</param>
            <param name="filePath">Path to a file to which <paramref name="stream"/> should be appended.</param>
            <remarks>
            This method creates new file in case when file provided by <paramref name="filePath"/> doesn't exist.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> contains one or more invalid characters 
            as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="filePath"/> exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="filePath"/> is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="filePath"/> is read-only or
            an I/O error occurred while opening the file. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath"/> specified a file that is read-only.
            <para>-or-</para>
            This operation is not supported on the current platform.
            <para>-or-</para>
            <paramref name="filePath"/> specified a directory.
            <para>-or-</para>
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="filePath"/> specified an invalid value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="filePath"/> is in an invalid format.
            </exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            <paramref name="stream"/> or <paramref name="filePath"/> is null or empty.
            </exception>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo">
            <summary>
            Defines properties and methods to retrieve information about uploading file.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsChunkedUpload">
            <summary>
            Gets a value indicating whether upload is in chunk mode.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsFirstChunk">
            <summary>
            Gets a value indicating whether this is a first chunk.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsUploadCompleted">
            <summary>
            Gets a value indicating whether this is a last chunk.
            In case when upload is not in chunk mode returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.FileName">
            <summary>
            Gets uploading file name.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.UploadedPercent">
            <summary>
            Gets uploaded data percent.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.GetContent">
            <summary>
            Gets content of uploading file.
            </summary>
            <remarks>
            In case when upload is chunked (<see cref="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsChunkedUpload"/> returns <c>true</c>) 
            returns partial file content.
            </remarks>
            <returns>Instance of <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfoFactory">
            <summary>
            Abstract factory for <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IUploadFileInfoFactory.GetUploadFileInfo(System.IO.Stream,Terrasoft.Web.Http.Abstractions.HttpRequest)">
            <summary>
            Gets new instance of <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.
            </summary>
            <param name="fileData">Uploading file data.</param>
            <param name="request">HTTP request.</param>
            <returns>Instance of <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.Log4NetLoggerFileAppender">
            <inheritdoc />
            <summary>
            <see cref="T:Terrasoft.WebApp.PackageInstaller.ILoggerFileAppender"/> implementation for Log4Net.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.Log4NetLoggerFileAppender.AppendFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.Log4NetLoggerFileAppender.RemoveFile">
            <inheritdoc />
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.NLogLoggerFileAppender">
            <inheritdoc />
            <summary>
            <see cref="T:Terrasoft.WebApp.PackageInstaller.ILoggerFileAppender"/> implementation for NLog.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.NLogLoggerFileAppender.AppendFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.NLogLoggerFileAppender.RemoveFile">
            <inheritdoc />
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.PackageInstallerServiceInternal.PackageZipExporter">
            <summary>
            Package zip exporter.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.PackageInstallerServiceInternal.GetZipPackages(System.Collections.Generic.IList{System.String})">
            <summary>
            Get zip packages.
            </summary>
            <param name="packageNames">Package names.</param>
            <returns><see cref="T:System.IO.Stream"/> that contains zip packages.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.PackageInstallFileLogAppender">
            <inheritdoc cref="T:Terrasoft.WebApp.PackageInstaller.IPackageInstallFileLogAppender"/>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.PackageInstallFileLogAppender.Register(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.PackageInstallFileLogAppender.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Terrasoft.WebApp.Page.GetAvailableCulturesScript">
            <summary>
            Returns available cultures script text.
            </summary>
            <returns>Available cultures script text.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.AppInstallerService.LoadPackagesToFileSystem(System.Collections.Generic.IList{System.String})">
            <summary>
            Load packages to file system.
            </summary>
            <param name="packageNames"></param>
            <returns>Response.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.AppInstallerService.LoadPackagesToDB(System.Collections.Generic.IList{System.String})">
            <summary>
            Load packages to DB.
            </summary>
            <param name="packageNames"></param>
            <returns>Response.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.AppInstallerService.UninstallApp(System.Guid)">
            <summary>
            Uninstalls application.
            </summary>
            <param name="appId">Application identifier.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.AppInstallerService.DeletePackage(System.String)">
            <summary>
            Deletes package.
            </summary>
            <param name="packageName">Package name.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.AppInstallerService.GetIsDemoMode">
            <summary>
            Returns <c>true</c> if demo mode is on. Otherwise returns false.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.AppInstallerService.ClearRedisDb">
            <summary>
            Clear redis database.
            </summary>
            <returns>Response.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.PackageInstallerService.GetZipPackages(System.Collections.Generic.IList{System.String})">
            <summary>
            Get zip packages.
            </summary>
            <param name="packageNames">Package names.</param>
            <returns><see cref="T:System.IO.Stream"/> that contains zip packages.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult">
            <summary>
            Adding trial license result.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult.Added">
            <summary>
            License successfully added.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult.ActiveLicAlreadyExists">
            <summary>
            Active license already exists.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult.InactiveLicAlreadyExists">
            <summary>
            Inactive license already exists.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult.CustomerNotExists">
            <summary>
            Customer does not exist.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult.LicProductNotExists">
            <summary>
            Lic product does not exist.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.ServiceModel.AddTrialLicenseResult.LicenseIsNotRequired">
            <summary>
            License is not required.
            </summary>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.IWebLicRequest">
            <summary>
            Provides methods for license request to external service.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.IWebLicRequest.AddTrialLicense(System.String,System.String)">
            <summary>
            Adds trial license.
            </summary>
            <param name="customerId">Customer identifier.</param>
            <param name="appCode">Installed application code.</param>
            <returns>Adding trial license result.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.IWebLicRequest.GetLicResponse(System.String,System.String)">
            <summary>
            Returns license response.
            </summary>
            <param name="customerId">Customer identifier.</param>
            <param name="version">Core version.</param>
            <returns>Stream with license response.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.WebLicRequest">
            <summary>
            Represents class for license request to external service.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.WebLicRequest.AddTrialLicense(System.String,System.String)">
            <summary>
            Adds trial license.
            </summary>
            <param name="customerId">Customer identifier.</param>
            <param name="appCode">Installed application code.</param>
            <returns>Adding trial license result.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.WebLicRequest.GetLicResponse(System.String,System.String)">
            <summary>
            Returns license response.
            </summary>
            <param name="customerId">Customer identifier.</param>
            <param name="version">Core version.</param>
            <returns>Stream with license response.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.WebServiceHostWithHelpFactory">
            <summary>
            Overriden version of the <see cref="T:System.ServiceModel.Activation.WebServiceHostFactory"/> class that enables the WCF Help page.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.WebServiceHostWithHelpFactory.CreateServiceHost(System.String,System.Uri[])">
            <summary>
            Initializes endpoint with WCF help page.
            </summary>
            <param name="constructorString">The initialization data passed to the System.ServiceModel.ServiceHostBase
            instance being constructed by the factory.</param>
            <param name="baseAddresses">The System.Array of type System.Uri that contains the base addresses for the
            service hosted.</param>
            <returns>A System.ServiceModel.ServiceHost with specific base addresses.</returns>
            <exception cref="T:System.ArgumentNullException">baseAddress is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no hosting context provided or constructorString is
            null or empty.</exception>
        </member>
        <member name="M:Terrasoft.WebApp.SvnPageUtilities.ExecuteSvnOperation(System.Action,System.Action{System.Exception,System.String})">
            <summary>
            Executes svn operation, if exception occurred handles errorCallback.
            </summary>
            <param name="operation">Operation.</param>
            <param name="errorCallback">Error callback.</param>
        </member>
        <member name="M:Terrasoft.WebApp.SvnPageUtilities.GetHasSchemaForeignLock(Terrasoft.Core.Schema,System.String@)">
            <summary>
            Indicates if the specified schema locked by another user.
            </summary>
            <param name="schema">Schema.</param>
            <param name="confirmMessage">Message if schema is locked.</param>
            <returns></returns>
        </member>
    </members>
</doc>
