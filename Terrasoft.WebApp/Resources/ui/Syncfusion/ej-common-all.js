/*!
*  filename: ej.common.all.js
*  version : 12.4.0.24
*  Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

window.ej = window.Syncfusion = window.Syncfusion || {};

(function ($, ej, undefined) {
    'use strict';

    ej.consts = {
        NamespaceJoin: '-'
    };
    ej.TextAlign = {
        Center: 'center',
        Justify: 'justify',
        Left: 'left',
        Right: 'right'
    };
    ej.Orientation = { Horizontal: "horizontal", Vertical: "vertical" };

    if (!Object.prototype.hasOwnProperty) {
        Object.prototype.hasOwnProperty = function (obj, prop) {
            return obj[prop] !== undefined;
        };
    }

    String.format = function () {
        var source = arguments[0];
        for (var i = 0; i < arguments.length - 1; i++)
            source = source.replace(new RegExp("\\{" + i + "\\}", "gm"), arguments[i + 1]);

        source = source.replace(/\{[0-9]\}/g, "");
        return source;
    };

    // Function to create new class
    ej.defineClass = function (className, constructor, proto, replace) {
        /// <summary>Creates the javascript class with given namespace & class name & constructor etc</summary>
        /// <param name="className" type="String">class name prefixed with namespace</param>
        /// <param name="constructor" type="Function">constructor function</param>
        /// <param name="proto" type="Object">prototype for the class</param>
        /// <param name="replace" type="Boolean">[Optional]Replace existing class if exists</param>
        /// <returns type="Function">returns the class function</returns>
        if (!className || !proto) return undefined;

        var parts = className.split(".");

        // Object creation
        var obj = window, i = 0;
        for (; i < parts.length - 1; i++) {

            if (ej.isNullOrUndefined(obj[parts[i]]))
                obj[parts[i]] = {};

            obj = obj[parts[i]];
        }

        if (replace || ej.isNullOrUndefined(obj[parts[i]])) {

            //constructor
            constructor = typeof constructor === "function" ? constructor : function () {
            };

            obj[parts[i]] = constructor;

            // prototype
            obj[parts[i]].prototype = proto;
        }

        return obj[parts[i]];
    };

    ej.util = {
        getNameSpace: function (className) {
            /// <summary>Internal function, this will create namespace for plugins using class name</summary>
            /// <param name="className" type="String"></param>
            /// <returns type="String"></returns>
            var splits = className.toLowerCase().split(".");
            splits[0] === "ej" && (splits[0] = "e");

            return splits.join(ej.consts.NamespaceJoin);
        },

        getObject: function (nameSpace, from) {
            if (!from) return undefined;

            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (ej.util.isNullOrUndefined(value)) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i, t, length = splits.length;

            for (i = 0; i < length; i++) {
                t = splits[i];
                if (i + 1 == length)
                    from[t] = ej.isNullOrUndefined(value) ? {} : value;
                else if (ej.isNullOrUndefined(from[t]))
                    from[t] = {};

                from = from[t];
            }

            return start;
        },

        isNullOrUndefined: function (value) {
            /// <summary>Util to check null or undefined</summary>
            /// <param name="value" type="Object"></param>
            /// <returns type="Boolean"></returns>
            return value === undefined || value === null;
        },
        print:function(element){
            var $div=ej.buildTag('div')
            var elementClone=element.clone();
            $div.append(elementClone);
            var printWin = window.open('','pint',"'height=452,width=1024,tabbar=no");
            printWin.document.write('<!DOCTYPE html>');
            var links = $('head').find('link');
            if (ej.browserInfo().name === "msie") {
                var a = ""
                links.each(function (index, obj) {
                    $(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.write('<html><head></head><body>' + a + $div[0].innerHTML + '</body></html>');
            }
            else {
                var a = ""
                printWin.document.write('<html><head>')
                links.each(function (index, obj) {
                    $(obj).attr('href', obj.href);
                    a += obj.outerHTML;
                });
                printWin.document.writeln(a + '</head><body>')
                printWin.document.writeln($div[0].innerHTML + '</body></html>')
            }
            printWin.focus();
            setTimeout(function () {
                if (!ej.isNullOrUndefined(printWin.window)) {
                    printWin.print();
                    printWin.location.reload();
                   setTimeout(function(){printWin.close()},1000);
                }
            }, 1000);
        },
        buildTag: function (tag, innerHtml, styles, attrs) {
            /// <summary>Helper to build jQuery element</summary>
            /// <param name="tag" type="String">tagName#id.cssClass</param>
            /// <param name="innerHtml" type="String"></param>
            /// <param name="styles" type="Object">A set of key/value pairs that configure styles</param>
            /// <param name="attrs" type="Object">A set of key/value pairs that configure attributes</param>
            /// <returns type="jQuery"></returns>
            var tagName = /^[a-z]*[0-9a-z]+/ig.exec(tag)[0];

            var id = /#([a-z]+[-_0-9a-z]+)/ig.exec(tag);
            id = id ? id[id.length - 1] : undefined;

            var className = /\.([a-z]+[-_0-9a-z ]+)/ig.exec(tag);
            className = className ? className[className.length - 1] : undefined;

            return $(document.createElement(tagName))
                .attr(id ? { "id": id } : {})
                .addClass(className || "")
                .css(styles || {})
                .attr(attrs || {})
                .html(innerHtml || "");
        },
        _preventDefaultException: function (el, exceptions) {
        if (el) {
            for (var i in exceptions) {
                if (exceptions[i].test(el[i])) {
                    return true;
                }
            }
        }

        return false;
        },

        //Gets the maximum z-index in the document
        getMaxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
                if ($(e).css('position') == 'absolute' || $(e).css('position') == 'fixed')
                    return parseInt($(e).css('z-index')) || 1;
            })
            );
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },

        //To prevent default actions for the element
        blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },

        //To get dimensions of the element when its hidden
        getDimension: function (element, method) {
            var value;
            var $hidden = $(element).parents().andSelf().filter(':hidden');
            if ($hidden) {
                var prop = { visibility: 'hidden', display: 'block' };
                var tmp = [];
                $hidden.each(function () {
                    var temp = {}, name;
                    for (name in prop) {
                        temp[name] = this.style[name];
                        this.style[name] = prop[name];
                    }
                    tmp.push(temp);
                });
                value = /(outer)/g.test(method) ?
                $(element)[method](true) :
               $(element)[method]();

                $hidden.each(function (i) {
                    var temp = tmp[i], name;
                    for (name in prop) {
                        this.style[name] = temp[name];
                    }
                });
            }
            return value;
        },
        //Get triggers when transition End
        transitionEndEvent: function () {
            var transitionEnd = {
                '': 'transitionend',
                'webkit': 'webkitTransitionEnd',
                'Moz': 'transitionend',
                'O': 'otransitionend',
                'ms': 'MSTransitionEnd'
            };

            return transitionEnd[ej.userAgent()];
        },
        //To return the start event to bind for element
        startEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchstart" : "mousedown";
        },
        //To return end event to bind for element
        endEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchend" : "mouseup"
        },
        //To return move event to bind for element
        moveEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? ($.support.hasPointer && !ej.isMobile()) ? "ejtouchmove" : "touchmove" : "mousemove";
        },
        //To return cancel event to bind for element
        cancelEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "touchcancel" : "mousecancel";
        },
        //To return tap event to bind for element
        tapEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "tap" : "click";
        },
        //To return tap hold event to bind for element
        tapHoldEvent: function () {
            return (ej.isTouchDevice() || $.support.hasPointer) ? "taphold" : "click";
        },
        //To check whether its Device
        isDevice: function () {
            if (ej.getBooleanVal($('head'), 'data-ej-forceset', false))
                return ej.getBooleanVal($('head'), 'data-ej-device', this._device());
            else
                return this._device();
        },
        //To check whether its windows web view
        isWindowsWebView: function () {
            return location.href.indexOf("x-wmapp") != -1;
        },
        _device: function () {
            return (/mobile|tablet|android|kindle/i.test(navigator.userAgent.toLowerCase()));
        },
         //To check whether its Mobile
        isMobile: function () {
            return ((/iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(navigator.userAgent.toLowerCase()) && /mobile/i.test(navigator.userAgent.toLowerCase()))) || (ej.getBooleanVal($('head'), 'data-ej-mobile', false) === true);
        },
        //To check whether its Tablet
        isTablet: function () {
            return (/ipad|xoom|sch-i800|playbook|tablet|kindle/i.test(navigator.userAgent.toLowerCase())) || (ej.getBooleanVal($('head'), 'data-ej-tablet', false) === true);
        },
        //To check whether its Touch Device
        isTouchDevice: function () {
            return (('ontouchstart' in window || (window.navigator.msPointerEnabled && ej.isMobile())) && this.isDevice());
        },
        //To get the outerHTML string for object
        getClearString: function(string){
            return $.trim(string.replace(/\s+/g," ").replace(/(\r\n|\n|\r)/gm,"").replace(new RegExp( "\>[\n\t ]+\<" , "g" ) , "><" ));
        },
        //Get the attribute value with boolean type of element
        getBooleanVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = $(ele).attr(val);
            if (value != null)
                return value.toLowerCase() == "true";
            else
                return option;
        },
        //Gets the Skew class based on the element current position
        _getSkewClass: function (item, pageX, pageY) {
            var itemwidth = item.width();
            var itemheight = item.height();
            var leftOffset = item.offset().left;
            var rightOffset = item.offset().left + itemwidth;
            var topOffset = item.offset().top;
            var bottomOffset = item.offset().top + itemheight;
            var widthoffset = itemwidth * 0.3;
            var heightoffset = itemheight * 0.3;
            if (pageX < leftOffset + widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topleft";
            if (pageX > rightOffset - widthoffset && pageY < topOffset + heightoffset)
                return "e-m-skew-topright";
            if (pageX > rightOffset - widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomright";
            if (pageX < leftOffset + widthoffset && pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottomleft";
            if (pageX > leftOffset + widthoffset && pageY < topOffset + heightoffset && pageX < rightOffset - widthoffset)
                return "e-m-skew-top";
            if (pageX < leftOffset + widthoffset)
                return "e-m-skew-left";
            if (pageX > rightOffset - widthoffset)
                return "e-m-skew-right";
            if (pageY > bottomOffset - heightoffset)
                return "e-m-skew-bottom";
            return "e-m-skew-center";
        },
        //Removes the added Skew class on the element
        _removeSkewClass: function (element) {
            $(element).removeClass("e-m-skew-top e-m-skew-bottom e-m-skew-left e-m-skew-right e-m-skew-topleft e-m-skew-topright e-m-skew-bottomleft e-m-skew-bottomright e-m-skew-center e-skew-top e-skew-bottom e-skew-left e-skew-right e-skew-topleft e-skew-topright e-skew-bottomleft e-skew-bottomright e-skew-center");
        },
        _touchStartPoints: function (evt, object) {
            var point = evt.touches ? evt.touches[0] : evt; 
            object._distX = 0;
            object._distY = 0;
            object._moved = false;
            object._pointX = point.pageX;
            object._pointY = point.pageY;
        },
        _isTouchMoved: function (evt, object) {
            var point = evt.touches ? evt.touches[0] : evt,
              deltaX = point.pageX - object._pointX,
              deltaY = point.pageY - object._pointY,
              timestamp = Date.now(),
              newX, newY,
              absDistX, absDistY;
            object._pointX = point.pageX;
            object._pointY = point.pageY;
            object._distX += deltaX;
            object._distY += deltaY;
            absDistX = Math.abs(object._distX);
            absDistY = Math.abs(object._distY); 
            return !(absDistX < 5 && absDistY < 5);
        },
        //To bind events for element
        listenEvents: function (selectors, eventTypes, handlers, remove, pluginObj, disableMouse) {
            for (var i = 0; i < selectors.length; i++) {
                ej.listenTouchEvent(selectors[i], eventTypes[i], handlers[i], remove, pluginObj, disableMouse);
            }
        },
        //To bind touch events for element
        listenTouchEvent: function (selector, eventType, handler, remove, pluginObj, disableMouse) {
            var event = remove ? "removeEventListener" : "addEventListener";
            var jqueryEvent = remove ? "off" : "on";
            var elements = $(selector);
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                switch (eventType) {
                    case "touchstart":
                        ej._bindEvent(element, event, eventType, handler, "mousedown", "MSPointerDown", "pointerdown", disableMouse);
                        break;
                    case "touchmove":
                        ej._bindEvent(element, event, eventType, handler, "mousemove", "MSPointerMove", "pointermove", disableMouse);
                        break;
                    case "touchend":
                        ej._bindEvent(element, event, eventType, handler, "mouseup", "MSPointerUp", "pointerup", disableMouse);
                        break;
                    case "touchcancel":
                        ej._bindEvent(element, event, eventType, handler, "mousecancel", "MSPointerCancel", "pointercancel", disableMouse);
                        break;
                    case "tap": case "taphold": case "ejtouchmove":
                        $(element)[jqueryEvent](eventType, handler);
                        break;
                    default:
                        if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
                            pluginObj["_on"]($(element),eventType,handler);
                        else
                            element[event](eventType, handler, true);
                        break;
                }
            }
        },
        //To bind events for element
        _bindEvent: function (element, event, eventType, handler, mouseEvent, pointerEvent, ie11pointerEvent, disableMouse) {
            if ($.support.hasPointer)
                element[event](window.navigator.pointerEnabled ? ie11pointerEvent : pointerEvent, handler, true);
            else
                element[event](eventType, handler, true);
        },
        _browser: function () {
            return (/webkit/i).test(navigator.appVersion) ? 'webkit' : (/firefox/i).test(navigator.userAgent) ? 'Moz' : (/trident/i).test(navigator.userAgent) ? 'ms' : 'opera' in window ? 'O' : '';
        },
        styles: document.createElement('div').style,
         /**
        * To get the userAgent Name     
        * @example             
        * &lt;script&gt;
        *       ej.userAgent();//return user agent name
        * &lt;/script&gt         
        * @memberof AppView
        * @instance
        */
        userAgent: function () {
            var agents = 't,webkitT,MozT,msT,OT'.split(','),
            t,
            i = 0,
            l = agents.length;

            for (; i < l; i++) {
                t = agents[i] + 'ransform';
                if (t in ej.styles) {
                    return agents[i].substr(0, agents[i].length - 1);
                }
            }

            return false;
        },
        addPrefix: function (style) {
            if (ej.userAgent() === '') return style;

            style = style.charAt(0).toUpperCase() + style.substr(1);
            return ej.userAgent() + style;
        },
        //To Prevent Default Exception

        //To destroy the mobile widgets
        destroyWidgets: function (element) {
            var dataEl = $(element).find("[data-role *= ejm]");
            dataEl.each(function (index, element) {
                var $element = $(element);
                var plugin = $element.data("ejWidgets");
                if (plugin)
                    $element[plugin]("destroy");
            });
        },
        //Get the attribute value of element
        getAttrVal: function (ele, val, option) {
            /// <summary>Util to get the property from data attributes</summary>
            /// <param name="ele" type="Object"></param>
            /// <param name="val" type="String"></param>
            /// <param name="option" type="GenericType"></param>
            /// <returns type="GenericType"></returns>
            var value = $(ele).attr(val);
            if (value != null)
                return value;
            else
                return option;
        },
    };

    $.extend(ej, ej.util);

    // base class for all ej widgets. It will automatically inhertied
    ej.widgetBase = {
        droppables: { 'default': [] },
        resizables: { 'default': [] },

        _renderEjTemplate: function (selector, data, index) {
            var type = null;
            if (typeof selector === "object" || selector.startsWith("#") || selector.startsWith("."))
                type = $(selector).attr("type");
            if (type) {
                type = type.toLowerCase();
                if (ej.template[type])
                    return ej.template[type](this, selector, data, index);
            }
            return ej.template.render(this, selector, data, index);
        },

        destroy: function () {

            if (this._trigger("destroy"))
                return;

            if (this.model.enablePersistence)
                this.persistState();

            try {
                this._destroy();
            } catch (e) { }

            var arr = this.element.data("ejWidgets") || [];
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == this.pluginName) {
                    arr.splice(i, 1);
                }
            }
            if (!arr.length)
                this.element.removeData("ejWidgets");

            while (this._events) {
                var item = this._events.pop(), args = [];

                if (!item)
                    break;

                for (var i = 0; i < item[1].length; i++)
                    if (!$.isPlainObject(item[1][i]))
                        args.push(item[1][i]);

                $.fn.off.apply(item[0], args);
            }

            this._events = null;

            this.element
                .removeClass(ej.util.getNameSpace(this.sfType))
                .removeClass("e-js")
                .removeData(this.pluginName);

            this.element = null;
            this.model = null;
        },

        _on: function (element) {
            if (!this._events)
                this._events = [];
            var args = [].splice.call(arguments, 1, arguments.length - 1);

            var handler = {}, i = args.length;
            while (handler && typeof handler !== "function") {
                handler = args[--i];
            }

            args[i] = ej.proxy(args[i], this);

            this._events.push([element, args, handler, args[i]]);

            $.fn.on.apply(element, args);

            return this;
        },

        _off: function (element, eventName, selector, handlerObject) {
            var e = this._events, temp;
            if (!e || !e.length)
                return this;
            if (typeof selector == "function") {
                temp = handlerObject;
                handlerObject = selector;
                selector = temp;
            }
            for (var i = 0; i < e.length; i++) {
                var arg = e[i],
                r = arg[0].length && (!handlerObject || arg[2] === handlerObject) && arg[1][0] === eventName && (!selector || arg[1][1] === selector) && $.inArray(element[0], arg[0]) > -1;
                if (r) {
                    $.fn.off.apply(element, handlerObject ? [eventName, selector, arg[3]] : [eventName, selector]);
                    e.splice(i, 1);
                    break;
                }
            }

            return this;
        },

        // Client side events wire-up / trigger helper.
        _trigger: function (eventName, eventProp) {
            var fn = this.model[eventName], returnValue, args, clientProp = {};
            $.extend(clientProp, eventProp)

            if (fn) {
                if (typeof fn === "string") {
                    fn = ej.util.getObject(fn, window);
                }

                if ($.isFunction(fn)) {

                    args = ej.event(eventName, this.model, eventProp);

                    returnValue = fn.call(this, args);

                    // sending changes back - deep copy option should not be enabled for this $.extend 
                    if (eventProp) $.extend(eventProp, args);

                    if (args.cancel || !ej.isNullOrUndefined(returnValue))
                        return returnValue === false || args.cancel;
                }
            }

            var isPropDefined = Boolean(eventProp);
            eventProp = eventProp || {};
            eventProp.originalEventType = eventName;
            eventProp.type = this.pluginName + eventName;

            args = $.Event(eventProp.type, ej.event(eventProp.type, this.model, eventProp));

            this.element.trigger(args);

            // sending changes back - deep copy option should not be enabled for this $.extend 
            if (isPropDefined) $.extend(eventProp, args);

            if (ej.isOnWebForms && args.cancel == false && this.model.serverEvents && this.model.serverEvents.length)
                ej.raiseWebFormsServerEvents(eventName, eventProp, clientProp);

            return args.cancel;
        },

        setModel: function (options, forceSet) {
            // check for whether to apply values are not. if _setModel function is defined in child,
            //  this will call that function and validate it using return value

            if (this._trigger("modelChange", { "changes": options }))
                return;


            for (var prop in options) {
                if (!forceSet) {
                    if (this.model[prop] === options[prop]) {
                        delete options[prop];
                        continue;
                    }
                    if ($.isPlainObject(options[prop])) {
                        iterateAndRemoveProps(this.model[prop], options[prop]);
                        if ($.isEmptyObject(options[prop]))
                            continue;
                    }
                }

                if (this.dataTypes) {
                    var returnValue = this._isValidModelValue(prop, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + prop + " - " + returnValue;
                }
                if (this.model.notifyOnEachPropertyChanges && this.model[prop] !== options[prop]) {
                    var arg = {
                        oldValue: this.model[prop],
                        newValue: options[prop]
                    };

                    options[prop] = this._trigger(prop + "Change", arg) ? this.model[prop] : arg.newValue;
                }
            }
            if ($.isEmptyObject(options))
                return;

            if (this._setFirst) {
                var ds = options.dataSource;
                if (ds) delete options.dataSource

                $.extend(true, this.model, options);
                if (ds) {
                    this.model.dataSource = (ds instanceof Array) ? ds.slice() : ds;
                    options["dataSource"] = this.model.dataSource;
                }
                !this._setModel || this._setModel(options);

            } else if (!this._setModel || this._setModel(options) !== false) {
                $.extend(true, this.model, options);
            }
            if ("enablePersistence" in options) {
                if (options.enablePersistence === true) {
                    this._persistHandler = ej.proxy(this.persistState, this);
                    $(window).on("unload", this._persistHandler);
                } else {
                    $(window).off("unload", this._persistHandler);
                }
            }
        },

        option: function (prop, value, forceSet) {
            if (!prop)
                return this.model;

            if ($.isPlainObject(prop))
                return this.setModel(prop);

            if (typeof prop === "string") {
                prop = prop.replace(/^model\./, "");
                var oldValue = ej.getObject(prop, this.model);

                if (value === undefined)
                    return oldValue;

                if (forceSet && value === ej.extensions.modelGUID) {
                    return this._setModel(ej.createObject(prop, ej.getObject(prop, this.model), {}));
                }

                if (forceSet || ej.getObject(prop, this.model) !== value)
                    return this.setModel(ej.createObject(prop, value, {}), forceSet);
            }
            return undefined;
        },

        _isValidModelValue: function (prop, types, options) {
            var value = types[prop], option = options[prop], returnValue;

            if (!value)
                return true;

            if (typeof value === "string") {
                if (value == "enum") {
                    options[prop] = option ? option.toString().toLowerCase() : option;
                    value = "string";
                }

                if (value === "array") {
                    if (option instanceof Array)
                        return true;
                }
                else if (value === "data") {
                    return true;
                }
                else if (typeof option === value)
                    return true;

                return "Expected type - " + value;
            }

            if (option instanceof Array) {
                for (var i = 0; i < option.length; i++) {
                    returnValue = this._isValidModelValue(prop, types, option[i]);
                    if (returnValue !== true) {
                        return " [" + i + "] - " + returnValue;
                    }
                }
                return true;
            }

            for (var innerProp in option) {
                returnValue = this._isValidModelValue(innerProp, value, option);
                if (returnValue !== true)
                    return innerProp + " : " + returnValue;
            }

            return true;
        },

        persistState: function () {
            var model = copyObject({}, this.model);

            if (this._ignoreOnPersist) {
                for (var i = 0; i < this._ignoreOnPersist.length; i++) {
                    delete model[this._ignoreOnPersist[i]];
                }
            }

            if (this._persistState) {
                model.customPersists = {};
                this._persistState(model.customPersists);
            }

            if (window.localStorage)
                window.localStorage.setItem(this.pluginName + this._id, JSON.stringify(model));
            else if (document.cookie)
                ej.cookie.set(this.pluginName + this._id, model);
        },

        restoreState: function (silent) {
            var value = null;
            if (window.localStorage)
                value = window.localStorage.getItem(this.pluginName + this._id);
            else if (document.cookie)
                value = ej.cookie.get(this.pluginName + this._id);

            if (value) {
                var model = JSON.parse(value);

                if (this._restoreState) {
                    this._restoreState(model.customPersists);
                    delete model.customPersists;
                }

                this.model = $.extend(true, this.model, model);
            }

            if (!silent && value && this._setModel)
                this._setModel(this.model);
        }
    };

    var iterateAndRemoveProps = function (source, target) {
        for (var prop in source) {
            if (source[prop] === target[prop])
                delete target[prop];
            if ($.isPlainObject(target[prop]) && $.isPlainObject(source[prop]))
                iterateAndRemoveProps(source[prop], target[prop]);
        }
    }

    ej.widget = function (pluginName, className, proto) {
        /// <summary>Widget helper for developers, this set have predefined function to jQuery plug-ins</summary>
        /// <param name="pluginName" type="String">the plugin name that will be added in jquery.fn</param>
        /// <param name="className" type="String">the class name for your plugin, this will help create default cssClas</param>
        /// <param name="proto" type="Object">prototype for of the plug-in</param>

        if (typeof pluginName === "object") {
            proto = className;
            for (var prop in pluginName) {
                var name = pluginName[prop];

                if (name instanceof Array) {
                    proto._rootCSS = name[1];
                    name = name[0];
                }

                ej.widget(prop, name, proto);

                if (pluginName[prop] instanceof Array)
                    proto._rootCSS = "";
            }

            return;
        }

        var nameSpace = proto._rootCSS || ej.getNameSpace(className);

        proto = ej.defineClass(className, function (element, options) {

            this.sfType = className;
            this.pluginName = pluginName;
            this.instance = pInstance;

            if (ej.isNullOrUndefined(this._setFirst))
                this._setFirst = true;

            this["ob.values"] = {};

            $.extend(this, ej.widgetBase);

            if (this.dataTypes) {
                for (var property in options) {
                    var returnValue = this._isValidModelValue(property, this.dataTypes, options);
                    if (returnValue !== true)
                        throw "setModel - Invalid input for property :" + property + " - " + returnValue;
                }
            }

            var arr = (element.data("ejWidgets") || []);
            arr.push(pluginName);
            element.data("ejWidgets", arr);

            for (var i = 0; ej.widget.observables && this.observables && i < this.observables.length; i++) {
                var t = ej.getObject(this.observables[i], options);
                if (t) ej.createObject(this.observables[i], ej.widget.observables.register(t, this.observables[i], this, element), options);
            }

            this.element = element.jquery ? element : $(element);
            this.model = copyObject(true, {}, proto.prototype.defaults, options);
            this.model.keyConfigs = copyObject(this.keyConfigs);

            this.element.addClass(nameSpace + " e-js").data(pluginName, this);

            this._id = element[0].id;

            if (!this.element.attr("tabIndex"))
                this.element.attr("tabIndex", "");

            if (this.model.enablePersistence) {
                this._persistHandler = ej.proxy(this.persistState, this);
                $(window).on("unload", this._persistHandler);
                this.restoreState(true);
            }

            this._init();

            if (typeof this.model.keyConfigs === "object" && !(this.model.keyConfigs instanceof Array)) {
                var requiresEvt = false;
                if (this.model.keyConfigs.focus)
                    this.element.attr("accesskey", this.model.keyConfigs.focus);

                for (var keyProps in this.model.keyConfigs) {
                    if (keyProps !== "focus") {
                        requiresEvt = true;
                        break;
                    }
                }

                if (requiresEvt && this._keyPressed) {
                    var el = element, evt = "keydown";

                    if (this.keySettings) {
                        el = this.keySettings.getElement ? this.keySettings.getElement() || el : el;
                        evt = this.keySettings.event || evt;
                    }

                    this._on(el, evt, function (e) {
                        if (!this.model.keyConfigs) return;

                        var action = keyFn.getActionFromCode(this.model.keyConfigs, e.which, e.ctrlKey, e.shiftKey, e.altKey);
                        var arg = {
                            code: e.which,
                            ctrl: e.ctrlKey,
                            alt: e.altKey,
                            shift: e.shiftKey
                        };
                        if (!action) return;

                        if (this._keyPressed(action, e.target, arg, e) === false)
                            e.preventDefault();
                    });
                }
            }

            this._trigger("create");
        }, proto);

        $.fn[pluginName] = function (options) {
            var opt = options, args;
            for (var i = 0; i < this.length; i++) {

                var $this = $(this[i]),
                    pluginObj = $this.data(pluginName),
                    isAlreadyExists = pluginObj && $this.hasClass(nameSpace),
                    obj = null;

                if(this.length > 0 && $.isPlainObject(opt))
                    options = ej.copyObject({}, opt);

                // ----- plug-in creation/init
                if (!isAlreadyExists) {
                    if (!options || typeof options === "object") {
                        new proto($this, options);
                    }
                    else {
                        throwError(pluginName + ": methods/properties can be accessed only after plugin creation");
                    }
                    continue;
                }

                if (!options) continue;

                args = [].slice.call(arguments, 1);

                if(this.length > 0 && args[0] && opt === "option" && $.isPlainObject(args[0])){
                    args[0] = ej.copyObject({}, args[0]);
                }

                // --- Function/property set/access
                if ($.isPlainObject(options)) {
                    // setModel using JSON object
                    pluginObj.setModel(options);
                }

                    // function/property name starts with "_" is private so ignore it.
                else if (options.indexOf('_') !== 0
                    && !ej.isNullOrUndefined(obj = ej.getObject(options, pluginObj))
                    || options.indexOf("model.") === 0) {

                    if (!obj || !$.isFunction(obj)) {

                        // if property is accessed, then break the jquery chain
                        if (arguments.length == 1)
                            return obj;

                        //setModel using string input
                        pluginObj.option(options, arguments[1]);

                        continue;
                    }

                    var value = obj.apply(pluginObj, args);

                    // If function call returns any value, then break the jquery chain
                    if (value !== undefined)
                        return value;

                } else {
                    throwError(className + ": function/property - " + options + " does not exist");
                }
            }

            // maintaining jquery chain
            return this;
        };

        ej.widget.register(pluginName, className, proto.prototype);
    };

    $.extend(ej.widget, (function () {
        var _widgets = {},

        register = function (pluginName, className, prototype) {
            if (!ej.isNullOrUndefined(_widgets[pluginName]))
                throwError("ej.widget : The widget named " + pluginName + " is trying to register twice.");

            _widgets[pluginName] = { name: pluginName, className: className, proto: prototype };
        }

        return {
            register: register,
            registeredWidgets: _widgets
        };

    })());

    ej.widget.destroyAll = function (elements) {
        if (!elements || !elements.length) return;

        for (var i = 0; i < elements.length; i++) {
            var data = elements.eq(i).data(), wds = data["ejWidgets"];
            if (wds && wds.length) {
                for (var j = 0; j < wds.length; j++) {
                    if (data[wds[j]] && data[wds[j]].destroy)
                        data[wds[j]].destroy();
                }
            }
        }
    };

    ej.cookie = {
        get: function (name) {
            var value = RegExp(name + "=([^;]+)").exec(document.cookie);

            if (value && value.length > 1)
                return value[1];

            return undefined;
        },
        set: function (name, value, expiryDate) {
            if (typeof value === "object")
                value = JSON.stringify(value);

            value = escape(value) + ((expiryDate == null) ? "" : "; expires=" + expiryDate.toUTCString());
            document.cookie = name + "=" + value;
        }
    };

    var keyFn = {
        getActionFromCode: function (keyConfigs, keyCode, isCtrl, isShift, isAlt) {
            isCtrl = isCtrl || false;
            isShift = isShift || false;
            isAlt = isAlt || false;

            for (var keys in keyConfigs) {
                if (keys === "focus") continue;

                var key = keyFn.getKeyObject(keyConfigs[keys]);
                if (keyCode === key.code && isCtrl == key.isCtrl && isShift == key.isShift && isAlt == key.isAlt)
                    return keys;
            }
            return null;
        },
        getKeyObject: function (key) {
            var res = {
                isCtrl: false,
                isShift: false,
                isAlt: false
            };
            key = key.split("+");
            for (var i = 0; i < key.length; i++) {
                if (key[i] === "ctrl")
                    res.isCtrl = true;
                else if (key[i] === "shift")
                    res.isShift = true;
                else if (key[i] === "alt")
                    res.isAlt = true;
                else res.code = parseInt(key[i], 10);
            }
            return res;
        }
    };

    ej.browserInfo = function () {
        var browser = {}, clientInfo = [],
        browserClients = {
            webkit: /(chrome)[ \/]([\w.]+)/i, safari: /(webkit)[ \/]([\w.]+)/i, msie: /(msie) ([\w.]+)/i,
            opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i, mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };
        for (var client in browserClients) {
            if (browserClients.hasOwnProperty(client)) {
                clientInfo = navigator.userAgent.match(browserClients[client]);
                if (clientInfo) {
                    browser.name = clientInfo[1].toLowerCase();
                    browser.version = clientInfo[2];
					browser.culture={};
					browser.culture.name=browser.culture.language=navigator.language||navigator.userLanguage;
					if(typeof(Globalize)!='undefined') {
						var culture=(navigator.language||navigator.userLanguage)?Globalize.culture(navigator.language||navigator.userLanguage):Globalize.culture("en-US");
						for(var i=0;(navigator.languages)&& i<navigator.languages.length;i++) {
							culture=Globalize.culture(navigator.languages[i]);
							if(culture.language==navigator.languages[i])
						break;	
					}
						$.extend(true,browser.culture,culture );
					}
                    if (!!navigator.userAgent.match(/Trident\/7\./)) {
                        browser.name = "msie";
                    }
                    break;
                }
            }
        }
        browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
        return browser;
    };
    ej.eventType = {
        mouseDown: "mousedown touchstart",
        mouseMove: "mousemove touchmove",
        mouseUp: "mouseup touchend",
        mouseLeave: "mouseleave touchcancel",
        click: "click touchend"
    };

    ej.event = function (type, data, eventProp) {

        var e = $.extend(eventProp || {},
            {
                "type": type,
                "model": data,
                "cancel": false
            });

        return e;
    };

    ej.proxy = function (fn, context, arg) {
        if (!fn || typeof fn !== "function")
            return null;

        if ('bind' in fn && context)
            return arg ? fn.bind(context, arg) : fn.bind(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    ej.hasStyle = function (prop) {
        var style = document.documentElement.style;

        if (prop in style) return true;

        var prefixs = ['ms', 'Moz', 'Webkit', 'O', 'Khtml'];

        prop = prop[0].toUpperCase() + prop.slice(1);

        for (var i = 0; i < prefixs.length; i++) {
            if (prefixs[i] + prop in style)
                return true;
        }

        return false;
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };
    var copyObject = ej.copyObject = function (isFirstDefault, target) {
        var start = 2, current, source;
        if (typeof isFirstDefault !== "boolean") {
            start = 1;
        }
        var objects = [].slice.call(arguments, start);
        if (start === 1) {
            target = isFirstDefault;
            isFirstDefault = undefined;
        }

        for (var i = 0; i < objects.length; i++) {
            for (var prop in objects[i]) {
                current = target[prop], source = objects[i][prop];

                if (source === undefined || current === source || objects[i] === source || target === source)
                    continue;
                if (source instanceof Array) {
                    if (i === 0 && isFirstDefault)
                        target[prop] = source.slice();
                    else
                        target[prop] = source.slice();
                } else if (ej.isPlainObject(source)) {
                    target[prop] = current || {};
                    if (isFirstDefault)
                        copyObject(isFirstDefault, target[prop], source);
                    else
                        copyObject(target[prop], source);
                } else
                    target[prop] = source;
            }
        }
        return target;
    };
    var pInstance = function () {
        return this;
    }

    ej.template = {};

    ej.template.render = ej.template["text/x-jsrender"] = function (self, selector, data) {
        if (selector.slice(0, 1) !== "#")
            selector = ["<div>", selector, "</div>"].join("");
        return $(selector).render(data);
    }

    ej.isPlainObject = function (obj) {
        if (!obj) return false;

        if (typeof obj !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
            return false;
        }

        try {
            if (obj.constructor &&
                !obj.constructor.prototype.hasOwnProperty("isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            return false;
        }

        var key, ownLast = ej.support.isOwnLast;
        for (key in obj) {
            if (ownLast) break;
        }

        return key === undefined || obj.hasOwnProperty(key);
    };
    ej.util.valueFunction = function (prop) {
        return function (value) {
            var val = ej.getObject(prop, this.model);

            if (value === undefined)
                return typeof val === "function" ? val() : val;

            if (typeof val === "function") {
                this["ob.values"][prop] = value;
                val.call(this, value);
            }
            else
                ej.createObject(prop, value, this.model);
        }
    };
    ej.util.getVal = function (val) {
        if (typeof val === "function")
            return val();
        return val;
    };
    ej.support = {
        isOwnLast: function () {
            var fn = function () { this.a = 1; };
            fn.prototype.b = 1;

            for (var p in new fn()) {
                return p === "b";
            }
        }(),
        outerHTML: function () {
            return document.createElement("div").outerHTML !== undefined;
        }()
    };

    var throwError = ej.throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };
   
    

    ej.extensions = {};
    ej.extensions.modelGUID = "{0B1051BA-1CCB-42C2-A3B5-635389B92A50}";
})(window.jQuery, window.Syncfusion);
$.fn.addEleAttrs = function (json) {
        var $this = $(this);
        $.each(json, function (i, attr) {
            if (attr && attr.specified) {
                $this.attr(attr.name, attr.value);
            }
        });

    };
    $.fn.removeEleAttrs = function (regex) {
        return this.each(function () {
            var $this = $(this),
                names = [],
                attrs = $(this.attributes).clone();
            $.each(attrs, function (i, attr) {
                if (attr && attr.specified && regex.test(attr.name)) {
                    $this.removeAttr(attr.name);
                }
            });
        });
    };
    $.fn.removeEleEmptyAttrs = function () {
        return this.each(function () {
            var $this = $(this),
                names = [],
                attrs = $(this.attributes).clone();
            $.each(attrs, function (i, attr) {
                if (attr && attr.specified && attr.value === "") {
                    $this.removeAttr(attr.name);
                }
            });
        });
    };;
window.ej = window.Syncfusion = window.Syncfusion || {};

(function ($, ej, doc, undefined) {
    'use strict';
	/**
	* @classdesc Communicates with data source and returns the desired result based on the Query provided. 
	* @class ejDataManager
	* @param {Object} datasource Sets the data source to create the Data Manager.
	* @param {ej.Query} query Sets the default query for the data source.
	* @param {Object} adaptor Configures the adaptor based on the data source type of the Data Manager.
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dataManger = ej.DataManager(window.gridData);
	* var tbody = ""; 
	* for(var i=0;i<5;i++){
	*  row=dataManger.dataSource.json[0];;
	*  tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;td&gt;{3}&lt;/td&gt;&lt;td&gt;{4}&lt;/td&gt;&lt;/tr&gt;", row.OrderID, row.CustomerID, row.EmployeeID, row.ShipCity, row.Freight);
	*  $(".table tbody").html(tbody);};	
	* &lt;/script&gt;
	*
	*/
    ej.DataManager = function (dataSource, query, adaptor) {
          if (!(this instanceof ej.DataManager))
            return new ej.DataManager(dataSource, query, adaptor);

        if (!dataSource)
            throwError("DataManger : a dataSource is required to create Manager");
        adaptor = adaptor || dataSource.adaptor;

        if (typeof (adaptor) === "string") 
            adaptor = new ej[adaptor]();
        var data = [], self = this;

        if (dataSource instanceof Array) {
            // JSON array
            data = {
                json: dataSource,
                offline: true
            };

        } else if (typeof dataSource === "object") {
            if ($.isPlainObject(dataSource)) {
                if (dataSource.table)
                    dataSource.json = this._getJsonFromElement(dataSource.table, dataSource.headerOption);
                data = {
                    url: dataSource.url,
                    insertUrl: dataSource.insertUrl,
                    removeUrl: dataSource.removeUrl,
                    updateUrl: dataSource.updateUrl,
                    crudUrl: dataSource.crudUrl,
                    batchUrl: dataSource.batchUrl,
                    json: dataSource.json,
                    headers: dataSource.headers,
                    accept: dataSource.accept,
                    data: dataSource.data,
                    timeTillExpiration: dataSource.timeTillExpiration,
                    cachingPageSize: dataSource.cachingPageSize,
                    enableCaching: dataSource.enableCaching,
                    requestType: dataSource.requestType,
                    key: dataSource.key,
                    crossDomain: dataSource.crossDomain,
                    jsonp: dataSource.jsonp,
                    dataType: dataSource.dataType,
                    offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor == "remoteSaveAdaptor" ? false : dataSource.url ? false : true,
                    requiresFormat: dataSource.requiresFormat
                };
            } else if (dataSource.jquery || isHtmlElement(dataSource)) {
                data = {
                    json: this._getJsonFromElement(dataSource),
                    offline: true,
                    table: dataSource
                };
            }
        } else if (typeof dataSource === "string") {
            data = {
                url: dataSource,
                offline: false,
                dataType: "json"
            };
        }

        if (data.requiresFormat === undefined && !ej.support.cors)
            data.requiresFormat = isNull(data.crossDomain) ? true : data.crossDomain;
        if (data.dataType === undefined)
            data.dataType = "json";

        this.dataSource = data;
        this.defaultQuery = query;

        if (data.url && data.offline && !data.json) {
            this.isDataAvailable = false;
            this.adaptor = adaptor || new ej.ODataAdaptor();
            this.dataSource.offline = false;
            this.ready = this.executeQuery(query || ej.Query()).done(function (e) {
                self.dataSource.offline = true;
                self.isDataAvailable = true;
                data.json = e.result;
                self.adaptor = new ej.JsonAdaptor();
            });
        }
        else
            this.adaptor = data.offline ? new ej.JsonAdaptor() : new ej.ODataAdaptor();
        if (data.enableCaching)
            adaptor = new ej.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
        if (!data.jsonp && this.adaptor instanceof ej.ODataAdaptor)
            data.jsonp = "callback";
        this.adaptor = adaptor || this.adaptor;
        return this;
    };

    ej.DataManager.prototype = {
        setDefaultQuery: function (query) {
            this.defaultQuery = query;
        },
	/**
	* The executeQuery property is used to process the data based on the query on Url Binding.
	* @returns 	The result of each operation will be handled once the result is available.
	* @alias ejDataManager#excuteQuery
	* @param {ej.Query} query Sets the default query for the data source.
	* @example
	* &lt;script&gt;
	* var dataManager = ej.DataManager("http://mvc.syncfusion.com/Services/Northwnd.svc/");
	* var query =  ej.Query().select(["OrderID", "CustomerID", "ShipName"]).from("Orders").take(3);
	* var promise = dataManager.executeQuery(query);
	* promise.done(function(e){}); 
	* &lt;/script&gt;
	*/
        executeQuery: function (query, done, fail, always) {
            if (typeof query === "function") {
                always = fail;
                fail = done;
                done = query;
                query = null;
            }

            if (!query)
                query = this.defaultQuery;

            if (!(query instanceof ej.Query))
                throwError("DataManager - executeQuery() : A query is required to execute");

            var deffered = $.Deferred();

            deffered.then(done, fail, always);
            var args = { query: query };

            if (!this.dataSource.offline && this.dataSource.url != undefined) {
				 var result = this.adaptor.processQuery(this, query);
                if (!ej.isNullOrUndefined(result.url))
                    this._makeRequest(result, deffered, args, query);
                else {
                    nextTick(function () {
                        args = this._getDeferedArgs(query, result, args);
                        deffered.resolveWith(this, [args]);;
                    }, this);
                }
            } else {
                nextTick(function () {
                    var res = this.executeLocal(query);
                    args = this._getDeferedArgs(query, res, args);
                    deffered.resolveWith(this, [args]);
                }, this);
            }

            return deffered.promise();
        },
        _getDeferedArgs: function (query, result, args) {
            if (query._requiresCount) {
                args.result = result.result;
                args.count = result.count;
            } else
                args.result = result;
            args.getTableModel = getTableModel(query._fromTable, args.result, this);
            args.getKnockoutModel = getKnockoutModel(args.result);
            return args;
        },
	/**
	* This method does not execute more than one operation at a time; it waits for one operation to complete, and then executes the next operation.
	* @returns Array 
	* @alias ejDataManager#excuteLocal
	* @param {ej.Query} query Sets the default query for the data source.
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().select(["OrderID", "CustomerID", "Freight"]).take(3));
	* var tbody="";
	* for(var i=0;i<3;i++){
	*  tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].Freight);
	*  $(".table tbody").html(tbody);};	
	* &lt;/script&gt;
	*
	*/
        executeLocal: function (query) {
            if (!this.defaultQuery && !(query instanceof ej.Query))
                throwError("DataManager - executeLocal() : A query is required to execute");

            if (!this.dataSource.json)
                throwError("DataManager - executeLocal() : Json data is required to execute");

            query = query || this.defaultQuery;

            var result = this.adaptor.processQuery(this, query);

            if (query._subQuery) {
                var from = query._subQuery._fromTable, lookup = query._subQuery._lookup,
                    res = query._requiresCount ? result.result : result;

                if (lookup && lookup instanceof Array) {
                    buildHierarchy(query._subQuery._fKey, from, res, lookup);
                }

                for (var j = 0; j < res.length; j++) {
                    if (res[j][from] instanceof Array) {
                        res[j] = $.extend({}, res[j]);
                        res[j][from] = this.adaptor.processResponse(query._subQuery.using(ej.DataManager(res[j][from].slice(0))).executeLocal(), this, query);
                    }
                }
            }

            return this.adaptor.processResponse(result, this, query);
        },

        _makeRequest: function (url, deffered, args, query) {
            var isSelector = !!query._subQuerySelector;

            var fnFail = $proxy(function (e) {
                args.error = e;
                deffered.rejectWith(this, [args]);
            }, this);

            var process = $proxy(function (data, count, xhr, request, actual) {
                if (isSelector) return;

                args.xhr = xhr;
                args.count = parseInt(count, 10);
                args.result = data;
                args.request = request;
                args.getTableModel = getTableModel(query._fromTable, data, this);
                args.getKnockoutModel = getKnockoutModel(data);
                args.actual = actual;
                deffered.resolveWith(this, [args]);

            }, this);

            var fnQueryChild = $proxy(function (data, selector) {
                var subDeffer = $.Deferred(),
                    childArgs = { parent: args };

                query._subQuery._isChild = true;

                var subUrl = this.adaptor.processQuery(this, query._subQuery, data ? this.adaptor.processResponse(data) : selector);

                var childReq = this._makeRequest(subUrl, subDeffer, childArgs, query._subQuery);

                if(!isSelector)
                    subDeffer.then(function (subData) {
                        if (data) {
                            buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, data, subData);
                            process(data);
                        }
                    }, fnFail);

                return childReq;
            }, this);

            var fnSuccess = proxy(function (data, status, xhr, request) {
                if (xhr.getResponseHeader("Content-Type").indexOf("xml") == -1)
                    data = p.parseJson(data);
                var result = this.adaptor.processResponse(data, this, query, xhr, request), count = 0;
                if (query._requiresCount) {
                    count = result.count;
                    result = result.result;
                }

                if (!query._subQuery) {
                    process(result, count, xhr, request, data);
                    return;
                }

                if (!isSelector)
                    fnQueryChild(result);

            }, this);

            var req = $.extend({
                type: "GET",
                dataType: this.dataSource.dataType,
                crossDomain: this.dataSource.crossDomain,
                jsonp: this.dataSource.jsonp,
                cache: true,
                beforeSend: $proxy(this._beforeSend, this),
                processData: false,
                success: fnSuccess,
                error: fnFail
            }, url);

            req = $.ajax(req);

            if (isSelector) {
                var res = query._subQuerySelector.call(this, { query: query._subQuery, parent: query });

                if (res && res.length) {
                    req = $.when(req, fnQueryChild(null, res));

                    req.then(proxy(function (pData, cData, requests) {
                        var pResult = this.adaptor.processResponse(pData[0], this, query, pData[2], requests[0]), count = 0;
                        if (query._requiresCount) {
                            count = pResult.count;
                            pResult = pResult.result;
                        }
                        var cResult = this.adaptor.processResponse(cData[0], this, query._subQuery, cData[2], requests[1]), count = 0;
                        if (query._subQuery._requiresCount) {
                            count = cResult.count;
                            cResult = cResult.result;
                        }

                        buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, pResult, cResult);
                        isSelector = false;
                        process(pResult, count, pData[2]);

                    }, this), fnFail);
                } else {
                    isSelector = false;
                }
            }

            return req;
        },

        _beforeSend: function (request, settings) {
            this.adaptor.beforeSend(this, request, settings);

            var headers = this.dataSource.headers, props;
            for (var i = 0; headers && i < headers.length; i++) {
                props = [];
                for (var prop in headers[i]) {
                    props.push(prop);
                    request.setRequestHeader(prop, headers[i][prop]);
                }
            }
        },
	/**
	* This method is used to save the changes to the corresponding table. You can add a new record, edit an existing record, or delete a record by using this method.
	* @alias ejDataManager#saveChanges
	* @param {String} changes
	* @param {String} key 
	* @param {String} tableName 
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var newData = { "added": [{ OrderID: 10248, CustomerID: "VINET", EmployeeID: 25 }], "deleted": {} , "changed":{} };
	* var data = [{ OrderID: 10249, CustomerID: "AANAR", EmployeeID: 5 },
	* { OrderID: 10250, CustomerID: "VINET", EmployeeID: 5 },
	* { OrderID: 10251, CustomerID: "SDDER", EmployeeID: 1 }];
	* var dm = ej.DataManager(griddata).saveChanges(newData);
	* $(function (){});
	* &lt;/script&gt;
	*/
        saveChanges: function (changes, key, tableName) {
            var args = {
                url: tableName,
                key: key || this.dataSource.key
            };

            var req = this.adaptor.batchRequest(this, changes, args);

            if (this.dataSource.offline) {
                return req;
            }

            var deff = $.Deferred();
            $.ajax($.extend({
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (data, status, xhr, request) {
                    deff.resolveWith(this, this.adaptor.processResponse(data, this, null, xhr, request, changes));
                }, this),
                fail: function (e) {
                    deff.rejectWith(this, e);
                }
            }, req));

            return deff;
        },
	/**
	* It is a method used to inserts a new record in the table..  
	* @alias ejDataManager#insert
	* @param {Object} data json data or json array 
	* @param {string} tableName name of the table
	* @example
	* &lt;div id="before"&gt;&lt;/div&gt;
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;div id="after"&gt;&lt;/div&gt;
	* &lt;table class="table1" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.employeeData);
	* var local = dm.executeLocal(ej.Query().select(["EmployeeID", "LastName", "FirstName", "Country"]).where("EmployeeID","equal","5"));
	* $("#before").text("before insert:");
	* var tbody="";
	* for(var i=0;i<3;i++){
	*   var j = dm.dataSource.json[i];
	*   tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", j.EmployeeID, j.FirstName, j.LastName, j.Country);
	*   $(".table tbody").html(tbody);};
	* dm.insert(local.shift());
	* $("#after").text("after insert:");
	* tbody="";
	* for(var i=0;i<4;i++){
	*  var j = dm.dataSource.json[i];
	*  tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", j.EmployeeID, j.FirstName, j.LastName, j.Country);
	*  $(".table1 tbody").html(tbody);};
	* &lt;/script&gt;	
	*/
        insert: function (data, tableName) {
            var res = this.adaptor.insert(this, data, tableName);
            if (this.dataSource.offline) {
                return res;
            }

            var deffer = $.Deferred();

            $.ajax($.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                processData: false,
                beforeSend: $proxy(this._beforeSend, this),
                success: proxy(function (record, status, xhr, request) {
                    record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
                    deffer.resolveWith(this, [{ record: record, dataManager: this }]);
                }, this),
                error: function (e) {
                    deffer.rejectWith(this, [{ error: e, dataManager: this }]);
                }
            }, res));

            return deffer.promise();
        },
	/**
	* It is used to remove the data from the dataSource
	* @alias ejDataManager#remove
	* @param {string} keyField keyColumn to find the data 
	* @param {string} value specified value for the keyField 
	* @param {string} tableName name of the source table
	* @example
	* &lt;div id="before"&gt;&lt;/div&gt;
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;div id="after"&gt;&lt;/div&gt;
	* &lt;table class="table1" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.employeeData);
	* var local = dm.executeLocal(ej.Query().select(["EmployeeID", "LastName", "FirstName", "Country"]).where("EmployeeID","equal","2"));
	* $("#before").text("before remove:");
	* var tbody="";
	* for(var i=0;i<3;i++){
	*   var j = dm.dataSource.json[i];
	*   tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", j.EmployeeID, j.FirstName, j.LastName, j.Country);
	*   $(".table tbody").html(tbody);};
	* dm.remove("EmployeeID",local.shift().EmployeeID);
	* $("#after").text("after insert:");
	* tbody="";
	* for(var i=0;i<2;i++){
	*  var j = dm.dataSource.json[i];
	*  tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", j.EmployeeID, j.FirstName, j.LastName, j.Country);
	*  $(".table1 tbody").html(tbody);};
	* &lt;/script&gt;	
	*/
        remove: function (keyField, value, tableName) {
            if (typeof value === "object")
                value = value[keyField];

            var res = this.adaptor.remove(this, keyField, value, tableName);

            if (this.dataSource.offline)
                return res;

            return $.ajax($.extend({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                beforeSend: $proxy(this._beforeSend, this),
                dataType: "json"
            }, res));
        },
	/**
	* Updates existing record and saves the changes to the table.
	* @alias ejDataManager#update
	* @param {String} keyField
	* @param {String} value 
	* @param {String} tableName 
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var first = [{ OrderID: 10248, CustomerID: "VINET", EmployeeID: 2 },
	* { OrderID: 10249, CustomerID: "AANAR", EmployeeID: 9 }];
	* var updateData = {OrderID: 10249, CustomerID: "Test", EmployeeID: 0 };
	* ej.DataManager(first).update("OrderID", editedData, first);
	* $(function (){});
	* &lt;/script&gt;
	*/
        update: function (keyField, value, tableName) {
            var res = this.adaptor.update(this, keyField, value, tableName);

            if (this.dataSource.offline) {
                return res;
            }

            return $.ajax($.extend({
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                beforeSend: $proxy(this._beforeSend, this)
            }, res));
        },

        _getJsonFromElement: function (ds) {
            if (typeof (ds) == "string")
                ds = $($(ds).html());

            ds = ds.jquery ? ds[0] : ds;

            var tagName = ds.tagName.toLowerCase();

            if (tagName !== "table")
                throwError("ej.DataManager : Unsupported htmlElement : " + tagName);

            return ej.parseTable(ds);
        }
    };

    var buildHierarchy = function (fKey, from, source, lookup) {
        var i, grp = {}, t;
        if (lookup.result) lookup = lookup.result;

        if (lookup.GROUPGUID)
            throwError("ej.DataManager: Do not have support Grouping in hierarchy");

        for (i = 0; i < lookup.length; i++) {
            t = grp[lookup[i][fKey]] || (grp[lookup[i][fKey]] = []);

            t.push(lookup[i]);
        }

        for (i = 0; i < source.length; i++) {
            source[i][from] = grp[source[i][fKey]];
        }
    };

    var oData = {
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
    };
    var p = {
        parseJson: function (jsonText) {
            var type = typeof jsonText;
            if (type === "string") {
                jsonText = JSON.parse(jsonText, p.jsonReviver);
            } else if (jsonText instanceof Array) {
                p.iterateAndReviveArray(jsonText);
            } else if (type === "object")
                p.iterateAndReviveJson(jsonText);
            return jsonText;
        },
        iterateAndReviveArray: function (array) {
            for (var i = 0; i < array.length; i++) {
                if (typeof array[i] === "object")
                    p.iterateAndReviveJson(array[i]);
                else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{|\"/g.test(array[i]))
                    array[i] = p.jsonReviver("",array[i]);
                else
                    array[i] = p.parseJson(array[i]);
            }
        },
        iterateAndReviveJson: function (json) {
            var value;

            for (var prop in json) {
                if (prop.startsWith("__"))
                    continue;

                value = json[prop];
                if (typeof value === "object") {
                    if (value instanceof Array)
                        p.iterateAndReviveArray(value);
                    else
                        p.iterateAndReviveJson(value);
                } else
                    json[prop] = p.jsonReviver(prop, value);
            }
        },
        jsonReviver: function (field, value) {
            var s = value;
            if (typeof value === "string") {
                var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
                if (ms)
                    return new Date(parseInt(ms[1]));
                else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
                    value = new Date(value);
                    if (isNaN(value)) {
                        var a = s.split(/[^0-9]/);
                        value = new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
                    }
                }
            }

            return value;
        },
        isJson: function (jsonData) {
            if(typeof jsonData[0]== "string")
                return jsonData;
            return ej.parseJSON(jsonData);
        }
    };

    ej.isJSON = p.isJson;
    ej.parseJSON = p.parseJson;
	/**
	* @classdesc Communicates with data source and returns the desired result based on the Query provided. 
	* @class ejQuery
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid; padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().take(5));
	* var tbody = ""; 
	* for(var i=0;i<3;i++){
	*  tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;td&gt;{3}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity, dm[i].Freight);
	*  $(".table tbody").html(tbody);};	
	* &lt;/script&gt;
	*
	*/
    ej.Query = function (from) {
        if (!(this instanceof ej.Query))
            return new ej.Query(from);

        this.queries = [];
        this._key = "";
        this._fKey = "";

        if (typeof from === "string")
            this._fromTable = from || "";
        else if (from && from instanceof Array)
            this._lookup = from;

        this._expands = [];
        this._sortedColumns = [];
        this._groupedColumns = [];
        this._subQuery = null;
        this._isChild = false;
        this._params = [];
        return this;
    };

    ej.Query.prototype = {
        key: function (field) {
            if (typeof field === "string")
                this._key = field;

            return this;
        },
	/**
	* using is a method used to query the data manager.
	* @alias ejQuery#using
	* @return dataSource
	* @param {Object} dataManager Pass new data source
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData);
	* var local = dm.executeLocal(ej.Query().using(dm).take(1));
	* var tbody = ""; 
	*  tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;/tr&gt;", local[0].OrderID, local[0].CustomerID);
	*  $(".table tbody").html(tbody);	
	* &lt;/script&gt;
	*
	*/
        using: function (dataManager) {
            if (dataManager instanceof ej.DataManager) {
                this.dataManagar = dataManager;
                return this;
            }

            return throwError("Query - using() : 'using' function should be called with parameter of instance ej.DataManager");
        },
	/**
	* It is used to excute the query  on URL Binding
	* @alias ejQuery#excute
	* @returns 	This method executes all operations immediately and does not wait for each individual operation to complete. The result of each operation will be handled once the result is available. 
	* @param {object} dataManager json data or OData
	* @example
	* &lt;script&gt;
	* var dataManager = ej.DataManager({url: "http://mvc.syncfusion.com/Services/Northwnd.svc/Orders/"});
	* var promise =  ej.Query().select(["OrderID", "CustomerID", "ShipName", "ShipCity", "Freight"]).execute(dataManager,done).take(3);
	* promise.done(function(e){}) 
	* &lt;/script&gt;
	*/
        execute: function (dataManager, done, fail, always) {
            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof ej.DataManager)
                return dataManager.executeQuery(this, done, fail, always);

            return throwError("Query - execute() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	/**
	* It is used to excute the query  on Local Binding
	* @returns Array 
	* @alias ejQuery#excuteLocal
	* @param {object} dataManager json data 
	* @example
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData);
	* var promise =  ej.Query().select(["OrderID", "CustomerID", "ShipName", "ShipCity", "Freight"]).executeLocal(dm).take(3);
	* &lt;/script&gt;
	*/
        executeLocal: function (dataManager) {
            // this does not support for URL binding

            dataManager = dataManager || this.dataManagar;

            if (dataManager && dataManager instanceof ej.DataManager)
                return dataManager.executeLocal(this);

            return throwError("Query - executeLocal() : dataManager needs to be is set using 'using' function or should be passed as argument");
        },
	/**
	* clone is used to dublicate the data.
	* @alias ejQuery#clone
	* @return ej.Query
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().where("OrderID","equal","10250").clone());
	* var tbody="";
 	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[0].OrderID, dm[0].CustomerID, dm[0].ShipCity);
	* $(".table tbody").html(tbody);
	* &lt;/script&gt;
	*/
        clone: function () {
            var cl = new ej.Query();
            cl.queries = this.queries.slice(0);
            cl._key = this._key;
            cl._isChild = this._isChild;
            cl.dataManagar = this.dataManager;
            cl._fromTable = this._fromTable;
            cl._params = this._params.slice(0);
            cl._expands = this._expands.slice(0);
            cl._sortedColumns = this._sortedColumns.slice(0);
            cl._groupedColumns = this._groupedColumns.slice(0);
            cl._subQuerySelector = this._subQuerySelector;
            cl._subQuery = this._subQuery;
            cl._fKey = this._fKey;
            cl._requiresCount = this._requiresCount;
            return cl;
        },
	/**
	* Specifies the name of table(s) to retrieve data.
	* @alias ejQuery#from
	* @return ej.Query
	* @param {string} tableName name of the table
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().from("Orders"));
	* var tbody="";
	* for(var i=0;i<3;i++){
 	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/
        from: function (tableName) {
            if (typeof tableName === "string")
                this._fromTable = tableName;

            return this;
        },
	/**
	* Passes custom parameters to our API URL.
	* @alias ejQuery#addParams
	* @returns ej.Query
	* @param {string} key 
	* @param {string} value 
	* @example
	* &lt;script&gt;
	* var dm = ej.DataManager({url: "http://mvc.syncfusion.com/Services/Northwnd.svc/Orders/"}).executeQuery(new ej.Query().addParams("test","value"));
	* &lt;/script&gt;
	*/
        addParams: function (key, value) {
            if (typeof value !== "function" && !ej.isPlainObject(value))
                this._params.push({ key: key, value: value });
            else if (typeof value === "function")
                this._params.push({ key: key, fn: value });

            return this;
        },
	/**
	* expand is used to performs complex binding.
	* @alias ejQuery#expand
	* @returns ej.Query
	* @param {string} tables name of the tables
	* @example
	* &lt;script&gt;
	* var dm = ej.DataManager({url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"})
	* .executeQuery(ej.Query().from("Orders").select("OrderID", "CustomerID", "ShipCity", "Employee.FirstName").expand("Employee"));
	* &lt;/script&gt;
	*/
        expand: function (tables) {
            if (typeof tables === "string")
                this._expands = [].slice.call(arguments, 0);
            else
                this._expands = tables.slice(0);

            return this;
        },
	/**
	* It is used to filter records based on the filter condition.
	* @alias ejQuery#where
	* @return ej.Query
	* @param {string} fieldName name of the column
	* @param {string} operator conditional Operators
	* @param {string} value value to filter the field name
	* @param {boolean} ignoreCase on/off case sensitive.
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().where("OrderID","lessthan","10253"));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/
        where: function (fieldName, operator, value, ignoreCase) {
            operator = (operator || ej.FilterOperators.equal).toLowerCase();
            var predicate = null;

            if (typeof fieldName === "string")
                predicate = new ej.Predicate(fieldName, operator, value, ignoreCase);
            else if (fieldName instanceof ej.Predicate)
                predicate = fieldName;
            else
                throwError("Query - where : Invalid arguments");

            this.queries.push({
                fn: "onWhere",
                e: predicate
            });
            return this;
        },
	/**
	* It is used to search the given search key value in JSON data
	* @alias ejQuery#search
	* @return ej.Query
	* @param {string} fieldName name of the column
	* @param {string} operator conditional Operators
	* @param {string} value value to filter the field name
	* @param {boolean} ignoreCase on/off case sensitive.
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().select(["OrderID","ShipCity","CustomerID"]).search("10251","OrderID","equal"));
	* var tbody="";
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[0].OrderID, dm[0].CustomerID, dm[0].ShipCity);
	* $(".table tbody").html(tbody);
	* &lt;/script&gt;
	*/
        search: function (searchKey, fieldNames, operator, ignoreCase) {
            if (!fieldNames || typeof fieldNames === "boolean") {
                fieldNames = [];
                ignoreCase = fieldNames;
            } else if (typeof fieldNames === "string")
                fieldNames = [fieldNames];

            if (typeof operator === "boolean") {
                ignoreCase = operator;
                operator = null;
            }
            operator = operator || ej.FilterOperators.contains;
            if (operator.length < 3)
                operator = ej.data.operatorSymbols[operator];

            var comparer = ej.data.fnOperators[operator] || ej.data.fnOperators.processSymbols(operator);

            this.queries.push({
                fn: "onSearch",
                e: {
                    fieldNames: fieldNames,
                    operator: operator,
                    searchKey: searchKey,
                    ignoreCase: ignoreCase,
                    comparer: comparer
                }
            });
            return this;
        },
	/**
	* Sort items or records in an ordered sequence.
	* @alias ejQuery#sortBy
	* @return ej.Query
	* @param {string} fieldName name of the column
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().sortBy("CustomerID desc"));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/	
        sortBy: function (fieldName, comparer, isFromGroup) {
            var order = ej.sortOrder.Ascending, sorts, t;

            if (typeof fieldName === "string" && fieldName.toLowerCase().endsWith(" desc")) {
                fieldName = fieldName.replace(/ desc$/i, '');
                comparer = ej.sortOrder.Descending;
            }

            if (typeof comparer === "boolean")
                comparer = !comparer ? ej.sortOrder.Ascending : ej.sortOrder.Descending;
            else if (typeof comparer === "function")
                order = "custom";

            if (!comparer || typeof comparer === "string") {
                order = comparer ? comparer.toLowerCase() : ej.sortOrder.Ascending;
                comparer = ej.pvt.fnSort(comparer);
            }
            if (isFromGroup) {
                sorts = filterQueries(this.queries, "onSortBy");

                for (var i = 0; i < sorts.length; i++) {
                    t = sorts[i].e.fieldName;
                    if (typeof t === "string") {
                        if (t === fieldName) return;
                    } else if (t instanceof Array) {
                        for (var j = 0; j < t.length; j++)
                            if (t[j] === fieldName || fieldName.toLowerCase() === t[j] + " desc")
                                return;
                    }
                }
            }

            this.queries.push({
                fn: "onSortBy",
                e: {
                    fieldName: fieldName,
                    comparer: comparer,
                    direction: order
                }
            });

            return this;
        },
	/**
	* Sort items or records in descending order.
	* @alias ejQuery#sortByDesc
	* @return ej.Query
	* @param {string} fieldName name of the column
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().sortByDesc("CustomerID"));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/	
        sortByDesc: function (fieldName) {
            return this.sortBy(fieldName, ej.sortOrder.Descending);
        },
	/**
	* Groups records based on the given field name.
	* @alias ejQuery#group
	* @return ej.Query
	* @param {string} fieldName name of the column
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().group("CustomerID"));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* row = dm[0].items[i];
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", row.OrderID, row.CustomerID, row.ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/	
        group: function (fieldName) {
            this.sortBy(fieldName, null, true);

            this.queries.push({
                fn: "onGroup",
                e: {
                    fieldName: fieldName
                }
            });
            return this;
        },
	/**
	* Retrieves records based on the given page index and size.
	* @alias ejQuery#page
	* @return ej.Query
	* @param {number} pageIndex page number
	* @param {number} pageSize Number of rows in the page
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* //page(pageIndex,pageSize)
	* var dm = ej.DataManager(window.employeeData).executeLocal(ej.Query().page(2,3));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].EmployeeID, dm[i].LastName, dm[i].FirstName);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/
        page: function (pageIndex, pageSize) {
            this.queries.push({
                fn: "onPage",
                e: {
                    pageIndex: pageIndex,
                    pageSize: pageSize
                }
            });
            return this;
        },
	/**
	* The range property is used to retrieve the records based on the given start and end index.
	* @alias ejQuery#range
	* @return ej.Query
	* @param {number} start start index of json data
	* @param {number} end end index of json data
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* //range(startIndex,endIndex)
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().take(20).range(2,5));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/
        range: function (start, end) {
            if (typeof start !== "number" || typeof end !== "number")
                throwError("Query() - range : Arguments type should be a number");

            this.queries.push({
                fn: "onRange",
                e: {
                    start: start,
                    end: end
                }
            });
            return this;
        },
	/**
	* Picks the given count of records from the top of the datasource.
	* @alias ejQuery#take
	* @return ej.Query
	* @param {number} nos number of records
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().take(5));
	* var tbody="";
	* for(var i=0;i<5;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/

        take: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Take : Argument type should be a number");

            this.queries.push({
                fn: "onTake",
                e: {
                    nos: nos
                }
            });
            return this;
        },
	/**
	* Skips the given count of records from the data source.
	* @alias ejQuery#skip
	* @return ej.Query
	* @param {number} nos number of records
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.employeeData).executeLocal(ej.Query().skip(5));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].EmployeeID, dm[i].LastName, dm[i].FirstName);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/
        skip: function (nos) {
            if (typeof nos !== "number")
                throwError("Query() - Skip : Argument type should be a number");

            this.queries.push({
                fn: "onSkip",
                e: { nos: nos }
            });
            return this;
        },
	/**
	* Selects specified columns from the data source.
	* @alias ejQuery#select
	* @return ej.Query
	* @param {string} fieldName name of the columns
	* @example
	* &lt;style&gt;
	* .table,tr,td{ border:1px solid;padding:3px;}
	* &lt;/style&gt;
	* &lt;table class="table" style="border-collapse:collapse"&gt;
	* &lt;tbody&gt;&lt;/tbody&gt;
	* &lt;/table&gt;
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().select(["OrderID","CustomerID","ShipCity"]));
	* var tbody="";
	* for(var i=0;i<3;i++){
	* tbody += String.format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;/tr&gt;", dm[i].OrderID, dm[i].CustomerID, dm[i].ShipCity);
	* $(".table tbody").html(tbody);}
	* &lt;/script&gt;
	*/
        select: function (fieldNames) {
            if (typeof fieldNames === "string")
                fieldNames = [].slice.call(arguments, 0);

            if (!(fieldNames instanceof Array)) {
                throwError("Query() - Select : Argument type should be String or Array");
            }

            this.queries.push({
                fn: "onSelect",
                e: { fieldNames: fieldNames }
            });
            return this;
        },
	/**
	* Displays the records in hierarchical relationships. The foreign key is used to relate two tables.
	* @alias ejQuery#hierarchy
	* @return ej.Query
	* @param {ej.Query} query query the json data
	* @example
	* &lt;script&gt;
	* var dm = ej.DataManager({url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"})
	* .executeQuery(ej.Query().from("Orders")
	* .hierarchy(ej.Query().foreignKey("OrderID").from("Order_Details"),function () {
	*  return [10248] }));
	* &lt;/script&gt;
	*/
        hierarchy: function (query, selectorFn) {
            if (!query || !(query instanceof ej.Query))
                throwError("Query() - hierarchy : query must be instance of ej.Query");

            if (typeof selectorFn === "function")
                this._subQuerySelector = selectorFn;

            this._subQuery = query;
            return this;
        },
	/**
	* Relates two tables. A foreign key is a column or combination of columns which is used to establish and enforce a link between two tables.
	* @alias ejQuery#foreignKey
	* @returns ej.Query
	* @param {string} key primary key field name
	* @example
	* &lt;script&gt;
	* var dm = ej.DataManager({url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"})
	* .executeQuery(ej.Query().from("Orders")
	* .hierarchy(ej.Query().from("Order_Details").foreignKey("OrderID").sortBy("Quantity"),function () {
	*  return [10250, 10251, 10252, 10253] }));
	* &lt;/script&gt;
	*/
        foreignKey: function (key) {
            if (typeof key === "string")
                this._fKey = key;

            return this;
        },
	/**
	* It is used to count records.
	* @alias ejQuery#requiresCount
	* @return ej.Query
	* @example
	* &lt;script&gt;
	* var dm = ej.DataManager(window.gridData).executeLocal(ej.Query().requiresCount()));
	* &lt;/script&gt;
	*/
        requiresCount: function () {
            this._requiresCount = true;

            return this;
        }
    };

    ej.Adaptor = function (ds) {
        this.dataSource = ds;
        this.pvt = {};
		this.init.apply(this, [].slice.call(arguments, 1));
    };

    ej.Adaptor.prototype = {
        options: {
            from: "table",
            requestType: "json",
            sortBy: "sorted",
            select: "select",
            skip: "skip",
            group: "group",
            take: "take",
            search: "search",
            count: "requiresCounts",
            where: "where"
        },
        init: function () {
        },
        extend: function (overrides) {
            var fn = function (ds) {
                this.dataSource = ds;

                if (this.options)
                    this.options = $.extend({}, this.options);
				this.init.apply(this, [].slice.call(arguments, 0));

                this.pvt = {};
            };
            fn.prototype = new this.type();
            fn.prototype.type = fn;

            var base = fn.prototype.base = {};
            for (var p in overrides) {
                if (fn.prototype[p])
                    base[p] = fn.prototype[p];
            }
            $.extend(true, fn.prototype, overrides);
            return fn;
        },
        processQuery: function (dm, query) {
            // this needs to be overridden
        },
        processResponse: function (data, ds, query, xhr) {
            return data;
        },
        convertToQueryString: function (req, query, dm) {
            return $.param(req);
        },
        type: ej.Adaptor
    };

    ej.UrlAdaptor = new ej.Adaptor().extend({
        processQuery: function (dm, query, hierarchyFilters) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params,
                url = dm.dataSource.url, tmp, skip, take = null,
                op = this.options;

            var r = {
                sorted: [],
                grouped: [],
                filters: [],
                searches: []
            };

            // calc Paging & Range
            if (singles["onPage"]) {
                tmp = singles["onPage"];
                skip = getValue(tmp.pageIndex, query);
                take = getValue(tmp.pageSize, query);
				skip = (skip - 1) * take;
            } else if (singles["onRange"]) {
                tmp = singles["onRange"];
                skip = tmp.start;
                take = tmp.end - tmp.start;
            }

            // Sorting
            for (var i = 0; i < sorted.length; i++) {
                tmp = getValue(sorted[i].e.fieldName, query);

                r.sorted.push(callAdaptorFunc(this, "onEachSort", { name: tmp, direction: sorted[i].e.direction }, query));
            }

            // hierarchy
            if (hierarchyFilters) {
                tmp = this.getFiltersFrom(hierarchyFilters, query);
                if (tmp)
                    r.filters.push(callAdaptorFunc(this, "onEachWhere", tmp.toJSON(), query));
            }

            // Filters
            for (var i = 0; i < filters.length; i++) {
                r.filters.push(callAdaptorFunc(this, "onEachWhere", filters[i].e.toJSON(), query));

                for (var prop in r.filters[i]) {
                    if (isNull(r[prop]))
                        delete r[prop];
                }
            }

            // Searches
            for (var i = 0; i < searchs.length; i++) {
                tmp = searchs[i].e;
                r.searches.push(callAdaptorFunc(this, "onEachSearch", {
                    fields: tmp.fieldNames,
                    operator: tmp.operator,
                    key: tmp.searchKey,
                    ignoreCase: tmp.ignoreCase
                }, query));
            }

            // Grouping
            for (var i = 0; i < grouped.length; i++) {
                r.grouped.push(getValue(grouped[i].e.fieldName, query));
            }

            var req = {};
            req[op.from] = query._fromTable;
            if (op.expand) req[op.expand] = query._expands;
            req[op.select] = singles["onSelect"] ? callAdaptorFunc(this, "onSelect", getValue(singles["onSelect"].fieldNames, query), query) : "";
            req[op.count] = query._requiresCount ? callAdaptorFunc(this, "onCount", query._requiresCount, query) : "";
            req[op.search] = r.searches.length ? callAdaptorFunc(this, "onSearch", r.searches, query) : "";
            req[op.skip] = singles["onSkip"] ? callAdaptorFunc(this, "onSkip", getValue(singles["onSkip"].nos, query), query) : "";
            req[op.take] = singles["onTake"] ? callAdaptorFunc(this, "onTake", getValue(singles["onTake"].nos, query), query) : "";
            req[op.where] = r.filters.length || r.searches.length ? callAdaptorFunc(this, "onWhere", r.filters, query) : "";
            req[op.sortBy] = r.sorted.length ? callAdaptorFunc(this, "onSortBy", r.sorted, query) : "";
            req[op.group] = r.grouped.length ? callAdaptorFunc(this, "onGroup", r.grouped, query) : "";

            // Params
            for (var i = 0; tmp = params[i]; i++) {
                if (req[tmp.key]) throwError("ej.Query: Custom Param is conflicting other request arguments");

                req[tmp.key] = tmp.value;
                if (tmp.fn)
                    req[tmp.key] = tmp.fn.call(query, tmp.key, query, dm);
            }

            // cleanup
            for (var prop in req) {
                if (isNull(req[prop]) || req[prop] === "" || req[prop].length === 0)
                    delete req[prop];
            }

            if (!(op.skip in req && op.take in req) && take !== null) {
                req[op.skip] = callAdaptorFunc(this, "onSkip", skip, query);
                req[op.take] = callAdaptorFunc(this, "onTake", take, query);
            }
            var p = this.pvt;
            this.pvt = {};

            if (this.options.requestType === "json") {
                return {
                    data: JSON.stringify(req),
                    url: url,
                    ejPvtData: p,
                    type: "POST",
                    contentType: "application/json; charset=utf-8"
                }
            }
            tmp = this.convertToQueryString(req, query, dm);
            return {
                type: "GET",
                url: tmp.length ? url.replace(/\/*$/, "/" + tmp) : url,
                ejPvtData: p
            };
        },
        convertToQueryString: function (req, query, dm) {
            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1)
                return $.param(req);
            return "?" + $.param(req);
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request.ejPvtData || {};
            if (xhr && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            var d = JSON.parse(request.data);
            if (d && d.action === "batch" && data.added) {
                changes.added = data.added;
                return changes;
            }
            if (data.d)
                data = data.d;

            if (pvt.groups && pvt.groups.length) {
                var groups = pvt.groups, args = {};
                if (data["count"]) args.count = data.count;
                if (data["result"]) data = data.result;
                for (var i = 0; i < groups.length; i++)
                    data = ej.group(data, groups[i]);
                if (args.count)
                    args.result = data;
                else
                    args = data;
                return args;
            }
            return data;
        },
        onGroup: function (e) {
            this.pvt.groups = e;
        },
        batchRequest: function (dm, changes, e) {
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changed,
                    added: changes.added,
                    deleted: changes.deleted,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        },
        beforeSend: function (dm, request) {
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: data,
                    table: tableName,
                    action: "insert"
                })
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    key: value,
                    keyColumn: keyField,
                    table: tableName,
                    action: "remove"
                })
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: value,
                    action: "update",
                    keyColumn: keyField,
                    key: value[keyField],
                    table: tableName
                })
            };
        },
        getFiltersFrom: function (data, query) {
            if (!(data instanceof Array) || !data.length)
                throwError("ej.SubQuery: Array of key values required");
            var key = query._fKey, value, prop = key, predicats = [],
                isValues = typeof data[0] !== "object";

            if (typeof data[0] !== "object") prop = null;

            for (var i = 0; i < data.length; i++) {
                value = !isValues ? ej.pvt.getObject(prop, data[i]) : data[i];
                predicats.push(new ej.Predicate(key, "==", value));
            }

            return ej.Predicate.or(predicats);
        }
    });
    ej.CacheAdaptor = new ej.UrlAdaptor().extend({
        init: function (adaptor, timeStamp, pageSize) {
            if (!ej.isNullOrUndefined(adaptor)) {
                this.cacheAdaptor = adaptor;
            }
            this.pageSize = pageSize;
            this.guidId = ej.getGuid("cacheAdaptor");
            var obj = { keys: [], results: [] };
            if (window.localStorage)
                window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            var guid = this.guidId;
            if (!ej.isNullOrUndefined(timeStamp)) {
                setInterval(function () {
                    var data = ej.parseJSON(window.localStorage.getItem(guid));
                    var forDel = [];
                    for (var i = 0; i < data.results.length; i++) {
                        data.results[i].timeStamp = new Date() - new Date(data.results[i].timeStamp)
                        if (new Date() - new Date(data.results[i].timeStamp) > timeStamp)
                            forDel.push(i);
                    }
                    var d = forDel;
                    for (var i = 0; i < forDel.length; i++) {
                        data.results.splice(forDel[i], 1);
                        data.keys.splice(forDel[i], 1);
                    }
                    window.localStorage.removeItem(guid);
                    window.localStorage.setItem(guid, JSON.stringify(data));
                }, timeStamp);
            }
        },
        generateKey: function (url, query) {
            var sorted = filterQueries(query.queries, "onSortBy"),
                grouped = filterQueries(query.queries, "onGroup"),
                filters = filterQueries(query.queries, "onWhere"),
                searchs = filterQueries(query.queries, "onSearch"),
				pageQuery = filterQueries(query.queries, "onPage"),
                singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
                params = query._params;
            var key = url;
            key += singles["onPage"].pageIndex;
            sorted.forEach(function (obj) {
                key += obj.e.direction + obj.e.fieldName;
            });
            grouped.forEach(function (obj) {
                key += obj.e.fieldName;
            });
            searchs.forEach(function (obj) {
                key += obj.e.searchKey;
            });
            for (var filter = 0; filter < filters.length; filter++) {
                var currentFilter = filters[filter];
                if (currentFilter.e.isComplex) {
                    var newQuery = query.clone();
                    newQuery.queries = [];
                    for (var i = 0; i < currentFilter.e.predicates.length; i++) {
                        newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
                    }
                    key += currentFilter.e.condition + this.generateKey(url, newQuery);
                }
                else
                    key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value
            }
            return key;
        },
        processQuery: function (dm, query, hierarchyFilters) {
            var key = this.generateKey(dm.dataSource.url, query);
            var cachedItems;
            if (window.localStorage)
                cachedItems = ej.parseJSON(window.localStorage.getItem(this.guidId));
            var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
            if (data != null) {
                return data;
            }
            return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0))
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var data = this.cacheAdaptor.processResponse.apply(this, [].slice.call(arguments, 0));
            var key = this.generateKey(ds.dataSource.url, query)
            var obj = {};
            if (window.localStorage)
                obj = ej.parseJSON(window.localStorage.getItem(this.guidId));
            obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count }
            while (obj.results.length > this.pageSize) {
                obj.results.splice(0, 1);
                obj.keys.splice(0, 1);
            }
            window.localStorage.setItem(this.guidId, JSON.stringify(obj));
            return data;
        }
    });
    var filterQueries = function (queries, name) {
        return queries.filter(function (q) {
            return q.fn === name;
        }) || [];
    };
    var filterQueryLists = function (queries, singles) {
        var filtered = queries.filter(function (q) {
            return singles.indexOf(q.fn) !== -1;
        }), res = {};
        for (var i = 0; i < filtered.length; i++) {
            if (!res[filtered[i].fn])
                res[filtered[i].fn] = filtered[i].e;
        }
        return res;
    };
    var callAdaptorFunc = function (obj, fnName, param, param1) {
        if (obj[fnName]) {
            var res = obj[fnName](param, param1);
            if (!isNull(res)) param = res;
        }
        return param;
    };

    ej.ODataAdaptor = new ej.UrlAdaptor().extend({
        options: {
            requestType: "get",
            accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
            multipartAccept: "multipart/mixed",
            sortBy: "$orderby",
            select: "$select",
            skip: "$skip",
            take: "$top",
            count: "$inlinecount",
            where: "$filter",
            expand: "$expand",
            batch: "$batch",
            changeSet: "--changeset_",
            batchPre: "batch_",
            contentId: "Content-Id: ",
            batchContent: "Content-Type: multipart/mixed; boundary=",
            changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
            batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
        },
        onEachWhere: function (filter, requiresCast) {
            return filter.isComplex ? this.onComplexPredicate(filter, requiresCast) : this.onPredicate(filter, requiresCast);
        },
        onPredicate: function (pred, query, requiresCast) {
            var returnValue = "",
                operator,
                val = pred.value,
                type = typeof val,
                field = this._p(pred.field);

            if (val instanceof Date)
                val = "datetime'" + dateSerialize(val) + "'";

            if (type === "string") {
                val = "'" + val + "'";

                if (requiresCast) {
                    field = "cast(" + field + ", 'Edm.String')";
                }

                if (pred.ignoreCase) {
                    field = "tolower(" + field + ")";
                    val = val.toLowerCase();
                }
            }

            operator = ej.data.odBiOperator[pred.operator];
            if (operator) {
                returnValue += field;
                returnValue += operator;

                return returnValue + val;
            }

            operator = ej.data.odUniOperator[pred.operator];
            if (!operator || type !== "string") return "";

            if (operator === "substringof") {
                var t = val;
                val = field;
                field = t;
            }

            returnValue += operator + "(";
            returnValue += field + ",";
            returnValue += val + ")";

            return returnValue;
        },
        onComplexPredicate: function (pred, requiresCast) {
            var res = [];
            for (var i = 0; i < pred.predicates.length; i++) {
                res.push("(" + this.onEachWhere(pred.predicates[i], requiresCast) + ")");
            }
            return res.join(" " + pred.condition + " ");
        },
        onWhere: function (filters) {
            if (this.pvt.searches)
                filters.push(this.onEachWhere(this.pvt.searches, null, true));

            return filters.join(" and ");
        },
        onEachSearch: function (e) {
            if (e.fields.length === 0)
                throwError("Query() - Search : oData search requires list of field names to search");

            var filter = this.pvt.searches || [];
            for (var i = 0; i < e.fields.length; i++) {
                filter.push(new ej.Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
            }
            this.pvt.searches = filter;
        },
        onSearch: function (e) {
            this.pvt.searches = ej.Predicate.or(this.pvt.searches);
            return "";
        },
        onEachSort: function (e) {
            var res = [];
            if (e.name instanceof Array) {
                for (var i = 0; i < e.name.length; i++)
                    res.push(this._p(e.name[i]));
            } else
                res.push(this._p(e.name) + (e.direction === "descending" ? " desc" : ""));

            return res.join(",");
        },
        onSortBy: function (e) {
            return e.reverse().join(",");
        },
        onGroup: function (e) {
            this.pvt.groups = e;
            return "";
        },
        onSelect: function (e) {
            for (var i = 0; i < e.length; i++)
                e[i] = this._p(e[i]);

            return e.join(',');
        },
        onCount: function (e) {
            return e === true ? "allpages" : "";
        },
        beforeSend: function (dm, request, settings) {
            if (settings.url.endsWith(this.options.batch) && settings.type.toLowerCase() === "post") {
                request.setRequestHeader("Accept", oData.multipartAccept);
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.overrideMimeType("text/plain; charset=x-user-defined");
            }

            if (!dm.dataSource.crossDomain) {
                request.setRequestHeader("DataServiceVersion", "2.0");
                request.setRequestHeader("MaxDataServiceVersion", "2.0");
            }
        },
        processResponse: function (data, ds, query, xhr, request, changes) {
            var pvt = request && request.ejPvtData;
            if (xhr && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
                return query._requiresCount ? { result: [], count: 0 } : [];
            if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx, jsonObj;
                guid = guid.substring(guid.indexOf("=batchresponse") + 1);
                data = data.split(guid);
                if (data.length < 2) return;

                data = data[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
                data.replace(exVal[0], "");

                var changeGuid = exVal[1];
                data = data.split(changeGuid);

                for (var i = data.length; i > -1; i--) {
                    if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
                        continue;

                    cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

                    if (changes.added[cIdx]) {
                        jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
                        $.extend(changes.added[cIdx], this.processResponse(jsonObj));
                    }
                }
                return changes;
            }
            var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null;
            version = (version && parseInt(version, 10)) || 2;

            if (query && query._requiresCount) {
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
                if (data.d) data = data.d;
                if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
            }

            if (version === 3 && data.value) data = data.value;
            if (data.d) data = data.d;
            if (version < 3 && data.results) data = data.results;

            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (var i = 0; i < groups.length; i++)
                    data = ej.group(data, groups[i]);
            }
            return isNull(count) ? data : { result: data, count: count };
        },
        convertToQueryString: function (req, query, dm) {
            var res = [], tableName = req.table || "";
            delete req.table;

            if (dm.dataSource.requiresFormat)
                req["$format"] = "json";

            for (var prop in req)
                res.push(prop + "=" + req[prop]);

            res = res.join("&");

            if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName)
                return res;

            return res.length ? tableName + "?" + res : tableName || "";
        },
        insert: function (dm, data, tableName) {
            return {
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : ''),
                data: JSON.stringify(data)
            }
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')',
                data: JSON.stringify(value),
                accept: this.options.accept
            };
        },
        batchRequest: function (dm, changes, e) {
            var initialGuid = e.guid = ej.getGuid(oData.batchPre);
            var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
            var args = {
                url: e.url,
                key: e.key,
                cid: 1,
                cSet: ej.getGuid(oData.changeSet)
            };
            var req = "--" + initialGuid + "\n";

            req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";

            req += this.generateInsertRequest(changes.added, args);
            req += this.generateUpdateRequest(changes.changed, args);
            req += this.generateDeleteRequest(changes.deleted, args);

            req += args.cSet + "--\n";
            req += "--" + initialGuid + "--";

            return {
                type: "POST",
                url: url,
                contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
                data: req
            };
        },
        generateDeleteRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "DELETE ";
                req += e.url + "(" + arr[i][e.key] + ") HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += oData.batchChangeSetContentType + "\n";
            }

            return req + "\n";
        },
        generateInsertRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "POST ";
                req += e.url + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += "Content-Id: " + i + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n";
            }

            return req;
        },
        generateUpdateRequest: function (arr, e) {
            if (!arr) return "";
            var req = "";

            for (var i = 0; i < arr.length; i++) {
                req += "\n" + e.cSet + "\n";
                req += oData.changeSetContent + "\n\n";
                req += "PUT ";
                req += e.url + "(" + arr[i][e.key] + ")" + " HTTP/1.1\n";
                req += "Accept: " + oData.accept + "\n";
                req += oData.batchChangeSetContentType + "\n\n";

                req += JSON.stringify(arr[i]) + "\n\n";
            }

            return req;
        },
        _p: function (prop) {
            return prop.replace(/\./g, "/");
        }
    });

    ej.JsonAdaptor = new ej.Adaptor().extend({
        processQuery: function (ds, query) {
            var result = ds.dataSource.json.slice(0), count = result.length, cntFlg = true, ret, key;

            for (var i = 0; i < query.queries.length; i++) {
                key = query.queries[i];
                ret = this[key.fn].call(this, result, key.e, query);
                result = ret !== undefined ? ret : result;

                if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") cntFlg = false;

                if (cntFlg) count = result.length;
            }

            if (query._requiresCount) {
                result = {
                    result: result,
                    count: count
                };
            }

            return result;
        },
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                this.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                this.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                this.remove(dm, e.key, changes.deleted[i]);
            return changes;
        },
        onWhere: function (ds, e) {
            if (!ds) return ds;

            return ds.filter(function (obj) {
                return e.validate(obj);
            });
        },
        onSearch: function (ds, e) {
            if (!ds || !ds.length) return ds;

            if (e.fieldNames.length === 0) {
                ej.pvt.getFieldList(ds[0], e.fieldNames);
            }

            return ds.filter(function (obj) {
                for (var j = 0; j < e.fieldNames.length; j++) {
                    if (e.comparer.call(obj, ej.pvt.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase))
                        return true;
                }
                return false;
            });
        },
        onSortBy: function (ds, e, query) {
            if (!ds) return ds;
            var fnCompare, field = getValue(e.fieldName, query);
            if (!field)
                return ds.sort(e.comparer);

            if (field instanceof Array) {
                field = field.slice(0);

                for (var i = field.length - 1; i >= 0; i--) {
                    if (!field[i]) continue;

                    fnCompare = e.comparer;

                    if (field[i].endsWith(" desc")) {
                        fnCompare = ej.pvt.fnSort(ej.sortOrder.Descending);
                        field[i] = field[i].replace(" desc", "");
                    }

                    ds = stableSort(ds, field[i], fnCompare, []);
                }
                return ds;
            }
            return stableSort(ds, field, e.comparer, query ? query.queries : []);
        },
        onGroup: function (ds, e, query) {
            if (!ds) return ds;

            return ej.group(ds, getValue(e.fieldName, query));
        },
        onPage: function (ds, e, query) {
            var size = getValue(e.pageSize, query),
                start = (getValue(e.pageIndex, query) - 1) * size, end = start + size;

            if (!ds) return ds;

            return ds.slice(start, end);
        },
        onRange: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.start), getValue(e.end));
        },
        onTake: function (ds, e) {
            if (!ds) return ds;

            return ds.slice(0, getValue(e.nos));
        },
        onSkip: function (ds, e) {
            if (!ds) return ds;
            return ds.slice(getValue(e.nos));
        },
        onSelect: function (ds, e) {
            if (!ds) return ds;
            return ej.select(ds, getValue(e.fieldNames));
        },
        insert: function (dm, data) {
            return dm.dataSource.json.push(data);
        },
        remove: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i;
            if (typeof value === "object")
                value = value[keyField];
            for (i = 0; i < ds.length; i++) {
                if (ds[i][keyField] === value) break;
            }

            return i !== ds.length ? ds.splice(i, 1) : null;
        },
        update: function (dm, keyField, value, tableName) {
            var ds = dm.dataSource.json, i, key = value[keyField];

            for (i = 0; i < ds.length; i++) {
                if (ds[i][keyField] === key) break;
            }

            return i < ds.length ? $.extend(ds[i], value) : null;
        }
    });
    ej.remoteSaveAdaptor = new ej.JsonAdaptor().extend({
        beforeSend: ej.UrlAdaptor.prototype.beforeSend,
        insert: ej.UrlAdaptor.prototype.insert,
        update: ej.UrlAdaptor.prototype.update,
        remove: ej.UrlAdaptor.prototype.remove,
        batchRequest: function (dm, changes, e) {
            var i;
            for (i = 0; i < changes.added.length; i++)
                ej.JsonAdaptor.prototype.insert(dm, changes.added[i]);
            for (i = 0; i < changes.changed.length; i++)
                ej.JsonAdaptor.prototype.update(dm, e.key, changes.changed[i]);
            for (i = 0; i < changes.deleted.length; i++)
                ej.JsonAdaptor.prototype.remove(dm, e.key, changes.deleted[i]);
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changed,
                    added: changes.added,
                    deleted: changes.deleted,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        }
    });
    ej.WebApiAdaptor = new ej.ODataAdaptor().extend({
        insert: function (dm, data, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.url,
                data: JSON.stringify(data)
            };
        },
        remove: function (dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url + "/" + value,
                data: JSON.stringify(value)
            };
        },
        update: function (dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url,
                data: JSON.stringify(value)
            };
        },
        processResponse: function (data, ds, query, xhr, request, changes) {

            var pvt = request && request.ejPvtData;
            if (request && request.type.toLowerCase() != "post") {
                var version = xhr && xhr.getResponseHeader("DataServiceVersion"), count = null;
                version = (version && parseInt(version, 10)) || 2;

                if (query && query._requiresCount) {
                    if (data.Count) count = data.Count;
                }

                if (version < 3 && data.Items) data = data.Items;

                if (pvt && pvt.groups && pvt.groups.length) {
                    var groups = pvt.groups;
                    for (var i = 0; i < groups.length; i++)
                        data = ej.group(data, groups[i]);
                }
                return isNull(count) ? data : { result: data, count: count };
            }
        }
    });
    var getValue = function (value, inst) {
        if (typeof value === "function")
            return value.call(inst || {});
        return value;
    }

    ej.TableModel = function (name, jsonArray, dataManager, modelComputed) {
        if (!instance(this, ej.TableModel))
            return new ej.TableModel(jsonArray);

        if (!instance(jsonArray, Array))
            throwError("ej.TableModel - Json Array is required");

        var rows = [], model, dirtyFn = $proxy(setDirty, this);

        for (var i = 0; i < jsonArray.length; i++) {
            model = new ej.Model(jsonArray[i], this);
            model.state = "unchanged";
            model.on("stateChange", dirtyFn);
            if (modelComputed)
                model.computes(modelComputed);
            rows.push(model);
        }

        this.name = name || "table1";

        this.rows = ej.NotifierArray(rows);
        this._deleted = [];

        this._events = $({});

        this.dataManager = dataManager;

        this._isDirty = false;

        return this;
    };

    ej.TableModel.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },

        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },

        setDataManager: function (dataManager) {
            this.dataManagar = dataManager;
        },

        saveChanges: function () {
            if (!this.dataManager || !instance(this.dataManager, ej.DataManager))
                throwError("ej.TableModel - saveChanges : Set the dataManager using setDataManager function");

            if (!this.isDirty())
                return;

            var promise = this.dataManager.saveChanges(this.getChanges(), this.key, this.name);

            promise.done($proxy(function (changes) {
                var rows = this.toArray();
                for (var i = 0; i < rows.length; i++) {
                    if (rows.state === "added") {
                        rows.set(this.key, changes.added.filter(function (e) {
                            return e[this.key] === rows.get(this.key);
                        })[0][this.key]);
                    }
                    rows[i].markCommit();
                }

                this._events.triggerHandler({ type: "save", table: this });

            }, this));

            promise.fail($proxy(function (e) {
                this.rejectChanges();
                this._events.triggerHandler({ type: "reject", table: this, error: e });
            }, this));

            this._isDirty = false;
        },

        rejectChanges: function () {
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++)
                rows[i].revert(true);

            this._isDirty = false;
            this._events.triggerHandler({ type: "reject", table: this });
        },

        insert: function (json) {
            var model = new ej.Model(json);
            model._isDirty = this._isDirty = true;

            this.rows.push(model);

            this._events.triggerHandler({ type: "insert", model: model, table: this });
        },

        update: function (value) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var row = value, model, key = this.key, keyValue = row[key];

            model = this.rows.array.filter(function (obj) {
                return obj.get(key) === keyValue;
            });

            model = model[0];

            for (var col in row) {
                model.set(col, row[col]);
            }

            this._isDirty = true;

            this._events.triggerHandler({ type: "update", model: model, table: this });
        },

        remove: function (key) {
            if (!this.key)
                throwError("TableModel - update : Primary key should be assigned to TableModel.key");

            var field = this.key;

            var index = -1, model;

            if (key && typeof key === "object") {
                key = key[field] !== undefined ? key[field] : key.get(field);
            }

            for (var i = 0; i < this.rows.length() ; i++) {
                if (this.rows.array[i].get(field) === key) {
                    index = i;
                    break;
                }
            }

            if (index > -1) {
                model = this.rows.removeAt(index);
                model.markDelete();

                this._deleted.push({ model: model, position: index });

                this._isDirty = true;
                this._events.triggerHandler({ type: "remove", model: model, table: this });
            }
        },

        isDirty: function () {
            return this._isDirty;
        },

        getChanges: function () {

            var changes = {
                added: [],
                changed: []
            };
            var rows = this.toArray();
            for (var i = 0; i < rows.length; i++) {
                if (changes[rows[i].state])
                    changes[rows[i].state].push(rows[i].json);
            }

            changes.deleted = ej.select(this._deleted, ["model"]);

            return changes;
        },

        toArray: function () {
            return this.rows.toArray();
        },

        setDirty: function (dirty, model) {
            if (this._isDirty === !!dirty) return;

            this._isDirty = !!dirty;

            this._events.triggerHandler({ type: "dirty", table: this, model: model });
        },
        get: function (index) {
            return this.rows.array[index];
        },
        length: function () {
            return this.rows.array.length;
        },

        bindTo: function (element) {
            var marker = tDiv, template = $(element.html()), rows = this.toArray(), cur;
            if ($.inArray(element.prop("tagName").toLowerCase(), ["table", "tbody"]))
                marker = tTR;

            marker.insertBefore(element);
            element.detach().empty();

            for (var i = 0; i < rows.length; i++) {
                cur = template.clone();
                rows[i].bindTo(cur);
                element.append(cur);
            }

            element.insertAfter(marker);
            marker.remove();
        }
    };

    var tDiv = doc ? $(document.createElement("div")) : {},
        tTR = doc ? $(document.createElement("tr")) : {};

    ej.Model = function (json, table, name) {
        if (typeof table === "string") {
            name = table;
            table = null;
        }
        this.$id = getUid("m");

        this.json = json;
        this.table = table instanceof ej.TableModel ? table : null;
        this.name = name || (this.table && this.table.name);
        this.dataManager = (table instanceof ej.DataManager) ? table : table.dataManagar;
        this.actual = {};
        this._events = $({});
        this.isDirty = false;
        this.state = "added";
        this._props = [];
        this._computeEls = {};
        this._fields = {};
        this._attrEls = {};
        this._updates = {};
        this.computed = {};
    };

    ej.Model.prototype = {
        computes: function (value) {
            $.extend(this.computed, value);
        },
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        set: function (field, value) {
            var obj = this.json, actual = field, prev;
            field = field.split('.');

            for (var i = 0; i < field.length - 1; i++) {
                field = field[0];
                obj = obj[field[0]];
            }

            this.isDirty = true;
            this.changeState("changed", { from: "set" });

            prev = obj[field];

            if (this.actual[field] === undefined && !(field in this.actual))
                this.actual[field] = value; // Complex property ?

            obj[field] = value;

            this._updateValues(field, value);
            this._events.triggerHandler({ type: actual, current: value, previous: prev, model: this });
        },
        get: function (field) {
            return ej.pvt.getObject(field, this.json);
        },
        revert: function (suspendEvent) {
            for (var prop in this.actual) {
                this.json[prop] = this.actual[prop];
            }

            this.isDirty = false;

            if (suspendEvent)
                this.state = "unchanged";
            else
                this.changeState("unchanged", { from: "revert" });
        },
        save: function (dm, key) {
            dm = dm || this.dataManagar;
            key = key || dm.dataSource.key;
            if (!dm) throwError("ej.Model - DataManager is required to commit the changes");
            if (this.state === "added") {
                return dm.insert(this.json, this.name).done(ej.proxy(function (e) {
                    $.extend(this.json, e.record);
                }, this));
            }
            else if (this.state === "changed") {
                return dm.update(key, this.json, this.name);
            }
            else if (this.state === "deleted") {
                return dm.remove(key, this.json, this.name);
            }
        },
        markCommit: function () {
            this.isDirty = false;
            this.changeState("unchanged", { from: "commit" });
        },
        markDelete: function () {
            this.changeState("deleted", { from: "delete" });
        },
        changeState: function (state, args) {
            if (this.state === state) return;

            if (this.state === "added") {
                if (state === "deleted")
                    state = "unchanged";
                else return;
            }

            var prev = state;
            args = args || {};

            this.state = state;
            this._events.triggerHandler($.extend({ type: "stateChange", current: state, previous: prev, model: this }, args));
        },
        properties: function () {
            if (this._props.length)
                return this._props;

            for (var pr in this.json) {
                this._props.push(pr);
                this._updates[pr] = { read: [], input: [] };
            }

            return this._props;
        },
        bindTo: function (element) {
            var el = $(element), ctl, field,
                elements = el.find("[ej-observe], [ej-computed], [ej-prop]"), len = elements.length;

            el.data("ejModel", this);
            var unbindData = { fields: [], props: [], computes: [] };
            for (var i = 0; i < len; i++) {
                ctl = elements.eq(i);

                field = ctl.attr("ej-prop");
                if (field) {
                    this._processAttrib(field, ctl, unbindData);
                }
                field = ctl.attr("ej-observe");
                if (field && this._props.indexOf(field) !== -1) {
                    this._processField(ctl, field, unbindData);
                    continue;
                }

                field = ctl.attr("ej-computed");
                if (field) {
                    this._processComputed(field, ctl, unbindData);
                    continue;
                }
            }
            el.data("ejModelBinding" + this.$id, unbindData);
        },
        unbind: function (element) {
            var tmp, data = {
                props: this._attrEls,
                computes: this._computeEls
            }, isCustom = false;

            if (element) {
                data = $(element).removeData("ejModel").data("ejModelBinding" + this.$id) || data;
                isCustom = true;
            }

            for (var p in this.computed) {
                tmp = data.computes[p], p = this.computed[p];
                if (tmp && p.deps) {
                    this.off(p.deps.join(' '), tmp.handle);
                    if (isCustom)
                        delete this._computeEls[p];
                }
            }
            if (!isCustom)
                this._computeEls = {};

            for (var p in data.props) {
                tmp = data.props[p];
                if (tmp) {
                    this.off(tmp.deps.join(' '), tmp.handle);
                    delete data.props[p];
                    if (isCustom)
                        delete this._attrEls[p];
                }
            }
            if (!isCustom)
                this._attrEls = {};

            if (data.fields && data.fields.length) {
                var len = data.fields.length, ctl, idx, ty;
                for (var i = 0; i < len; i++) {
                    ctl = data.fields[i];
                    $(ctl).off("change", null, this._changeHandler);

                    ty = this.formElements.indexOf(ctl.tagName.toLowerCase()) !== -1 ? "input" : "read";
                    idx = this._updates[ty].indexOf(ctl);
                    if (idx !== -1)
                        this._updates[ty].splice(idx, 1);
                }
            }
        },
        _processComputed: function (value, element, data) {
            if (!value) return;

            var val, deps, safeVal = safeStr(value),
            type = this.formElements.indexOf(element[0].tagName.toLowerCase()) !== -1 ? "val" : "html";

            if (!this.computed[value] || !this.computed[safeVal]) {
                this.computed[safeVal] = {
                    value: new Function("var e = this; return " + value),
                    deps: this._generateDeps(value)
                }
                value = safeVal;
            }

            val = this.computed[value];
            if (!val.get) {
                val.get = function () {
                    val.value.call(this.json);
                }
            }

            deps = val.deps;
            val = val.value;

            this._updateDeps(deps);
            this._updateElement(element, type, val);

            val = { el: element, handle: $proxy(this._computeHandle, this, { value: value, type: type }) };
            this._computeEls[value] = val;
            data.computes[value] = val;

            this.on(deps.join(' '), val.handle);
        },
        _computeHandle: function (e) {
            var el = this._computeEls[e.value];
            if (el && this.computed[e.value])
                this._updateElement(el.el, e.type, this.computed[e.value].value);
        },
        _updateElement: function (el, type, val) {
            el[type](val.call($.extend({}, this.json, this.computed)));
        },
        _updateDeps: function (deps) {
            for (var i = 0; i < deps.length; i++) {
                if (!(deps[i] in this.json) && deps[i] in this.computed)
                    ej.merge(deps, this.computed[deps[i]].deps);
            }
        },
        _generateDeps: function (value) {
            var splits = value.replace(/(^e\.)|( e\.)/g, '#%^*##ej.#').split("#%^*#"),
                field, deps = [];

            for (var i = 0; i < splits.length; i++) {
                if (splits[i].startsWith("#ej.#")) {
                    field = splits[i].replace("#ej.#", "").split(' ')[0];
                    if (field && this._props.indexOf(field) !== -1)
                        deps.push(field);
                }
            }

            return deps;
        },
        _processAttrib: function (value, el, data) {
            var prop, val, res = {};
            value = value.replace(/^ +| +$/g, "").split(";");
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i].split(":");
                if (value[i].length < 2) continue;

                prop = value[i][0].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
                res[prop] = value[i][1].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
            }
            value = res;
            var deps = [];
            for (prop in value)
                deps.push(value[prop]);

            this._updateDeps(deps);
            this._updateProps(el, value);

            res = getUid("emak");
            val = { el: el, handle: $proxy(this._attrHandle, this, res), value: value, deps: deps };
            el.prop("ejmodelattrkey", res);

            data.props[res] = val;
            this._attrEls[res] = val;

            this.on(deps.join(' '), val.handle);
        },
        _attrHandle: function (res) {
            var el = this._attrEls[res];
            if (el)
                this._updateProps(el.el, el.value);
        },
        _updateProps: function (element, value) {
            var json = this.json, t, c = this.computed;
            for (var prop in value) {
                t = value[prop];
                if (t in json)
                    t = json[t];
                else if (t in c) {
                    t = c[t];
                    if (t) {
                        t = t.value.call($.extend({}, this.json, c));
                    }
                }

                if (!isNull(t)) {
                    element.prop(prop, t);
                }
            }
        },
        _updateValues: function (prop, value) {
            var arr = this._updates[prop];

            if (!arr || (!arr.read && !arr.input)) return;

            this._ensureItems(arr.read, "html", value);
            this._ensureItems(arr.input, "val", value);
        },
        _ensureItems: function (a, type, value) {
            if (!a) return;

            for (var i = a.length - 1; i > -1; i--) {
                if (!a[i].offsetParent) {
                    a.splice(i, 1);
                    continue;
                }
                $(a[i])[type](value);
            }
        },
        _changeHandler: function (e) {
            e.data.self.set(e.data.prop, $(this).val());
        },
        _processField: function (ctl, field, data) {
            var e = { self: this, prop: field }, val = this.get(field);

            data.fields.push(ctl[0]);

            if (this.formElements.indexOf(ctl[0].tagName.toLowerCase()) === -1) {
                ctl.html(val);
                return this._updates[field].read.push(ctl[0]);
            }

            ctl.val(val)
                    .off("change", null, this._changeHandler)
                    .on("change", null, e, this._changeHandler);

            return this._updates[field].input.push(ctl[0]);
        },
        formElements: ["input", "select", "textarea"]
    };

    var safeReg = /[^\w]+/g;
    var safeStr = function (value) {
        return value.replace(safeReg, "_");
    };
    var setDirty = function (e) {
        this.setDirty(true, e.model);
    };

    ej.Predicate = function (field, operator, value, ignoreCase) {
        if (!(this instanceof ej.Predicate))
            return new ej.Predicate(field, operator, value, ignoreCase);

        if (typeof field === "string") {
            this.field = field;
            this.operator = operator;
            this.value = value;
            this.ignoreCase = ignoreCase;
            this.isComplex = false;

            this._comparer = ej.data.fnOperators.processOperator(this.operator);

        } else if (field instanceof ej.Predicate && value instanceof ej.Predicate || value instanceof Array) {
            this.isComplex = true;
            this.condition = operator.toLowerCase();
            this.predicates = [field];
            if (value instanceof Array)
                [].push.apply(this.predicates, value);
            else
                this.predicates.push(value);
        }
        return this;
    };

    ej.Predicate.and = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "and");
    };

    ej.Predicate.or = function () {
        return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "or");
    };

    // Private fn
    var pvtPredicate = {
        _combinePredicates: function (predicates, operator) {
            if (!predicates.length) return undefined;
            if (predicates.length === 1) {
                if (!instance(predicates[0], Array))
                    return predicates[0];
                predicates = predicates[0];
            }
            return new ej.Predicate(predicates[0], operator, predicates.slice(1));
        },

        _combine: function (pred, field, operator, value, condition, ignoreCase) {
            if (field instanceof ej.Predicate)
                return ej.Predicate[condition](pred, field);

            if (typeof field === "string")
                return ej.Predicate[condition](pred, new ej.Predicate(field, operator, value, ignoreCase));

            return throwError("Predicate - " + condition + " : invalid arguments");
        }
    };

    ej.Predicate.prototype = {
        and: function (field, operator, value, ignoreCase) {
            return pvtPredicate._combine(this, field, operator, value, "and", ignoreCase);
        },
        or: function (field, operator, value, ignoreCase) {
            return pvtPredicate._combine(this, field, operator, value, "or", ignoreCase);
        },
        validate: function (record) {
            var p = this.predicates, isAnd, ret;

            if (!this.isComplex) {
                return this._comparer.call(this, ej.pvt.getObject(this.field, record), this.value, this.ignoreCase);
            }

            isAnd = this.condition === "and";

            for (var i = 0; i < p.length; i++) {
                ret = p[i].validate(record);
                if (isAnd) {
                    if (!ret) return false;
                } else {
                    if (ret) return true;
                }
            }

            return isAnd;
        },
        toJSON: function () {
            var predicates, p;
            if (this.isComplex) {
                predicates = [], p = this.predicates;
                for (var i = 0; i < p.length; i++)
                    predicates.push(p[i].toJSON());
            }
            return {
                isComplex: this.isComplex,
                field: this.field,
                operator: this.operator,
                value: this.value,
                ignoreCase: this.ignoreCase,
                condition: this.condition,
                predicates: predicates
            }
        }
    };

    ej.dataUtil = {
        swap: function (array, x, y) {
            if (x == y) return;

            var tmp = array[x];
            array[x] = array[y];
            array[y] = tmp;
        },

        mergeSort: function (jsonArray, fieldName, comparer) {
            if (!comparer || typeof comparer === "string")
                comparer = ej.pvt.fnSort(comparer, true);

            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.mergeSort(jsonArray, fieldName, comparer);
        },

        max: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnDescending);
        },

        min: function (jsonArray, fieldName, comparer) {
            if (typeof fieldName === "function") {
                comparer = fieldName;
                fieldName = null;
            }

            return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnAscending);
        },

        distinct: function (json, fieldName, requiresCompleteRecord) {
            var result = [], val, tmp = {};
            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (!(val in tmp)) {
                    result.push(!requiresCompleteRecord ? val : json[i]);
                    tmp[val] = 1;
                }
            }
            return result;
        },

        sum: function (json, fieldName) {
            var result = 0, val, castRequired = typeof getVal(json, fieldName, 0) !== "number";

            for (var i = 0; i < json.length; i++) {
                val = getVal(json, fieldName, i);
                if (val !== undefined){
                   if(castRequired && +val)
                       val = +val;
                   result += val;
                }
            }
            return result;
        },

        avg: function (json, fieldName) {
            return ej.sum(json, fieldName) / json.length;
        },

        select: function (jsonArray, fields) {
            var newData = [];

            for (var i = 0; i < jsonArray.length; i++) {
                newData.push(ej.pvt.extractFields(jsonArray[i], fields));
            }

            return newData;
        },

        group: function (jsonArray, field, /* internal */ level) {
            level = level || 1;

            if (jsonArray.GROUPGUID == ej.pvt.consts.GROUPGUID) {
                for (var j = 0; j < jsonArray.length; j++) {
                    jsonArray[j].items = ej.group(jsonArray[j].items, field, jsonArray.level + 1);
                    jsonArray[j].count = jsonArray[j].items.length;
                }

                jsonArray.childLevels += 1;
                return jsonArray;
            }

            var grouped = {}, groupedArray = [];

            groupedArray.GROUPGUID = ej.pvt.consts.GROUPGUID;
            groupedArray.level = level;
            groupedArray.childLevels = 0;
            groupedArray.records = jsonArray;

            for (var i = 0; i < jsonArray.length; i++) {
                var val = getVal(jsonArray, field, i);

                if (!grouped[val]) {
                    grouped[val] = {
                        key: val,
                        count: 0,
                        items: [],
                        field: field
                    };
                    groupedArray.push(grouped[val]);
                }

                grouped[val].count += 1;
                grouped[val].items.push(jsonArray[i]);
            }

            return groupedArray;
        },

        parseTable: function (table, headerOption, headerRowIndex) {
            var tr = table.rows, headerRow, headerTds = [], data = [], i;

            if (!tr.length) return [];

            headerRowIndex = headerRowIndex || 0;

            switch ((headerOption || "").toLowerCase()) {
                case ej.headerOption.tHead:
                    headerRow = table.tHead.rows[headerRowIndex];
                    break;
                case ej.headerOption.row:
                default:
                    headerRow = table.rows[headerRowIndex];
                    break;
            }

            var hTd = headerRow.cells;

            for (i = 0; i < hTd.length; i++)
                headerTds.push($.trim(hTd[i].innerHTML));

            for (i = headerRowIndex + 1; i < tr.length; i++) {
                var json = {}, td = tr[i].cells;
                for (var j = 0; j < td.length; j++) {
                    json[headerTds[j]] = td[j].innerHTML;
                }
                data.push(json);
            }
            return data;
        }
    };

    ej.headerOption = {
        tHead: "thead",
        row: "row"
    };

    ej.pvt = {
        filterQueries: filterQueries,
        mergeSort: function (jsonArray, fieldName, comparer) {
            if (jsonArray.length <= 1)
                return jsonArray;

            // else list size is > 1, so split the list into two sublists
            var middle = parseInt(jsonArray.length / 2, 10);

            var left = jsonArray.slice(0, middle),
                right = jsonArray.slice(middle);

            left = ej.pvt.mergeSort(left, fieldName, comparer);
            right = ej.pvt.mergeSort(right, fieldName, comparer);

            return ej.pvt.merge(left, right, fieldName, comparer);
        },

        getItemFromComparer: function (array, field, comparer) {
            var keyVal = getVal(array, field, 0), current, key = array[0];
            for (var i = 1; i < array.length; i++) {
                current = getVal(array, field, i);
                if (comparer(keyVal, current) > 0) {
                    keyVal = current;
                    key = array[i];
                }
            }
            return key;
        },

        quickSelect: function (array, fieldName, left, right, k, comparer) {
            if (left == right)
                return array[left];

            var pivotNewIndex = ej.pvt.partition(array, fieldName, left, right, comparer);

            var pivotDist = pivotNewIndex - left + 1;

            if (pivotDist == k)
                return array[pivotNewIndex];

            else if (k < pivotDist)
                return ej.pvt.quickSelect(array, fieldName, left, pivotNewIndex - 1, k, comparer);
            else
                return ej.pvt.quickSelect(array, fieldName, pivotNewIndex + 1, right, k - pivotDist, comparer);
        },

        extractFields: function (obj, fields) {
            var newObj = {};

            if (fields.length == 1)
                return ej.pvt.getObject(fields[0], obj);

            for (var i = 0; i < fields.length; i++) {
                newObj[fields[i].replace('.', ej.pvt.consts.complexPropertyMerge)] = ej.pvt.getObject(fields[i], obj);
            }

            return newObj;
        },

        partition: function (array, field, left, right, comparer) {

            var pivotIndex = parseInt((left + right) / 2, 10),
                pivot = getVal(array, field, pivotIndex);

            ej.swap(array, pivotIndex, right);

            pivotIndex = left;

            for (var i = left; i < right; i++) {
                if (comparer(getVal(array, field, i), pivot)) {
                    ej.swap(array, i, pivotIndex);
                    pivotIndex++;
                }
            }

            ej.swap(array, pivotIndex, right);

            return pivotIndex;
        },

        fnSort: function (order) {
            order = order ? order.toLowerCase() : ej.sortOrder.Ascending;

            if (order == ej.sortOrder.Ascending)
                return ej.pvt.fnAscending;

            return ej.pvt.fnDescending;
        },

        fnGetComparer: function (field, fn) {
            return function (x, y) {
                return fn(ej.pvt.getObject(field, x), ej.pvt.getObject(field, y));
            }
        },

        fnAscending: function (x, y) {
            if (x && x.localeCompare)
                return x.localeCompare(y);
            if (x === undefined) {
                if (y === undefined)
                    return 0;
                return 1;
            }
            if (y === undefined)
                return -1;
            return x - y;
        },

        fnDescending: function (x, y) {
            if (x && x.localeCompare)
                return x.localeCompare(y) * -1;
            if (x === undefined) {
                if (y === undefined)
                    return 0;
                return -1;
            }
            if (y === undefined)
                return 1;
            return y - x;
        },

        merge: function (left, right, fieldName, comparer) {
            var result = [], current;

            while (left.length > 0 || right.length > 0) {
                if (left.length > 0 && right.length > 0) {
                    if (comparer)
                        current = comparer(getVal(left, fieldName, 0), getVal(right, fieldName, 0)) <= 0 ? left : right;
                    else
                        current = left[0][fieldName] < left[0][fieldName] ? left : right;
                } else {
                    current = left.length > 0 ? left : right;
                }

                result.push(current.shift());
            }

            return result;
        },

        getObject: function (nameSpace, from) {
            if (!from) return undefined;
            if (!nameSpace) return from;

            if (nameSpace.indexOf('.') === -1) return from[nameSpace];

            var value = from, splits = nameSpace.split('.');

            for (var i = 0; i < splits.length; i++) {

                if (value == null) break;

                value = value[splits[i]];
            }

            return value;
        },

        createObject: function (nameSpace, value, initIn) {
            var splits = nameSpace.split('.'), start = initIn || window, from = start, i;

            for (i = 0; i < splits.length; i++) {

                if (i + 1 == splits.length)
                    from[splits[i]] = value === undefined ? {} : value;
                else if (from[splits[i]] == null)
                    from[splits[i]] = {};

                from = from[splits[i]];
            }

            return start;
        },

        getFieldList: function (obj, fields, prefix) {
            if (prefix === undefined)
                prefix = "";

            if (fields === undefined || fields === null)
                return ej.pvt.getFieldList(obj, [], prefix);

            for (var prop in obj) {
                if (typeof obj[prop] === "object" && !(obj[prop] instanceof Array))
                    ej.pvt.getFieldList(obj[prop], fields, prefix + prop + ".");
                else
                    fields.push(prefix + prop);
            }

            return fields;
        }
    };

    ej.FilterOperators = {
        lessThan: "lessthan",
        greaterThan: "greaterthan",
        lessThanOrEqual: "lessthanorequal",
        greaterThanOrEqual: "greaterthanorequal",
        equal: "equal",
        contains: "contains",
        startsWith: "startswith",
        endsWith: "endswith",
        notEqual: "notequal"
    };

    ej.data = {};

    ej.data.operatorSymbols = {
        "<": "lessthan",
        ">": "greaterthan",
        "<=": "lessthanorequal",
        ">=": "greaterthanorequal",
        "==": "equal",
        "!=": "notequal",
        "*=": "contains",
        "$=": "endswith",
        "^=": "startswith"
    };

    ej.data.odBiOperator = {
        "<": " lt ",
        ">": " gt ",
        "<=": " le ",
        ">=": " ge ",
        "==": " eq ",
        "!=": " ne ",
        "lessthan": " lt ",
        "lessthanorequal": " le ",
        "greaterthan": " gt ",
        "greaterthanorequal": " ge ",
        "equal": " eq ",
        "notequal": " ne "
    };

    ej.data.odUniOperator = {
        "$=": "endswith",
        "^=": "startswith",
        "*=": "substringof",
        "endswith": "endswith",
        "startswith": "startswith",
        "contains": "substringof"
    };

    ej.data.fnOperators = {
        equal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) == toLowerCase(expected);

            return actual == expected;
        },
        notequal: function (actual, expected, ignoreCase) {
            return !ej.data.fnOperators.equal(actual, expected, ignoreCase);
        },
        lessthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) < toLowerCase(expected);

            return actual < expected;
        },
        greaterthan: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) > toLowerCase(expected);

            return actual > expected;
        },
        lessthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) <= toLowerCase(expected);

            return actual <= expected;
        },
        greaterthanorequal: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return toLowerCase(actual) >= toLowerCase(expected);

            return actual >= expected;
        },
        contains: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return !isNull(actual) && !isNull(expected) && toLowerCase(actual).indexOf(toLowerCase(expected)) != -1;

            return !isNull(actual) && !isNull(expected) && actual.toString().indexOf(expected) != -1;
        },
        notnull: function (actual) {
            return actual !== null;
        },
        isnull: function (actual) {
            return actual === null;
        },
        startswith: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).startsWith(toLowerCase(expected));

            return actual && expected && actual.startsWith(expected);
        },
        endswith: function (actual, expected, ignoreCase) {
            if (ignoreCase)
                return actual && expected && toLowerCase(actual).endsWith(toLowerCase(expected));

            return actual && expected && actual.endsWith(expected);
        },

        processSymbols: function (operator) {
            var fnName = ej.data.operatorSymbols[operator];
            if (fnName) {
                var fn = ej.data.fnOperators[fnName];
                if (fn) return fn;
            }

            return throwError("Query - Process Operator : Invalid operator");
        },

        processOperator: function (operator) {
            var fn = ej.data.fnOperators[operator];
            if (fn) return fn;
            return ej.data.fnOperators.processSymbols(operator);
        }
    };

    ej.NotifierArray = function (array) {
        if (!instance(this, ej.NotifierArray))
            return new ej.NotifierArray(array);

        this.array = array;

        this._events = $({});
        this._isDirty = false;

        return this;
    };

    ej.NotifierArray.prototype = {
        on: function (eventName, handler) {
            this._events.on(eventName, handler);
        },
        off: function (eventName, handler) {
            this._events.off(eventName, handler);
        },
        push: function (item) {
            var ret;

            if (instance(item, Array))
                ret = [].push.apply(this.array, item);
            else
                ret = this.array.push(item);

            this._raise("add", { item: item, index: this.length() - 1 });

            return ret;
        },
        pop: function () {
            var ret = this.array.pop();

            this._raise("remove", { item: ret, index: this.length() - 1 });

            return ret;
        },
        addAt: function (index, item) {
            this.array.splice(index, 0, item);

            this._raise("add", { item: item, index: index });

            return item;
        },
        removeAt: function (index) {
            var ret = this.array.splice(index, 1)[0];

            this._raise("remove", { item: ret, index: index });

            return ret;
        },
        remove: function (item) {
            var index = this.array.indexOf(item);

            if (index > -1) {
                this.array.splice(index, 1);
                this._raise("remove", { item: item, index: index });
            }

            return index;
        },
        length: function () {
            return this.array.length;
        },
        _raise: function (e, args) {
            this._events.triggerHandler($.extend({ type: e }, args));
            this._events.triggerHandler({ type: "all", name: e, args: args });
        },
        toArray: function () {
            return this.array;
        }
    };

    $.extend(ej, ej.dataUtil);

    // For IE8
    Array.prototype.forEach = Array.prototype.forEach || function (fn, scope) {
        for (var i = 0, len = this.length; i < len; ++i) {
            fn.call(scope, this[i], i, this);
        }
    };

    Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
        var len = this.length;

        if (len === 0) return -1;

        for (var i = 0; i < len; i++) {
            if (i in this && this[i] === searchElement)
                return i;
        }
        return -1;
    };

    Array.prototype.filter = Array.prototype.filter || function (fn) {
        if (typeof fn != "function")
            throw new TypeError();

        var res = [];
        var thisp = arguments[1] || this;
        for (var i = 0; i < this.length; i++) {
            var val = this[i]; // in case fun mutates this
            if (fn.call(thisp, val, i, this))
                res.push(val);
        }

        return res;
    };

    String.prototype.endsWith = String.prototype.endsWith || function (key) {
        return this.slice(-key.length) === key;
    };

    String.prototype.startsWith = String.prototype.startsWith || function (key) {
        return this.slice(0, key.length) === key;
    };

    if (!ej.support) ej.support = {};
    ej.support.stableSort = function () {
        var res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16].sort(function () { return 0; });
		for(var i = 0; i < 17; i++){
		    if(i !== res[i]) return false;
		}
        return true;
    }();
    ej.support.cors = $.support.cors;

    if (!$.support.cors && window.XDomainRequest) {
        var httpRegEx = /^https?:\/\//i;
        var getOrPostRegEx = /^get|post$/i;
        var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');
        var xmlRegEx = /\/xml/i;

        // ajaxTransport exists in jQuery 1.5+
        $.ajaxTransport('text html xml json', function (options, userOptions, jqXHR) {
            // XDomainRequests must be: asynchronous, GET or POST methods, HTTP or HTTPS protocol, and same scheme as calling page
            if (options.crossDomain && options.async && getOrPostRegEx.test(options.type) && httpRegEx.test(userOptions.url) && sameSchemeRegEx.test(userOptions.url)) {
                var xdr = null;
                var userType = (userOptions.dataType || '').toLowerCase();
                return {
                    send: function (headers, complete) {
                        xdr = new XDomainRequest();
                        if (/^\d+$/.test(userOptions.timeout)) {
                            xdr.timeout = userOptions.timeout;
                        }
                        xdr.ontimeout = function () {
                            complete(500, 'timeout');
                        };
                        xdr.onload = function () {
                            var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
                            var status = {
                                code: 200,
                                message: 'success'
                            };
                            var responses = {
                                text: xdr.responseText
                            };

                            try {
                                if (userType === 'json') {
                                    try {
                                        responses.json = JSON.parse(xdr.responseText);
                                    } catch (e) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        //throw 'Invalid JSON: ' + xdr.responseText;
                                    }
                                } else if ((userType === 'xml') || ((userType !== 'text') && xmlRegEx.test(xdr.contentType))) {
                                    var doc = new ActiveXObject('Microsoft.XMLDOM');
                                    doc.async = false;
                                    try {
                                        doc.loadXML(xdr.responseText);
                                    } catch (e) {
                                        doc = undefined;
                                    }
                                    if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
                                        status.code = 500;
                                        status.message = 'parseerror';
                                        throw 'Invalid XML: ' + xdr.responseText;
                                    }
                                    responses.xml = doc;
                                }
                            } catch (parseMessage) {
                                throw parseMessage;
                            } finally {
                                complete(status.code, status.message, responses, allResponseHeaders);
                            }
                        };
                        xdr.onerror = function () {
                            complete(500, 'error', {
                                text: xdr.responseText
                            });
                        };
						if(navigator.userAgent.indexOf("MSIE 9.0") != -1)
							xdr.onprogress = function() {};
                        xdr.open(options.type, options.url);
                        //xdr.send(userOptions.data);
                        xdr.send();
                    },
                    abort: function () {
                        if (xdr) {
                            xdr.abort();
                        }
                    }
                };
            }
        });
    }

    $.support.cors = true;

    ej.sortOrder = {
        Ascending: "ascending",
        Descending: "descending"
    };

    // privates
    ej.pvt.consts = {
        GROUPGUID: "{271bbba0-1ee7}",
        complexPropertyMerge: "_"
    };

    // private utils
    var nextTick = function (fn, context) {
        if (context) fn = $proxy(fn, context);
        (window.setImmediate || window.setTimeout)(fn, 0);
    };

    ej.support.enableLocalizedSort = false;

    var stableSort = function (ds, field, comparer, queries) {
        if (ej.support.stableSort) {
            if(!ej.support.enableLocalizedSort && typeof ej.pvt.getObject(field, ds[0] || {}) == "string" 
                && (comparer === ej.pvt.fnAscending || comparer === ej.pvt.fnDescending)
                && queries.filter(function(e){return e.fn === "onSortBy";}).length === 1)
                return fastSort(ds, field, comparer === ej.pvt.fnDescending);
            return ds.sort(ej.pvt.fnGetComparer(field, comparer));
        }
        return ej.mergeSort(ds, field, comparer);
    };

    var fastSort = function(ds, field, isDesc){
        var old = Object.prototype.toString;
        Object.prototype.toString = (field.indexOf('.') === -1) ? function(){
            return this[field];
        }:function(){
            return ej.pvt.getObject(field, this);
        };
        ds = ds.sort();
        Object.prototype.toString = old;
        if(isDesc)
            ds.reverse();
    }

    var toLowerCase = function (val) {
        return val ? val.toLowerCase ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : "";
    };

    var getVal = function (array, field, index) {
        return field ? ej.pvt.getObject(field, array[index]) : array[index];
    };

    var isHtmlElement = function (e) {
        return typeof HTMLElement === "object" ? e instanceof HTMLElement :
            e && e.nodeType === 1 && typeof e === "object" && typeof e.nodeName === "string";
    };

    var instance = function (obj, element) {
        return obj instanceof element;
    };

    var getTableModel = function (name, result, dm, computed) {
        return function (tName) {
            if (typeof tName === "object") {
                computed = tName;
                tName = null;
            }
            return new ej.TableModel(tName || name, result, dm, computed);
        };
    };

    var getKnockoutModel = function (result) {
        return function (computedObservables, ko) {
            ko = ko || window.ko;

            if (!ko) throwError("Knockout is undefined");

            var model, koModels = [], prop, ob;
            for (var i = 0; i < result.length; i++) {
                model = {};
                for (prop in result[i]) {
                    if (!prop.startsWith("_"))
                        model[prop] = ko.observable(result[i][prop]);
                }
                for (prop in computedObservables) {
                    ob = computedObservables[prop];

                    if ($.isPlainObject(ob)) {
                        if (!ob.owner) ob.owner = model;
                        ob = ko.computed(ob);
                    } else
                        ob = ko.computed(ob, model);

                    model[prop] = ob;
                }
                koModels.push(model);
            }

            return ko.observableArray(koModels);
        };
    };

    var uidIndex = 0;
    var getUid = function (prefix) {
        uidIndex += 1;
        return prefix + uidIndex;
    };

    ej.getGuid = function (prefix) {
        var hexs = '0123456789abcdef', rand;
        return (prefix || "") + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
            rand = Math.random() * 16 | 0;
            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
        });
    };

    var proxy = function (fn, context) {
        return function () {
            var args = [].slice.call(arguments, 0);
            args.push(this);

            return fn.apply(context || this, args);
        };
    };

    var $proxy = function (fn, context, arg) {
        if ('bind' in fn)
            return arg ? fn.bind(context, arg) : fn.bind(context);

        return function () {
            var args = arg ? [arg] : []; args.push.apply(args, arguments);
            return fn.apply(context || this, args);
        };
    };

    var dateSerialize = function (date) {
        date = JSON.parse(JSON.stringify({ val: date })).val;
        return date.slice(0);
    };

    ej.merge = function (first, second) {
        if (!first || !second) return;

        Array.prototype.push.apply(first, second);
    };

    var isNull = function (val) {
        return val === undefined || val === null;
    };

    var throwError = function (er) {
        try {
            throw new Error(er);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    };

})(window.jQuery, window.Syncfusion, window.document);;

(function ($, undefined) {

    var $document = $(document);
    // add new event shortcuts
    $.each(("touchstart touchmove touchend " +
		"tap doubletap taphold " +
		"swipe swipeleft swiperight " + "pinch pinchin pinchout pinchstop " +
		"scrollstart scrollstop").split(" "), function (i, name) {

		    $.fn[name] = function (fn) {
		        return fn ? this.bind(name, fn) : this.trigger(name);
		    };

		    // jQuery < 1.8
		    if ($.attrFn) {
		        $.attrFn[name] = true;
		    }
		});

    var isPointer = browserInfo().isMSPointerEnabled,
    isIE11Pointer = browserInfo().pointerEnabled,
    supportTouch = 'ontouchstart' in window,
	scrollEvent = "scroll",
	touchStartEvent = isPointer ? (isIE11Pointer ? "pointerdown" : "MSPointerDown") : (supportTouch ? "touchstart" : "mousedown"),
	touchStopEvent = isPointer ? (isIE11Pointer ? "pointerup" : "MSPointerUp") : (supportTouch ? "touchend" : "mouseup"),
	touchMoveEvent = isPointer ? (isIE11Pointer ? "pointermove" : "MSPointerMove") : (supportTouch ? "touchmove" : "mousemove"),
    touchCancelEvent = isPointer ? (isIE11Pointer ? "pointercancel" : "MSPointerCancel") : (supportTouch ? "touchcancel" : "mouseleave"),
    mouseStartEvent = isPointer ? touchStartEvent : "touchstart mousedown",
    mouseStopEvent = isPointer ? touchStopEvent : "touchend mouseup",
    mouseMoveEvent = isPointer ? touchMoveEvent : "touchmove mousemove";

    function browserInfo() {
        var browser = {}, clientInfo = [],
        browserClients = {
            webkit: /(chrome)[ \/]([\w.]+)/i, safari: /(webkit)[ \/]([\w.]+)/i, msie: /(msie) ([\w.]+)/i,
            opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i, mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };
        for (var client in browserClients) {
            if (browserClients.hasOwnProperty(client)) {
                clientInfo = navigator.userAgent.match(browserClients[client]);
                if (clientInfo) {
                    browser.name = clientInfo[1].toLowerCase();
                    browser.version = clientInfo[2];
                    if (!!navigator.userAgent.match(/Trident\/7\./)) {
                        browser.name = "msie";
                    }
                    break;
                }
            }
        }
        browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
        browser.pointerEnabled = window.navigator.pointerEnabled;
        return browser;
    }
    function initiateCustomEvent(obj, eventType, e) {
        var originalType = e.type;
        e.type = eventType;
        $.event.dispatch.call(obj, e);
        e.type = originalType;
    }
    function copyObject(e, origEvent) {
        if (origEvent) {
            for (prop in origEvent) {
                if (!(prop in e)) {
                    e[prop] = origEvent[prop];
                }
            }
        }
    }
    $.event.special.ejtouchmove = {
        setup: function () {
            var thisObj = this,
				$this = $(thisObj);
            $this.bind(touchStartEvent, startMoveHandler);
            $document.bind(touchStopEvent, clearTouchMoveHandlers);
            function clearTouchMoveHandlers() {
               // $this.unbind(touchMoveEvent, moveHandler)
            }
            var coords = {};
            function startMoveHandler(e) {
                if (!(e.which && e.which !== 1)) {
                    var origTarget = e.target,
					origEvent = e.originalEvent;
                    if (isPointer)
                        coords = { x: origEvent.x, y: origEvent.y };
                    $this.bind(touchMoveEvent, moveHandler);
                }
            }
            function moveHandler(e) {
                if (!(e.which && e.which !== 1)) {
                    var origTarget = e.target,
					origEvent = e.originalEvent;
                    copyObject(e, e.originalEvent);
                    if (!isPointer || !coords || (Math.abs(coords.x - origEvent.x) > 10 || Math.abs(coords.y - origEvent.y) > 10 && isPointer))
                        initiateCustomEvent(thisObj, "ejtouchmove", e);
                }
            }
        }
    };
    function touchObj(e) {
        return e.originalEvent.touches ?
					e.originalEvent.touches[0] : isPointer ? e.originalEvent : e;
    }
    // handles swipeup and swipedown
    $.event.special.swipeupdown = {
        setup: function () {
            var thisObj = this, $this = $(thisObj);
            checkMsieTouch($this);
            $this.bind(touchStartEvent, function (e) {
                var _startevent = e;
                var data = touchObj(e),
                            startPoint = {
                                time: (new Date).getTime(),
                                coords: [data.pageX, data.pageY],
                                origin: $(e.target)
                            },
                            stopPoint;
                function moveHandler(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (!startPoint) return;
                    var data = touchObj(e);
                    stopPoint = {
                        time: (new Date).getTime(),
                        coords: [data.pageX, data.pageY]
                    };
                    if (Math.abs(startPoint.coords[1] - stopPoint.coords[1]) > 10) e.preventDefault();
                }

                $this
                            .bind(touchMoveEvent, moveHandler)
                            .one(touchStopEvent, function (e) {
                                e.preventDefault();
                                $this.unbind(touchMoveEvent, moveHandler);
                                if (startPoint && stopPoint) {
                                    if (stopPoint.time - startPoint.time < 1000 &&
                                    Math.abs(startPoint.coords[1] - stopPoint.coords[1]) > 30 &&
                                    Math.abs(startPoint.coords[0] - stopPoint.coords[0]) < 75) {
                                        var _addDetails = { time: stopPoint.time - startPoint.time, _isSwipe: true, _isDelta: true, stopPoint: stopPoint };
                                        var _options = _getOptions(e, _addDetails, _startevent);

                                        startPoint.origin
                                        .trigger($.extend(true, { type: "swipeupdown" }, _options))
                                        .trigger($.extend(true, { type: startPoint.coords[1] > stopPoint.coords[1] ? "swipeup" : "swipedown" }, _options));
                                    }
                                }
                                startPoint = stopPoint = undefined;
                            });
            });
        }
    };
    $.event.special.scrollstart = {
        isEnabled: true,
        setup: function () {
            var thisObj = this, $this = $(thisObj), scrolling, timer;
            function trigger(e, scrollState) {
                scrolling = scrollState;
                initiateCustomEvent(thisObj, scrolling ? "scrollstart" : "scrollstop", e);
            }
            $this.bind(scrollEvent, function (e) {
                if (!$.event.special.scrollstart.isEnabled) return;
                if (!scrolling) trigger(e, true);
                clearTimeout(timer);
                timer = setTimeout(function () {
                    trigger(e, false);
                }, 250);
            });
        }
    };

    // also handles doubletap, taphold
    $.event.special.tap = {
        doubleTapThreshold: 500,
        tapholdThreshold: 750,
        canDoubleTap: function (d) {
            return ((getTimeSpan() - d.doubleTapStartTime) <= $.event.special.tap.doubleTapThreshold);
        },
        setup: function () {
            var thisObj = this, $this = $(thisObj), d = $this.data();
            checkMsieTouch($this);
            d.isDoubleTapWait = false;
            d.stopProcess = false;
            d.preTouchend = null;
            d.preTouchstart = null;

            $this.bind(mouseStartEvent, function (event) {
                d = $this.data();
                d.startTime = getTimeSpan();
                if (!d.isDoubleTapWait) d.doubleTapStartTime = d.startTime;
                if (event.type == "touchstart") d.preTouchstart = d.startTime;
                // checked mousedown event arrives within 300'ms after the touchend completes
                if (event.type == "mousedown" && (d.startTime - d.preTouchend < 300 || d.startTime - d.preTouchstart < 30))
                    d.stopProcess = true;
                else d.stopProcess = false;

                var origTarget = event.currentTarget,
					origEvent = event.originalEvent,
					timer;

                function clearTapHandlers() {
                    clearTimeout(timer);

                    $this.unbind(mouseStopEvent, clickHandler);
                    $this.unbind(touchCancelEvent, clearTapHandlers);
                    $document.unbind(mouseMoveEvent, touchMoveAction);
                }
                function touchMoveAction(e) {
                    var coor1 = e, coor2 = event;
                    if (isPointer) coor1 = e.originalEvent, coor2 = event.originalEvent;
                    else if (e.type == "touchmove" && event.type == "touchstart")
                        coor1 = e.originalEvent.changedTouches[0],
                        coor2 = event.originalEvent.changedTouches[0];
                    if (!(coor1.pageX == coor2.pageX && coor1.pageY == coor2.pageY))
                        clearTapHandlers();
                }
                function clickHandler(e) {
                    if (e.type == "touchend") d.preTouchend = getTimeSpan();
                    clearTapHandlers();

                    // ONLY trigger a 'tap' event if the startPoint target is
                    // the same as the stopPoint target.
                    if (origTarget === e.currentTarget) {
                        initiateCustomEvent(thisObj, "tap", $.extend(_getBaseOptions(e), {
                            time: getTimeSpan() - d.startTime
                        }));

                        if (d.isDoubleTapWait && $.event.special.tap.canDoubleTap(d)) {
                            d.isDoubleTapWait = false;

                            initiateCustomEvent(thisObj, "doubletap", $.extend(_getBaseOptions(e), {
                                time: getTimeSpan() - d.doubleTapStartTime
                            }));
                        }
                        else {
                            if (d.isDoubleTapWait) {
                                d.isDoubleTapWait = false;
                                d.doubleTapStartTime = d.startTime;
                            }
                            if ($.event.special.tap.canDoubleTap(d)) {
                                d.isDoubleTapWait = true;
                            }
                        }
                    }
                }

                if (!(event.which && event.which !== 1) && !d.stopProcess) {

                    $this.bind(mouseStopEvent, clickHandler);
                    $this.bind(touchCancelEvent, clearTapHandlers);
                    $document.bind(mouseMoveEvent, touchMoveAction);

                    timer = setTimeout(function () {
                        if (d.isDoubleTapWait) d.isDoubleTapWait = false;
                        initiateCustomEvent(thisObj, "taphold", $.extend(_getBaseOptions(event), {
                            options: origEvent,
                            time: getTimeSpan() - d.startTime
                        }));

                    }, $.event.special.tap.tapholdThreshold);
                }
                else if (d.stopProcess) d.stopProcess = false;
            });
        }
    };    
    $.event.special.swipe = {
        scrollSupression: 10,
        duration: 1000,
        horizontalDistance: 30,
        verticalDistance: 75,
        pointers: window.navigator.msPointerEnabled,
        startPoint: function (e) {
            var data = touchObj(e);
            return {
                time: (new Date()).getTime(),
                coords: [data.pageX, data.pageY],
                origin: $(e.target)
            };
        },
        stopPoint: function (e) {
            var data = touchObj(e);
            return {
                time: (new Date()).getTime(),
                coords: [data.pageX, data.pageY]
            };
        },
        handleSwipe: function (startPoint, stopPoint, e, _startevent) {

            if (stopPoint.time - startPoint.time < $.event.special.swipe.duration &&
				Math.abs(startPoint.coords[0] - stopPoint.coords[0]) > $.event.special.swipe.horizontalDistance &&
				Math.abs(startPoint.coords[1] - stopPoint.coords[1]) < $.event.special.swipe.verticalDistance) {

                var _addDetails = { time: stopPoint.time - startPoint.time, _isSwipe: true, _isDelta: true, stopPoint: stopPoint };
                var _options = _getOptions(e, _addDetails, _startevent);

                startPoint.origin.trigger($.extend(true, { type: "swipe" }, _options))
					.trigger($.extend(true,
                    { type: startPoint.coords[0] > stopPoint.coords[0] ? "swipeleft" : "swiperight" }, _options));
            }
        },

        setup: function () {
            var thisObj = this, $this = $(thisObj);
            checkMsieTouch($this);

            $this.bind(touchStartEvent, function (e) {
                var startPoint = $.event.special.swipe.startPoint(e),
					stopPoint;
                var _startevent = e;
                $(e.target).data('_dataTouchStart', { event: e, _now: new Date().getTime() });

                function moveHandler(e) {
                    if (!startPoint) return;
                    stopPoint = $.event.special.swipe.stopPoint(e);
                    if (Math.abs(startPoint.coords[0] - stopPoint.coords[0]) > $.event.special.swipe.scrollSupression) e.preventDefault();
                }

                $this.bind(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
					    $this.unbind(touchMoveEvent, moveHandler);
					    if (startPoint && stopPoint) {
					        $.event.special.swipe.handleSwipe(startPoint, stopPoint, e, _startevent);
					    }
					    startPoint = stopPoint = undefined;
					});
            });
        }
    };
    // also handles pinchin, pinchout
    $.event.special.pinch = {
        distance: function (e) {
            if (e.originalEvent.touches.length < 2) return null;
            return $.event.special.pinch._getdistance(e.originalEvent.touches[0], e.originalEvent.touches[1]);
        },
        _getdistance: function (coor1, coor2) {
            return Math.sqrt((coor1.pageX - coor2.pageX) * (coor1.pageX - coor2.pageX) +
                (coor1.pageY - coor2.pageY) * (coor1.pageY - coor2.pageY));
        },
        setup: function () {
            var thisObj = this, $this = $(thisObj);
            checkMsieTouch($this);
            $this.bind(touchStartEvent, function (e) {
                var _startevent = e;
                if (e.originalEvent.touches && e.originalEvent.touches.length >= 2) {
                    var startPoint = $.event.special.pinch.distance(e), stopPoint, minDistance = 5;

                    var _pinchDistance = startPoint, moveEvent;
                    var _options = _getOptions(e, { _isPinch: true, _pinchDistance: _pinchDistance }, _startevent);

                    $(e.target).trigger($.extend(true, { type: "pinch" }, _options));

                    function moveHandler(e) {
                        moveEvent = e;
                        stopPoint = $.event.special.pinch.distance(e) || null;
                        if (startPoint && stopPoint && Math.abs(startPoint - stopPoint) > minDistance) {

                            $(e.target).trigger($.extend(true,
                                { type: startPoint > stopPoint ? "pinchin" : "pinchout" }, _getOptions(e,
                                { _isPinch: true, _pinchDistance: _pinchDistance }, _startevent)));

                            startPoint = stopPoint;
                        }
                    }

                    $this.bind(touchMoveEvent, moveHandler)
                        .one(touchStopEvent, function () {
                            $this.unbind(touchMoveEvent, moveHandler);
                            $(e.target).trigger($.extend(true, { type: "pinchstop" }, _getOptions(moveEvent,
                                { _isPinch: true, _pinchDistance: stopPoint }, _startevent)));
                            startPoint = stopPoint = undefined;
                        });
                }
            });
        }
    };
    //  handles touchdrag, touchdrag
    $.event.special.touchdrag = {

        setup: function () {
            var thisObj = this, $this = $(thisObj);
            checkMsieTouch($this);

            $this.bind(touchStartEvent, function (e) {

                var startPoint = touchObj(e),
					stopPoint;
                var _startevent = e;
                $(e.target).data('_dataTouchStart', { event: e, _now: new Date().getTime() });

                function moveHandler(e) {
                    if (!startPoint) {
                        return;
                    }
                    stopPoint = touchObj(e);

                    if ($.event.special.pinch._getdistance(startPoint, stopPoint) > 5)
                        $(e.target).trigger($.extend(true, { type: "touchdrag" },
                            _getOptions(e, { _isdrag: true, stopPoint: stopPoint, _isDelta: true }, _startevent)));
                }

                $this.bind(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
					    $this.unbind(touchMoveEvent, moveHandler);
					    startPoint = stopPoint = undefined;
					});
            });
        }
    };
    function _getBaseOptions(e) {
        var _pointer = isPointer ? e.originalEvent.pointerType : (!e.originalEvent.touches ? "mouse" : "touch")
        var pointerType = (isPointer && isIE11Pointer == undefined) ? (_pointer == 4 ? "mouse" : "touch") : _pointer;
        e["pointerType"] = pointerType;
        if (e.type != "mousedown" && e.type != "mouseup") {
            copyObject(e, e.originalEvent);
        }
        return e;
    }
    function _getOptions(e, _details, _startevent) {
        var _distance, _time, _scale, _iDelta = {}, _startXY, _endXY;
        if (_startevent) {
            var coor;
            if (!_startevent.originalEvent.touches) coor = [_startevent.originalEvent, e.originalEvent];
            else coor = [_startevent.originalEvent.touches[0], e.originalEvent.changedTouches[0]];

            if (_details._isSwipe || _details._isdrag) {
                _distance = $.event.special.pinch._getdistance(coor[0], coor[1]);
                _time = _details.time;
                _endXY = { pageX: _details.stopPoint.pageX, pageY: _details.stopPoint.pageY };
            }
            else if (_details._isPinch) {
                _distance = $.event.special.pinch.distance(e);
                _time = e.timeStamp - _startevent.timeStamp;
                _scale = _details._pinchDistance;
            }
            if (_details._isDelta) {
                _iDelta._dTime = e.timeStamp - _startevent.timeStamp;
                _iDelta._x = coor[1].pageX - coor[0].pageX;
                _iDelta._y = coor[1].pageY - coor[0].pageY;
            }
        }

        return {
            options: e,
            delta: {
                time: _iDelta._dTime || null,
                X: _iDelta._x || null,
                Y: _iDelta._y || null
            },
            distance: _distance,
            scale: _details._isPinch ? _scale : null,
            time: _time,
            velocity: {
                XY: _distance / _iDelta._dTime || null,
                X: _iDelta._x / _iDelta._dTime || null,
                Y: _iDelta._y / _iDelta._dTime || null
            },
            currentPosition: { pageX: _endXY ? _endXY.pageX : null, pageY: _endXY ? _endXY.pageY : null }
        };
    }

    function getTimeSpan() {
        var now = new Date();
        return now.getTime();
    }
    function checkMsieTouch($this) {
        if (isPointer)
            $this.css("-ms-touch-action", "pinch-zoom").css("touch-action", "pinch-zoom");
    }

    $.each({
        scrollstop: "scrollstart",
        doubletap: "tap",
        taphold: "tap",
        swipeleft: "swipe",
        swiperight: "swipe",
        swipedown: "swipeupdown",
        swipeup: "swipeupdown",
        pinchin: "pinch",
        pinchout: "pinch",
        pinchstop: "pinch"
    }, function (event, sourceEvent) {

        $.event.special[event] = {
            setup: function () {
                $(this).bind(sourceEvent, $.noop);
            }
        };
    });

})(jQuery);;
/**
* @fileOverview Plugin to drag the html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @class ejDraggable
	* @requires jQuery
	* @requires ej.core
	* @classdesc Custom Design for dragging HTML elements.
	* @example 
	* &lt;div  id="dragable" &gt;&lt;/ div &gt; <br> 
	* &lt;script&gt;
	* // Create Dragable
    * $('#dragable').ejDraggable(); 	
	* &lt;/script&gt;
	*/
    ej.widget("ejDraggable", "ej.Draggable", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span", "a"],

        // default model
        defaults: {
            /**		
			* Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
			* @default 'default'
			* @type {string}
			* @example 
			* //To set scope API value during initialization  
			* 	$("#dragable").ejDraggable({ scope: 'default' });				* 
			* @example 
			* //Get or set the scope API, after initialization:<br>
			*	//Gets the scope value  
			*	$("#dragable").ejDraggable('option', 'scope');<br>			
			* @memberof ejDraggable
			* @instance
			*/
            scope: 'default', /*Used to group sets of draggable and droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.*/
            /**		
			* If specified, restricts drag start click to the specified element(s).
			* @default null
			* @type {string}
			* @example 
			* //To set handle API value during initialization  
			* 	$("#dragable").ejDraggable({ handle: null });				* 
			* @example 
			* //Get or set the handle API, after initialization:<br>
			*	//Gets the handle value  
			*	$("#dragable").ejDraggable('option', 'handle');<br>			
			* @memberof ejDraggable
			* @instance
			*/
            handle: null,  /*If specified, restricts drag start click to the specified element(s).*/
            /**		
			* If Drag area is specified.
			* @default false
			* @type {boolean}
			* @example 
			* //To set dragArea API value during initialization  
			* 	$("#dragable").ejDraggable({ dragArea: true });				* 
			* @example 
			* //Get or set the dragArea API, after initialization:<br>
			*	//Gets the dragArea value  
			*	$("#dragable").ejDraggable('option', 'dragArea');<br>			
			* @memberof ejDraggable
			* @instance
			*/
            dragArea: false,
            /**		
            * If clone is specified.
            * @default false
            * @type {boolean}
            * @example 
            * //To set clone API value during initialization  
            * 	$("#dragable").ejDraggable({ clone: true });				* 
            * @example 
            * //Get or set the clone API, after initialization:<br>
            *	//Gets the clone value  
            *	$("#dragable").ejDraggable('option', 'clone');<br>			
            * @memberof ejDraggable
            * @instance
            */
            clone: false,
            /**		
            * Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.
            * @default 1
            * @type {number}
            * @example 
            * //To set distance API value during initialization  
            * 	$("#dragable").ejDraggable({ distance: 1 });				* 
            * @example 
            * //Get or set the distance API, after initialization:<br>
            *	//Gets the distance value  
            *	$("#dragable").ejDraggable('option', 'distance');<br>			
            * @memberof ejDraggable
            * @instance
            */
            distance: 1, /* Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element. */
            /**		
            *Sets the offset of the dragging helper relative to the mouse cursor.
            * @default { top: -1, left: -2 }
            * @type {object}
            * @example 
            * //To set cursorAt API value during initialization  
            * 	$("#dragable").ejDraggable({ cursorAt:  { top: 1, left: -2 } });				* 
            * @example 
            * //Get or set the cursorAt API, after initialization:<br>
            *	//Gets the cursorAt value  
            *	$("#dragable").ejDraggable('option', 'cursorAt');<br>			
            * @memberof ejDraggable
            * @instance
            */
            cursorAt: { top: -1, left: -2 }, /* Sets the offset of the dragging helper relative to the mouse cursor.  */
            /**     
			* Supply a callback function to handle the drag start event as an init option.
			* @event
			* @name ejDraggable#dragStart 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the autocomplete model
			* @param {string}  argument.type returns the name of the event
			* @example 
			* //dragStart event for Draggable
            * $("#dragable").ejDraggable({ 
            *   	dragStart: function(args) {}
            * });      
			* @memberof ejDraggable
			* @instance
			*/
            dragStart: null, /* Supply a callback function to handle the drag start event as an init option. */
            /**     
			* This event is triggered when the mouse is moved during the dragging.
			* @event
			* @name ejDraggable#drag 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the autocomplete model
			* @param {string}  argument.type returns the name of the event
			* @example 
			* //drag event for Draggable
            * $("#dragable").ejDraggable({ 
            *   	drag: function(args) {}
            * });      
			* @memberof ejDraggable
			* @instance
			*/
            drag: null, /* This event is triggered when the mouse is moved during the dragging. */
            /**     
            * This event is triggered when the mouse is moved during the dragging.
            * @event
            * @name ejDraggable#dragStop 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //dragStop event for Draggable
            * $("#dragable").ejDraggable({ 
            *   	dragStop: function(args) {}
            * });      
            * @memberof ejDraggable
            * @instance
            */
            dragStop: null, /* This event is triggered when dragging stops. */
            /**     
            * This event is triggered when dragging events are destroyed.
            * @event
            * @name ejDraggable#destroy 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //destroy event for Draggable
            * $("#dragable").ejDraggable({ 
            *   	destroy: function(args) {}
            * });      
            * @memberof ejDraggable
            * @instance
            */
            destroy: null, /* This event is triggered when dragging events are destroyed. */
            /**     
            * This event is triggered when dragged.
            * @event
            * @name ejDraggable#helper 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //helper event for Draggable
            * $("#dragable").ejDraggable({ 
            *   	helper: function () {
                return $('<div class="e-drag-helper" />').html("draggable").appendTo(document.body);}
            * });      
            * @memberof ejDraggable
            * @instance
            */
            helper: function () {
                return $('<div class="e-drag-helper" />').html("draggable").appendTo(document.body);
            }
        },

        // constructor function
        _init: function () {
            this.handler = function () { },
			this.resizables = {},
			helpers = {};
            this._wireEvents();
        },

        _setModel: function (options) {

        },
        /**
        * destroy in the dragable.
        * @return jQuery
        * @example 
        * &lt; div  id="dragable" &gt; &lt;/div &gt; <br> 
        * &lt;script&gt;
        * // Create dragableObj
        * var dragableObj  = $("#dragable").data("ejDraggable");
        * dragableObj.destroy(); 
        * &lt;/script&gt;
        *@memberof ejDraggable
        * @instance
        */
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            $(document)
                .unbind(ej.eventType.mouseUp, this._destroyHandler)
                .unbind(ej.eventType.mouseUp, this._dragStopHandler)
                .unbind(ej.eventType.mouseMove, this._dragStartHandler)
                .unbind(ej.eventType.mouseMove, this._dragHandler)
                .unbind('selectstart', false);

            // this._raise(e, this.destroy);

            ej.widgetBase.droppables[this.scope] = null;
            //helpers[this.handle] = null;
        },

        _initialize: function (e) {
            var ori = e;
            e.preventDefault();
            e = this._getCoordinate(e);
            this.target = $(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };
            
            $(document).bind(ej.eventType.mouseMove, this._dragStartHandler).bind(ej.eventType.mouseUp, this._destroyHandler);
            if (!this.model.clone) {
                var _offset = this.element.offset();
                this._relXposition = e.pageX - _offset.left;
                this._relYposition = e.pageY - _offset.top;
            }
            $(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
           //return false;
        },
        _setDragArea: function () {
            var _dragElement = $(this.model.dragArea)[0]; if (!_dragElement) return;
            var over = ($(_dragElement).css("overflow") != 'hidden');

            this.dragArea = [
                (parseInt($(_dragElement).css("borderLeftWidth"), 10) || 0) + (parseInt($(_dragElement).css("paddingLeft"), 10) || 0),
                (parseInt($(_dragElement).css("borderTopWidth"), 10) || 0) + (parseInt($(_dragElement).css("paddingTop"), 10) || 0),
                (over ? Math.max(_dragElement.scrollWidth, _dragElement.offsetWidth) : _dragElement.offsetWidth) - (parseInt($(_dragElement).css("borderLeftWidth"), 10) || 0) - (parseInt($(_dragElement).css("paddingRight"), 10) || 0) - this.helper.outerWidth() - this.margins.left - this.margins.right,
                (over ? Math.max(_dragElement.scrollHeight, _dragElement.offsetHeight) : _dragElement.offsetHeight) - (parseInt($(_dragElement).css("borderTopWidth"), 10) || 0) - (parseInt($(_dragElement).css("paddingBottom"), 10) || 0) - this.helper.outerHeight() - this.margins.top - this.margins.bottom
            ];
            this.relativeArea = $(this.model.dragArea);
        },
        _dragStart: function (e) {
            var ori = e;
            e = this._getCoordinate(e);
            
            this.margins = {
                left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                top: (parseInt(this.element.css("marginTop"), 10) || 0),
                right: (parseInt(this.element.css("marginRight"), 10) || 0),
                bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
            };
            this.offset = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.position = this._getMousePosition(ori);
            var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY;
            var distance = Math.sqrt((x * x) + (y * y));

            if (distance >= this.model.distance) {
                var dragTargetElmnt = this.model.handle = this.helper = this.model.helper({ sender: ori, element: this.target });

                //if (!this.model.clone)
                //    this.position.left = this.position.left - (ori.target.offsetWidth / 2);
                //this.position.top = this.position.top - (ori.target.offsetHeight - ori.offsetY);

                if (this.model.dragStart) {
                    var currTarget = null;
                    if (ori.type == 'touchmove') {
                        var coor = ori.originalEvent.changedTouches[0];
                        currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                    }
                    else currTarget = ori.originalEvent.target || ori.target;
                    if (this._trigger("dragStart", { event: ori, element: this.element, target: currTarget })) {
                        this._destroy();
                        return false;
                    }
                }
                if (this.model.dragArea)
                    this._setDragArea();
                
                var pos= dragTargetElmnt.offsetParent().offset();
                $(document).unbind(ej.eventType.mouseMove, this._dragStartHandler).unbind(ej.eventType.mouseUp, this._destroyHandler)
                    .bind(ej.eventType.mouseMove, this._dragHandler).bind(ej.eventType.mouseUp, this._dragStopHandler).bind("selectstart", false);
                ej.widgetBase.droppables[this.model.scope] = {
                    draggable: this.element,
                    helper: dragTargetElmnt.css({ position: 'absolute',  left: (this.position.left-pos.left), top: (this.position.top-pos.top) }),
                    destroy: this._destroyHandler
                }
            }
        },

        _drag: function (e) {
            this.position = this._getMousePosition(e);
            if (this.position.top < 0)
                this.position.top = 0;
            if ($(document).height() < this.position.top)
                this.position.top = $(document).height();
            if ($(document).width() < this.position.left)
                this.position.left = $(document).width();
            var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
            if (this.model.drag) {
                var currTarget = null;
                if (e.type == 'touchmove') {
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                }
                else currTarget = e.originalEvent.target || e.target;
                this._trigger("drag", { event: e, element: this.target, target: currTarget });// Raise the dragging event
            }
            var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
			var pos= helperElement.offsetParent().offset();			 
            helperElement.css({ left: (this.position.left-pos.left) , top: (this.position.top-pos.top)});
        },

        _dragStop: function (e) {
            if (e.type == 'mouseup' || e.type == 'touchend') 
                this._destroy(e);
            if (this.model.dragStop) {
                var currTarget = null;
                if (e.type == 'touchend') {
                    var coor = e.originalEvent.changedTouches[0];
                    currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                }
                else currTarget = e.originalEvent.target || e.target;
                this._trigger("dragStop", { event: e, element: this.target, target: currTarget });// Raise the dragstop event
            }
        },

        _wireEvents: function () {
            this._on(this.element, ej.eventType.mouseDown, this._initialize);
            this._dragStartHandler = $.proxy(this._dragStart, this);
            this._destroyHandler = $.proxy(this._destroy, this);
            this._dragStopHandler = $.proxy(this._dragStop, this);
            this._dragHandler = $.proxy(this._drag, this);
        },
        _getMousePosition: function (event) {
            event = this._getCoordinate(event);
            var pageX = this.model.clone ? event.pageX : event.pageX - this._relXposition;
            var pageY = this.model.clone ? event.pageY : event.pageY - this._relYposition;
            if (this.dragArea) {
                if (this.relativeArea) {
                    var co = this.relativeArea.offset();
                    _area = [this.dragArea[0] + co.left, this.dragArea[1] + co.top, this.dragArea[2] + co.left, this.dragArea[3] + co.top];
                }
                else {
                    _area = this.dragArea;
                }
                if (event.pageX - this.margins.left < _area[0]) pageX = _area[0] + this.margins.left;
                if (event.pageY - this.margins.top < _area[1]) pageY = _area[1] + this.margins.top;
                if (event.pageX - this.margins.left > _area[2]) pageX = _area[2] + this.margins.left;
                if (event.pageY - this.margins.top > _area[3]) pageY = _area[3] + this.margins.top;
            }
            return { left: pageX - this.margins.left - this.model.cursorAt.left, top: pageY - this.margins.top - this.model.cursorAt.top };
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        }
    });

})(jQuery, Syncfusion);

/**
* @fileOverview Plugin to drop the html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
   * @namespace ej
   * @class ejDroppable
   * @requires jQuery
   * @requires ej.core
   * @classdesc Custom Design for droping HTML elements.
   * @example 
   * &lt;div  id="dropable" &gt;&lt;/ div &gt; <br> 
   * &lt;script&gt;
   * // Create Dragable
   * $('#dropable').ejDroppable(); 	
   * &lt;/script&gt;
   */
    // Example plugin creation code
    // sfSample is the plugin name 
    // "ej.Sample" is "namespace.className" will hold functions and properties

    ej.widget("ejDroppable", "ej.Droppable", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span", "a"],

        // default model
        defaults: {
            /**		
			* Used to accept the droppable items.
			* @default null
			* @type {object}
			* @example 
			* //To set scope API value during initialization  
			* 	$("#droppable").ejDroppable({ accept: null });				* 
			* @example 
			* //Get or set the accept API, after initialization:<br>
			*	//Gets the accept value  
			*	$("#droppable").ejDroppable('option', 'accept');<br>			
			* @memberof ejDroppable
			* @instance
			*/
            accept: null,
            /**		
			* Used to group sets of droppable items, in addition to droppable's accept option. A draggable with the same scope value as a droppable will be accepted by the droppable.
			* @default 'default'
			* @type {string}
			* @example 
			* //To set scope API value during initialization  
			* 	$("#droppable").ejDroppable({ scope: 'default' });				* 
			* @example 
			* //Get or set the scope API, after initialization:<br>
			*	//Gets the scope value  
			*	$("#droppable").ejDroppable('option', 'scope');<br>			
			* @memberof ejDroppable
			* @instance
			*/
            scope: 'default',
            /**     
			* This event is triggered when the mouse up is moved during the dragging.
			* @event
			* @name ejDroppable#drop 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the autocomplete model
			* @param {string}  argument.type returns the name of the event
			* @example 
			* //drop event for Droppable
            * $("#droppable").ejDroppable({ 
            *   	drop: function(args) {}
            * });      
			* @memberof ejDroppable
			* @instance
			*/
            drop: null,
            /**     
            * This event is triggered when the mouse  is moved over.
            * @event
            * @name ejDroppable#over 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //drop event for Droppable
            * $("#droppable").ejDroppable({ 
            *   	over: function(args) {}
            * });      
            * @memberof ejDroppable
            * @instance
            */
            over: null,
            /**     
            * This event is triggered when the mouse  is moved out.
            * @event
            * @name ejDroppable#out 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //drop event for Droppable
            * $("#droppable").ejDroppable({ 
            *   	out: function(args) {}
            * });      
            * @memberof ejDroppable
            * @instance
            */
            out: null
        },

        // constructor function
        _init: function () {
            if (this.model.accept) {
                $(this.element).delegate(this.accept, 'mouseenter', $.proxy(this._over, this))
							.delegate(this.accept, 'mouseup', $.proxy(this._drop, this))
							.delegate(this.accept, 'mouseleave', $.proxy(this._out, this));
            }
            else {
                $(this.element).bind('mouseup', $.proxy(this._drop, this));
                $(this.element).bind("mouseenter", $.proxy(this._over, this));
                $(this.element).bind("mouseleave", $.proxy(this._out, this));
            }
            this._on($(document), 'touchend', this._drop);
        },

        _setModel: function (options) {

        },
        /**
        * destroy in the Droppable.
        * @return jQuery
        * @example 
        * &lt; div  id="droppable" &gt; &lt;/div &gt; <br> 
        * &lt;script&gt;
        * // Create droppabaleObj
        * var droppabaleObj  = $("#droppable").data("ejDroppable");
        * droppabaleObj.destroy(); 
        * &lt;/script&gt;
        *@memberof ejDroppable
        * @instance
        */
        // all events bound using this._on will be unbind automatically
        _destroy: function () {

        },

        _over: function (e) {
            this._trigger("mouseover", e);  
        },
        _out: function (e) {
            this._trigger("mouseout", e);  
        },
        _drop: function (e) {
            var drag = ej.widgetBase.droppables[this.model.scope];
            var isDragged = !ej.isNullOrUndefined(drag.helper) && drag.helper.is(":visible");
            var area = this._isDropArea(e);
            if (drag && !ej.isNullOrUndefined(this.model.drop) && isDragged && area.canDrop) {
                this.model.drop($.extend(e, { dropTarget: area.target }, true), drag);
            }
        },
        _isDropArea: function (e) {
            // check for touch devices only
            var area = { canDrop: true, target: $(e.target) };
            if (e.type == "touchend") {
                var coor = e.originalEvent.changedTouches[0], _target;
                _target = document.elementFromPoint(coor.pageX, coor.pageY);
                area.canDrop = false;
                var _parents = $(_target).parents();

                for (var i = 0; i < this.element.length; i++) {
                    if ($(_target).is($(this.element[i]))) area = { canDrop: true, target: $(_target) };
                    else for (var j = 0; j < _parents.length; j++) {
                        if ($(this.element[i]).is($(_parents[j]))) {
                            area = { canDrop: true, target: $(_target) };
                            break;
                        }
                    }
                    if (area.canDrop) break;
                }
            }
            return area;
        }
    });

})(jQuery, Syncfusion);

/**
* @fileOverview Plugin to resize the Html elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
    * @namespace ej
    * @class ejResizable
    * @requires jQuery
    * @requires ej.core
    * @classdesc Custom Design for resizing HTML elements.
    * @example 
    * &lt;div  id="resizing" &gt;&lt;/ div &gt; <br> 
    * &lt;script&gt;
    * // Create resizing
    * $('#resizing').ejResizable(); 	
    * &lt;/script&gt;
    */
    ej.widget("ejResizable", "ej.resizable", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span", "a"],

        // default model
        defaults: {
            /**		
           * Used to group sets of resizeable items.
           * @default 'default'
           * @type {string}
           * @example 
           * //To set scope API value during initialization  
           * 	$("#resizing").ejResizable({ scope: 'default' });				* 
           * @example 
           * //Get or set the scope API, after initialization:<br>
           *	//Gets the scope value  
           *	$("#resizing").ejResizable('option', 'scope');<br>			
           * @memberof ejResizable
           * @instance
           */
            scope: 'default',
            /**		
			* If specified, restricts resize start click to the specified element(s).
			* @default null
			* @type {string}
			* @example 
			* //To set handle API value during initialization  
			* 	$("#resizing").ejResizable({ handle: null });				* 
			* @example 
			* //Get or set the handle API, after initialization:<br>
			*	//Gets the handle value  
			*	$("#resizing").ejResizable('option', 'handle');<br>			
			* @memberof ejResizable
			* @instance
			*/
            handle: null,
            /**		
            * Distance in pixels after mousedown the mouse must move before resizing should start. This option can be used to prevent unwanted drags when clicking on an element.
            * @default 1
            * @type {number}
            * @example 
            * //To set distance API value during initialization  
            * 	$("#resizing").ejResizable({ distance: 1 });				* 
            * @example 
            * //Get or set the distance API, after initialization:<br>
            *	//Gets the distance value  
            *	$("#resizing").ejResizable('option', 'distance');<br>			
            * @memberof ejResizable
            * @instance
            */
            distance: 1,
            /**		
            *Sets the max height for resizing
            * @default null
            * @type {number}
            * @example 
            * //To set maxHeight API value during initialization  
            * 	$("#resizing").ejResizable({ maxHeight: null });				* 
            * @example 
            * //Get or set the maxHeight API, after initialization:<br>
            *	//Gets the maxHeight value  
            *	$("#resizing").ejResizable('option', 'maxHeight');<br>			
            * @memberof ejResizable
            * @instance
            */
            maxHeight: null,
            /**		
            *Sets the max width for resizing
            * @default null
            * @type {number}
            * @example 
            * //To set maxWidth API value during initialization  
            * 	$("#resizing").ejResizable({ maxWidth: null });				* 
            * @example 
            * //Get or set the maxWidth API, after initialization:<br>
            *	//Gets the maxWidth value  
            *	$("#resizing").ejResizable('option', 'maxWidth');<br>			
            * @memberof ejResizable
            * @instance
            */
            maxWidth: null,
            /**		
            *Sets the min Height for resizing
            * @default 10
            * @type {number}
            * @example 
            * //To set minHeight API value during initialization  
            * 	$("#resizing").ejResizable({ minHeight: null });				* 
            * @example 
            * //Get or set the minHeight API, after initialization:<br>
            *	//Gets the minHeight value  
            *	$("#resizing").ejResizable('option', 'minHeight');<br>			
            * @memberof ejResizable
            * @instance
            */
            minHeight: 10,
            /**		
            *Sets the min Width for resizing
            * @default 10
            * @type {number}
            * @example 
            * //To set minWidth API value during initialization  
            * 	$("#resizing").ejResizable({ minWidth: null });				* 
            * @example 
            * //Get or set the minWidth API, after initialization:<br>
            *	//Gets the minWidth value  
            *	$("#resizing").ejResizable('option', 'minWidth');<br>			
            * @memberof ejResizable
            * @instance
            */
            minWidth: 10,
            /**		
            *Sets the offset of the resizing helper relative to the mouse cursor.
            * @default { top: -1, left: -2 }
            * @type {object}
            * @example 
            * //To set cursorAt API value during initialization  
            * 	$("#resizing").ejResizable({ cursorAt:  { top: 1, left: -2 } });				* 
            * @example 
            * //Get or set the cursorAt API, after initialization:<br>
            *	//Gets the cursorAt value  
            *	$("#resizing").ejResizable('option', 'cursorAt');<br>			
            * @memberof ejResizable
            * @instance
            */
            cursorAt: { top: 1, left: 1 },
            /**     
            * This event is triggered when the resizing is start.
            * @event
            * @name ejResizable#resizeStart 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //resizeStart event for Resizable
            * $("#resizing").ejResizable({ 
            *   	resizeStart: function(args) {}
            * });      
            * @memberof ejResizable
            * @instance
            */
            resizeStart: null,
            /**     
            * This event is triggered when the resizing in progress.
            * @event
            * @name ejResizable#resize 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //resizeStart event for Resizable
            * $("#resizing").ejResizable({ 
            *   	resize: function(args) {}
            * });      
            * @memberof ejResizable
            * @instance
            */
            resize: null,
            /**     
            * This event is triggered when the resizing is stop.
            * @event
            * @name ejResizable#resizeStop 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
            * @example 
            * //resizeStop event for Resizable
            * $("#resizing").ejResizable({ 
            *   	resizeStop: function(args) {}
            * });      
            * @memberof ejResizable
            * @instance
            */
            resizeStop: null,
            /**     
           * This event is triggered when the widget destroys.
           * @event
           * @name ejResizable#resizeStop 	
           * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
           * @param {object}  argument.model returns the autocomplete model
           * @param {string}  argument.type returns the name of the event
           * @example 
           * //destroy event for Resizable
           * $("#resizing").ejResizable({ 
           *   	destroy: function(args) {}
           * });      
           * @memberof ejResizable
           * @instance
           */
            destroy: null,
            /**     
           * This event is triggered when resized.
           * @event
           * @name ejResizable#helper 	
           * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
           * @param {object}  argument.model returns the autocomplete model
           * @param {string}  argument.type returns the name of the event
           * @example 
           * //helper event for Resizable
           * $("#resizing").ejResizable({ 
           *   	helper: function () {
               return $('<div class="e-resize-helper" />').html("resizable").appendTo(document.body);}
           * });      
           * @memberof ejResizable
           * @instance
           */
            helper: function () {
                return $('<div class="e-resize-helper" />').html("resizable").appendTo(document.body);
            }
        },
        // constructor function
        _init: function () {
            this.target = this.element;
            if (this.handle != null) {
                $(this.target).delegate(this.handle, ej.eventType.mouseDown, $.proxy(this._mousedown, this))
                .delegate(this.handle, 'resizestart', this._blockDefaultActions);
            }
            else {
                //$(this.target).bind("mousedown", $.proxy(this._mousedown, this));
                $(this.target).bind("mouseover", $.proxy(this._mouseover, this));
                // .bind("resizestart", $.proxy(this, $.Handler(this._init, this)));
            }

            this._resizeStartHandler = $.proxy(this._resizeStart, this);
            this._destroyHandler = $.proxy(this._destroy, this);
            this._resizeStopHandler = $.proxy(this._resizeStop, this);
            this._resizeHandler = $.proxy(this._resize, this);
        },
        _mouseover: function (e) {
            if ($(e.target).hasClass("e-resizable")) {
                $(e.target).css({ cursor: "se-resize" });
                $(this.target).bind(ej.eventType.mouseDown, $.proxy(this._mousedown, this));
            }
            else {
                $(this.target).unbind(ej.eventType.mouseDown);
                $(this.target).css({ cursor: "" });
            }
        },
        _blockDefaultActions: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.preventDefault) e.preventDefault();
            if (e.stopPropagation) e.stopPropagation();
        },
        _setModel: function (options) {

        },
        _mousedown: function (e) {
            var ori = e;
            e = this._getCoordinate(e);
            this.target = $(ori.currentTarget);
            this._initPosition = { x: e.pageX, y: e.pageY };

            $(document).bind(ej.eventType.mouseMove, this._resizeStartHandler).bind(ej.eventType.mouseUp, this._destroyHandler);

            $(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
            return false;
        },

        _resizeStart: function (e) {
            if ($(e.target).hasClass("e-resizable")) {
                e = this._getCoordinate(e);
                var x = this._initPosition.x - e.pageX, y = this._initPosition.y - e.pageY;
                var distance = Math.sqrt((x * x) + (y * y));
                if (distance >= this.model.distance) {
                    if (this.model.resizeStart != null)
                        this.model.resizeStart({ element: this.target });  // Raise the resize start event
                    var resizeTargetElmnt = this.model.helper({ element: this.target });
                    var pos = this.getElementPosition(resizeTargetElmnt);
                    $(document).unbind(ej.eventType.mouseMove, this._resizeStartHandler).unbind(ej.eventType.mouseUp, this._destroyHandler)
                        .bind(ej.eventType.mouseMove, this._resizeHandler).bind(ej.eventType.mouseUp, this._resizeStopHandler).bind("selectstart", false);
                    ej.widgetBase.resizables[this.scope] = {
                        resizable: this.target,
                        helper: resizeTargetElmnt.css({ width: (e.pageX - pos.left) + this.model.cursorAt.left, height: (e.pageY - pos.top) + this.model.cursorAt.top }),
                        destroy: this._destroyHandler
                    }
                }
            }
        },

        _resize: function (e) {
            e = this._getCoordinate(e);
            if (this.model.resize != null)
                this.model.resize({ element: this.target });  // Raise the drag start event
            var pos = this.getElementPosition(ej.widgetBase.resizables[this.scope].helper);
            var _width = (e.pageX - pos.left) + this.model.cursorAt.left;
            var _height = (e.pageY - pos.top) + this.model.cursorAt.top;
            if (_width < this.model.minWidth)
                _width = this.model.minWidth;
            if (_height < this.model.minHeight)
                _height = this.model.minHeight;
            if (this.model.maxHeight != null && _height > this.model.maxHeight)
                _height = this.model.maxHeight;
            if (this.model.maxWidth != null && _width > this.model.maxWidth)
                _width = this.model.maxWidth;
            ej.widgetBase.resizables[this.scope].helper.css({ width: _width, height: _height });
        },

        _resizeStop: function (e) {
            if (this.model.resizeStop != null)
                this.model.resizeStop({ element: this.target });  // Raise the resize stop event
            if (e.type == 'mouseup' || e.type == 'touchend')
                this._destroy(e);
        },
        /**
        * destroy in the Resizable.
        * @return jQuery
        * @example 
        * &lt; div  id="resizing" &gt; &lt;/div &gt; <br> 
        * &lt;script&gt;
        * // Create resizingObj
        * var resizingObj  = $("#resizing").data("ejResizable");
        * resizingObj.destroy(); 
        * &lt;/script&gt;
        *@memberof ejResizable
        * @instance
        */
        _destroy: function (e) {
            $(document)
                .unbind(ej.eventType.mouseUp, this._destroyHandler)
                .unbind(ej.eventType.mouseUp, this._resizeStopHandler)
                .unbind(ej.eventType.mouseMove, this._resizeStartHandler)
                .unbind(ej.eventType.mouseMove, this._resizeHandler)
                .unbind('selectstart', false);

            // this._raise(e, this.destroy);

            ej.widgetBase.resizables[this.scope] = null;
            //helpers[this.handle] = null;
        },

        getElementPosition: function (elemnt) {
            if (elemnt != null && elemnt.length > 0)
                return {
                    left: elemnt[0].offsetLeft,
                    top: elemnt[0].offsetTop
                };
            else
                return null;
        },
        _getCoordinate: function (evt) {
            var coor = evt;
            if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend")
                coor = evt.originalEvent.changedTouches[0];
            return coor;
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, window, undefined) {
    'use strict';
    /**
* @namespace ej
* @class ejScroller
* @requires jQuery
* @requires ej.core.js
* @requires ej.scroller.js
* @requires ej.draggable.js
* @classdesc Custom Design for Html Scroller control.
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
		*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
         *&lt;b&gt;A controller*&lt;/b&gt;  can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
         It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt;     
*&lt;/div&gt; <br> 
* &lt;script&gt;
* // Create Scroller
* $('#scrollcontent').ejScroller(); 	
* &lt;/script&gt;
*/
    ej.widget("ejScroller", "ej.Scroller", {
        defaults: {
            /**		
* Specifies the height of Scroll panel and scrollbars.
* @default 250
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set height API value during initialization  
* 	$("#scrollcontent").ejScroller({height: 200 });	
* &lt;/script&gt;
 * @memberof ejScroller
* @instance
*/
            height: 250,
            autoHide: false,
            /**		
* Specifies the width of Scroll panel and scrollbars.
* @default 0
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set width API value during initialization
* 	$("#scrollcontent").ejScroller({width: 500 });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            width: 0,
            /**		
* While press on the arrow key the scrollbar position added to the given pixel value.
* @default 57
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set scrollOneStepBy API value during initialization
* 	$("#scrollcontent").ejScroller({scrollOneStepBy: 40 });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            scrollOneStepBy: 57,
            /**		
* Specifies the button height for vertical scrollbar; for horizontal scrollbar specifies the width of the button in the scrollbar.
* @default 18
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set Button Size of Scroller during initialization
* 	$("#scrollcontent").ejScroller({buttonSize: 20 });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            buttonSize: 18,
            /**		
* The Scroller content and scrollbars move left with given value. 
* @default 0
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set Scroll left API during initialization
* 	$("#scrollcontent").ejScroller({scrollLeft: 40 });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            scrollLeft: 0,
            /**		
* The Scroller content and scrollbars move to top position with specified value. 
* @default 0
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set Scroll top API during initialization
* 	$("#scrollcontent").ejScroller({scrollTop: 40 });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            scrollTop: 0,
            /**		
* Indicates the target area to which scroller have to appear. 
* @default null
* @type {string}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //To set Scroller for the specified target panel during initialization
* 	$("#scrollcontent").ejScroller({targetPane: "contentarea" });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            targetPane:null,
            /**		
* Set the Scrollbar height and width for this API; if vertical scrollbar,apply the width else apply the height.
* @default 18
* @type {number}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //Enable scrollerSize on initialization 
* 	//To set scroller Size API value 
* 	$("#scrollcontent").ejScroller({scrollerSize: 20 });	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
            scrollerSize: 18,
            /**		
* Save current model value to browser cookies for state maintanence. While refresh the page Rating control values are retained.  
* @default false
* @type {boolean}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //Enable enablePersistence API on initialization
* 	$("#scrollcontent").ejScroller({enablePersistence: true });
* &lt;/script&gt;	
* @memberof ejScroller
* @instance
*/
            enablePersistence: false,
            /**		
* Indicates the Right to Left direction to scroller  
* @default undefined
* @type {boolean}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //Enable enableRTL API on initialization
* 	$("#scrollcontent").ejScroller({enableRTL: true });	
* &lt;/script&gt;	
* @memberof ejScroller
* @instance
*/
            enableRTL: undefined,
            /**		
* Enables or Disbale the touch Scroll  
* @default true
* @type {boolean}
* @example 

* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //Disable Touch Scroll API on initialization
* 	$("#scrollcontent").ejScroller({enableTouchScroll: false });	
* &lt;/script&gt;	
* @memberof ejScroller
* @instance
*/
            enableTouchScroll: true,
            /**		
* Specifies to enable or disable the scroller  
* @default true
* @type {boolean}
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
     * representation of information from the user's interaction with it.
     * The model consists of application data, business rules, logic, and functions. A view can be any
     * output representation of data, such as a chart or a diagram. Multiple views of the same data 
     * are possible, such as a bar chart for management and a tabular view for accountants. 
     *The controller mediates input, converting it to commands for the model or view.The central 
     *ideas behind MVC are code reusability and n addition to dividing the application into three 
     *kinds of components, the MVC design defines the interactions between them.</p>
     *&lt;ul&gt;
      *&lt;li&gt;
     *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
     *It can also send commands to the model to update the model's state (e.g., editing a document).
     *&lt;/li&gt;
     *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //Enable or disable scroller API on initialization
* 	$("#scrollcontent").ejScroller({enabled: true });	
* &lt;/script&gt;	
* @memberof ejScroller
* @instance
*/
            enabled: true,
/**     
* Fires when Scroller control is created.
* @event
* @name ejScroller#create	
* @param {Object} argument Event parameters from scroller     
* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
* @param {object}  argument.model returns the scroller model
* @param {string}  argument.type returns the name of the event.
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //create event for scroller
* $("#scrollcontent").ejScroller({
*    create: function (args) {}
* });   
* &lt;/script&gt;	  
* @memberof ejScroller
* @instance
*/
            create: null,
            /**     
* Fires when Scroller control is destroyed.
* @event
* @name ejScroller#destroy	
* @param {Object} argument Event parameters from scroller     
* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
* @param {object}  argument.model returns the scroller model
* @param {string}  argument.type returns the name of the event.
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* //destroy event for scroller
* $("#scrollcontent").ejScroller({
*    destroy: function (args) {}
* });  
* &lt;/script&gt;	    
* @memberof ejScroller
* @instance
*/
            destroy: null
        },
        validTags: ["div"],
        type: "transclude",
        /**
* Specify the data types for default properties 
* @private
*/
        dataTypes: {
            buttonSize: "number",
            scrollOneStepBy: "number"
        },
        observables: ["scrollTop", "scrollLeft"],
        scrollTop: ej.util.valueFunction("scrollTop"),
        scrollLeft: ej.util.valueFunction("scrollLeft"),
        /**
* Specifies the keys used for keyboard navigation. 
* @private
*/
        keyConfigs: {
            up: "38",
            down: "40",
            left: "37",
            right: "39",
            pageUp: "33",
            pageDown: "34",
            pageLeft: "ctrl+37",
            pageRight: "ctrl+39"
        },
        /**
* Specify the content area for which the scrollerbar is specified.
* @private
*/
        content: function () {
            if (!this._content || !this._content.length || !this._content[0].offsetParent)
                this._content = this.element.children("div").first().addClass("e-content");

            return this._content;
        },
        _setFirst: true,
        /**
* Create the scroller widget
* @private
*/
        _init: function () {
            this.element.addClass("e-widget");
            this.content();
            this._ensureScrollers();
            if (this.model.enableRTL === undefined) {
                this.model.enableRTL = this.element.css("direction") === "rtl";
            }
            if (this.model.enableRTL) {
                this.element.addClass("e-rtl");
            }
            if (this.scrollLeft())
                this.content().scrollLeft(this.scrollLeft());
            if (this.scrollTop())
                this.content().scrollTop(this.scrollTop());

            this._on(this.content(), "scroll", this._scroll);
            this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
            if (this.model.autoHide) {
                this.element.addClass("e-autohide");
                this._on(this.element, "mouseenter mouseleave", this._scrollerHover);
            }
            if (this.model.enabled) {
                this.enable();
            }
            else {
                this.disable();
            }
        },
        /**
* Ensures the scrollbar height and width.
* @private
*/
        _ensureScrollers: function () {
            var jqVersion = $.fn.jquery, height, width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }

            this._off(this.content(), "mousedown touchstart");
			if(this.content().length>0){
            if (this.isVScroll()) {
                if (!this._v) {
                    var d1 = this._createScroller("Height", "Y", "Top", "e-v", this.isHScroll());

                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "mousedown touchstart", { d: d1 }, this._mouseDownOnContent);
                }
            } else {
                this._v = null;
                this.element.find(".e-vscroll").remove();
            }
            if (this.isHScroll()) {
                if (!this._h) {
                    var d2 = this._createScroller("Width", "X", "Left", "e-h", this.isVScroll());

                    if (this.model.enableTouchScroll)
                        this._on(this.content(), "mousedown touchstart", { d: d2 }, this._mouseDownOnContent);
                }
            } else {
                this.element.find(".e-hscroll").remove();
                this._h = null;
            }

            if (!this._v && !this._h)
                this.content().css({ width: "auto", height: "auto" });

            if (this.element.find(".e-hscroll").length > 0)
                !this.element.hasClass("e-hscrollbar") && this.element.addClass("e-hscrollbar");
            else {
                if (this.element.hasClass("e-hscrollbar")) {
                    this.element.removeClass("e-hscrollbar");
                    if (this._v) {
                        this.content().outerHeight(this.content().outerHeight() - 1);
                    }
                }
            }

            if (this.isHScroll() || this.isVScroll()) {
                this.content().addClass("e-content");
                jqVersion === "1.7.1" || jqVersion === "1.7.2" ? (height = "height", width = "width") : (height = "outerHeight", width = "outerWidth");
                this.content()[height](this.element.height() - (this.isHScroll() && !this.model.autoHide ? this.model.scrollerSize : 0));
                this.content()[width](this.element.width() - (this.isVScroll() && !this.model.autoHide ? this.model.scrollerSize : 0));
            } else
                this.content().removeClass("e-content");
			}
        },
        /**
* Returns horizontal scrollbar is shown or not.		
* @return Boolean value
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;

* // To check horizontal scrollbar is rendered or not
* var scrollerObj  = $("#scrollcontent").data("ejScroller");
* scrollerObj.isHScroll(); // Returns horizontal scrollbar is shown or not.
* &lt;/script&gt;
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* // To check horizontal scrollbar is rendered or not
* $("#scrollcontent").ejScroller("isHScroll");	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
        isHScroll: function () {
            if (this.model.width > 0) {
                var $paneObject = this.content().find(this.model.targetPane);
                if (this.model.targetPane != null && $paneObject.length)
                    return ($paneObject[0].scrollWidth + $paneObject.siblings().width()) > this.model.width;
                else
                    return this.content()[0].scrollWidth > this.model.width;
            }
            return false;
        },
        /**
* Returns vertical scrollbar is shown or not.		
* @return Boolean value
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // To check vertical scrollbar is rendered or not
* var scrollerObj  = $("#scrollcontent").data("ejScroller");
* scrollerObj.isVScroll(); // Returns vertical scrollbar is shown or not.
* &lt;/script&gt;
* @example 
* &lt;div id="scrollcontent" style="width:900px;"&gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // To check vertical scrollbar is rendered or not
* $("#scrollcontent").ejScrollbar("isVScroll");	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
        isVScroll: function () {
            return this.model.height > 0 && this.content()[0].scrollHeight > this.model.height;
        },
        /**
* To configure the properties at runtime using SetModel		
* @private
*/
        _setModel: function (option) {
            for (var prop in option) {
                if (prop === "enableRTL") {
                    if (option[prop])
                        this.element.addClass("e-rtl");
                    else
                        this.element.removeClass("e-rtl");
                } else if (prop === "scrollLeft") {
                    this.content().scrollLeft(this.scrollLeft());
                } else if (prop === "scrollTop") {
                    this.content().scrollTop(this.scrollTop());
                } else if (prop === "touchScroll") {
                    if (!this.model.enableTouchScroll)
                        this._off(this.content(), "mousedown touchstart");
                    else {
                        if(this._v)
                            this._on(this.content(), "mousedown touchstart", { d: this._v }, this._mouseDownOnContent);
                        if(this._h)
                            this._on(this.content(), "mousedown touchstart", { d: this._h }, this._mouseDownOnContent);
                    }
                } else {
                    this.scrollTop(0);
                    this.scrollLeft(0);
                    this.refresh();
                    break;
                }
            }
        },
        /**
* Creates the scroller in on demand time
* @private
*/
        _createScroller: function (dimension, xy, position, css, isOtherScroll) {
            var temp = css == "e-v" ? "v" : "h", height;
            var d = this["_" + temp] = {};
            var jqVersion = $.fn.jquery;
            d.dimension = dimension;
            d.xy = xy;
            d.position = position;
            d.css = css;
            d.isOtherScroll = isOtherScroll;
            d.uDimension = dimension;

            var dim = dimension === "Width" ? "Height" : "Width";
            jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = dim.toLowerCase() : height = "outer" + dim;
            this.content()[height](this.element[dim.toLowerCase()]() - (this.isVScroll() && !this.model.autoHide ? this.model.scrollerSize : 0));
            this._calculateLayout(d);
            this._createLayout(d);
            var buttons = this[d.main].find(".e-button");

            this._off(buttons, "mousedown")
                ._on(buttons, "mousedown", { d: d, step: 1 }, this._spaceMouseDown);
            this._off(css === "e-v" ? this.element : this[d.scroll], "mousewheel DOMMouseScroll")
                ._on(css === "e-v" ? this.element : this[d.scroll], "mousewheel DOMMouseScroll", { d: d }, this._mouseWheel);
            this._off(this[d.scroll], "mousedown")
                ._on(this[d.scroll], "mousedown", { d: d }, this._spaceMouseDown);
            this._off(this[d.handler], "mousedown touchstart")
                ._on(this[d.handler], "mousedown touchstart", { d: d }, this._mouseDown);
            
            return d;
        },
        /**
* Creates the layout for the scrollbars to be rendered.	
* @private
*/
        _createLayout: function (d) {
            var divString = "<div class='" + d.css + "{0}' style='" + d.dimension + ":{1}px'>{2}</div>";
            var jqVersion = $.fn.jquery;
            var lit = {}, height;
            lit[d.dimension] = d.modelDim;

                var el = ej.buildTag(
                    "div." + d.css + "scroll",
                        String.format(divString, "up e-icon e-button", d.buttonSize) +
                        String.format(divString, "handlespace", d.handleSpace,
                            String.format(divString, "handle", d.handle)) +
                        String.format(divString, "down e-icon e-button", d.buttonSize),
                    lit
                );
            if (d.buttonSize == 0)
                el.find(".e-icon").css("visibility", "hidden");
            if (d.css == "e-v" && $(this.element.find(">.e-content")).length > 0) $(this.element.find(">.e-content")).after(el);
            else this.element.append(el);
            jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = d.uDimension.toLowerCase() : height = "outer" + d.uDimension; 
            this[d.handler] = this.element.find("." + d.handler)[height](d.handle);
            this[d.scroll] = this[d.handler].parent();
            this[d.main] = this[d.scroll].parent();
            this[d.main].find(".e-button")["outer" + d.uDimension](d.buttonSize);
            if (this.model.autoHide)
                this[d.main].hide();
        },
        /**
* Calculates the scrollbar layout based on the values specified for scrollbr to appear
* @private
*/
        _calculateLayout: function (d) {
            d.enableRTL = this.model.enableRTL === undefined ? this.element.css("direction") === "rtl" : this.model.enableRTL;
            d.enableRTL = d.css === "e-h" ? d.enableRTL : false;

            d.scrollDim = "scroll" + d.dimension;
            d.lPosition = d.position.toLowerCase();
            d.clientXy = "page" + d.xy;
            d.scrollVal = "scroll" + d.position;
            d.scrollOneStepBy = this.model.scrollOneStepBy;
            d.modelDim = this.model[(d.dimension = d.dimension.toLowerCase())] - (d.isOtherScroll ? this.model.scrollerSize : 0);
            d.handler = d.css + "handle";
            d.buttonSize = this.model.buttonSize;
            d.main = d.css + "scroll";
            d.scroll = d.css + "ScrollSpace";
            d.handleSpace = d.modelDim - 2 * d.buttonSize;

            var $pane = this.content().find(this.model.targetPane);
            if (this.model.targetPane != null && $pane.length && d.dimension != "height")
                d.sScrollDim = $pane[0][d.scrollDim] + $pane.parent().width() - $pane.width();
            else
                d.sScrollDim = this.content()[0][d.scrollDim];
            d.scrollable = d.sScrollDim - d.modelDim;
            d.handle = Math.floor(d.modelDim / d.sScrollDim * d.handleSpace);
            if (d.handle < 20) d.handle = 20;
            d.onePx = d.scrollable / (d.handleSpace - d.handle);
            d.fromScroller = false;
            d.up = true;
            d.vInterval = undefined;
            d.scrollable *= d.enableRTL ? -1 : 1;
        },
        /**
* Updates scrollbar layout based on ondemand values
* @private
*/
        _updateLayout: function (d) {
            this.element.find("." + d.css + "scroll").css(d.dimension, d.modelDim + "px")
                .find(".e-button").css(d.dimension, this.model.buttonSize).end()
                .find("." + d.css + "handlespace").css(d.dimension, d.handleSpace + "px")
                .find("." + d.css + "handle").css(d.dimension, d.handle + "px");
        },
        /**
* User refreshes the Scroller control at any time.		
* @return jQuery
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // To refresh the Scroller control at any time.
* var scrollerObj  = $("#scrollcontent").data("ejScroller");
* scrollerObj.refresh(); // refreshes the Scroller control at any time
* &lt;/script&gt;
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // Refresh the scroller control
* $("#scrollcontent").ejScroller("refresh");	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
        refresh: function () {
            this.element.find(">.e-content").removeAttr("style");
            this._ensureScrollers();

            if (this.scrollLeft())
                this.content().scrollLeft(this.scrollLeft());
            if ((this.scrollTop() && this._v == null) || (this._v != null && !this._v.skipChange))
                this.content().scrollTop(this.scrollTop());

            if (this._v) {
                this._v.dimension = "Height";
                this._v.isOtherScroll = this.isVScroll() && this.isHScroll() ? true: false;
                this.isVScroll() && !this._calculateLayout(this._v) && this._updateLayout(this._v);
            }
            if (this._h) {
                this._h.dimension = "Width";
                this._h.isOtherScroll = this.isVScroll() && this.isHScroll() ? true : false;
                this.isHScroll() && !this._calculateLayout(this._h) && this._updateLayout(this._h);
            }
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0")
                this.element.find(".e-hhandle").css("left", "0px");
            else
                this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
        },
        /**
* Section for handling scrollbar based on keypressed
* @private
*/
        _keyPressed: function (action, target) {
            if (["input", "select", "textarea"].indexOf(target.tagName.toLowerCase()) !== -1)
                return true;

            var d, iChar;

            if (["up", "down", "pageUp", "pageDown"].indexOf(action) !== -1) {
                d = this._v;
                iChar = "o";
            } else if (["left", "right", "pageLeft", "pageRight"].indexOf(action) !== -1) {
                d = this._h;
                iChar = "i";
            } else return true;
            if (!d) return true;

            return !this._changeTop(d, (action.indexOf(iChar) < 0 ? -1 : 1) * (action[0] !== "p" ? 1 : 3) * d.scrollOneStepBy, "key");
        },
        /**
* Scroller moves to given pixel in Y (top) position.		
* @return jQuery
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // Moves scroller to given pixel in Y (top) position.
* var scrollerObj  = $("#scrollcontent").data("ejScroller");
* scrollerObj.scrollY("scrollY", 25, true); // call scrollY method.
* &lt;/script&gt;
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* //Moves scroller to given pixel in Y (top) position.
* $("#scrollcontent").ejScroller("scrollY", 25, true);	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
        scrollY: function (pixel, noAnimation, source) {
            if (noAnimation) {
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._v, scrollTop: pixel }))
                    return;
                this.scrollTop(pixel);
                this.content().scrollTop(pixel);
                return;
            }
            this.content().stop().animate({
                scrollTop: pixel
            }, 100, 'linear');
        },
        /**
* Scroller moves to given pixel in X (left) position.		
* @return jQuery
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
		*&lt;/div&gt; <br> 
		* &lt;script&gt;
		* $('#scrollcontent').ejScroller(); 	
		* // Moves scroller to given pixel in X (left) position.
		* var scrollerObj  = $("#scrollcontent").data("ejScroller");
		* scrollerObj.scrollX("scrollX", 25, true); // call scrollX method.
		* &lt;/script&gt;
		* @example 
		* &lt;div id="scrollcontent" style="width:900px;" &gt;
		*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
		*&lt;/div&gt; <br> 
		* &lt;script&gt;
		* $('#scrollcontent').ejScroller(); 	
		* //Moves scroller to given pixel in X (left) position.
		* $("#scrollcontent").ejScroller("scrollX", 25, true);	
		* &lt;/script&gt;
		* @memberof ejScroller
		* @instance
		*/
        scrollX: function (pixel, noAnimation, source) {
            if (noAnimation) {
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._h, scrollLeft: pixel }))
                    return;
                this.scrollLeft(pixel);
                if (this.model.targetPane != null)
                    this.content().find(this.model.targetPane).scrollLeft(pixel);
                else
                    this.content().scrollLeft(pixel);
                return;
            }
            this.content().stop().animate({
                scrollLeft: pixel
            }, 100, 'linear');
        },
        /**
* User enables the Scroller control at any time.		
* @return jQuery
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // To enable the Scroller control at any time.
* var scrollerObj  = $("#scrollcontent").data("ejScroller");
* scrollerObj.enable(); // enable the Scroller control at any time
* &lt;/script&gt;
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // enables the scroller control
* $("#scrollcontent").ejScroller("enable");	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
        enable: function () {
            var scroller = this.element.find(".e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle");
            if (scroller.hasClass("e-disable")) {
                scroller.removeClass("e-disable").attr({ "aria-disabled": false });
                this.model.enabled = true;
            }
        },
        /**
* User disables the Scroller control at any time.		
* @return jQuery
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // To disable the Scroller control at any time.
* var scrollerObj  = $("#scrollcontent").data("ejScroller");
* scrollerObj.disable(); // disable the Scroller control at any time
* &lt;/script&gt;
* @example 
* &lt;div id="scrollcontent" style="width:900px;" &gt;
*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;
         *&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
*&lt;/div&gt; <br> 
* &lt;script&gt;
* $('#scrollcontent').ejScroller(); 	
* // disable the scroller control
* $("#scrollcontent").ejScroller("disable");	
* &lt;/script&gt;
* @memberof ejScroller
* @instance
*/
        disable: function () {
            var scroller = this.element.find(".e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle");
            scroller.addClass("e-disable").attr({ "aria-disabled": true });
            this.model.enabled = false;
        },
        /**
* Updates top value based on scroller movement
* @private
*/
        _changeTop: function (d, step, source) {
            var start = this.model.targetPane != null && d.dimension != "height" ? this.content().find(this.model.targetPane)[d.scrollVal]() : this.content()[d.scrollVal](), t;

            if (d.dimension == "height" && start == 0)
                start = this.scrollTop() != 0 ? this.scrollTop() : 0;
            t = start + step;
            if (!d.enableRTL ? t > d.scrollable : t < d.scrollable) t = d.scrollable;
            if (!d.enableRTL ? t < 0 : t > 0) t = 0;

            if (t !== start) {
                this["scroll" + d.xy](t, true, source);
            }

            return t !== start;
        },
        /**
* To handle scroll based on movement via mouse wheel
* @private
*/
        _mouseWheel: function (e) {           
            if (!e.data || !this.model.enabled) return;
            var delta = 0, data = e.data.d, ori = e;
            e = e.originalEvent;
            if (e.wheelDelta) {
                delta = -e.wheelDelta / 120;
                if (window.opera) {
                    if (parseFloat(window.opera.version, 10) < 10)
                        delta = -delta;
                }
            } else if (e.detail) delta = e.detail / 3;

            if (!delta) return;

            if (this._changeTop(data, delta * data.scrollOneStepBy, "wheel")) {
                e.preventDefault ? e.preventDefault() : ori.preventDefault();
                if (data.css === "e-h") {
                    ori.stopImmediatePropagation();
                    ori.stopPropagation();
                }
            }
        },
        _scrollerHover: function (e) {
            if (e.type == "mouseenter" && !this.content().siblings().is(":visible")) 
                this.content().siblings().css("display","block");
            else if(e.type == "mouseleave") 
                this.content().siblings().hide();
        },
        /**
* To handle mouse up movement
* @private
*/
        _mouseUp: function (e) {
            if (!e.data) return;

            var d = e.data.d;
            e.type === "mouseup" && this[d.handler].removeClass("e-active");
            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget)) {
                this._off($(document), "mousemove touchmove");
                $(document).off("mouseout mouseup touchend", ej.proxy(this._mouseUp, this));
                d.fromScroller = false;
                this[d.scroll].off("mousemove");
                this[d.handler].off("mousemove").css("transition", "");

                if (e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
                    $.when(this.content()).done(ej.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                }
            }
            d.up = true;
        },
        /**
* To handle mouse down movement on content
* @private
*/
        _mouseDownOnContent: function (down) {
            if (!this.model.enabled) return;
            var d = down.data.d;
			if(this._trigger("thumbStart", { originalEvent: down, scrollData: d }))
				return;
            
            if( down.which ==3 && down.button == 2 ) return;
            d.fromScroller = true;
            this[d.handler].css("transition", "none");

            var prevY = null, skip = 1, min = 5, direction;

            this._on($(document), "mousemove touchmove", (function (move) {
                move.preventDefault();
                var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];

                if (prevY && pageXY !== prevY) {
                    var diff = pageXY - prevY, sTop = this.model[d.scrollVal] - (diff * d.onePx / min);
                    
                    if (skip == 1 && Math.abs(diff) > min) {
                        direction = d.position;
                        skip = 0;
                    }
                    if (skip == 0) prevY = pageXY;

                    if (sTop >= 0 && sTop <= d.scrollable && direction === d.position) {
                        this["scroll" + d.xy](sTop, true, "thumb");
                        this[d.handler].css(d.position.toLowerCase(), sTop / d.onePx + "px");
                        this.content().css("cursor", "pointer");
                        this._trigger("thumbMove", { originalEvent: move, scrollData: d });
                    }
                }
                if (prevY == null) prevY = pageXY;
            }));

            $(document).one("mouseup touchend", { d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
        },
        /**
* To handle mouse down movement
* @private
*/
        _mouseDown: function (down) {
            //if (down.which !== 1) return;
            if (!this.model.enabled) return;
            var d = down.data.d;

            down.preventDefault();
            d.fromScroller = true;
            this[d.handler].css("transition", "none");

            var prevY, top = parseInt(this[d.handler].css(d.lPosition)) || 0;

            this._on($(document), "mousemove touchmove", (function (move) {
                move.preventDefault();
                var skip = 1;
                var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];
                if (prevY && pageXY !== prevY) {
                    top += (pageXY - prevY);

                    if (d.enableRTL ? top > 0 : top < 0) skip = top = 0;

                    if ((top * (d.enableRTL ? -1 : 1)) + d.handle >= d.handleSpace)
                        skip = top = (d.handleSpace - d.handle) * (d.enableRTL ? -1 : 1);

                    this["scroll" + d.xy](Math.ceil(top * d.onePx), true, "thumb");
                    this[d.handler].css(d.position.toLowerCase(), top + "px");
                    this.content().css("cursor", "pointer");
                    this._trigger("thumbMove", { originalEvent: move, scrollData: d });
                }

                if (skip === 1)
                    prevY = pageXY;
            }));

            this._trigger("thumbStart", { originalEvent: down, scrollData: d });

            $(document).one("mouseup touchend", { d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
        },
        /**
* To handle mouse down based on the interval 
* @private
*/
        _spaceMouseDown: function (e) {          
            if (!e.data || !this.model.enabled) return;

            var d = e.data.d;
            
            if (e.which !== 1 || e.target === this[d.handler][0]) return;

            var step = (e.data.step || 3) * d.scrollOneStepBy, hTop = e.data.top || this[d.handler].offset()[d.lPosition];

            e[d.clientXy] = e[d.clientXy] || 0;

            if (e[d.clientXy] < hTop) step *= -1;

            this._changeTop(d, step, step === 3 ? "track" : "button");

            if (e.data.step !== 1) {
                this[d.scroll].mousemove(function () {
                    d.up = true;
                });
            }

            d.up = false;
            d.vInterval = setInterval(ej.proxy(function () {

                if (step < 0 ? hTop + (step / d.onePx) < e[d.clientXy] : hTop + d.handle + (step / d.onePx) > e[d.clientXy])
                    d.up = true;

                if (d.up) {
                    clearInterval(d.vInterval);
                    return;
                }

                this._changeTop(d, step, step === 3 ? "track" : "button");

                hTop = e.data.top || this[d.handler].offset()[d.lPosition];
            }, this), 150);

            $(document).one("mouseup", { d: d }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d }, ej.proxy(this._mouseUp, this));
        },
        /**
* To handle scroll movement
* @private
*/
        _scroll: function (e) {
            var dS = [this._v, this._h];

            for (var i = 0; i < 2; i++) {
                var d = dS[i];
                if (!d || d.skipChange) continue;

                if (this.model.targetPane != null && i == 1)
                    d.sTop = this.content().find(this.model.targetPane)[0][d.scrollVal];
                else
                    d.sTop = e.target[d.scrollVal];
                this[d.scrollVal](d.sTop);
                if (d.fromScroller) return;
                this[d.handler].css(d.lPosition, (d.sTop / d.onePx) + "px");
            }
        },
        /**
* Changes the vertical handler position	
* @private
*/
        _changevHandlerPosition: function (top) {
            top = this._v != null && top >= this._v.scrollable ? this._v.scrollable : top;
            if (this._v != null && top >= 0 && top <= this._v.scrollable)
                this[this._v.handler].css(this._v.lPosition, (top / this._v.onePx) + "px");
        },
        /**
* Changes the horizontal handler position	
* @private
*/
        _changehHandlerPosition: function (left) {
            left = this._h != null && left >= this._h.scrollable ? this._h.scrollable : left;
            if (this._h != null && left >= 0 && left <= this._h.scrollable)
                this[this._h.handler].css(this._h.lPosition, (left / this._h.onePx) + "px");
        },
        /**
		* destroy the Scroller control
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
		* &lt;div id="scrollcontent" style="width:900px;" &gt;
		*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;&lt;li&gt;
        *&lt;b&gt;A controller&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
		*&lt;/ul&gt; 
		*&lt;/div&gt; <br> 
		* &lt;script&gt;
		* $('#scrollcontent').ejScroller(); 	
		* // Destroy Scroller
		* var scrollerObj  = $("#scrollcontent").data("ejScroller");
		* scrollerObj.destroy(); // destroy the scroller
		* &lt;/script&gt;
		* @example 
		* &lt;div id="scrollcontent" style="width:900px;" &gt;
		*&lt;p&gt;Model–view–controller (MVC) is a software architecture pattern which separates the
        * representation of information from the user's interaction with it.
        * The model consists of application data, business rules, logic, and functions. A view can be any
        * output representation of data, such as a chart or a diagram. Multiple views of the same data 
        * are possible, such as a bar chart for management and a tabular view for accountants. 
        *The controller mediates input, converting it to commands for the model or view.The central 
        *ideas behind MVC are code reusability and n addition to dividing the application into three 
        *kinds of components, the MVC design defines the interactions between them.</p>
        *&lt;ul&gt;*&lt;li&gt;
        *&lt;b&gt;A controller*&lt;/b&gt;can send commands to its associated view to change the view's presentation of the model (e.g., by scrolling through a document). 
        *It can also send commands to the model to update the model's state (e.g., editing a document).
        *&lt;/li&gt;
        *&lt;/ul&gt; 
		*&lt;/div&gt; <br> 
		* &lt;script&gt;
		* $('#scrollcontent').ejScroller(); 	
		* // destroy the scroller
		* $("#scrollcontent").ejScroller("destroy");	
		* &lt;/script&gt;
		* @memberof ejScroller
		* @instance
		*/
        _destroy: function () {
            this.element.css({ "width": "", "height": "" }).find(".e-vscroll,.e-hscroll").remove();
            this.content().removeClass("e-content").css({ "width": "", "height": "" });
        }
    });
})(jQuery, Syncfusion, window);;
(function ($, ej, window, undefined) {
    'use strict';
    ej.widget("ejScrollbar", "ej.Scrollbar", {
        defaults: {
            orientation: "horizontal",
            viewportSize: 0,
            height: 18,
            width: 18,
            smallChange: 57,
            largeChange: 57,
            value: 0,
            maximum: 0,
            minimum: 0,
            buttonSize: 18
        },
        validTags: ["div"],
        type: "transclude",
        dataTypes: {
            buttonSize: "number",
            smallChange: "number",
            largeChange: "number",
        },
        observables: ["value"],
        value: ej.util.valueFunction("value"),
        content: function () {
            if (!this._content || !this._content.length) {
                if (this.model.orientation === "horizontal") {
                    this._content = this.element.find(".e-hhandle");
                }
                else {
                    this._content = this.element.find(".e-vhandle");
                }
            }
            return this._content;
        },
        _init: function () {
            this.element.addClass("e-widget");
            this._ensureScrollers();
            this.content();
            this._setInitialValues();

        },

        _setInitialValues: function () {
            var xy = "X";
            if (this.model.orientation === ej.Scrollbar.Orientation.Horizontal) {
                this.element.addClass("e-hscrollbar");
            }
            else {
                this.element.addClass("e-vscrollbar");
                xy = "Y";
            }
            if (this.value() !== 0 || this.model.minimum !== 0) {
                if (this.value() < this.model.minimum)
                    this.value(this.model.minimum);
                this["scroll" + xy](this.value(), "none");
            }
        },

        _ensureScrollers: function () {
            var jqVersion = $.fn.jquery, height, width;
            if (this.model.height) {
                this.element.height(this.model.height);
            }
            if (this.model.width) {
                this.element.width(this.model.width);
            }
            var d2;
            if (!this._scrollData) {
                if (this.model.orientation === "vertical") {
                    this._scrollData = this._createScroller("Height", "Y", "Top", "e-v");
                }
                else {
                    this._scrollData = this._createScroller("Width", "X", "Left", "e-h");
                }
            }
        },

        _setModel: function (option) {
            for (var prop in option) {
                if (prop === "value") {
                    if (this.value()) {
                        if (this.model.orientation === "horizontal") {
                            this.scrollX(this.value(), "none");
                        }
                        else
                            this.scrollY(this.value(), "none");
                    }
                } else {
                    this.refresh();
                    break;
                }
            }
        },

        _createScroller: function (dimension, xy, position, css) {
            var height;
            var d = {};
            var jqVersion = $.fn.jquery;
            d.dimension = dimension;
            d.xy = xy;
            d.position = position;
            d.css = css;
            d.uDimension = dimension;

            this._calculateLayout(d);
            this._createLayout(d);
            var buttons = this[d.main].find(".e-button");

            this._off(buttons, "mousedown")
                ._on(buttons, "mousedown", { d: d, step: 1 }, this._spaceMouseDown);
            this._off(this[d.scroll], "mousedown")
                ._on(this[d.scroll], "mousedown", { d: d }, this._spaceMouseDown);
            this._off(this[d.handler], "mousedown touchstart")
                ._on(this[d.handler], "mousedown touchstart", { d: d }, this._mouseDown);

            return d;
        },
        _createLayout: function (d) {
            var divString = "<div class='" + d.css + "{0}' style='" + d.dimension + ":{1}px'>{2}</div>";
            var jqVersion = $.fn.jquery;
            var lit = {}, height;
            lit[d.dimension] = d.modelDim;

            var el = ej.buildTag(
                "div." + d.css + "scroll",
                    String.format(divString, "up e-icon e-button", d.buttonSize) +
                    String.format(divString, "handlespace", d.handleSpace,
                        String.format(divString, "handle", d.handle)) +
                    String.format(divString, "down e-icon e-button", d.buttonSize),
                lit
            );

            this.element.append(el);
            jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = d.uDimension.toLowerCase() : height = "outer" + d.uDimension;
            this[d.handler] = this.element.find("." + d.handler);
			this[d.handler].css("transition", "none");
            this[d.scroll] = this[d.handler].parent();
            this[d.main] = this[d.scroll].parent();
            this[d.main].find(".e-button")["outer" + d.uDimension](d.buttonSize);
        },
        _calculateLayout: function (d) {
            d.scrollDim = "scroll" + d.dimension;
            d.lPosition = d.position.toLowerCase();
            d.clientXy = "page" + d.xy;
            d.scrollVal = "scroll" + d.position;
            d.scrollOneStepBy = this.model.smallChange;
            d.modelDim = this.model[(d.dimension = d.dimension.toLowerCase())];
            d.handler = d.css + "handle";
            d.buttonSize = this.model.buttonSize;
            d.main = d.css + "scroll";
            d.scroll = d.css + "ScrollSpace";
            d.handleSpace = d.modelDim - 2 * d.buttonSize;
            d.scrollable = (this.model.maximum - this.model.minimum);
            var trackLength = this.model.height;
            if (this.model.orientation === "horizontal")
                trackLength = this.model.width;
            d.handle = (this.model.viewportSize / ((this.model.maximum - this.model.minimum) + this.model.viewportSize)) * (trackLength - 2 * this.model.buttonSize);
            if (d.handle < 20) d.handle = 20;
            d.onePx = d.scrollable / (d.handleSpace - d.handle);
            d.fromScroller = false;
            d.up = true;
            d.vInterval = undefined;
        },
        _updateLayout: function (d) {
            this.element.find("." + d.css + "scroll").css(d.dimension, d.modelDim + "px")
                .find(".e-button").css(d.dimension, this.model.buttonSize).end()
                .find("." + d.css + "handlespace").css(d.dimension, d.handleSpace + "px")
                .find("." + d.css + "handle").css(d.dimension, d.handle + "px");
        },
        refresh: function () {
            this._ensureScrollers();
            if (this.value()) {
                if (this.model.orientation === "horizontal") {
                    this.scrollX(this.value(), "none");
                }
                else
                    this.scrollY(this.value(), "none");
            }
            if (this._scrollData) {
                this._calculateLayout(this._scrollData);
                this._updateLayout(this._scrollData);
            }
        },

        scrollY: function (pixel, source, triggerEvent) {
            var dS = this._scrollData;
            if (!triggerEvent)
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollTop: pixel }))
                    return;
            this.value(pixel);
            if (this.content().length > 0)
                this.content()[0].style.top = (pixel - this.model.minimum) / this._scrollData.onePx + "px";
            return;
        },

        scrollX: function (pixel, source, triggerEvent) {
            var dS = this._scrollData;
            if (!triggerEvent)
                if (this._trigger("scroll", { source: source || "custom", scrollData: this._scrollData, scrollLeft: pixel }))
                    return;
            this.value(pixel);
            if (this.content().length > 0)
                this.content()[0].style.left = (pixel - this.model.minimum) / this._scrollData.onePx + "px";
            return;
        },

        _changeTop: function (d, step, source) {
            var start, t;
            if (d.dimension === "height")
                start = this.value();
            else
                start = this.value();
            t = start + step;

            if (step > 0) {
                if (t > this.model.maximum)
                    t = this.model.maximum;
            }
            else {
                if (t < this.model.minimum)
                    t = this.model.minimum;
            }
            if (t !== start) {
                this["scroll" + d.xy](t, source);
            }
            return t !== start;
        },

        _mouseUp: function (e) {
            if (!e.data) return;

            var d = e.data.d;
            e.type === "mouseup" && this[d.handler].removeClass("e-active");
            if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget)) {
                this._off($(document), "mousemove touchmove");
                $(document).off("mouseout mouseup touchend", ej.proxy(this._mouseUp, this));
                d.fromScroller = false;
                this[d.scroll].off("mousemove");
                this[d.handler].off("mousemove").css("transition", "");

                if (e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
                    $.when(this.content()).done(ej.proxy(function () {
                        this._trigger("thumbEnd", { originalEvent: e, scrollData: d });
                    }, this));
                }
            }
            d.up = true;
        },


        _mouseDown: function (down) {
            //if (down.which !== 1) return;
            var d = down.data.d;

            d.fromScroller = true;
            this[d.handler].css("transition", "none");

            var prevY, top = parseInt(this[d.handler].css(d.lPosition)) || 0;

            this._on($(document), "mousemove touchmove", (function (move) {
                move.preventDefault();
                var skip = 1;
                var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];
                if (prevY && pageXY !== prevY) {
                    top = (pageXY - prevY);
                    var value = top * d.onePx;
                    this._changeTop(d, value, "thumb");
                    this._trigger("thumbMove", { originalEvent: move, scrollData: d });
                }

                if (skip === 1)
                    prevY = pageXY;
            }));

            this._trigger("thumbStart", { originalEvent: down, scrollData: d });

            $(document).one("mouseup touchend", { d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d, source: "thumb" }, ej.proxy(this._mouseUp, this));
        },

        _spaceMouseDown: function (e) {
            if (!e.data) return;

            var d = e.data.d;

            if (e.which !== 1 || e.target === this[d.handler][0]) return;

            var step = e.data.step ? this.model.smallChange : this.model.largeChange, hTop = e.data.top || this[d.handler].offset()[d.lPosition];

            e[d.clientXy] = e[d.clientXy] || 0;

            if (e[d.clientXy] < hTop) step *= -1;

            this._changeTop(d, step, step === 3 ? "track" : "button");

            if (e.data.step !== 1) {
                this[d.scroll].mousemove(function () {
                    d.up = true;
                });
            }

            d.up = false;
            d.vInterval = setInterval(ej.proxy(function () {

                if (step < 0 ? hTop + (step / d.onePx) < e[d.clientXy] : hTop + d.handle + (step / d.onePx) > e[d.clientXy])
                    d.up = true;

                if (d.up) {
                    clearInterval(d.vInterval);
                    return;
                }

                this._changeTop(d, step, step === 3 ? "track" : "button");

                hTop = e.data.top || this[d.handler].offset()[d.lPosition];
            }, this), 150);

            $(document).one("mouseup", { d: d }, ej.proxy(this._mouseUp, this));
            $(document).mouseout({ d: d }, ej.proxy(this._mouseUp, this));
        },

        remove: function () {
            if (this.model.orientation === ej.Scrollbar.Orientation.Horizontal)
                this.element.find(".e-hscroll").remove();
            if (this.model.orientation === ej.Scrollbar.Orientation.Vertical)
                this.element.find(".e-vscroll").remove();
            this._scrollData = null;
            this._content = null;
        },

        _destroy: function () {
            this.element.remove();
        },
    });

    ej.Scrollbar.Orientation = {
        Horizontal: "horizontal",
        Vertical: "vertical"
    };
})(jQuery, Syncfusion, window);;;
/**
* @fileOverview Plugin to style the Html Radial Menu elements
* @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {

    ej.widget("ejRadialMenuBase", "ej.RadialMenuBase", {

        defaults: {
            //Web
            /**		
            * Specifies the width of radial menu
            * @default 300
            * @type {int}
            * @example 
            * // Set Radialmenu width on initialization. 
            * //To set width API  
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejRadialMenu({ "width":300});	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu width, after initialization:
            * &lt;script&gt;
            * // Gets the width API.		
            *  $("#radialmenu").ejRadialMenu ("option", "width");			
            * // Sets the width API
            * $("#radialmenu").ejRadialMenu ("option", "width", 300);            
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            //Mobile
            /**		
            * Specifies the width of the radialmenu control.
            * @default 300
            * @type {int}
            * @example 
            * //Set the width property in unobtrusive way.
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu" data-role="ejmradialmenu" data-ej-width="300"
            * &gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imagename="social.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="music.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="direction.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="message.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="browser.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * // Set Radialmenu width on initialization. 
            * //To set width API value 
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imagename="social.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="music.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="direction.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="message.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="browser.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejmRadialMenu({ "width":300});	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu width, after initialization:
            * &lt;script&gt;
            * // Gets the width API value.		
            *  $("#defaultradialmenu").ejmRadialMenu ("option", "width");			
            * // Sets the width API
            * $("#defaultradialmenu").ejmRadialMenu ("option", "width", 300);            
            * &lt;/script&gt;
            * @memberof ejmRadialMenu
            * @instance
            */
            width: 300,
            //Web
            /**		
            * To enable Animation for Radial Menu.
            * @default true
            * @type {boolean}
            * @example 
            * // Set Radialmenu enableAnimation on initialization. 
            * //To set enableAnimation API 
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejRadialMenu({ "enableAnimation":true });	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu enableAnimation, after initialization:
            * &lt;script&gt;
            * // Gets the enableAnimation API.		
            * $("#defaultradialmenu").ejRadialMenu ("option", "enableAnimation");			
            * // Sets the Width API
            * $("#defaultradialmenu").ejRadialMenu ("option", "enableAnimation", true);            
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            //Mobile
            /**		
            * To enable Animation for Radial Menu.
            * @default true
            * @type {boolean}
            * @example 
            * //Set the enableAnimation property in unobtrusive way.
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu" data-role="ejmradialmenu" data-ej-enableanimation="true" 
            * &gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imagename="social.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="music.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="direction.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="message.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="browser.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * // Set Radialmenu enableAnimation on initialization. 
            * //To set enableAnimation API  
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imagename="social.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="music.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="direction.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="message.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imagename="browser.png" data-ej-imagepath="../themes/sample/radialmenu"
            * data-ej-windows-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejmRadialMenu({ "enableAnimation":true });	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu enableAnimation, after initialization:
            * &lt;script&gt;
            * // Gets the enableAnimation API.		
            *  $("#radialmenu").ejmRadialMenu ("option", "enableAnimation");			
            * // Sets the Width API
            * $("#radialmenu").ejmRadialMenu ("option", "enableAnimation", true);            
            * &lt;/script&gt;
            * @memberof ejmRadialMenu
            * @instance
            */
            enableAnimation: true
        },
        dataTypes: {
            enableAnimation: "boolean"
        },
        _initialization: function () {
            this._svgLink = "http://www.w3.org/2000/svg";
            this._menuItems = $(this.element.children()).clone();
            $(this.element.children()).remove();
            this._menuCount = $(this._menuItems.children()).length;
            this._startXY = (this.model.width / 2);
        },
        /**
        * To create SVG element	
        * @private
        */
        _createSVGElement: function () {
            var svgObj = document.createElementNS(this._svgLink, 'svg');
            if (this.model.width != null) {
                svgObj.setAttribute("width", this.model.width);
                svgObj.setAttribute("height", this.model.width);
            }
            return $(svgObj);
        },
        /**
        * To create group element	
        * @private
        */
        _createGroupElement: function (id) {
            var group = document.createElementNS(this._svgLink, "g");
            if (id)
                group.setAttribute("id", id);
            return $(group);
        },
        /**
        * To create Image element	
        * @private
        */
        _createImageElement: function (width, height, currentEle, x, y) {
            var imgPath = currentEle.attr("data-ej-imagepath"),
                imgName = currentEle.attr("data-ej-imagename"),
                imgURL = currentEle.attr("data-ej-imageurl"),
                imgLoc = imgURL ? imgURL : (this.model.renderMode.toLowerCase() != "flat" ? imgPath + "/" + this.model.renderMode.toLowerCase() + "/" + this.model.theme.toLowerCase() + "/" + imgName : imgPath + "/" + this.model.renderMode.toLowerCase() + "/" + imgName),
                image = document.createElementNS(this._svgLink, "image");
            image.setAttribute("width", width);
            image.setAttribute("height", height);
            image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', imgLoc);
            image.setAttribute("x", x);
            image.setAttribute("y", y);
            return image;
        },
        /**
        * To create Text element	
        * @private
        */
        _createTextElement: function (x, y, style, content) {
            var text = document.createElementNS(this._svgLink, "text");
            text.setAttribute("x", x);
            text.setAttribute("y", y);
            text.setAttribute("class", style);
            text.textContent = content;
            return text;
        },
        /**
        * To create path element 	
        * @private
        */
        _createPathElement: function (index, direction, style) {
            var path = document.createElementNS(this._svgLink, "path");
            path.setAttribute("index", index);
            path.setAttribute("d", direction);
            path.setAttribute("class", style);
            return path;
        },
        /**
        * To create polygon element	
        * @private
        */
        _createPolygonElement: function (index, transform) {
            var polygon = document.createElementNS(this._svgLink, "polygon");
            polygon.setAttribute("points", "10,10 0,10 5,5");
            polygon.setAttribute("index", index);
            polygon.setAttribute("fill", "#FFFFFF");
            polygon.setAttribute("transform", transform);
            return polygon;
        },
        /**
        * To create circle element	
        * @private
        */
        _createCircleElement: function (x, y, r, style) {
            var circle = document.createElementNS(this._svgLink, "circle");
            circle.setAttribute("cx", x);
            circle.setAttribute("cy", y);
            circle.setAttribute("r", r);
            circle.setAttribute("class", style);
            return circle;
        },
        /**
        * To do Claculation for Radial Arc
        * @private
        */
        _calculateRadialArc: function (menuCount, size, mRadius, Arcdradius, polyRadius) {
            var itemCurrentPos = 0,
                startAngle = 2 * Math.PI * itemCurrentPos,
                endAngle = 2 * Math.PI * (itemCurrentPos + (10 / (menuCount * 10))),
                radius = 0.5 * size * Math.min(this.model.width, this.model.width),
                menuItemRadius = mRadius * size * Math.min(this.model.width, this.model.width),
                dradius = Arcdradius * radius,
                polygonRadius = polyRadius * radius,
                degPoint = 360 / menuCount,
                degree = degPoint / 2;
            var x1 = [], y1 = [], x2 = [], y2 = [], midx = [], midy = [], dStartX = [], dStartY = [], dEndX = [], dEndY = [], dmidx = [], dmidy = [], deg = [], longArc = [];
            for (var i = 0; i < menuCount; i++) {
                var pathStartAngle = -.5 * Math.PI;
                startAngle = startAngle + pathStartAngle;
                endAngle = endAngle + pathStartAngle - 0.000001;
                longArc[i] = endAngle - startAngle < Math.PI ? 0 : 1;
                var midAngle = (startAngle + endAngle) / 2;
                x1[i] = this._startXY + radius * Math.cos(startAngle);
                y1[i] = this._startXY + radius * Math.sin(startAngle);
                x2[i] = this._startXY + radius * Math.cos(endAngle);
                y2[i] = this._startXY + radius * Math.sin(endAngle);
                midx[i] = this._startXY + menuItemRadius * Math.cos(midAngle);
                midy[i] = this._startXY + menuItemRadius * Math.sin(midAngle);
                dStartX[i] = this._startXY + dradius * Math.cos(startAngle);
                dStartY[i] = this._startXY + dradius * Math.sin(startAngle);
                dEndX[i] = this._startXY + dradius * Math.cos(endAngle);
                dEndY[i] = this._startXY + dradius * Math.sin(endAngle);
                dmidx[i] = this._startXY + polygonRadius * Math.cos(midAngle);
                dmidy[i] = this._startXY + polygonRadius * Math.sin(midAngle);
                deg[i] = degree;
                itemCurrentPos += 10 / (menuCount * 10);
                startAngle = 2 * Math.PI * itemCurrentPos;
                endAngle = 2 * Math.PI * (itemCurrentPos + (10 / (menuCount * 10)));
                degree += degPoint;
            }
            return ({ x1: x1, y1: y1, x2: x2, y2: y2, midx: midx, midy: midy, dStartX: dStartX, dStartY: dStartY, dEndX: dEndX, dEndY: dEndY, dmidx: dmidx, dmidy: dmidy, deg: deg, longArc: longArc, radius: radius, dradius: dradius });
        },
        /**
        * Render the Radial Menu Item
        * @private
        */
        _renderRadialMenu: function () {
            this._radialSVG = this._createSVGElement();
            this._radialChildSVG = this._createSVGElement();
            this._childArcGroup = this._createGroupElement("childarcgroup");
            this._polygonGroup = this._createGroupElement("polygongroup");
            this._polygonGroup.attr("transform", "translate(-10,-10)");
            this._radialArcGroup = this._createGroupElement();
            this._menuItemsGroup = this._createGroupElement("menuitemsgroup");
            this._menuItemsGroup.attr("transform", "translate(-10,-10)");
            this._menuItemsArcPaths = this._createGroupElement("menuitemsarcpaths");
            this._menuItemsPaths = this._createGroupElement();
            this._radialSVGDiv = ej.buildTag("div#radialsvgdiv." + this._prefix + "abs").css("height", this.model.width);
            this._radialCircleSVGDiv = ej.buildTag("div#radialcirclesvgdiv." + this._prefix + "abs " + this._prefix + "displaynone");
            this._radialChildSVGDiv = ej.buildTag("div#radialchildsvgdiv." + this._prefix + "abs " + this._prefix + "displaynone");
            var pointsVal = this._calculateRadialArc(this._menuCount, 1, 0.28, 0.8, 0.95),
                pointsArcVal = this._calculateRadialArc(this._menuCount, 0.79, null, 0.97, null),
                pointsItemVal = this._calculateRadialArc(this._menuCount, 0.8, null, 0.3, null);
            for (var i = 0; i < this._menuCount; i++) {
                var direction = "M" + " " + pointsVal.x1[i] + " " + pointsVal.y1[i] + " " + "A" + " " + pointsVal.radius + " " + pointsVal.radius + " " + "0" + " " + pointsVal.longArc[i] + " " + "1" + " " + pointsVal.x2[i] + " " + pointsVal.y2[i] + " " + "L" + " " + pointsVal.dEndX[i] + " " + pointsVal.dEndY[i] + " " + "A" + " " + pointsVal.dradius + " " + pointsVal.dradius + " " + "1" + " " + pointsVal.longArc[i] + " " + "0" + " " + pointsVal.dStartX[i] + " " + pointsVal.dStartY[i] + " " + "z",
                    arcDirection = "M" + " " + pointsArcVal.x1[i] + " " + pointsArcVal.y1[i] + " " + "A" + " " + pointsArcVal.radius + " " + pointsArcVal.radius + " " + "0" + " " + pointsArcVal.longArc[i] + " " + "1" + " " + pointsArcVal.x2[i] + " " + pointsArcVal.y2[i] + " " + "L" + " " + pointsArcVal.dEndX[i] + " " + pointsArcVal.dEndY[i] + " " + "A" + " " + pointsArcVal.dradius + " " + pointsArcVal.dradius + " " + "1" + " " + pointsArcVal.longArc[i] + " " + "0" + " " + pointsArcVal.dStartX[i] + " " + pointsArcVal.dStartY[i] + " " + "z",
                    itemDirection = "M" + " " + pointsItemVal.x1[i] + " " + pointsItemVal.y1[i] + " " + "A" + " " + pointsItemVal.radius + " " + pointsItemVal.radius + " " + "0" + " " + pointsItemVal.longArc[i] + " " + "1" + " " + pointsItemVal.x2[i] + " " + pointsItemVal.y2[i] + " " + "L" + " " + pointsItemVal.dEndX[i] + " " + pointsItemVal.dEndY[i] + " " + "A" + " " + pointsItemVal.dradius + " " + pointsItemVal.dradius + " " + "1" + " " + pointsItemVal.longArc[i] + " " + "0" + " " + pointsItemVal.dStartX[i] + " " + pointsItemVal.dStartY[i] + " " + "z",
                    currentEle = $(this._menuItems.children("li")[i]),
                    imgTextGroup = this._createGroupElement(),
                    dataText = this.model.renderMode ? "data-ej-" + this.model.renderMode + "-text" : "data-ej-text";
                this._menuItemsArcPaths.append(this._createPathElement(i, arcDirection, "" + this._prefix + "arcbgcolor"));
                this._menuItemsPaths.append(this._createPathElement(i, itemDirection, "" + this._prefix + "itembgcolor"));
                this._radialArcGroup.append(this._createPathElement(i, direction, "" + this._prefix + "default"));
                imgTextGroup.attr({ "cursor": "context-menu", "index": i });
                imgTextGroup.append(this._createImageElement(20, 20, currentEle, pointsVal.midx[i], pointsVal.midy[i] - 10));
                imgTextGroup.append(this._createTextElement(pointsVal.midx[i] + 10, pointsVal.midy[i] + 25, "" + this._prefix + "textcolor", currentEle.attr(dataText)));
                this._menuItemsGroup.append(imgTextGroup);
                if (currentEle.children().length != 0) {
                    var transform = pointsVal.deg[i] > 270 ? "translate(" + (pointsVal.dmidx[i] + 5) + "," + (pointsVal.dmidy[i] + 15) + ")" + "rotate(" + pointsVal.deg[i] + ")" : "translate(" + (pointsVal.dmidx[i] + 10) + "," + (pointsVal.dmidy[i] + 10) + ")" + "rotate(" + pointsVal.deg[i] + ")";
                    this._childArcGroup.append(this._createPathElement(i, direction, "" + this._prefix + "childdefault"));
                    this._polygonGroup.append(this._createPolygonElement(i, transform));
                }
            }
            var circle = this._createCircleElement(this._startXY, this._startXY, this._startXY / 3.5, "" + this._prefix + "circlebgcolor");
            this._menuItemsArcGroup = this._radialArcGroup.clone();
            this._radialChildSVG.append(this._menuItemsPaths).append(this._menuItemsGroup).append(this._menuItemsArcGroup).append(this._childArcGroup).append(this._polygonGroup).append(this._menuItemsArcPaths).append(circle);
            this._radialContainer.append(this._radialSVGDiv.append(this._radialCircleSVGDiv.append(this._radialSVG.append(this._radialArcGroup))).append(this._radialChildSVGDiv.append(this._radialChildSVG)));

        },
        /**
        * Render the Radial Child Menu Item
        * @private
        */
        _renderRadialChildMenu: function (index) {
            this._menuChildSVG = this._createSVGElement();
            this._menuChildSVGDiv = ej.buildTag("div#menuchildsvgdiv." + this._prefix + "abs");
            if (this.model.enableAnimation) {
                this._radialChildSVGDiv.removeClass("" + this._prefix + "radialshow").addClass("" + this._prefix + "scalehide");
                this._radialChildAnimate();
                this._menuChildSVGDiv.addClass("" + this._prefix + "scaleshow");
            }
            else
                this._radialChildSVGDiv.addClass("" + this._prefix + "displaynone");
            this._radial.removeClass(this.model.imageClass).addClass("" + this._prefix + "backarrow " + this.model.backImageClass + "");
            this._childItemsGroup = this._createGroupElement("childitemsgroup");
            this._childItemsGroup.attr("transform", "translate(-10,-10)");
            this._childItemArcGroup = this._createGroupElement();
            this._childItemsArcPaths = this._createGroupElement("childitemsarcpaths");
            this._childItemsPaths = this._createGroupElement();
            var child = $(this._menuItems.children()[index]).children();
            childcount = $(child.children()).length,
            pointsVal = this._calculateRadialArc(childcount, 1, 0.28, 0.8, null),
            pointsArcVal = this._calculateRadialArc(childcount, 0.79, null, 0.97, null),
            pointsItemVal = this._calculateRadialArc(childcount, 0.8, null, 0.3, null);
            for (var i = 0; i < childcount; i++) {
                var direction = "M" + " " + pointsVal.x1[i] + " " + pointsVal.y1[i] + " " + "A" + " " + pointsVal.radius + " " + pointsVal.radius + " " + "0" + " " + pointsVal.longArc[i] + " " + "1" + " " + pointsVal.x2[i] + " " + pointsVal.y2[i] + " " + "L" + " " + pointsVal.dEndX[i] + " " + pointsVal.dEndY[i] + " " + "A" + " " + pointsVal.dradius + " " + pointsVal.dradius + " " + "1" + " " + pointsVal.longArc[i] + " " + "0" + " " + pointsVal.dStartX[i] + " " + pointsVal.dStartY[i] + " " + "z",
                    arcDirection = "M" + " " + pointsArcVal.x1[i] + " " + pointsArcVal.y1[i] + " " + "A" + " " + pointsArcVal.radius + " " + pointsArcVal.radius + " " + "0" + " " + pointsArcVal.longArc[i] + " " + "1" + " " + pointsArcVal.x2[i] + " " + pointsArcVal.y2[i] + " " + "L" + " " + pointsArcVal.dEndX[i] + " " + pointsArcVal.dEndY[i] + " " + "A" + " " + pointsArcVal.dradius + " " + pointsArcVal.dradius + " " + "1" + " " + pointsArcVal.longArc[i] + " " + "0" + " " + pointsArcVal.dStartX[i] + " " + pointsArcVal.dStartY[i] + " " + "z",
                    itemDirection = "M" + " " + pointsItemVal.x1[i] + " " + pointsItemVal.y1[i] + " " + "A" + " " + pointsItemVal.radius + " " + pointsItemVal.radius + " " + "0" + " " + pointsItemVal.longArc[i] + " " + "1" + " " + pointsItemVal.x2[i] + " " + pointsItemVal.y2[i] + " " + "L" + " " + pointsItemVal.dEndX[i] + " " + pointsItemVal.dEndY[i] + " " + "A" + " " + pointsItemVal.dradius + " " + pointsItemVal.dradius + " " + "1" + " " + pointsItemVal.longArc[i] + " " + "0" + " " + pointsItemVal.dStartX[i] + " " + pointsItemVal.dStartY[i] + " " + "z",
                    imgTextGroup = this._createGroupElement(),
                    currentEle = $(child.children("li")[i]),
                    dataText = this.model.renderMode ? "data-ej-" + this.model.renderMode + "-text" : "data-ej-text";
                this._childItemArcGroup.append(this._createPathElement(i, direction, "" + this._prefix + "default"));
                this._childItemsArcPaths.append(this._createPathElement(i, arcDirection, "" + this._prefix + "arcbgcolor"));
                this._childItemsPaths.append(this._createPathElement(i, itemDirection, "" + this._prefix + "itembgcolor"));
                imgTextGroup.attr({ "cursor": "context-menu", "index": i });
                imgTextGroup.append(this._createImageElement(20, 20, currentEle, pointsVal.midx[i], pointsVal.midy[i] - 10));
                imgTextGroup.append(this._createTextElement(pointsVal.midx[i] + 10, pointsVal.midy[i] + 25, "" + this._prefix + "textcolor", currentEle.attr(dataText)));
                this._childItemsGroup.append(imgTextGroup);
            }
            var circle = this._createCircleElement(this._startXY, this._startXY, this._startXY / 3.5, "" + this._prefix + "circlebgcolor");
            this._radialSVGDiv.append(this._menuChildSVGDiv.append(this._menuChildSVG.append(this._childItemsPaths).append(this._childItemsGroup).append(this._childItemArcGroup).append(this._childItemsArcPaths).append(circle)));
        },
        /**
        * To configure the properties at runtime	
        * @private
        */
        _setModel: function (options) {
            this._refresh();
        },
        /**
        * To refresh Radial Menu control		
        * @private
        */
        _refresh: function () {
            this._destroy();
            this._init();
        },
        /**
        * To destroy Radial Menu control		
        * @private
        */
        _destroy: function () {
            this.element.removeAttr("class style").children().remove();
            this.element.append(this._menuItems);
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html AutoComplete elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {

    ej.widget("ejNavigationDrawerBase", "ej.NavigationDrawerBase", {

        defaults: {
            //Web
            /**		
            * Sets the Direction for the control. See {@link Direction}
            * @default left
            * @member direction {object}
            * @type {enum}
            * @example 
            * //Set the direction property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-direction="left" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer direction on initialization. 
            * //To set direction API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer("direction","left");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer direction, after initialization:
            * $(function () {
            * // Gets the direction API value.		
            * $("#navpane").ejNavigationDrawer("option", "direction");	
            * // Sets the direction API	
            * $("#navpane").ejNavigationDrawer ("option", "direction", "left");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Sets the Direction for the control. See {@link Direction}
            * @default left
            * @member direction {object}
            * @type {enum}
            * @example 
            * //Set the direction property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-direction="left" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer direction on initialization. 
            * //To set direction API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer("direction","left");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer direction, after initialization:
            * $(function () {
            * // Gets the direction API value.		
            * $("#navpane").ejNavigationDrawer("option", "direction");	
            * // Sets the direction API	
            * $("#navpane").ejNavigationDrawer ("option", "direction", "left");  
            * });
            * &lt;/script&gt;  
            * @memberof ejmNavigationDrawer
            * @instance
            */
            direction: "left",
            //Web
            /**		
            * Specifies the targetId for navigation drawer
            * @default ""
            * @member targetid {object}
            * @type {string}
            * @example 
            * //Set the direction property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;input id="target" type="button" text="target"/&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-targetid="target" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer direction on initialization. 
            * //To set direction API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;            
            * &lt;input id="target" type="button" text="target"/&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer("targetId","target");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer targetId, after initialization:
            * $(function () {
            * // Gets the targetId API value.		
            * $("#navpane").ejNavigationDrawer("option", "targetId");	
            * // Sets the targetId API	
            * $("#navpane").ejNavigationDrawer ("option", "targetId", "left");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Specifies the targetId for navigation drawer
            * @default ""
            * @member targetid {object}
            * @type {string}
            * @example 
            * //Set the direction property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt; input id="target" data-role="button" type="button" /&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-targetid="target" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer direction on initialization. 
            * //To set direction API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt; input id="target" data-role="button" type="button" /&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer("targetId","left");	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Navigation Drawer targetId, after initialization:
            * &lt;script&gt;
            * // Gets the TargetId API value.		
            *  $("#navpane").ejmNavigationDrawer ("option", "targetId");		
            * // Sets the TargetId API
            * $("#navpane").ejmNavigationDrawer ("option", "targetId", "sample");   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            targetId: null,
            //Web
            /**		
            * Specifies position whether it is in fixed or relative to the page. See {@link Position}
            * @default normal
            * @member position {object}
            * @type {enum}
            * @example 
            * //Set the position property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-position="normal" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer position on initialization. 
            * //To set position API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer("position","normal");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer position, after initialization:
            * $(function () {
            * // Gets the position API value.		
            * $("#navpane").ejNavigationDrawer("option", "position");	
            * // Sets the position API	
            * $("#navpane").ejNavigationDrawer ("option", "position", "normal");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Specifies position whether it is in fixed or relative to the page. See {@link Position}
            * @default normal
            * @member position {object}
            * @type {enum}
            * @example 
            * //Set the position property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-position="normal" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer position on initialization. 
            * //To set position API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer("position","normal");	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Navigation Drawer position, after initialization:
            * &lt;script&gt;
            * // Gets the position API value.		
            *  $("#navpane").ejmNavigationDrawer ("option", "position");		
            * // Sets the position API
            * $("#navpane").ejmNavigationDrawer ("option", "position", "normal");   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            position: "normal",
            //Web
            /**		
            * Sets the listview to be enabled or not
            * @default false
            * @member enablelistview {object}
            * @type {boolean}
            * @example 
            * //Set the listview property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-enablelistview="false" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer listview on initialization. 
            * //To set listview API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer("enableListView","false");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer listview, after initialization:
            * $(function () {
            * // Gets the listview API value.		
            * $("#navpane").ejNavigationDrawer("option", "enableListView");	
            * // Sets the listview API	
            * $("#navpane").ejNavigationDrawer ("option", "enableListView", "false");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Sets the listview to be enabled or not
            * @default false
            * @member enablelistview {object}
            * @type {boolean}
            * @example 
            * //Set the listview property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-enablelistview="false" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer listview on initialization. 
            * //To set listview API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer("enableListView","false");	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Navigation Drawer listview, after initialization:
            * &lt;script&gt;
            * // Gets the listview API value.		
            *  $("#navpane").ejmNavigationDrawer ("option", "enableListView");		
            * // Sets the listview API
            * $("#navpane").ejmNavigationDrawer ("option", "enableListView", false);   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            enableListView: false,
            //Web
            /**		
            * Sets all the properties of listview to render in navigation drawer
            * @member listviewsettings {object}
            * @example
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-listviewsettings-width="200" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer listview on initialization. 
            * //To set listview API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer({model.listViewSettings{width:200});	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer listViewSettings, after initialization:
            * $(function () {
            * // Gets the listViewSettings API value.		
            * $("#navpane").ejNavigationDrawer("option", "listViewSettings.width");	
            * // Sets the listViewSettings API	
            * $("#navpane").ejNavigationDrawer ("option", "listViewSettings.width", "200");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Sets all the properties of listview to render in navigation drawer
            * @member listviewsettings {object}
            * @example 
            * //Set the listView Settings property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-listviewsettings-width="200" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer listview settings on initialization. 
            * //To set listview settings API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer({model.listViewSettings{width:200});	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Navigation Drawer listViewSettings, after initialization:
            * &lt;script&gt;
            * // Gets the listViewSettings API value.		
            *  $("#navpane").ejmNavigationDrawer ("option", "listViewSettings.width");	
            * // Sets the listViewSettings API
            * $("#navpane").ejmNavigationDrawer ("option", "listViewSettings.width", "false");   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            listViewSettings: {},
            //Web
            /**		
            * Sets the rendering type of the control.  See {@link Type}
            * @default overlay            
            * @member type {object}
            * @type {enum}
            * @example
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-type="overlay" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer type on initialization. 
            * //To set type API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer("type","overlay");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer type, after initialization:
            * $(function () {
            * // Gets the type API value.		
            * $("#navpane").ejNavigationDrawer("option", "type");	
            * // Sets the type API	
            * $("#navpane").ejNavigationDrawer ("option", "type", "overlay");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Sets the rendering type of the control.  See {@link Type}
            * @default overlay      
            * @member type {object}
            * @type {enum}
            * @example 
            * //Set the type property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-type="overlay" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer type on initialization. 
            * //To set type API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer("type","overlay");	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Navigation Drawer type, after initialization:
            * &lt;script&gt;
            * // Gets the type API value.		
            *  $("#navpane").ejmNavigationDrawer ("option", "type");		
            * // Sets the type API
            * $("#navpane").ejmNavigationDrawer ("option", "type", "overlay");   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            type: "overlay",
            /**		
            * Specifies the width of the control
            * @default auto      
            * @member width {object}
            * @type {int}
            * @example 
            * //Set the width property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-width="200" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer width on initialization. 
            * //To set width API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejNavigationDrawer("width","200");	
            * });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the Navigation Drawer width, after initialization:
            * $(function () {
            * // Gets the width API value.		
            * $("#navpane").ejNavigationDrawer("option", "width");	
            * // Sets the width API	
            * $("#navpane").ejNavigationDrawer ("option", "width", "overlay");  
            * });
            * &lt;/script&gt;  
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**		
            * Specifies the width of the control
            * @default auto 
            * @member width {object}
            * @type {int}
            * @example 
            * //Set the width property in unobtrusive way.
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-width="200" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * @example
            * // Set Navigation Drawer width on initialization. 
            * //To set width API value 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#navpane").ejmNavigationDrawer("width","200");	
            * });
            * @example 
            * //Get or set the Navigation Drawer width, after initialization:
            * &lt;script&gt;
            * // Gets the type API value.		
            *  $("#navpane").ejmNavigationDrawer ("option", "width");		
            * // Sets the type API
            * $("#navpane").ejmNavigationDrawer ("option", "width", "auto");   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            width: "auto",
            //Web
            /**    
            * Event triggers when the Swipe happens.
            * @event
            * @name ejNavigationDrawer#swipe 	
            * @param {Object} argument Event parameters from Navigation Drawer     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Navigation Drawer model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-swipe="onSwipe" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script &gt;
            * function onSwipe(args)
            * { //handle the event
            * }
            * &lt;/script &gt;
            * @example 
            * //Swipe event for Navigation pane
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div id="navpane" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#navpane").ejNavigationDrawer({
            *   swipe: function (args) { //handle the event
            * }
            * });   
            * &lt;/script&gt;
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**    
            * Event triggers when the Swipe happens.
            * @event
            * @name ejmNavigationDrawer#swipe 	
            * @param {Object} argument Event parameters from Navigation Drawer     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Navigation Drawer model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-swipe="onSwipe" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script &gt;
            * function onSwipe(args)
            * { //handle the event
            * }
            * &lt;/script &gt;
            * @example 
            * //Swipe event for Navigation pane
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div id="navpane" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#navpane").ejmNavigationDrawer({
            *   swipe: function (args) { //handle the event
            * }
            * });   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            swipe: null,
            //Web
            /**    
            * Event triggers when the control open.
            * @event
            * @name ejNavigationDrawer#open 	
            * @param {Object} argument Event parameters from Navigation Drawer     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Navigation Drawer model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-open="onOpen" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script &gt;
            * function onOpen(args)
            * { //handle the event
            * }
            * &lt;/script &gt;
            * @example 
            * //Open event for Navigation pane
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div id="navpane" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#navpane").ejNavigationDrawer({
            *   open: function (args) { //handle the event
            * }
            * });   
            * &lt;/script&gt;
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**    
            * Event triggers when the control open.
            * @event
            * @name ejmNavigationDrawer#open 	
            * @param {Object} argument Event parameters from Navigation Drawer     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Navigation Drawer model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-open="onOpen" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script &gt;
            * function onOpen(args)
            * { //handle the event
            * }
            * &lt;/script &gt;
            * @example 
            * //Open event for Navigation pane
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div id="navpane" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#navpane").ejNavigationDrawer({
            *   open: function (args) { //handle the event
            * }
            * });   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            open: null,
            //Web
            /**    
            * Event triggers before the control gets closed.
            * @event
            * @name ejNavigationDrawer#beforeclose 	
            * @param {Object} argument Event parameters from Navigation Drawer     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Navigation Drawer model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejnavigationdrawer" id="navpane" data-ej-beforeclose="onBeforeClose" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script &gt;
            * function onBeforeClose(args)
            * { //handle the event
            * }
            * &lt;/script &gt;
            * @example 
            * //BeforeClose event for Navigation pane
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div id="navpane" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#navpane").ejNavigationDrawer({
            *   beforeClose: function (args) { //handle the event
            * }
            * });   
            * &lt;/script&gt;
            * @memberof ejNavigationDrawer
            * @instance
            */
            //Mobile
            /**    
            * Event triggers before the control gets closed.
            * @event
            * @name ejmNavigationDrawer#beforeclose 	
            * @param {Object} argument Event parameters from Navigation Drawer     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Navigation Drawer model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example  
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div data-role="ejmnavigationdrawer" id="navpane" data-ej-beforeclose="onBeforeClose" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script &gt;
            * function onBeforeClose(args)
            * { //handle the event
            * }
            * &lt;/script &gt;
            * @example 
            * //BeforeClose event for Navigation pane
            * &lt;div id="home" class="navsubpage"&gt;
            * &lt;div align="center" class="content"&gt;
            * &lt;h2 class="title"&gt;
            * Home&lt;/h2&gt;
            * &lt;p&gt;
            * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
            * &lt;/p&gt;
            * &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;style&gt;
            * .list {
            *   border-bottom: 1px solid;
            *   line-height: 50px;
            *   text-align: center;
            *   width:200px;
            *   }
            * &lt;/style&gt;
            * &lt;div id="navpane" &gt;
            * &lt;div class="list"&gt; Home &lt;/div&gt;
            * &lt;div class="list"&gt; Communities &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#navpane").ejmNavigationDrawer({
            *   beforeClose: function (args) { //handle the event
            * }
            * });   
            * &lt;/script&gt;
            * @memberof ejmNavigationDrawer
            * @instance
            */
            beforeClose: null
        },
        //datatype of model variables
        dataTypes: {
            direction: "enum",
            type: "enum"
        },
        //renders the control
        _renderControl: function () {
            this._elementOverlay = ej.buildTag("div#" + this._id + "_Overlay", {}, {}, { "class": this._rootCSS + " " + this._prefixClass + "nb-layout " + this._prefixClass + "nb-overlay" });
            this._elementShadow = ej.buildTag("div#" + this._id + "_shadow", {}, {}, { "class": this._rootCSS + " " + this._prefixClass + "nb-shadow " + "" + this._prefixClass + "nb-type-" + (this.model.type == "slide" ? "slide" : "overlay") });
            this.element.addClass(this._prefixClass + "user-select");
            this._nbHome.append(this._elementOverlay);
            this._elementOverlay.hide();
            this.element.hide();
            this.element.addClass(this._prefixClass + 'nb-layout ' + (this.model.direction.toLowerCase() == "left" ? this._prefixClass + 'nb-left' : this._prefixClass + 'nb-right'));
            this.element.addClass(this._prefixClass + 'nb-type-' + (this.model.type == "slide" ? "slide" : "overlay"));
            this.element.prepend(this._elementShadow);
            this._setWidth();
            this._setLayout();
        },
        /**
        * To configure the transform property for Navigation drawer control
        * @private
        */
        _transform: function (dist, time, element) {
            var translate = "-" + this._browser + "-transform",
                translateVal = "translate3d(" + dist + "px,0px,0px) scale(1)";
            var trans = "-" + this._browser + "-transition-property",
            transVal = "transform",
            transDur = "-" + this._browser + "-transition-duration",
            transDurVal = time + "ms";
            if (element) {
                this.element.addClass("" + this._prefixClass + "nb-animate");
                this.element.css(translate, translateVal).css(trans, transVal).css(transDur, transDurVal);
            }
            else {
                this._nbHome.addClass(this._rootCSS + " " + this._prefixClass + "nb-animate");
                this._nbHome.css(translate, translateVal).css(trans, transVal).css(transDur, transDurVal)
            }
        },
        /**
        * To configure the show property for Navigation drawer control
        * @private
        */
        _show: function () {            
            this.element.show();
            ej.listenTouchEvent((this._isTransitionElement() ? this.element : this._nbHome), ej.transitionEndEvent(), this._transitionOpenHandler, false, this);            
            this.element.addClass("" + this._prefixClass + "nb-opened");
            this._elementOverlay.css("z-index", ej.getMaxZindex() + 1);
            this.element.css("z-index", ej.getMaxZindex() + 2);
            if (!(ej.browserInfo().name == "msie" && ej.browserInfo().version <= 9)) {
                this.model.direction == "left" ? this._transform($(this.element).width(), 400, this._isTransitionElement()) : this._transform(-($(this.element).width()), 400, this._isTransitionElement());
            }
            else {
                $(this.element).show().animate({ "left": this.model.direction == "left" ? "0px" : -($(this.element).width()) }, 400);
            }
            this._data = { element: this.element };
            this.model.enableListView ? $.extend(this._data, { listview: this._lb }) : undefined;
            this._trigger("open", this._data);
        },
        /**
        * To configure the hide property for Navigation drawer control
        * @private
        */
        _hide: function () {
            this._elementOverlay.hide();
            ej.listenTouchEvent((this._isTransitionElement() ? this.element : this._nbHome), ej.transitionEndEvent(), this._transitionCloseHandler, false, this);
            this.element.removeClass("" + this._prefixClass + "nb-opened");
            if (!(ej.browserInfo().name == "msie" && ej.browserInfo().version <= 9))
                this._transform(0, 400, this._isTransitionElement());
            else
                $(this.element).animate({ "left": this.model.direction == "left" ? -($(this.element).width()) : "0px" }, 400).hide();
        },


        _isOpened: function () {
            return this.element.hasClass("" + this._prefixClass + "nb-opened");
        },
        _clearAppviewElement: function () {
            var translate = "-" + this._browser + "-transform";
            var trans = "-" + this._browser + "-transition-property";
            var transDur = "-" + this._browser + "-transition-duration";
            this._nbHome.css(translate, "");
            this._nbHome.css(transDur, "");
            this._nbHome.css(trans, "");
            this._nbHome.removeClass(this._rootCSS + " " + this._prefixClass + "nb-animate");
        },
        _isOtherOpened: function () {
            return $("." + this._prefixClass + "nb-opened").length;
        },

        _isTransitionElement: function () {
            return this.model.type == "overlay" ? true : false;
        },
        /**
        * To configure the width property for Navigation drawer control
        * @private
        */
        _setWidth: function () {
            $(this._nbHome).width() < 500 ? this.element.css("maxwidth", "80%") : this.element.css("maxwidth", "40%");
            this.element.height("100%");
        },

        _setLayout: function () {
            this.element.show();
            if (this.model.direction.toLowerCase() == "left") {
                this.element.offset({ left: this._nbHome.offset().left != 0 ? -((this.element.width() - this._nbHome.offset().left)) : -(this.element.width()) });
            }
            else {
                this.element.offset({ left: this._nbHome.offset().left != 0 ? ($(this._nbHome).width() + this._nbHome.offset().left) : $(this._nbHome).width() });
            }
            this.element.hide();
        },
        /**
        * To configure the destroy property for Navigation drawer control
        * @private
        */
        _destroy: function () {
            this._wireEvents(true);
            this._elementOverlay.remove();
            this._elementShadow.remove();
            if (this._elementWrapper) this.element.unwrap();
            this.element.removeAttr("class style");
            this.element.offset({ left: 0 });
            this._destroyEJMPlugin();
        },
        /**
        * To configure the refresh property for Navigation drawer control
        * @private
        */
        _refresh: function () {
            this._destroy();
            this._init();
        },

        /**
        * Creates Delegates for the functions 
        * @private
        */
        _createDelegate: function () {
            //Swipe Events Handler
            this._swipeStartHandler = $.proxy(this._swipeStart, this);
            this._swipeEndHandler = $.proxy(this._swipeEnd, this);
            this._swipeMoveHandler = $.proxy(this._swipeMove, this);

            //Touch Event Handler
            this._touchMoveHandler = $.proxy(this._touchMove, this);
            this._touchEndHandler = $.proxy(this._touchEnd, this);

            //Transition Event
            this._transitionOpenHandler = $.proxy(this._transitionOpenEnd, this);
            this._transitionCloseHandler = $.proxy(this._transitionCloseEnd, this);

            //Target Touch Event Handler
            this._overlayTapHandler = $.proxy(this._elementOverlayTap, this);

            //TargetButton Tap
            this._targetButtonTapHandler = $.proxy(this._targetButtonTap, this);

            // Size Event Handler
            this._onOrientationChangeHandler = $.proxy(this._onOrientationChangeEvent, this);
            this._onResizeEventHandler = $.proxy(this._onResizeEvent, this);
        },

        _wireEvents: function (remove) {
            //Event Binding
            if (this.model.targetId) {
                if (ej.getCurrentPage)
                    var ele = ej.getCurrentPage();
                else
                    var ele = $("body");

                ej.listenTouchEvent(ele.find("#" + this.model.targetId), ej.endEvent(), this._targetButtonTapHandler, remove, this);
            }
            else {
                ej.listenEvents([this._nbHome, this._nbHome], [ej.startEvent(), ej.endEvent()], [this._swipeStartHandler, this._swipeEndHandler], remove, this);
            }
            //Ovelay Binding
            ej.listenTouchEvent(this._elementOverlay, ej.endEvent(), this._overlayTapHandler, remove, this);

            //Resize Events
            if (ej.isTouchDevice())
                ej.listenEvents([window], ["orientationchange"], [this._onOrientationChangeHandler], remove, this);
            else
                ej.listenTouchEvent(window, "resize", this._onResizeEventHandler, remove, this);
        },

        _transitionCloseEnd: function () {
            this.element.hide();
            this._clearAppviewElement();
            ej.listenTouchEvent((this._isTransitionElement() ? this.element : this._nbHome), ej.transitionEndEvent(), this._transitionCloseHandler, true, this);
        },
        _transitionOpenEnd: function () {
            this._elementOverlay.show();
            if (this._scrollbar)
                this._scrollbar.ejmScrollPanel("refresh");
            if (this._lbscrollbar)
                this._lbscrollbar.ejmScrollPanel("refresh");
            ej.listenTouchEvent((this._isTransitionElement() ? this.element : this._nbHome), ej.transitionEndEvent(), this._transitionOpenHandler, true, this);
        },
        /**
        * Configure touchend on Navigation Drawer  
        * @private
        */
        _targetButtonTap: function (e) {
            e.preventDefault();
            if (!this._isOtherOpened()) this._show();
        },
        _elementOverlayTap: function (e) {
            e.preventDefault();
            this._data = { element: this.element };
            this.model.enableListView ? $.extend(this._data, { listview: this._lb }) : undefined;
            this._trigger("beforeclose", this._data);
            this._hide();
        },
        /**
        * Swipe start on Navigation drawer 
        * @private
        */
        _swipeStart: function (e) {
            var point = e.changedTouches ? e.changedTouches[0] : e;
            this._startSwipeOffsetX = point.clientX - this._nbHome.offset().left;
            this._startSwipeOffsetActualX = point.clientX;
            this._startSwipeOffsetY = point.clientY;
            this._containerX = this._isTransitionElement() ? this.element.offset().left : this._nbHome.offset().left;
            ej.listenTouchEvent(this._nbHome, ej.moveEvent(), this._swipeMoveHandler, false, this);
        },
        /**
        * Swipe Move on Navigation drawer  
        * @private
        */
        _swipeMove: function (e) {
            var point = e.changedTouches ? e.changedTouches[0] : e;
            var allowOpDirection = this._isOpened() ? (this._swipeDirection != this.model.direction.toLowerCase() ? true : false) : false;
            if (this._startSwipeOffsetX && this._startSwipeOffsetX > (e.clientX - this._nbHome.offset().left)) { this._swipeDirection = "right"; }
            else { this._swipeDirection = "left"; }
            if (!allowOpDirection) {
                if (this._swipeDirection == this.model.direction.toLowerCase() && !this._isOtherOpened()) {
                    ej.listenEvents([this._nbHome, this._nbHome, this._nbHome], [ej.moveEvent(), ej.endEvent()], [this._touchMoveHandler, this._touchEndHandler], false, this);
                }
                else {
                    ej.listenEvents([this._nbHome, this._nbHome, this._nbHome], [ej.moveEvent(), ej.endEvent()], [this._touchMoveHandler, this._touchEndHandler], true, this);
                }
            }
            else {
                if (this._startSwipeOffsetX && this._isOpened()) {
                    this._relativeX = point.clientX - this._startSwipeOffsetX;
                    this._relativeY = point.clientY - this._startSwipeOffsetY;
                    if ($(point.target).hasClass("" + this._prefixClass + "nb-overlay")) {
                        if (ej.getRenderMode && ej.getRenderMode() == "ios7") {
                            this._hide();
                            ej.listenTouchEvent(this._nbHome, ej.moveEvent(), this._swipeMoveHandler, true, this);
                        }
                        else
                            if (this.model.direction == "left" ? -(this._relativeX) < this.element.width() : this._relativeX < this.element.width())
                                this._transform((this.model.direction == "left" ? (this.element.width() + this._relativeX) - this._nbHome.offset().left : -((this.element.width() - this._relativeX) - this._nbHome.offset().left)), 0, this._isTransitionElement());
                    }

                }
            }
        },
        /**
        * Swipe end on Navigation drawer  
        * @private
        */
        _swipeEnd: function (e) {
            var point = e.changedTouches ? e.changedTouches[0] : e;
            ej.listenTouchEvent(this._nbHome, ej.moveEvent(), this._swipeMoveHandler, true, this);
        },
        /**
        * Touch move on Navigation drawer  
        * @private
        */
        _touchMove: function (e) {
            var point = e.changedTouches ? e.changedTouches[0] : e;
            ej.listenTouchEvent(this._nbHome, ej.moveEvent(), this._swipeMoveHandler, true, this);
            if (this._isTransitionElement()) { this._containerX = 0; }
            if (this._startSwipeOffsetX && !this._isOpened()) {
                this._relativeX = point.clientX - this._startSwipeOffsetX;
                this._relativeY = point.clientY - this._startSwipeOffsetY;
                if (this.model.direction == "left" ? this._startSwipeOffsetX < 50 : this._startSwipeOffsetX > this._nbHome.width() - 50 && !($.isFunction(ej.isIOS7) ? ej.isIOS7() : false)) {
                    this.element.show();
                    if (this.model.direction == "left" ? this._relativeX - this._nbHome.offset().left < this.element.width() : this._relativeX - this._nbHome.offset().left > -(this.element.width())) {
                        !this._containerX || this.model.targetHome ? this._transform((this._containerX + this._relativeX) - this._nbHome.offset().left, 0, this._isTransitionElement()) : undefined;
                    }
                }
                else {
                    if (ej.getRenderMode && ej.getRenderMode() == "ios7") {
                        if (Math.abs(this._relativeX) > 50)
                        this._show();
                    }
                }
            }
        },
        /**
        * Touch end on Navigation drawer  
        * @private
        */
        _touchEnd: function (e) {
            var point = e.changedTouches ? e.changedTouches[0] : e;
            ej.listenTouchEvent(this._nbHome, ej.moveEvent(), this._touchMoveHandler, true, this);
            if (!this._isOpened() && !($.isFunction(ej.isIOS7) ? ej.isIOS7() : false)) {
                if (!this._containerX) {
                    this._relativeX = point.clientX - this._startSwipeOffsetX;
                    this._relativeY = point.clientY - this._startSwipeOffsetY;
                    if (this.model.direction == "left" ? this._startSwipeOffsetX < 50 : this._startSwipeOffsetX > this._nbHome.width() - 50) {
                        if (this._relativeX > 30 || this._relativeX < -30)
                            this._show();
                        else
                            this._hide();
                    }
                }
                else {
                    this._hide();
                }
            }
            this._data = { targetElement: this._nbHome, element: this.element, direction: this._swipeDirection };
            this.model.enableListView ? $.extend(this._data, { listview: this._lb }) : undefined;
            this._trigger("swipe", this._data);
            ej.listenTouchEvent(this._nbHome, ej.endEvent(), this._touchEndHandler, true, this);
            ej.listenTouchEvent(this._nbHome, "mouseleave", this._touchEndHandler, true, this);
        },
        _onOrientationChangeEvent: function (e) {
            var state;
            if (this._isOpened()) { state = "opned"; } else { state = "clsed" }
            this.element.show();
            if (window.orientation == 0 || window.orientation == 180 || window.orientation == 90) { window.scrollTo(0, 0); }
            this._transform(0, 0, this._isTransitionElement());
            this.element.hide();
            this.element.removeClass("" + this._prefixClass + "nb-opened");
            this._setWidth();
            this._setLayout();
            if (state == "opned") { this._show(); }
        },

        _onResizeEvent: function (e) {
            var state;
            if (this._isOpened()) { state = "opned"; } else { state = "clsed" }
            this.element.show();
            this._transform(0, 0, this._isTransitionElement());
            this.element.hide();
            this.element.removeClass("" + this._prefixClass + "nb-opened");
            this._clearAppviewElement();
            this._setWidth();
            this._setLayout();
            if (state == "opned") { this._show(); }
        },
        /*---------------Public Methods---------------*/
        //Web
        /**
        * To open the navigation drawer control
        * @method open
        * @return jQuery
        * @example 
        * &lt;div id="home" class="navsubpage"&gt;
        * &lt;div align="center" class="content"&gt;
        * &lt;h2 class="title"&gt;
        * Home&lt;/h2&gt;
        * &lt;p&gt;
        * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
        * &lt;/p&gt;
        * &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;style&gt;
        * .list {
        *   border-bottom: 1px solid;
        *   line-height: 50px;
        *   text-align: center;
        *   width:200px;
        *   }
        * &lt;/style&gt;
        * &lt;div data-role="ejnavigationdrawer" id="navpane" &gt;
        * &lt;div class="list"&gt; Home &lt;/div&gt;
        * &lt;div class="list"&gt; Communities &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;script &gt;
        * $(function()
        * { 
        * var lsm = $("#navpane").data("ejNavigationDrawer");
        * lsm.open();
        * });
        * &lt;/script &gt;
        * @memberof ejNavigationDrawer
        * @instance
        */
        //Mobile
        /**
        * To open the navigation drawer control
        * @return jQuery
        * @method open
        * @example 
        * &lt;div id="home" class="navsubpage"&gt;
        * &lt;div align="center" class="content"&gt;
        * &lt;h2 class="title"&gt;
        * Home&lt;/h2&gt;
        * &lt;p&gt;
        * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
        * &lt;/p&gt;
        * &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;style&gt;
        * .list {
        *   border-bottom: 1px solid;
        *   line-height: 50px;
        *   text-align: center;
        *   width:200px;
        *   }
        * &lt;/style&gt;
        * &lt;div data-role="ejmnavigationdrawer" id="navpane" &gt;
        * &lt;div class="list"&gt; Home &lt;/div&gt;
        * &lt;div class="list"&gt; Communities &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;script &gt;
        * $(function()
        * { 
        * var lsm = $("#navpane").data("ejmNavigationDrawer");
        * lsm.open();
        * });
        * &lt;/script &gt;
        * @memberof ejmNavigationDrawer
        * @instance
        */
        open: function (e) {
            this._show();
        },
        //Web
        /**
        * To close the navigation drawer control
        * @method close
        * @return jQuery
        * @example 
        * &lt;div id="home" class="navsubpage"&gt;
        * &lt;div align="center" class="content"&gt;
        * &lt;h2 class="title"&gt;
        * Home&lt;/h2&gt;
        * &lt;p&gt;
        * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
        * &lt;/p&gt;
        * &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;style&gt;
        * .list {
        *   border-bottom: 1px solid;
        *   line-height: 50px;
        *   text-align: center;
        *   width:200px;
        *   }
        * &lt;/style&gt;
        * &lt;div data-role="ejnavigationdrawer" id="navpane" &gt;
        * &lt;div class="list"&gt; Home &lt;/div&gt;
        * &lt;div class="list"&gt; Communities &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;script &gt;
        * $(function()
        * { 
        * var lsm = $("#navpane").data("ejNavigationDrawer");
        * lsm.close();
        * });
        * &lt;/script &gt;
        * @memberof ejNavigationDrawer
        * @instance
        */
        //Mobile
        /**
        * To close the navigation drawer control
        * @method close
        * @return jQuery
        * @example 
        * &lt;div id="home" class="navsubpage"&gt;
        * &lt;div align="center" class="content"&gt;
        * &lt;h2 class="title"&gt;
        * Home&lt;/h2&gt;
        * &lt;p&gt;
        * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
        * &lt;/p&gt;
        * &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;style&gt;
        * .list {
        *   border-bottom: 1px solid;
        *   line-height: 50px;
        *   text-align: center;
        *   width:200px;
        *   }
        * &lt;/style&gt;
        * &lt;div data-role="ejmnavigationdrawer" id="navpane" &gt;
        * &lt;div class="list"&gt; Home &lt;/div&gt;
        * &lt;div class="list"&gt; Communities &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;script &gt;
        * $(function()
        * { 
        * var lsm = $("#navpane").data("ejmNavigationDrawer");
        * lsm.close();
        * });
        * &lt;/script &gt;
        * @memberof ejmNavigationDrawer
        * @instance
        */
        close: function (e) {
            this._data = { element: this.element };
            this.model.enableListView ? $.extend(this._data, { listview: this._lb }) : undefined;
            this._trigger("beforeClose", this._data);
            this._hide();
        },
        //Web
        /**
        * To Toggle the navigation drawer control
        * @method toggle
        * @return jQuery
        * @example 
        * &lt;div id="home" class="navsubpage"&gt;
        * &lt;div align="center" class="content"&gt;
        * &lt;h2 class="title"&gt;
        * Home&lt;/h2&gt;
        * &lt;p&gt;
        * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
        * &lt;/p&gt;
        * &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;style&gt;
        * .list {
        *   border-bottom: 1px solid;
        *   line-height: 50px;
        *   text-align: center;
        *   width:200px;
        *   }
        * &lt;/style&gt;
        * &lt;div data-role="ejnavigationdrawer" id="navpane" &gt;
        * &lt;div class="list"&gt; Home &lt;/div&gt;
        * &lt;div class="list"&gt; Communities &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;script &gt;
        * $(function()
        * { 
        * var lsm = $("#navpane").data("ejNavigationDrawer");
        * lsm.toggle();
        * });
        * &lt;/script &gt;
        * @memberof ejNavigationDrawer
        * @instance
        */
        //Mobile
        /**
        * To Toggle the navigation drawer control
        * @method toggle
        * @return jQuery
        * @example 
        * &lt;div id="home" class="navsubpage"&gt;
        * &lt;div align="center" class="content"&gt;
        * &lt;h2 class="title"&gt;
        * Home&lt;/h2&gt;
        * &lt;p&gt;
        * Founded by industry experts in 2001,Syncfusion, Inc. provides the broadest range of enterprise-class software components and tools for the Microsoft .NET platform.
        * &lt;/p&gt;
        * &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;style&gt;
        * .list {
        *   border-bottom: 1px solid;
        *   line-height: 50px;
        *   text-align: center;
        *   width:200px;
        *   }
        * &lt;/style&gt;
        * &lt;div data-role="ejmnavigationdrawer" id="navpane" &gt;
        * &lt;div class="list"&gt; Home &lt;/div&gt;
        * &lt;div class="list"&gt; Communities &lt;/div&gt;
        * &lt;/div&gt;
        * &lt;script &gt;
        * $(function()
        * { 
        * var lsm = $("#navpane").data("ejmNavigationDrawer");
        * lsm.toggle();
        * });
        * &lt;/script &gt;
        * @memberof ejmNavigationDrawer
        * @instance
        */
        toggle: function (e) {
            this._isOpened() ? this.close() : this.open();
        }
        /*---------------Public Methods End---------------*/
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html ListView elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {



    ej.widget("ejListViewBase", "ej.ListViewBase", {


        defaults: {
            // Web
            /**		
            * Specifies the height.
            * @default undefined
            * @member height {object}
            * @type {number}
            * @example 
            * //Set the height property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-height="300" data-ej-allowScrolling=true &gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the height property in obtrusive way.
            * &lt;div id="lb" data-ej-allowScrolling=true &gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set height on initialization. 
            * //To set height API value 
            * $("#lb").ejListView ({ height: 300 });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  height, after initialization:<br>
            * // Get the height API value.		
            *  $("#lb").ejListView ("option", "height");			
            * // Set the height API
            * $("#lb").ejListView ("option", "height", 300);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the height of the ListView.
            * @default undefined
            * @member height {object}
            * @type {number}
            * @example 
            * //Set the height property in Unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-height="300"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * // Set ListView height on initialization. 
            * //To set height API value 
            * $("#lb").ejmListView ({ height: 300 });
            * //Get or set the ListView height, after initialization:<br>
            * // Gets the height API value.		
            *  $("#lb").ejmListView ("option", "height");			
            * // Sets the height API
            * $("#lb").ejmListView ("option", "height", 300);
            * @memberof ejmListView
            * @instance
            */
            height: null,
            /**		
            * Specifies the width.
            * @default undefined
            * @member width {object}
            * @type {number}
            * @example 
            * //Set the width property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-width="200"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the width property in obtrusive way.
            * &lt;div id="lb"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set width on initialization. 
            * //To set width API value 
            * $("#lb").ejListView ({ width: 200 });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  width, after initialization:<br>
            * // Get the width API value.		
            *  $("#lb").ejListView ("option", "width");			
            * // Set the width API
            * $("#lb").ejListView ("option", "width", 200);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the width of the ListView.
            * @default undefined
            * @member width {object}
            * @type {number}
            * @example 
            * //Set the width property in Unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-width="200"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * // Set ListView width on initialization. 
            * //To set width API value 
            * $("#lb").ejmListView ({ width: 200 });
            * //Get or set the ListView width, after initialization:<br>
            * // Gets the width API value.		
            *  $("#lb").ejmListView ("option", "width");			
            * // Sets the width API
            * $("#lb").ejmListView ("option", "width", 200);
            * @memberof ejmListView
            * @instance
            */
            width: null,
            /**		
            * Specifies the index of item which need to be in selected state initially while loading.
            * @default 0
            * @member selectedItemIndex {object}
            * @type {number}
            * @example 
            * //Set the selectedItemIndex property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-selectedItemIndex="2"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the selectedItemIndex property in obtrusive way.
            * &lt;div id="lb"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set selectedItemIndex on initialization. 
            * //To set selectedItemIndex API value 
            * $("#lb").ejListView ({ selectedItemIndex: 2 });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  selectedItemIndex, after initialization:<br>
            * // Get the selectedItemIndex API value.		
            *  $("#lb").ejListView ("option", "selectedItemIndex");			
            * // Set the selectedItemIndex API
            * $("#lb").ejListView ("option", "selectedItemIndex", 2);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the selectedItemIndex of the ListView.
            * @default 0
            * @member selectedItemIndex {object}
            * @type {number}
            * @example 
            * //Set the selectedItemIndex property in Unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-selectedItemIndex="2"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * // Set ListView selectedItemIndex on initialization. 
            * //To set selectedItemIndex API value 
            * $("#lb").ejmListView ({ selectedItemIndex: 2 });
            * //Get or set the ListView selectedItemIndex, after initialization:<br>
            * // Gets the selectedItemIndex API value.		
            *  $("#lb").ejmListView ("option", "selectedItemIndex");			
            * // Sets the selectedItemIndex API
            * $("#lb").ejmListView ("option", "selectedItemIndex", 2);
            * @memberof ejmListView
            * @instance
            */
            selectedItemIndex: -1,
            /**		
            * Specifies whether to group the list item.
            * @default false
            * @member enableGroupList {object}
            * @type {boolean}
            * @example 
            * //Set the enableGroupList property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-enableGroupList="true"&gt;
            * 	&lt;ul data-ej-grouplisttitle="Network"&gt;
            *		&lt;li data-ej-text="Airplane Mode"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wi-Fi"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Notifications"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Location Services"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Apps"&gt;
            *		&lt;li data-ej-text="Sound"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Settings"&gt;
            *		&lt;li data-ej-text="General"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableGroupList property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul data-ej-grouplisttitle="Network"&gt;
            *		&lt;li data-ej-text="Airplane Mode"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wi-Fi"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Notifications"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Location Services"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Apps"&gt;
            *		&lt;li data-ej-text="Sound"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Settings"&gt;
            *		&lt;li data-ej-text="General"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableGroupList on initialization. 
            * //To set enableGroupList API value 
            * $("#lb").ejListView ({ enableGroupList: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enableGroupList, after initialization:<br>
            * // Get the enableGroupList API value.		
            *  $("#lb").ejListView ("option", "enableGroupList");			
            * // Set the enableGroupList API
            * $("#lb").ejListView ("option", "enableGroupList", true);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to group the list item.
            * @default false
            * @member enableGroupList {object}
            * @type {boolean}
            * @example 
            * //Set the enableGroupList property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-enableGroupList="true"&gt;
            * 	&lt;ul data-ej-grouplisttitle="Network"&gt;
            *		&lt;li data-ej-text="Airplane Mode"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wi-Fi"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Notifications"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Location Services"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Apps"&gt;
            *		&lt;li data-ej-text="Sound"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Settings"&gt;
            *		&lt;li data-ej-text="General"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableGroupList property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul data-ej-grouplisttitle="Network"&gt;
            *		&lt;li data-ej-text="Airplane Mode"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wi-Fi"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Notifications"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Location Services"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Apps"&gt;
            *		&lt;li data-ej-text="Sound"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * 	&lt;ul data-ej-grouplisttitle="Settings"&gt;
            *		&lt;li data-ej-text="General"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Brightness"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Wallpaper"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableGroupList on initialization. 
            * //To set enableGroupList API value 
            * $("#lb").ejmListView ({ enableGroupList: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enableGroupList, after initialization:<br>
            * // Get the enableGroupList API value.		
            *  $("#lb").ejmListView ("option", "enableGroupList");			
            * // Set the enableGroupList API
            * $("#lb").ejmListView ("option", "enableGroupList", true);
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            enableGroupList: false,
            /**		
            * Specifies whether to load ajax content while selecting item.
            * @default false
            * @member enableAjax {object}
            * @type {boolean}
            * @example 
            * //Set the enableAjax property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example  
            * //Set the enableAjax property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableAjax on initialization. 
            * //To set enableAjax API value
            * $("#lb").ejListView ({ enableAjax: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enableAjax, after initialization:<br>
            * // Get the enableAjax API value.		
            * $("#lb").ejListView ("option", "enableAjax");			
            * // Set the enableAjax API
            * $("#lb").ejListView ("option", "enableAjax", true);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to load ajax content while selecting item.
            * @default false
            * @member enableAjax {object}
            * @type {boolean}
            * @example 
            * //Set the enableAjax property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example  
            * //Set the enableAjax property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableAjax on initialization. 
            * //To set enableAjax API value
            * $("#lb").ejmListView ({ enableAjax: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enableAjax, after initialization:<br>
            * // Get the enableAjax API value.		
            * $("#lb").ejmListView ("option", "enableAjax");			
            * // Set the enableAjax API
            * $("#lb").ejmListView ("option", "enableAjax", true);
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            enableAjax: false,
            /**		
            * Specifies whether to enable caching the content.
            * @default false
            * @member enableCache {object}
            * @type {boolean}
            * @example 
            * //Set the enableCache property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-enableCache="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableCache property in obtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-enableCache="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableCache on initialization. 
            * //To set enableCache API value 
            * $("#lb").ejListView ({ enableCache: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enableCache, after initialization:<br>
            * // Get the enableCache API value.		
            * $("#lb").ejListView ("option", "enableCache");			
            * // Set the enableCache API
            * $("#lb").ejListView ("option", "enableCache", true);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to enable caching the content.
            * @default false
            * @member enableCache {object}
            * @type {boolean}
            * @example 
            * //Set the enableCache property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCache="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableCache property in obtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCache="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true" data-ej-enableCache="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableCache on initialization. 
            * //To set enableCache API value 
            * $("#lb").ejmListView ({ enableCache: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enableCache, after initialization:<br>
            * // Get the enableCache API value.		
            * $("#lb").ejmListView ("option", "enableCache");			
            * // Set the enableCache API
            * $("#lb").ejmListView ("option", "enableCache", true);
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            enableCache: false,
            /**		
            * Specifies to maintain the current model value to browser cookies for state maintenance. While refresh the page, the model value will get apply to the control from browser cookies.
            * @default false
            * @member enablePersistence {object}
            * @type {boolean}
            * @example 
            * //Set the enablePersistence property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-enablepersistence=true &gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enablePersistence property in obtrusive way.
            * &lt;div id="lb"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enablePersistence on initialization. 
            * //To set enablePersistence API value 
            * $("#lb").ejListView ({ enablePersistence: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enablePersistence, after initialization:<br>
            * // Get the enablePersistence API value.		
            *  $("#lb").ejListView ("option", "enablePersistence");			
            * // Set the enablePersistence API
            * $("#lb").ejListView ("option", "enablePersistence", true);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies to maintain the current model value to browser cookies for state maintenance. While refresh the page, the model value will get apply to the control from browser cookies.
            * @default false
            * @member enablePersistence {object}
            * @type {boolean}
            * @example 
            * //Set the enablePersistence property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-enablepersistence=true &gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enablePersistence property in obtrusive way.
            * &lt;div id="lb"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enablePersistence on initialization. 
            * //To set enablePersistence API value 
            * $("#lb").ejmListView ({ enablePersistence: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  enablePersistence, after initialization:<br>
            * // Get the enablePersistence API value.		
            *  $("#lb").ejmListView ("option", "enablePersistence");			
            * // Set the enablePersistence API
            * $("#lb").ejmListView ("option", "enablePersistence", true);
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            enablePersistence: false,
            //Events
            /**    
            * Event triggers before the items loaded.
            * @event
            * @name ejListView#load	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @example 
            * //Set the load property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-load="load"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //load event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	load: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**    
            * Event triggers before the items loaded.
            * @event
            * @name ejmListView#load	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @example 
            * //Set the load property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-load="load"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //load event for ListView
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejmListView({
            *   	load: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            load: null,
            /**    
            * Event triggers after the items loaded.
            * @event
            * @name ejListView#loadComplete	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @example 
            * //Set the loadComplete property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-loadComplete="loadComplete"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //loadComplete event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	loadComplete: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**    
            * Event triggers after the items loaded.
            * @event
            * @name ejmListView#loadComplete	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @example 
            * //Set the loadComplete property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-loadComplete="loadComplete"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //loadComplete event for ListView
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejmListView({
            *   	loadComplete: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            loadComplete: null,
            /**    
            * Event triggers before the ajax request happens.
            * @event
            * @name ejListView#ajaxBeforeLoad	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {Object} argument.ajaxData returns the ajax settings.
            * @example 
            * //Set the ajaxBeforeLoad property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-ajaxBeforeLoad="ajaxBeforeLoad"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxBeforeLoad event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	ajaxBeforeLoad: function (args) { //handle the event 
            * }
            *	});           
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**    
            * Event triggers before the ajax request happens.
            * @event
            * @name ejmListView#ajaxBeforeLoad	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {Object} argument.ajaxData returns the ajax settings.
            * @example 
            * //Set the ajaxBeforeLoad property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-ajaxBeforeLoad="ajaxBeforeLoad"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxBeforeLoad event for ListView
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejmListView({
            *   	ajaxBeforeLoad: function (args) { //handle the event 
            * }
            *	});           
            * });
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            ajaxBeforeLoad: null,
            /**    
            * Event triggers after the ajax content loaded successfully.
            * @event
            * @name ejListView#ajaxSuccess
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {string}  argument.content returns the ajax current content.
            * @param {object}  argument.item returns the curent list item.
            * @param {string}  argument.text returns the current item text.
            * @param {number}  argument.index returns the current item index.
            * @param {string}  argument.url returns the current url of the ajax post.
            * @example 
            * //Set the ajaxSuccess property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-ajaxSuccess="ajaxSuccess"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxSuccess event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	ajaxSuccess: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**    
            * Event triggers after the ajax content loaded successfully.
            * @event
            * @name ejmListView#ajaxSuccess
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {string}  argument.content returns the ajax current content.
            * @param {object}  argument.item returns the curent list item.
            * @param {string}  argument.text returns the current item text.
            * @param {number}  argument.index returns the current item index.
            * @param {string}  argument.url returns the current url of the ajax post.
            * @example 
            * //Set the ajaxSuccess property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-ajaxSuccess="ajaxSuccess"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxSuccess event for ListView
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejmListView({
            *   	ajaxSuccess: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            ajaxSuccess: null,
            /**    
            * Event triggers when the ajax request failed.
            * @event
            * @name ejListView#ajaxError	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {Object} argument.errorThrown returns the error thrown in the ajax post.
            * @param {Object} argument.textStatus returns the status.
            * @param {object} argument.item returns the curent list item.
            * @param {string} argument.text returns the current item text.
            * @param {number} argument.index returns the current item index.
            * @example 
            * //Set the ajaxError property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-ajaxError="ajaxError"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxError event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	ajaxError: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**    
            * Event triggers when the ajax request failed.
            * @event
            * @name ejmListView#ajaxError	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {Object} argument.errorThrown returns the error thrown in the ajax post.
            * @param {Object} argument.textStatus returns the status.
            * @param {object} argument.item returns the curent list item.
            * @param {string} argument.text returns the current item text.
            * @param {number} argument.index returns the current item index.
            * @example 
            * //Set the ajaxError property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-ajaxError="ajaxError"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxError event for ListView
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejmListView({
            *   	ajaxError: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            ajaxError: null,
            /**    
            * Event triggers after the ajax content loaded completely.
            * @event
            * @name ejListView#ajaxComplete	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @example 
            * //Set the ajaxComplete property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-ajaxComplete="ajaxComplete"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxComplete event for ListView
            * &lt;div id="lb" data-role="ejlistview" &gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	ajaxComplete: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**    
            * Event triggers after the ajax content loaded completely.
            * @event
            * @name ejmListView#ajaxComplete	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @example 
            * //Set the ajaxComplete property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-ajaxComplete="ajaxComplete"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //ajaxComplete event for ListView
            * &lt;div id="lb" data-role="ejmlistview" &gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejmListView({
            *   	ajaxComplete: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            ajaxComplete: null,
            /**		
            * Specifies the settings option for ajax request.
            * @type {JSONObject}  
            * @example 
            * //Set ajaxSettings in unobtrusive way
            * &lt;div id="lb" data-role="ejlistview" data-ej-ajaxsettings-type="GET" data-ej-ajaxsettings-cache=false data-ej-ajaxsettings-async=true
            * data-ej-ajaxsettings-datatype="html" data-ej-ajaxsettings-contenttype="html" &gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;          
            * @example 
            * //Set ajaxSettings in obtrusive way
            * &lt;div id="lb" data-role="ejlistview" &gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * // Set Tab ajaxSettings on initialization. 
            * //To set ajaxSettings API value 
            * &lt;script&gt;
            * $("#lb").ejListView({ ajaxSettings: { type: 'GET',
            *   cache: false,
            *   async: true,
            *   dataType: "html",
            *   contentType: "html"
            *   } });		
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView ajaxSettings, after initialization:<br>
            * // Get the ajaxSettings API value.
            * $("#lb").ejListView ("option", "ajaxSettings");			
            * // Set the ajaxSettings API
            * $("#lb").ejListView ("option", "ajaxSettings", { type: 'GET',cache: false,async: true,dataType: "html",contentType: "html",url: "",data: {}});        
            * &lt;/script&gt;    
            * @memberof ejListView
            * @instance				
            */
            //Mobile
            /**		
            * Specifies the settings option for ajax request.
            * @type {JSONObject}  
            * @example 
            * //Set ajaxSettings in unobtrusive way
            * &lt;div id="lb" data-role="ejmlistview" data-ej-ajaxsettings-type="GET" data-ej-ajaxsettings-cache=false data-ej-ajaxsettings-async=true
            * data-ej-ajaxsettings-datatype="html" data-ej-ajaxsettings-contenttype="html" &gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;          
            * @example 
            * //Set ajaxSettings in obtrusive way
            * &lt;div id="lb" data-role="ejmlistview" &gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableajax="true"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * // Set Tab ajaxSettings on initialization. 
            * //To set ajaxSettings API value 
            * &lt;script&gt;
            * $("#lb").ejmListView({ ajaxSettings: { type: 'GET',
            *   cache: false,
            *   async: true,
            *   dataType: "html",
            *   contentType: "html"
            *   } });		
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView ajaxSettings, after initialization:<br>
            * // Get the ajaxSettings API value.
            * $("#lb").ejmListView ("option", "ajaxSettings");			
            * // Set the ajaxSettings API
            * $("#lb").ejmListView ("option", "ajaxSettings", { type: 'GET',cache: false,async: true,dataType: "html",contentType: "html",url: "",data: {}});        
            * &lt;/script&gt;    
            * @memberof ejmListView
            * @instance				
            */
            ajaxSettings: {
                type: 'GET',
                cache: false,
                async: true,
                dataType: "html",
                contentType: "html",
                url: "",
                data: {}
            },
            /**		
            * Specifies whether need to render the control with the template contents.
            * @default false
            * @member renderTemplate {object}
            * @type {boolean}
            * @example 
            * //Set the renderTemplate property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target1"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-rendertemplate=true data-ej-templateid="target2"&gt;&lt;/li&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target3"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;div id="target1"&gt;
            *	&lt;div&gt Template1 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target2"&gt;
            *	&lt;div&gt Template2 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target3"&gt;
            *	&lt;div&gt Template3 &lt;/div&gt;
            * &lt;/div&gt;            
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether need to render the control with the template contents.
            * @default false
            * @member renderTemplate {object}
            * @type {boolean}
            * @example 
            * //Set the renderTemplate property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target1"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-rendertemplate=true data-ej-templateid="target2"&gt;&lt;/li&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target3"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;div id="target1"&gt;
            *	&lt;div&gt Template1 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target2"&gt;
            *	&lt;div&gt Template2 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target3"&gt;
            *	&lt;div&gt Template3 &lt;/div&gt;
            * &lt;/div&gt;            
            * @memberof ejmListView
            * @instance
            */
            renderTemplate: false,
            /**		
            * Specifies ID of the element contains template contents.
            * @default false
            * @member templateId {object}
            * @type {boolean}
            * @example 
            * //Set the templateId property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target1"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-rendertemplate=true data-ej-templateid="target2"&gt;&lt;/li&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target3"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;div id="target1"&gt;
            *	&lt;div&gt Template1 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target2"&gt;
            *	&lt;div&gt Template2 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target3"&gt;
            *	&lt;div&gt Template3 &lt;/div&gt;
            * &lt;/div&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies ID of the element contains template contents.
            * @default false
            * @member templateId {object}
            * @type {boolean}
            * @example 
            * //Set the templateId property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target1"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-rendertemplate=true data-ej-templateid="target2"&gt;&lt;/li&gt;
            *		&lt;li data-ej-rendertemplate=true data-ej-templateid="target3"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;div id="target1"&gt;
            *	&lt;div&gt Template1 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target2"&gt;
            *	&lt;div&gt Template2 &lt;/div&gt;
            * &lt;/div&gt;
            * &lt;div id="target3"&gt;
            *	&lt;div&gt Template3 &lt;/div&gt;
            * &lt;/div&gt;
            * @memberof ejmListView
            * @instance
            */
            templateId: null,
            /**		
            * Specifies whether to retain the selection of the item.
            * @default false
            * @member persistSelection {object}
            * @type {boolean}
            * @example 
            * //Set the persistSelection property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-persistSelection="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the persistSelection property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set persistSelection on initialization. 
            * //To set persistSelection API value 
            * $("#lb").ejListView ({ persistSelection: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView persistSelection, after initialization:<br>
            * // Get the persistSelection API value.		
            * $("#lb").ejListView ("option", "persistSelection");			
            * // Set the persistSelection API
            * $("#lb").ejListView ("option", "persistSelection", true);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to retain the selection of the item.
            * @default false
            * @member persistSelection {object}
            * @type {boolean}
            * @example 
            * //Set the persistSelection property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-persistSelection="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the persistSelection property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set persistSelection on initialization. 
            * //To set persistSelection API value 
            * $("#lb").ejmListView ({ persistSelection: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView persistSelection, after initialization:<br>
            * // Get the persistSelection API value.		
            * $("#lb").ejmListView ("option", "persistSelection");			
            * // Set the persistSelection API
            * $("#lb").ejmListView ("option", "persistSelection", true);
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            persistSelection: false,
            /**		
            * Specifies whether to prevent the selection of the item.
            * @default false
            * @member preventSelection {object}
            * @type {boolean}
            * @example 
            * //Set the preventSelection property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-preventSelection="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the preventSelection property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set preventSelection on initialization. 
            * //To set preventSelection API value 
            * $("#lb").ejListView ({ preventSelection: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView preventSelection, after initialization:<br>
            * // Get the preventSelection API value.		
            * $("#lb").ejListView ("option", "preventSelection");			
            * // Set the preventSelection API
            * $("#lb").ejListView ("option", "preventSelection", true);
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to prevent the selection of the item.
            * @default false
            * @member preventSelection {object}
            * @type {boolean}
            * @example 
            * //Set the preventSelection property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-preventSelection="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the preventSelection property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set preventSelection on initialization. 
            * //To set preventSelection API value 
            * $("#lb").ejmListView ({ preventSelection: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView preventSelection, after initialization:<br>
            * // Get the preventSelection API value.		
            * $("#lb").ejmListView ("option", "preventSelection");			
            * // Set the preventSelection API
            * $("#lb").ejmListView ("option", "preventSelection", true);
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            preventSelection: false,
            /**		
            * Specifies the datasource is enabled.
            * @default []
            * @member dataSource {object}
            * @type {JSONArray}
            * @example 
            * //Set the dataSource property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-datasource="window.dbitem"&gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * window.dbitem =
            * [   { "text": "Hot Singles"},
            *     { "text": "Rising Artists"},
            *     { "text": "Live Music" },
            *     { "text": "Best of 2013 So Far"},
            *     { "text": "100 Albums - $5 Each"},
            *     { "text": "Hip-Hop and R&B Sale"},
            *     { "text": "CD Deals"}];
            * &lt;/script&gt; 
            * @example 
            * //Set the dataSource property in obtrusive way.
            * &lt;div id="lb" &gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * $(function(){
            * $("#lb").ejListView({dataSource:window.dbitem});
            * });
            * window.dbitem =
            * [   { "text": "Hot Singles"},
            *     { "text": "Rising Artists"},
            *     { "text": "Live Music" },
            *     { "text": "Best of 2013 So Far"},
            *     { "text": "100 Albums - $5 Each"},
            *     { "text": "Hip-Hop and R&B Sale"},
            *     { "text": "CD Deals"}];
            * &lt;/script&gt;  
            * @example       
            * &lt;script&gt;
            * //Get or set  dataSource, after initialization:<br>
            * // Get the dataSource API value.		
            * $("#lb").ejListView ("option", "dataSource");			
            * // Set the dataSource API
            * $("#lb").ejListView ("option", "dataSource", true);   
            * &lt;/script&gt;                     
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the datasource is enabled.
            * @default []
            * @member dataSource {object}
            * @type {JSONArray}
            * @example 
            * //Set the dataSource property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-datasource="window.dbitem"&gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * window.dbitem =
            * [   { "text": "Hot Singles"},
            *     { "text": "Rising Artists"},
            *     { "text": "Live Music" },
            *     { "text": "Best of 2013 So Far"},
            *     { "text": "100 Albums - $5 Each"},
            *     { "text": "Hip-Hop and R&B Sale"},
            *     { "text": "CD Deals"}];
            * &lt;/script&gt; 
            * @example 
            * //Set the dataSource property in obtrusive way.
            * &lt;div id="lb" &gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * $(function(){
            * $("#lb").ejmListView({dataSource:window.dbitem});
            * });
            * window.dbitem =
            * [   { "text": "Hot Singles"},
            *     { "text": "Rising Artists"},
            *     { "text": "Live Music" },
            *     { "text": "Best of 2013 So Far"},
            *     { "text": "100 Albums - $5 Each"},
            *     { "text": "Hip-Hop and R&B Sale"},
            *     { "text": "CD Deals"}];
            * &lt;/script&gt;  
            * @example       
            * &lt;script&gt;
            * //Get or set  dataSource, after initialization:<br>
            * // Get the dataSource API value.		
            * $("#lb").ejmListView ("option", "dataSource");			
            * // Set the dataSource API
            * $("#lb").ejmListView ("option", "dataSource", true);   
            * &lt;/script&gt;                     
            * @memberof ejmListView
            * @instance
            */
            dataSource: [],
            /**		
            * Specifies the query to execute with the datasource.
            * @default null
            * @member query {object}
            * @type {ej.Query}
            * @example 
            * //Set the query property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-fieldSettings="window.dbitem" data-ej-datasource="window.datasource" 
            * data-ej-query="ej.Query().from('Orders').select('ShipCity').take(5)"&gt;
            * &lt;/div&gt;            
            * &lt;script&gt;            
            *		// DataManager creation
            *		window.datasource = ej.DataManager({
            *   	url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"
            *		});
            *		window.dbitem = { "text": "ShipCity" };            
            * &lt;/script&gt;
            * @example 
            * //Set the query property in obtrusive way.
            * &lt;div id="lb" &gt;
            * &lt;/div&gt;            
            * &lt;script&gt;            
            *		// DataManager creation
            *		window.datasource = ej.DataManager({
            *   	url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"
            *		});
            *		window.dbitem = { "text": "ShipCity" };   
            * $(function(){
            * $("#lb").ejListView({fieldSettings:"window.dbitem",dataSource:"window.datasource",query:"ej.Query().from('Orders').select('ShipCity').take(5)"});
            * });         
            * &lt;/script&gt;
            * @example        
            * &lt;script&gt;  
            * //Get or set  query, after initialization:<br>
            * // Get the query API value.		
            * $("#lb").ejListView ("option", "query");			
            * // Set the query API
            * $("#lb").ejListView ("option", "query", true);  
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the query to execute with the datasource.
            * @default null
            * @member query {object}
            * @type {ej.Query}
            * @example 
            * //Set the query property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-fieldSettings="window.dbitem" data-ej-datasource="window.datasource" 
            * data-ej-query="ej.Query().from('Orders').select('ShipCity').take(5)"&gt;
            * &lt;/div&gt;            
            * &lt;script&gt;            
            *		// DataManager creation
            *		window.datasource = ej.DataManager({
            *   	url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"
            *		});
            *		window.dbitem = { "text": "ShipCity" };            
            * &lt;/script&gt;
            * @example 
            * //Set the query property in obtrusive way.
            * &lt;div id="lb" &gt;
            * &lt;/div&gt;            
            * &lt;script&gt;            
            *		// DataManager creation
            *		window.datasource = ej.DataManager({
            *   	url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"
            *		});
            *		window.dbitem = { "text": "ShipCity" };   
            * $(function(){
            * $("#lb").ejmListView({fieldSettings:"window.dbitem",dataSource:"window.datasource",query:"ej.Query().from('Orders').select('ShipCity').take(5)"});
            * });         
            * &lt;/script&gt;
            * @example        
            * &lt;script&gt;  
            * //Get or set  query, after initialization:<br>
            * // Get the query API value.		
            * $("#lb").ejmListView ("option", "query");			
            * // Set the query API
            * $("#lb").ejmListView ("option", "query", true);  
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            query: null,
            /**		
            * Specifies whether to show the header.
            * @default true
            * @member showHeader {object}
            * @type {boolean}
            * @example 
            * //Set the showHeader property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-showHeader="true"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the showHeader property in obtrusive way.
            * &lt;div id="lb"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set showHeader on initialization. 
            * //To set showHeader API value 
            * $("#lb").ejListView ({ showHeader: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  showHeader, after initialization:<br>
            * // Get the showHeader API value.		
            *  $("#lb").ejListView ("option", "showHeader");			
            * // Set the showHeader API
            * $("#lb").ejListView ("option", "showHeader", true);  
            * &lt;/script&gt;          
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to show the header.
            * @default false
            * @member showHeader {object}
            * @type {boolean}
            * @example 
            * //Set the showHeader property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-showHeader="true"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the showHeader property in obtrusive way.
            * &lt;div id="lb"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set showHeader on initialization. 
            * //To set showHeader API value 
            * $("#lb").ejmListView ({ showHeader: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  showHeader, after initialization:<br>
            * // Get the showHeader API value.		
            *  $("#lb").ejmListView ("option", "showHeader");			
            * // Set the showHeader API
            * $("#lb").ejmListView ("option", "showHeader", true);  
            * &lt;/script&gt;          
            * @memberof ejmListView
            * @instance
            */
            showHeader: false,
            /**		
            * Specifies the title of the header.
            * @default Title
            * @member headerTitle {object}
            * @type {string}
            * @example 
            * //Set the headerTitle property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-headerTitle="Title"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the headerTitle property in obtrusive way.
            * &lt;div id="lb" &gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set headerTitle on initialization. 
            * //To set headerTitle API value 
            * $("#lb").ejListView ({ headerTitle: "Title" });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  headerTitle, after initialization:<br>
            * // Get the headerTitle API value.		
            *  $("#lb").ejListView ("option", "headerTitle");			
            * // Set the headerTitle API
            * $("#lb").ejListView ("option", "headerTitle", "Title");
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the title of the header.
            * @default Title
            * @member headerTitle {object}
            * @type {string}
            * @example 
            * //Set the headerTitle property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-headerTitle="Title"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the headerTitle property in obtrusive way.
            * &lt;div id="lb" &gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set headerTitle on initialization. 
            * //To set headerTitle API value 
            * $("#lb").ejmListView ({ headerTitle: "Title" });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  headerTitle, after initialization:<br>
            * // Get the headerTitle API value.		
            *  $("#lb").ejmListView ("option", "headerTitle");			
            * // Set the headerTitle API
            * $("#lb").ejmListView ("option", "headerTitle", "Title");
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            headerTitle: "Title",
            /**		
            * Specifies the text of the back button in the header.
            * @default null
            * @member headerBackButtonText {object}
            * @type {string}
            * @example 
            * //Set the headerBackButtonText property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-showHeaderBackButton="true" data-ej-headerBackButtonText="Back"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the headerBackButtonText property in obtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-showHeaderBackButton="true"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set headerBackButtonText on initialization. 
            * //To set headerBackButtonText API value 
            * $("#lb").ejListView ({ headerBackButtonText: "Back" });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  headerBackButtonText, after initialization:<br>
            * // Get the headerBackButtonText API value.		
            *  $("#lb").ejListView ("option", "headerBackButtonText");			
            * // Set the headerBackButtonText API
            * $("#lb").ejListView ("option", "headerBackButtonText", "Back");
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the text of the back button in the header.
            * @default undefined
            * @member headerBackButtonText {object}
            * @type {string}
            * @example 
            * //Set the headerBackButtonText property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-showHeaderBackButton="true" data-ej-headerBackButtonText="Back"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the headerBackButtonText property in obtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-showHeaderBackButton="true"&gt;
            *	 &lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            * 	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set headerBackButtonText on initialization. 
            * //To set headerBackButtonText API value 
            * $("#lb").ejmListView ({ headerBackButtonText: "Back" });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set  headerBackButtonText, after initialization:<br>
            * // Get the headerBackButtonText API value.		
            *  $("#lb").ejmListView ("option", "headerBackButtonText");			
            * // Set the headerBackButtonText API
            * $("#lb").ejmListView ("option", "headerBackButtonText", "Back");
            * &lt;/script&gt;
            * @memberof ejmListView
            * @instance
            */
            headerBackButtonText: null,
            /**		
            * Specifies the field settings to map the datasource.
            * @type {JSONArray}
            * @member fieldSettings {object}
            * @example 
            * //Set the fieldSettings property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-fieldSettings="window.musicFields" data-ej-datasource="window.dbitem" &gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * window.dbitem =
            * [{ "Texts": "Discover Music", "PrimaryKeys": "1" },
            *     { "Texts": "Hot Singles", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Rising Artists", "PrimaryKeyss": null, "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Live Music", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Best of 2013 So Far", "ParentPrimaryKeyss": "1" },
            *{ "Texts": "Sales and Events", "PrimaryKeys": "2" },
            *     { "Texts": "100 Albums - $5 Each", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "Hip-Hop and R&B Sale", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "CD Deals", "ParentPrimaryKeyss": "2" }];
            * window.musicFields = {
            * "href": "Hrefs",
            * "text": "Texts",
            * "primaryKey": "PrimaryKeys",
            * "parentPrimaryKey": "ParentPrimaryKeyss"
            * };
            * &lt;/script&gt;
            * @example 
            * //Set the fieldSettings property in obtrusive way.
            * &lt;div id="lb" &gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * window.dbitem =
            * [{ "Texts": "Discover Music", "PrimaryKeys": "1" },
            *     { "Texts": "Hot Singles", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Rising Artists", "PrimaryKeyss": null, "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Live Music", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Best of 2013 So Far", "ParentPrimaryKeyss": "1" },
            *{ "Texts": "Sales and Events", "PrimaryKeys": "2" },
            *     { "Texts": "100 Albums - $5 Each", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "Hip-Hop and R&B Sale", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "CD Deals", "ParentPrimaryKeyss": "2" }];
            * window.musicFields = {
            * "href": "Hrefs",
            * "text": "Texts",
            * "primaryKey": "PrimaryKeys",
            * "parentPrimaryKey": "ParentPrimaryKeyss"
            * };
            * $(function(){
            * $("#lb").ejListView({fieldSettings:"window.musicFields",dataSource:"window.dbitem"});
            * });
            * &lt;/script&gt;
            * @example         
            * &lt;script&gt;
            * //Get or set  fieldSettings, after initialization:<br>
            * // Get the fieldSettings API value.		
            * $("#lb").ejListView ("option", "fieldSettings");			
            * // Set the fieldSettings API
            * $("#lb").ejListView ("option", "fieldSettings", true); 
            * &lt;/script&gt; 
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies the field settings to map the datasource.
            * @member fieldSettings {object}
            * @type {JSONArray}
            * @example 
            * //Set the fieldSettings property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-fieldSettings="window.musicFields" data-ej-datasource="window.dbitem" &gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * window.dbitem =
            * [{ "Texts": "Discover Music", "PrimaryKeys": "1" },
            *     { "Texts": "Hot Singles", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Rising Artists", "PrimaryKeyss": null, "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Live Music", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Best of 2013 So Far", "ParentPrimaryKeyss": "1" },
            *{ "Texts": "Sales and Events", "PrimaryKeys": "2" },
            *     { "Texts": "100 Albums - $5 Each", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "Hip-Hop and R&B Sale", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "CD Deals", "ParentPrimaryKeyss": "2" }];
            * window.musicFields = {
            * "href": "Hrefs",
            * "text": "Texts",
            * "primaryKey": "PrimaryKeys",
            * "parentPrimaryKey": "ParentPrimaryKeyss"
            * };
            * &lt;/script&gt;
            * @example 
            * //Set the fieldSettings property in obtrusive way.
            * &lt;div id="lb" &gt;
            * &lt;/div&gt;           
            * &lt;script&gt;
            * window.dbitem =
            * [{ "Texts": "Discover Music", "PrimaryKeys": "1" },
            *     { "Texts": "Hot Singles", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Rising Artists", "PrimaryKeyss": null, "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Live Music", "ParentPrimaryKeyss": "1" },
            *     { "Texts": "Best of 2013 So Far", "ParentPrimaryKeyss": "1" },
            *{ "Texts": "Sales and Events", "PrimaryKeys": "2" },
            *     { "Texts": "100 Albums - $5 Each", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "Hip-Hop and R&B Sale", "ParentPrimaryKeyss": "2" },
            *     { "Texts": "CD Deals", "ParentPrimaryKeyss": "2" }];
            * window.musicFields = {
            * "href": "Hrefs",
            * "text": "Texts",
            * "primaryKey": "PrimaryKeys",
            * "parentPrimaryKey": "ParentPrimaryKeyss"
            * };
            * $(function(){
            * $("#lb").ejmListView({fieldSettings:"window.musicFields",dataSource:"window.dbitem"});
            * });
            * &lt;/script&gt;
            * @example         
            * &lt;script&gt;
            * //Get or set  fieldSettings, after initialization:<br>
            * // Get the fieldSettings API value.		
            * $("#lb").ejmListView ("option", "fieldSettings");			
            * // Set the fieldSettings API
            * $("#lb").ejmListView ("option", "fieldSettings", true); 
            * &lt;/script&gt; 
            * @memberof ejmListView
            * @instance
            */
            fieldSettings: {
                "navigateUrl": "navigateUrl",
                "href": "href",
                "enableAjax": "enableAjax",
                "preventSelection": "preventSelection",
                "persistSelection": "persistSelection",
                "text": "text",
                "enableCheckMark": "enableCheckMark",
                "checked": "checked",
                "primaryKey": "primaryKey",
                "parentPrimaryKey": "parentPrimaryKey",
                "imageClass": "imageClass",
                "imageUrl": "imageUrl",
                "childHeaderTitle": "childHeaderTitle",
                "childId": "childId",
                "childHeaderBackButtonText": "childHeaderBackButtonText",
                "renderTemplate": "renderTemplate",
                "templateId": "templateId",
                "touchStart": "touchStart",
                "touchEnd": "touchEnd",
                "attributes": "attributes"
            },
            /**		
            * Specifies whether to enable the filtering feature to filter the item.
            * @default false
            * @member enableFiltering {object}
            * @type {boolean}
            * @example 
            * //Set the enableFiltering property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-enableFiltering="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableFiltering property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableFiltering on initialization. 
            * //To set enableFiltering API value 
            * $("#lb").ejListView ({ enableFiltering: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView enableFiltering, after initialization:<br>
            * // Get the enableFiltering API value.		
            * $("#lb").ejListView ("option", "enableFiltering");			
            * // Set the enableFiltering API
            * $("#lb").ejListView ("option", "enableFiltering", true);    
            * &lt;/script&gt;        
            * @memberof ejListView
            * @instance
            */
            //Mobile
            /**		
            * Specifies whether to enable the filtering feature to filter the item.
            * @default false
            * @member enableFiltering {object}
            * @type {boolean}
            * @example 
            * //Set the enableFiltering property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-enableFiltering="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableFiltering property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableFiltering on initialization. 
            * //To set enableFiltering API value 
            * $("#lb").ejmListView ({ enableFiltering: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView enableFiltering, after initialization:<br>
            * // Get the enableFiltering API value.		
            * $("#lb").ejmListView ("option", "enableFiltering");			
            * // Set the enableFiltering API
            * $("#lb").ejmListView ("option", "enableFiltering", true);    
            * &lt;/script&gt;        
            * @memberof ejmListView
            * @instance
            */
            enableFiltering: false,
            /**		
            * Specifies whether to enable check mark for the item.
            * @default false
            * @member enableCheckMark {object}
            * @type {boolean}
            * @example 
            * //Set the enableCheckMark property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableCheckMark property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableCheckMark on initialization. 
            * //To set enableCheckMark API value 
            * $("#lb").ejListView ({ enableCheckMark: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView enableCheckMark, after initialization:<br>
            * // Get the enableCheckMark API value.		
            * $("#lb").ejListView ("option", "enableCheckMark");			
            * // Set the enableCheckMark API
            * $("#lb").ejListView ("option", "enableCheckMark", true);    
            * &lt;/script&gt;        
            * @memberof ejListView
            * @instance
            */
            /**		
            * Specifies whether to enable check mark for the item.
            * @default false
            * @member enableCheckMark {object}
            * @type {boolean}
            * @example 
            * //Set the enableCheckMark property in unobtrusive way.
            * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //Set the enableCheckMark property in obtrusive way.
            * &lt;div id="lb"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * // Set enableCheckMark on initialization. 
            * //To set enableCheckMark API value 
            * $("#lb").ejmListView ({ enableCheckMark: true });
            * &lt;/script&gt;
            * @example 
            * &lt;script&gt;
            * //Get or set the ListView enableCheckMark, after initialization:<br>
            * // Get the enableCheckMark API value.		
            * $("#lb").ejmListView ("option", "enableCheckMark");			
            * // Set the enableCheckMark API
            * $("#lb").ejmListView ("option", "enableCheckMark", true);    
            * &lt;/script&gt;        
            * @memberof ejmListView
            * @instance
            */
            enableCheckMark: false


        },

        observables: ["selectedItemIndex", "dataSource"],
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        dataSource: ej.util.valueFunction("dataSource"),

        //Before loading the list
        /**
        * Section for ListView control before load
        * @private
        */
        _load: function () {
            this._orgEle = this.element.clone();
            this._index = 0;
            this._items = [];
            this._indexVal = 0;
            this.model.id = this.element[0].id;
            if (this.model.load)
                this._trigger("load");
            this.model.fieldSettings = eval(this.model.fieldSettings);
            if (this.model.fieldSettings && this.model.query != null) {
                var proxy = this;
                if (proxy._prefixClass == "e-m-")
                    App.waitingPopUp.show();
                this.dataSource().executeQuery(eval(this.model.query)).done(function (e) {
                    proxy.model.dataSource = e.result;
                    proxy._renderControl();
                    if (proxy._prefixClass == "e-m-")
                        App.waitingPopUp.hide();
                });
            }
            else
                this._renderControl();
        },
        //To render the list control
        /**
        * Render Section for ListView control	
        * @private
        */
        _renderControl: function () {
            this.element.addClass(this._prefixClass + "parentlv ");
            this._lbEle = ej.buildTag("div." + this._rootCSS);
            this._lbEle.addClass("subpage");
            if (this._prefixClass == "e-m-") {
                this._lbEle.addClass("e-m-" + this.model.renderMode + " e-m-" + this.model.theme).addClass(!ej.isMobile() ? "e-m-tablet" : "e-m-mobile");
                if (this.model.ios7.inline)
                    this._lbEle.addClass("e-m-inline")
            }
            this._lContainer = ej.buildTag("div." + this._prefixClass + "list-container#" + this.model.id + "_container");
            var ul = this.element.find(">ul");
            if (this.model.showHeader) {
                var hdr = this._renderHeader(this.model.id, this.model.showHeaderBackButton, this.model.headerTitle, this.model.headerBackButtonText);
                this._lbEle.prepend(hdr);
            }
            if (this._prefixClass == "e-m-")
                if (this.model.allowScrolling)
                    this._renderScrollPanel(this._lbEle, this.model.id + "_scroll", this.model.id + "_container");
            if (this._hasDataSource() && !this.model.renderTemplate)
                this.element.empty();
            if (this.model.renderTemplate) {
                if (this.model.templateId) {
                    if (ej.getCurrentPage().find('#' + this.model.templateId).length) {
                        this._template = ej.getCurrentPage().find('#' + this.model.templateId);
                        ej.destroyWidgets(this._template);
                        this._template.remove();
                        this._template = this._template[0].nodeName && this._template[0].nodeName.toLowerCase() == "script" ? ej.getClearString(this._template[0].innerHTML) : this._template[0].outerHTML;
                    }
                }
                else {
                    ej.destroyWidgets(this.element);
                    this._template = this.element.html();
                    this.element.empty();
                }
            }
            if (this.model.renderTemplate && !this._hasDataSource() && !this.model.enableGroupList) {
                this.element.append(this._lbEle.append(this._lContainer));
                if (this._template) {
                    this._lContainer.append(this._template);
                    if (ej.widget.init)
                        ej.widget.init(this._lContainer);
                }
            }
            else if (!this.model.renderTemplate || this.model.renderTemplate && this._hasDataSource() || this.model.renderTemplate && this.model.enableGroupList) {
                if (this.model.enableGroupList) {
                    this._lContainer.addClass(this._prefixClass + "grouped");
                    var innerDiv = ej.buildTag("div." + this._prefixClass + "grouplist");
                    ul = this.element.children();
                    if (ul.length) {
                        var length = this._hasDataSource() ? this.dataSource().length : ul.length;
                        var title;
                        for (var i = 0; i < length; i++) {
                            if (this._hasDataSource()) {
                                this._items = this.dataSource()[i].items;
                                if (!this.model.renderTemplate) {
                                    ulItem = ej.buildTag('ul');
                                    this._lbEle.append(ulItem);
                                }
                                else
                                    ulItem = ul[i];
                            }
                            else {
                                this._items = [];
                                ulItem = ul[i];
                            }
                            title = this._hasDataSource() ? this.dataSource()[i].key : ej.getAttrVal($(ulItem), 'data-ej-grouplisttitle', "GroupList" + (i + 1));
                            var groupdiv = ej.buildTag("div." + this._prefixClass + "groupdiv", ej.buildTag("div." + this._prefixClass + "grouptitle", title));
                            innerDiv.append(groupdiv.append(this._renderListItems($(ulItem).addClass(this._prefixClass + "grouped"))));
                        }
                    }
                    else if (this._template) {
                        ej.destroyWidgets(this._template);
                        innerDiv[0].innerHTML = this._template;
                    }

                    this._lContainer.append(innerDiv);
                    if (ej.widget.init)
                        ej.widget.init(innerDiv);
                }
                else {
                    if (this._hasDataSource()) {
                        var ul = ej.buildTag('ul');
                        this._items = this.dataSource();
                    }
                    if (ul.length) {
                        ej.destroyWidgets(ul);
                        this._lContainer.append(this._renderListItems(ul));
                    }
                    else if (this._template) {
                        ej.destroyWidgets(this._template);
                        this._lContainer[0].innerHTML = this._template;
                    }
                }
                this.element.prepend(this._lbEle);
                if (this.model.enableFiltering)
                    this._createFilterWrapper(this._lbEle);
                this._lbEle.append(this._lContainer);
                if (ej.widget.init)
                    ej.widget.init(this._lContainer);
                var eLi = this.element.find('li.' + this._prefixClass + 'list');
                eLi.removeEleEmptyAttrs();
                eLi.find('.' + this._prefixClass + 'list-anchor').removeEleEmptyAttrs();
                if (ej.widget.init)
                    ej.widget.init(this._lbEle);
                var ulItems = this.element.find('ul');
                ulItems.find('li:first').addClass(this._prefixClass + "firstitem");
                ulItems.find('li:last').addClass(this._prefixClass + "lastitem");
                this._liEl = this.element.find("li");
                if (this.selectedItemIndex() >= 0 && !this.model.preventSelection && this.model.persistSelection) {
                    if (!ej.getBooleanVal(ulItems[this.selectedItemIndex()], 'data-preventselection', this.model.preventSelection) && ej.getBooleanVal(ulItems[this.selectedItemIndex()], 'data-persistselection', this.model.persistSelection)) {
                        this._currentItem = $(this._liEl[this.selectedItemIndex()]);
                        this._prevItem = this._currentItem;
                        this._currentItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
                    }
                }
                $(this.element.find('.' + this._prefixClass + 'lv-check').parent()).addClass(this._prefixClass + 'lv-checkdiv');
                $(this.element.find('.' + this._prefixClass + 'lv-check').closest('li.' + this._prefixClass + 'list')).addClass(this._prefixClass + 'list-check');
                $(this.element.find('.' + this._prefixClass + 'lv-input').closest('.' + this._prefixClass + 'lv-filter')).addClass(this._prefixClass + 'lv-inputdiv');
                this._wireEvents();
            }
            this._setHeightWidth();
            if (this.model.loadComplete)
                this._trigger("loadComplete");
        },
        //To render filtering box wrapper
        /**
        * Creating Filter Wrapper for ListView control	
        * @private
        */
        _createFilterWrapper: function (element) {
            var fDiv = this._createFilterDiv();
            var fAnchor = ej.buildTag("a." + this._prefixClass + "lv-anchor", ej.buildTag('span.' + this._prefixClass + 'input-btn'), {}, { "Title": "Clear text", "data-role": "none" });
            $(fDiv).append(fAnchor);
            element.append(fDiv);
        },
        //To render list items
        /**
        * Section for Render ListItems for ListView control	
        * @private
        */
        _renderListItems: function (ul) {
            var proxy = this;
            ul.addClass(this._prefixClass + "list-hdr " + this._prefixClass + "clearall");
            this._liItems = ul.find(">li");
            if (this._liItems.length && !this._hasDataSource() || this._hasDataSource()) {
                this._renderParentChildTemplate();
                if (!this._hasDataSource()) {
                    this._liItems.each(function (index, element) {
                        proxy._generateData(element, null, ej.getAttrVal(element, 'data-ej-primarykey', null));
                    });
                }
                this._items = eval(this._items);
                var dataMgr = ej.DataManager(this._items);
                var parentItem = dataMgr.executeLocal(ej.Query().from(this._items).where(ej.Predicate(this.model.fieldSettings['parentPrimaryKey'], ej.FilterOperators.equal, null)).group(this.model.fieldSettings['parentPrimaryKey']));
                var grouped = dataMgr.executeLocal(ej.Query().from(this._items).where(ej.Predicate(this.model.fieldSettings['parentPrimaryKey'], ej.FilterOperators.notEqual, null)).group(this.model.fieldSettings['parentPrimaryKey']));
                if (parentItem[0]) {
                    ul.empty().html($(this.jsRender).render(parentItem[0].items));
                    if (grouped.length) {
                        this.element.append($(this.jsChildRender).render(grouped));
                        $.each(grouped, function (index, element) {
                            if (ej.widget.init)
                                ej.widget.init(proxy.element.find('#child' + element.key));
                            var ul = proxy.element.find('#child' + element.key).find('ul');
                            var li = ul.find('li');
                            k = 0;
                            for (var j = 0; j < li.length; j++) {
                                if (grouped[k].items[j] && grouped[k].items[j].attributes)
                                    $(li[j]).addEleAttrs(grouped[k].items[j].attributes);
                            }
                            k++;
                        });
                    }
                    var ulItems = ul.find('>li');
                    for (var j = 0; j < ulItems.length; j++) {
                        if (parentItem[0].items[j] && parentItem[0].items[j].attributes)
                            $(ulItems[j]).addEleAttrs(parentItem[0].items[j].attributes);
                    }
                }
            }
            if (this._initEJCheckBox)
                this._initEJCheckBox(ul);
            return ul;
        },


        //To render parent child template
        /**
        * Section for Render Parent Child Template for ListView control	
        * @private
        */
        _renderParentChildTemplate: function () {
            var list = this._renderLists();
            $.views.helpers({ _checkAjaxUrls: this._checkAjaxUrl, _checkImgUrls: this._checkImgUrl, _checkIsChecked: this._checkIsCheck, Object: this, ej: ej });
            //Template for parent item
            this.jsRender = ej.buildTag("script#" + this.model.id + "_Template", "", {}, { "type": "text/x-jsrender" });
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                this.jsRender[0].text = list[0].outerHTML.replace(/&gt;/g, '>');
            else
                this.jsRender[0].text = list[0].outerHTML.replace(/&gt;/g, '>');
            //Template for child item
            this.jsChildRender = ej.buildTag("script#" + this.model.id + "_ChildTemplate", "", {}, { "type": "text/x-jsrender" });
            var ul = ej.buildTag("ul." + this._prefixClass + "childcontainer " + this._prefixClass + "list-hdr " + this._prefixClass + "clearall");
            list.addClass(this._prefixClass + "childli");
            ul[0].innerHTML = "{{for items}}" + list[0].outerHTML + "{{/for}}";
            var div = ej.buildTag("div." + this._rootCSS + " subpage " + this._prefixClass + "childitem", "", {}, { "id": "{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}", "style": "display:none" });
            if (this._prefixClass == "e-m-")
                div.addClass(this._prefixClass + this.model.renderMode + this._prefixClass + this.model.theme + !ej.isMobile() ? " e-m-tablet" : " e-m-mobile");
            var innerdiv = ej.buildTag("div." + this._prefixClass + "list-container", "", {}, { "id": "{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}_container" });
            if (this.model.showHeader)
                div.append(this._renderHeader("{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}", true, "Title"));
            if (this.model.enableFiltering)
                this._createFilterWrapper(div);
            div.append(innerdiv.append(ul));
            if (this._prefixClass == "e-m-")
                if (this.model.allowScrolling)
                    this._renderScrollPanel(div, "{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}_scroll", "{{if key}}child{{>key}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}_container");
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
                this.jsChildRender[0].text = div[0].outerHTML.replace(/&gt;/g, '>');
            else
                this.jsChildRender[0].innerHTML = div[0].outerHTML.replace(/&gt;/g, '>');
        },
        //To render the list items
        /**
        * Section for Render Lists for ListView control	
        * @private
        */
        _renderLists: function () {
            var list = ej.buildTag("li", "", {}, {
                "class": this._prefixClass + "user-select " + this._prefixClass + "list " + this._prefixClass + "state-default{{if " + this.model.fieldSettings['primaryKey'] + " || " + this.model.fieldSettings['enableAjax'] + " || " + this.model.enableAjax + "}} " + this._prefixClass + "arrow{{/if}}{{if " + this.model.fieldSettings['imageClass'] + "}} " + this._prefixClass + "margin{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}} " + this._prefixClass + "margin{{/if}}{{/if}}",
                "data-childid": "{{if " + this.model.fieldSettings['primaryKey'] + "}}child{{>" + this.model.fieldSettings['primaryKey'] + "}}{{else " + this.model.fieldSettings['childId'] + "}}{{>" + this.model.fieldSettings['childId'] + "}}{{else}}{{/if}}",
                "data-childtitle": "{{>" + this.model.fieldSettings['childHeaderTitle'] + "}}",
                "data-childbackbutton": "{{>" + this.model.fieldSettings['childHeaderBackButtonText'] + "}}",
                "data-preventSelection": "{{>" + this.model.fieldSettings['preventSelection'] + "}}",
                "data-persistSelection": "{{>" + this.model.fieldSettings['persistSelection'] + "}}",
                "data-navigateUrl": "{{>" + this.model.fieldSettings['navigateUrl'] + "}}",
                "data-loadajax": "{{>" + this.model.fieldSettings['enableAjax'] + "}}",
                "data-href": '{{>' + this.model.fieldSettings['href'] + '}}{{:~_checkAjaxUrls()}}',
                "data-check": '{{>' + this.model.fieldSettings['enableCheckMark'] + '}}',
                "data-templateid": "{{>" + this.model.fieldSettings['renderTemplate'] + "}}",
                "data-touchstart": "{{>" + this.model.fieldSettings['touchStart'] + "}}",
                "data-touchend": "{{>" + this.model.fieldSettings['touchEnd'] + "}}"
            });
            if (this.model.renderTemplate) {
                if (this._hasDataSource() && this._template)
                    list[0].innerHTML = this._template;
            }
            else {
                var linkTag = ej.buildTag("a", "", {}, { "class": this._prefixClass + "list-anchor " + this._prefixClass + "remove-shadow{{if " + this.model.fieldSettings['imageClass'] + "}} " + this._prefixClass + "margin{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}} " + this._prefixClass + "margin{{/if}}{{/if}}{{if " + this.model.fieldSettings['primaryKey'] + " || " + this.model.fieldSettings['enableAjax'] + " || " + this.model.enableAjax + "}} " + this._prefixClass + "fontimage{{/if}}", "href": (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 ? "{{if " + this.model.fieldSettings['navigateUrl'] + " == ''}}#{{else}}{{:" + this.model.fieldSettings['navigateUrl'] + "}}{{/if}}" : "") });
                var span = ej.buildTag("span", "{{>" + this.model.fieldSettings['text'] + "}}", {}, { "class": this._prefixClass + "list-text " + this._prefixClass + "rel " + this._prefixClass + "user-select{{if " + this.model.fieldSettings['imageClass'] + "}} " + this._prefixClass + "text{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}} " + this._prefixClass + "text{{/if}}{{/if}}" });
                var imgClass = ej.buildTag("div", "", {}, { 'class': this._prefixClass + "list-img " + this._prefixClass + "rel " + this._prefixClass + "user-select {{>" + this.model.fieldSettings['imageClass'] + "}}" });
                var check = this._createCheckBox();
                if (this.model.renderMode == "windows" && ej.isMobile())
                    linkTag[0].innerHTML = "{{if !" + this.model.fieldSettings['primaryKey'] + "}}{{if " + this.model.fieldSettings['enableAjax'] + " == undefined || " + this.model.fieldSettings['enableAjax'] + ".toString() == 'false'}}{{if !" + this.model.fieldSettings['navigateUrl'] + "}}{{if " + this.model.fieldSettings['enableCheckMark'] + " !== undefined}}{{if " + this.model.fieldSettings['enableCheckMark'] + ".toString() == 'false' ? " + this.model.fieldSettings['enableCheckMark'] + " : " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{else}}{{if " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{/if}}{{/if}}{{/if}}{{/if}}" + "{{if " + this.model.fieldSettings['imageClass'] + "}}" + imgClass[0].outerHTML + "{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}}{{:~_checkImgUrls()}}{{/if}}{{/if}}" + span[0].outerHTML;
                else
                    linkTag[0].innerHTML = "{{if " + this.model.fieldSettings['imageClass'] + "}}" + imgClass[0].outerHTML + "{{else}}{{if " + this.model.fieldSettings['imageUrl'] + "}}{{:~_checkImgUrls()}}{{/if}}{{/if}}" + span[0].outerHTML + "{{if !" + this.model.fieldSettings['primaryKey'] + "}}{{if " + this.model.fieldSettings['enableAjax'] + " == undefined || " + this.model.fieldSettings['enableAjax'] + ".toString() == 'false'}}{{if !" + this.model.fieldSettings['navigateUrl'] + "}}{{if " + this.model.fieldSettings['enableCheckMark'] + " !== undefined}}{{if " + this.model.fieldSettings['enableCheckMark'] + ".toString() == 'false' ? " + this.model.fieldSettings['enableCheckMark'] + " : " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{else}}{{if " + this.model.enableCheckMark + "}}" + check[0].outerHTML + "{{/if}}{{/if}}{{/if}}{{/if}}{{/if}}";

                list[0].innerHTML = "{{if " + this.model.fieldSettings['renderTemplate'] + " == undefined || " + this.model.fieldSettings['renderTemplate'] + ".toString() == 'false'}}" + linkTag[0].outerHTML + "{{else}}{{:templateId}}{{/if}}";
            }
            if (this.model.renderMode == "ios7") {
                var innerDiv = ej.buildTag("div." + this._prefixClass + "list-div");
                innerDiv[0].innerHTML = list[0].innerHTML;
                list.empty().append(innerDiv);
            }
            return list;
        },
        //To render child wrapper
        /**
        * Section for Render Child Items for ListView control	
        * @private
        */
        _renderChild: function (childId) {
            this._currentItem.attr('data-childid', childId);
            if (!this._currentItem.attr('data-childtitle'))
                this._currentItem.attr('data-childtitle', this._currentItem.text());
            this._createListDiv(childId);
            this._div.hide();
            if (this._prefixClass == "e-m-")
                this._div.addClass(!ej.isMobile() ? this._prefixClass + "m-tablet" : this._prefixClass + "m-mobile");
            this._container = ej.buildTag("div." + this._prefixClass + "list-container#" + childId + "_container");
            this.element.append(this._div);
            if (this.model.allowScrolling)
                this._renderScrollPanel(this._div, childId + "_scroll", childId + "_container");
        },
        //To check the url while jsrender
        /**
        * Section for check Ajax Url for ListView control	
        * @private
        */
        _checkAjaxUrl: function () {
            var href = this.data.href;
            var listObj = this.getRsc("helpers", "Object");
            var ej = this.getRsc("helpers", "ej");
            if (href && href.indexOf("#") != -1 && href != "#") {
                if (!listObj._storedContent[this.index]) {
                    var ele = ej.getCurrentPage().find(href).remove();
                    listObj._storedContent[this.index] = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                }
                else if (listObj._storedContent[this.index] && ej.getCurrentPage().find(href).length) {
                    var ele = ej.getCurrentPage().find(href).remove();
                    ele = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                    listObj._storedContent = ej._pushValue(listObj._storedContent, ele, this.index);
                }
            }
            else {
                if (listObj._storedContent[this.index])
                    listObj._storedContent = ej._pushValue(listObj._storedContent, "", this.index);
            }
        },
        /**
        * Section for check Image URL for ListView control	
        * @private
        */
        _checkImgUrl: function (item) {
            var obj = this.getRsc("helpers", "Object");
            var img = this.data[obj.model.fieldSettings.imageUrl];
            if (!$.support.pushstate)
                img = typeof App == "object" ? App.route.makeUrlAbsolute(img, true) : img;
            return "<img src = " + img + " class='" + obj._prefixClass + "list-img " + obj._prefixClass + "rel " + obj._prefixClass + "user-select'/>";
        },
        /**
        * Section for check isChecked for ListView control	
        * @private
        */
        _checkIsCheck: function (item) {
            return this.data[this.getRsc("helpers", "Object").model.fieldSettings.checked] ? true : false;
        },
        //To generate data to pass in jsrender
        /**
        * Section for Generate Data for ListView control	
        * @private
        */
        _generateData: function (element, parentKey, primaryKey) {
            var childId = null, text = ej.getAttrVal(element, 'data-ej-text', $(element).text());
            var headerTitle = null, $ele = $(element), backButton = ej.getAttrVal(element, 'data-ej-childbuttontext', '');
            var renderTemp = ej.getBooleanVal(element, 'data-ej-rendertemplate', false);
            if (renderTemp) {
                if (ej.getCurrentPage().find('#' + ej.getAttrVal(element, 'data-ej-templateid')).length) {
                    var ele = ej.getCurrentPage().find('#' + ej.getAttrVal(element, 'data-ej-templateid')).remove();
                    this._storedTemplate[this._indexVal] = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                }
                else if (!this._storedTemplate[this._indexVal])
                    this._storedTemplate[this._indexVal] = element.innerHTML;
                else if (this._storedTemplate[this._indexVal] && ej.getCurrentPage().find('#' + ej.getAttrVal(element, 'data-ej-templateid')).length) {
                    var ele = ej.getCurrentPage().find('#' + ej.getAttrVal(element, 'data-ej-templateid')).remove();
                    ele = ele[0].nodeName && ele[0].nodeName.toLowerCase() == "script" ? ej.getClearString(ele[0].innerHTML) : ele[0].outerHTML;
                    this._storedTemplate = ej._pushValue(this._storedTemplate, ele, this._indexVal);
                }
                this._indexVal++;
            }
            if ($ele.find(">ul").length) {
                var proxy = this;
                headerTitle = ej.getAttrVal(element, 'data-ej-childtitle', text);
                if (!$(element).attr("data-ej-primarykey")) {
                    $(element).attr('data-ej-primarykey', Math.round(Math.random() * 100));
                    primaryKey = ej.getAttrVal(element, 'data-ej-primarykey');
                }
                var li = $ele.find(">ul").find('>li');
                li.each(function (index, element) {
                    proxy._generateData(element, ej.getAttrVal(element, 'data-ej-parentkey', primaryKey), ej.getAttrVal(element, 'data-ej-primarykey', null));
                });
            }
            this._items[this._index] = {
                "navigateUrl": ej.getAttrVal(element, 'data-ej-navigateUrl', ""),
                "href": ej.getAttrVal(element, 'data-ej-href', ""),
                "enableAjax": ej.getBooleanVal(element, 'data-ej-enableAjax', this.model.enableAjax),
                "preventSelection": ej.getBooleanVal(element, 'data-ej-preventSelection', this.model.preventSelection),
                "persistSelection": ej.getBooleanVal(element, 'data-ej-persistSelection', this.model.persistSelection),
                "text": text,
                "enableCheckMark": ej.getBooleanVal(element, 'data-ej-enableCheckMark', this.model.enableCheckMark),
                "checked": ej.getBooleanVal(element, 'data-ej-checked', false),
                "primaryKey": primaryKey,
                "parentPrimaryKey": parentKey,
                "imageClass": ej.getAttrVal(element, 'data-ej-imageclass', ""),
                "imageUrl": ej.getAttrVal(element, 'data-ej-imageurl', ""),
                "childHeaderTitle": headerTitle,
                "childId": ej.getAttrVal(element, 'data-ej-childid', "page_" + parseInt(Math.random().toFixed(3) * 1000)),
                "childHeaderBackButtonText": backButton,
                "renderTemplate": renderTemp,
                "templateId": this._storedTemplate[this._indexVal - 1],
                "touchStart": ej.getAttrVal(element, 'data-ej-touchstart', null),
                "touchEnd": ej.getAttrVal(element, 'data-ej-touchend', null),
                "attributes": $ele.removeEleAttrs(/^data-ej-/)[0].attributes
            };
            this._index += 1;
        },
        //Touch Start event handler for list item
        /**
        * To handle Touch Start Handler Event for list Items.
        * @private
        */
        _onTouchStartHandler: function (evt) {
            if (!ej.isDevice() && !ej._preventDefaultException(evt.target, this._preventDefaultException))
                evt.preventDefault && evt.preventDefault();
            if (ej.isWindows && ej.isWindows())
                ej._touchStartPoints(evt, this);
            this._currentItem = $(evt.currentTarget);
            this._scroll = false;
            if (!ej.getBooleanVal(this._currentItem, 'data-preventSelection', this.model.preventSelection))
                this._addSelection();
            if (this.model.renderMode == "windows" && !this.model.windows.preventSkew)
                this._currentItem.addClass(ej.isMobile() ? ej._getSkewClass($(this._currentItem), evt.pageX, evt.pageY) : this._prefixClass + "m-skew-center");
            this._triggerStartEvent(this._returnData());
            ej.listenEvents([this._liEl, this._liEl],
                           [ej.endEvent(), ej.moveEvent(), ej.cancelEvent()],
                           [this._touchEndDelegate, this._touchMoveDelegate, this._touchMoveDelegate], false, this);
            $(window).bind(ej.endEvent(), this._docClickDelegate);
        },
        //Touch Move event handler for list item to prevent selection while scrolling
        /**
        * To handle Touch move handler for list items to prevent selection while scrolling.
        * @private
        */
        _onTouchMoveHandler: function (evt) {
            if (!ej.isWindows || (ej.isWindows && !ej.isWindows()) || (ej.isWindows && ej.isWindows() && ej._isTouchMoved(evt, this))) {
                this._scroll = true;
                if (!ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection))
                    this._removeSelection();
                else if (this._prevItem && this._prevItem[0] != this._currentItem[0])
                    this._removeSelection();
                if (this.model.renderMode == "windows" && !this.model.windows.preventSkew)
                    ej._removeSkewClass(this._currentItem);
                else if (this.model.renderMode != "windows" && !ej.getBooleanVal(this._currentItem, 'data-preventselection', this.model.preventSelection) && this._prevItem && ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection))
                    this._prevItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
            }
        },
        //Touch End event handler for list item
        /**
        * To Handle Touch End Handler for List Item.
        * @private
        */
        _onTouchEndHandler: function (evt) {
            this._isFromAjax = false;
            if (!ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection))
                this._removeSelection();
            if (this.model.renderMode == "windows" && !this.model.windows.preventSkew)
                ej._removeSkewClass(this._currentItem);
            if (this._scroll) {
                this._setCurrent();
                this._unbindEvents(evt);
                return false;
            }
            else if (!this._scroll) {
                if (this._currentItem.find('.' + this._prefixClass + 'lv-check').length) {
                    var lbCheck = this._currentItem.find('.' + this._prefixClass + 'lv-check');
                    if (this._prefixClass == "e-m-" || (this._prefixClass == "e-" && !$(evt.target).closest('.e-lv-checkdiv').length))
                        this._toggleCheckboxValue(lbCheck);
                }
                if (this._prefixClass == "e-m-")
                    var backButton = this._currentItem.attr('data-childbackbutton') == undefined ? this._currentItem.closest('.' + this._rootCSS + '').find('.' + this._prefixClass + 'header').length ? this._currentItem.closest('.' + this._rootCSS + '').find('.' + this._prefixClass + 'header').ejmHeader('getTitle') : "Back" : ej.getAttrVal(this._currentItem, 'data-childbackbutton');
                else
                    var backButton = this._currentItem.attr('data-childbackbutton') == undefined ? this._currentItem.closest('.' + this._rootCSS + '').find('.' + this._prefixClass + 'header').length ? this._currentItem.closest('.' + this._rootCSS + '').find('.' + this._prefixClass + 'header .' + this._prefixClass + 'htitle').text() : "Back" : ej.getAttrVal(this._currentItem, 'data-childbackbutton');
                var urlVal = this._currentItem.attr('data-href');
                if (!this._currentItem.attr('data-navigateUrl')) {
                    var page = this.element.find("[data-ajaxurl='" + this._convertToRelativeUrl(urlVal) + "']");
                    if (ej.getBooleanVal(this._currentItem, 'data-loadajax', this.model.enableAjax) && (!this.model.enableCache || page.length == 0)) {
                        if (page.length)
                            page.remove();
                        this.loadAjaxContent(urlVal, backButton);
                        this._unbindEvents(evt);
                        return;
                    }
                    else if (urlVal && urlVal.indexOf("#") != -1) {
                        if (!$('#' + urlVal.replace('#', '')).length) {
                            this._renderChild(ej.getAttrVal(this._currentItem, 'data-childid', "page_" + parseInt(Math.random().toFixed(3) * 1000)));
                            var content = ej.buildTag("div." + this._prefixClass + "content", this._storedContent[this._currentItem.index()]);
                            this._div.append(this._container.append(content));
                            if (ej.widget.init)
                                ej.widget.init(this._div);
                        }
                    }
                    this._updateContent(this._currentItem, backButton);
                    this._touchEndEventHandler();
                }
                else
                    this._touchEndEventHandler();
                this._prevItem = this._currentItem;
            }
            else if (this.model.renderMode == "windows" && !ej.isMobile())
                this._touchEndEventHandler();
            this._unbindEvents(evt);
        },
        /**
        * Section for Set Current List Item.	
        * @private
        */
        _setCurrent: function (e) {
            if (this._prevItem && ej.getBooleanVal(this._currentItem, 'data-persistSelection', this.model.persistSelection)) {
                this._currentItem = this._prevItem;
                this._currentItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
            }
        },
        /**
        * Section for to UnBind the Events.
        * @private
        */
        _unbindEvents: function (e) {
            if (e && e.target.nodeName && e.target.nodeName.toLowerCase() != "a") {
                //   ej.blockDefaultActions(e);
                this._scroll = false;
            }
            ej.listenEvents([this._liEl, this._liEl],
                           [ej.endEvent(), ej.moveEvent(), ej.cancelEvent()],
                           [this._touchEndDelegate, this._touchMoveDelegate, this._touchMoveDelegate], true, this);
        },
        //To make the list as selected
        /**
        * Section for to make the list as selected.
        * @private
        */
        _addSelection: function () {
            if (!this._scroll) {
                this._currentItem.closest('.' + this._prefixClass + 'list-container').find('.' + this._prefixClass + 'state-active').removeClass(this._prefixClass + "state-active").addClass(this._prefixClass + "state-default");
                this._currentItem.removeClass(this._prefixClass + "state-default").addClass(this._prefixClass + "state-active");
            }
        },
        //To make the list as unselected
        /**
        * Section for to remove the selected list.
        * @private
        */
        _removeSelection: function () {
            var proxy = this;
            proxy._currentItem.removeClass(this._prefixClass + "state-active").addClass(this._prefixClass + "state-default");
        },

        /**
        * Section for to set Height Width for ListView Control.
        * @private
        */
        _setHeightWidth: function () {
            if (this.model.autoAdjustHeight)
                this.element.height(window.innerHeight);
            else if (this.model.height)
                this.element.height(this.model.height);
            else {
                var hgt = this.element[0].scrollHeight ? this.element[0].scrollHeight : ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'list-container'), 'outerHeight');
                if (this.model.showHeader)
                    hgt = hgt + ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'header'), 'outerHeight');
                if (this.model.enableFiltering)
                    hgt = hgt + ej.getDimension(this._lbEle.find('.' + this._prefixClass + 'lv-inputdiv'), 'outerHeight');
                this.element.height(hgt);
            }
            if (this.model.width)
                this.element.width(this.model.width);
        },
        //Touch end event handler
        /**
        * To handle Touch End event handler.
        * @private
        */
        _touchEndEventHandler: function () {
            this._triggerEndEvent(this._returnData());
        },

        //Doc Click
        /**
        * To handle Doc Click.
        * @private
        */
        _docClick: function (evt) {
            if (this._scroll)
                this._setCurrent();
            $(window).unbind(ej.endEvent(), this._docClickDelegate);
            ej.listenEvents([this._liEl, this._liEl],
                           [ej.endEvent(), ej.moveEvent()],
                           [this._touchEndDelegate, this._touchMoveDelegate], true, this);
        },
        //Pop State Navigation
        /**
        * To handle pop state navigation.
        * @private
        */
        _popStateNavigation: function (evt, data) {
            if (data.pageUrl && this.model.enableFiltering)
                this._initializeFiltering($("div[data-url='" + data.pageUrl.replace('#', '') + "']"));
        },
        //Anchor tag click handler
        /**
        * To handle anchor click handler.
        * @private
        */
        _anchorClickHandler: function (e) {
            if (this._scroll) {
                ej.blockDefaultActions(e);
                return false;
            }
        },
        /**
        * Section for to resize handler.
        * @private
        */
        _onResize: function () {
            var proxy = this;
            setTimeout(function () {
                proxy._setHeightWidth();
            }, ej.isAndroid() ? 200 : 0);
        },
        _onScrollStop: function (e) {
            ej.blockDefaultActions(e);
        },
        //To create delegates for event handling
        /**
        * Section for to create delegates for Event handling.
        * @private
        */
        _createDelegates: function () {
            this._anchorClickDelegate = $.proxy(this._anchorClickHandler, this);
            this._keyup = $.proxy(this._onKeyUp, this);
            this._touchStartDelegate = $.proxy(this._onTouchStartHandler, this);
            this._touchEndDelegate = $.proxy(this._onTouchEndHandler, this);
            this._touchMoveDelegate = $.proxy(this._onTouchMoveHandler, this);
            this._resizeDelegate = $.proxy(this._onResize, this);
            this._popStateDelegate = $.proxy(this._popStateNavigation, this);
            this._docClickDelegate = $.proxy(this._docClick, this);
        },
        //To wire events for the list
        /**
        * Section for to wire events for the list.
        * @private
        */
        _wireEvents: function (remove) {
            this._createDelegates();
            var eventType = remove ? "unbind" : "bind";
            if (this.model.autoAdjustHeight) {
                var evt = !ej.isDevice() && !ej.isTouchDevice() ? "resize" : "orientationchange";
                ej.listenEvents([window], [evt], [this._resizeDelegate], remove, this);
            }
            ej.listenEvents([this._liEl.find('a'), this.element.find('.' + this._prefixClass + 'lv-input'), this._liEl, this._liEl],
                ["click", "keyup", ej.startEvent(), ej.cancelEvent()],
                [this._anchorClickDelegate, this._keyup, this._touchStartDelegate, this._touchMoveDelegate], remove, this);
            this._lContainer.on("scrollstop", $.proxy(this._onScrollStop, this));
            $('body')[eventType]('viewpopstate', this._popStateDelegate);
            if (this.model.enableFiltering)
                this._initializeFiltering(this._lbEle);
        },
        //To initialize filtering
        /**
        * Section for to initialize filtering.
        * @private
        */
        _initializeFiltering: function (element) {
            this._searchItems = $(element).find("." + this._prefixClass + "list");
            this._emptyFilterTextValue(element);
            element.find('.' + this._prefixClass + 'list[style*="display: none"]').show();
            var selector = "a";
            this._elementText = [];
            for (var i = 0; i < this._searchItems.length; i++) {
                if ($(this._searchItems[i]).find(selector))
                    this._elementText.push($.trim($(this._searchItems[i]).find(selector).html().replace(new RegExp('<[^<]+\>', 'g'), "").toLowerCase()));
                else
                    this._elementText.push("");
            }
        },
        //To perform filtering in keyup event
        /**
        * Section for to perform Key Up filtering.
        * @private
        */
        _onKeyUp: function (evt) {
            for (var i = 0; i < this._searchItems.length; i++) {
                if (this._elementText[i].indexOf(evt.target.value) == -1)
                    $(this._searchItems[i]).css("display", "none");
                else
                    $(this._searchItems[i]).css("display", "");
            }
        },
        //To set the model values
        /**
        * To configure the properties at runtime using SetModel		
        * @private
        */
        _setModel: function (options) {
            var refresh = false;
            for (var prop in options) {
                var setModel = "_set" + prop.charAt(0).toUpperCase() + prop.slice(1);
                if (this[setModel])
                    this[setModel](options[prop]);
                else
                    refresh = true;
            }
            if (refresh)
                this._refresh();
        },
        //To change the Theme property
        /**
        * Section for to change the theme property.
        * @private
        */
        _setTheme: function (value) {
            if (value) {
                this.model.theme = value;
                this._lbEle.removeClass("e-m-dark e-m-light e-default").addClass("e-m-" + this.model.theme);
                if (this.model.enableFiltering)
                    this.element.find('.' + this._prefixClass + 'text-input').ejmTextBox('model.theme', this.model.theme);
                if (this.model.showHeader)
                    this._lbEle.find('#' + this.model.id + "_header").ejmHeader('model.theme', this.model.theme);
                if (this.element.find('.' + this._prefixClass + 'childitem').length) {
                    $(this.element.find('.' + this._prefixClass + 'childitem')).removeClass("e-m-dark e-m-light e-default").addClass("e-m-" + this.model.theme);
                    var header = this.element.find('.' + this._prefixClass + 'childitem .' + this._prefixClass + 'header');
                    var proxy = this;
                    header.each(function (index, element) {
                        $(element).ejmHeader('model.theme', proxy.model.theme);
                    });
                }
            }
        },
        //To update the data source
        /**
        * Section for to update the data source.
        * @private
        */
        _setDataSource: function (dataSource, fieldSettings) {
            if (this._hasDataSource() && dataSource) {
                if (fieldSettings)
                    this.model.fieldSettings = fieldSettings;
                this._refresh();
            }
        },
        //To check the data source
        /**
        * Section for to check the data source.
        * @private
        */
        _hasDataSource: function () {
            return this.dataSource() && this.dataSource().length;
        },
        //To get the element
        /**
        * Section for to get the element.	
        * @private
        */
        _getElement: function (childId) {
            return childId ? this.element.find('#' + childId) : this._lbEle;
        },
        //To check the element is disabled
        /**
        * Section for to check the element is disabled.	
        * @private
        */
        _isEnable: function (item) {
            return item.hasClass(this._prefixClass + 'state-disabled') ? false : true;
        },
        //To refresh the control
        _refresh: function () {
            this._destroy();
            this.element.addClass(this._rootCSS);
            this._load();
        },
        //To clear the element
        _clearElement: function () {
            this.element.removeAttr("class").removeAttr("style");
            this.element.empty().html(this._orgEle.html());
        },
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this._wireEvents(true);
            this._clearElement();
        },

        /*-------------------------------Public Methods--------------------*/
        //To load Ajax content while clicking list item
        /**
        * To load the ajax content while selecting the item.
        * @method selectItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableAjax="true"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableAjax="true"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableAjax="true"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call enableAjax method.
        * $(document).ready(function(){
        * $("#lb").ejListView("loadAjaxContent","load1.html");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To load the ajax content while selecting the item.
        * @method selectItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Man of Steel" data-ej-primarykey="1" data-ej-href="load1.html" data-ej-enableAjax="true"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="World War Z" data-ej-primarykey="2" data-ej-href="load2.html" data-ej-enableAjax="true"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Monsters University" data-ej-primarykey="3" data-ej-href="load3.html" data-ej-enableAjax="true"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call enableAjax method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("loadAjaxContent","load1.html");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        loadAjaxContent: function (urlVal, backButton) {
            var proxy = this;
            this._isFromAjax = true;
            this._renderChild(ej.getAttrVal(this._currentItem, 'data-childid', "page_" + parseInt(Math.random().toFixed(3) * 1000)));
            if (!$.support.pushstate || ej.isWindowsWebView())
                urlVal = App.route.makeUrlAbsolute(urlVal);
            var loadData = { content: proxy._div, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
            if (this.model.ajaxBeforeLoad)
                this._trigger("ajaxBeforeLoad", loadData);
            var ajaxSettings = {
                cache: proxy.model.ajaxSettings.cache,
                async: proxy.model.ajaxSettings.async,
                type: proxy.model.ajaxSettings.type,
                contentType: proxy.model.ajaxSettings.contentType,
                url: ej.isWindowsWebView() ? urlVal : proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal,
                dataType: proxy.model.ajaxSettings.dataType,
                data: proxy.model.ajaxSettings.data,
                "successHandler": function (data) { //Ajax post success event handler
                    var content = ej.buildTag("div." + this._prefixClass + "content", (/<\/?body[^>]*>/gmi).test(data) ? data.split(/<\/?body[^>]*>/gmi)[1] : data || "");
                    proxy._div.append(proxy._container.append(content));
                    proxy._div.attr("data-ajaxurl", App.route.convertToRelativeUrl(urlVal));
                    proxy._updateContent(proxy._currentItem, backButton);
                    var successData = { content: proxy._div, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
                    if (proxy.model.ajaxSuccess)
                        proxy._trigger("ajaxSuccess", successData);
                },
                "errorHandler": function (xhr, textStatus, errorThrown) {
                    var errorData = { "xhr": xhr, "textStatus": textStatus, "errorThrown": errorThrown, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
                    if (proxy.model.ajaxError)
                        proxy._trigger("ajaxError", errorData);
                },
                "completeHandler": function (data) {
                    var completeData = { content: proxy._div, item: proxy._currentItem, index: $(proxy._currentItem).index(), text: $(proxy._currentItem).text(), url: proxy.model.ajaxSettings.url ? proxy.model.ajaxSettings.url : urlVal };
                    if (proxy.model.ajaxComplete)
                        proxy._trigger("ajaxComplete", completeData);
                }
            };
            ej.sendAjaxRequest(ajaxSettings);
        },
        //To select the list item
        /**
        * To select item in the given index.
        * @method selectItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call selectItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("selectItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To select item in the given index.
        * @method selectItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call selectItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("selectItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        selectItem: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]))) {
                this._currentItem = $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]);
                this._prevItem = this._currentItem;
                this._onTouchEndHandler();
            }
        },
        //To make the List item to be active
        /**
        * To make the item in the given index to be active state.
        * @method setActive
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call setActive method.
        * $(document).ready(function(){
        * $("#lb").ejListView("setActive",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To make the item in the given index to be active state.
        * @method setActive
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call setActive method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("setActive",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        setActive: function (index, childId) {
            if (index >= 0) {
                element = this._getElement(childId);
                if (this._isEnable($(element.find('li.' + this._prefixClass + 'list')[index])) && ej.getBooleanVal($(element.find('li.' + this._prefixClass + 'list')[index]), 'data-persistSelection', this.model.persistSelection)) {
                    element.find('li.' + this._prefixClass + 'list.' + this._prefixClass + 'state-active').removeClass(this._prefixClass + 'state-active').addClass(this._prefixClass + 'state-default');
                    this._currentItem = $(element.find('li.' + this._prefixClass + 'list')[index]);
                    this._prevItem = this._currentItem;
                    this._currentItem.removeClass(this._prefixClass + 'state-default').addClass(this._prefixClass + 'state-active');
                }
            }
        },
        //To un set the List item to be active
        /**
        * To make the item in the given index to be default state.
        * @method deActive
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call deActive method.
        * $(document).ready(function(){
        * $("#lb").ejListView("deActive",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To make the item in the given index to be default state.
        * @method deActive
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call deActive method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("deActive",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        deActive: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index])))
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).removeClass(this._prefixClass + 'state-active').addClass(this._prefixClass + 'state-default');
        },
        //To enable the List item
        /**
        * To enable item in the given index.
        * @method enableItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call enableItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("enableItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To enable item in the given index.
        * @method enableItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call enableItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("enableItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        enableItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).removeClass(this._prefixClass + 'state-disabled');
        },
        //To disable the List item
        /**
        * To disable item in the given index.
        * @method disableItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call disableItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("disableItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To disable item in the given index.
        * @method disableItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call disableItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("disableItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        disableItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).addClass(this._prefixClass + 'state-disabled');
        },
        //To remove check mark to the list
        /**
        * To remove the check mark either for specific item in the given index or for all items.
        * @method removeCheckMark
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call removeCheckMark method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("removeCheckMark",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        //Mobile
        //To remove check mark to the list
        /**
        * To remove the check mark either for specific item in the given index or for all items.
        * @method removeCheckMark
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call removeCheckMark method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("removeCheckMark",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        removeCheckMark: function (index, childId) {
            element = this._getElement(childId);
            if (index >= 0 && this._isEnable($(element.find('li.' + this._prefixClass + 'list')[index])))
                $(element.find('li.' + this._prefixClass + 'list')[index]).find('.' + this._prefixClass + 'lv-checkdiv').remove();
            else
                element.find('.' + this._prefixClass + 'lv-checkdiv').remove();
        },
        //To check selected item in the list
        /**
        * To check item in the given index.
        * @method checkItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call checkItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("checkItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To check item in the given index.
        * @method checkItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call checkItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("checkItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        checkItem: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index])))
                this._setCheckboxValue($(this._getElement(childId).find('.' + this._prefixClass + 'lv-check')[index]), true);
        },
        //To uncheck selected item in the list
        /**
        * To uncheck item in the given index.
        * @method unCheckItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call unCheckItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("unCheckItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To uncheck item in the given index.
        * @method unCheckItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call unCheckItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("unCheckItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        unCheckItem: function (index, childId) {
            if (index >= 0 && this._isEnable($(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index])))
                this._setCheckboxValue($(this._getElement(childId).find('.' + this._prefixClass + 'lv-check')[index]), false);
        },
        //To check all the items in the list
        /**
        * To check all the items.
        * @method checkAllItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call checkAllItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("checkAllItem");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To check all the items.
        * @method checkAllItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call checkAllItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("checkAllItem");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        checkAllItem: function (childId) {
            var proxy = this;
            this._getElement(childId).find('.' + this._prefixClass + 'lv-check').each(function (index, check) {
                if (proxy._isEnable($(proxy._getElement(childId).find('li.' + proxy._prefixClass + 'list')[index])))
                    proxy._setCheckboxValue($(check), true);
            });
        },
        //To uncheck all the items in the list
        /**
        * To uncheck all the items.
        * @method unCheckAllItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call unCheckAllItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("unCheckAllItem");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To uncheck all the items.
        * @method unCheckAllItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call unCheckAllItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("unCheckAllItem");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        unCheckAllItem: function (childId) {
            var proxy = this;
            this._getElement(childId).find('.' + this._prefixClass + 'lv-check').each(function (index, check) {
                if (proxy._isEnable($(proxy._getElement(childId).find('li.' + proxy._prefixClass + 'list')[index])))
                    proxy._setCheckboxValue($(check), false);
            });
        },
        //To get active list item
        /**
        * To get the active item.
        * @method getActiveItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getActiveItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("getActiveItem");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To get the active item.
        * @method getActiveItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getActiveItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("getActiveItem");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        getActiveItem: function (childId) {
            return this._getElement(childId).find('li.' + this._prefixClass + 'list.' + this._prefixClass + 'state-active');
        },
        /**
        * To get the text of the active item.
        * @method getActiveItemText
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getActiveItemText method.
        * $(document).ready(function(){
        * $("#lb").ejListView("getActiveItemText");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To get the text of the active item.
        * @method getActiveItemText
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getActiveItemText method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("getActiveItemText");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        getActiveItemText: function (childId) {
            return this._getElement(childId).find('li.' + this._prefixClass + 'list.' + this._prefixClass + 'state-active').text();
        },
        //To get text of the list item
        /**
        * To get the text of the item in the given index.
        * @method getItemText
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getItemText method.
        * $(document).ready(function(){
        * $("#lb").ejListView("getItemText",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To get the text of the item in the given index.
        * @method getItemText
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getItemText method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("getItemText",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        getItemText: function (index, childId) {
            if (index >= 0)
                return $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).text();
        },
        //To get all checked list items
        /**
        * To get all the checked items.
        * @method getCheckedItems
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getCheckedItems method.
        * $(document).ready(function(){
        * $("#lb").ejListView("getCheckedItems");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        /**
        * To get all the checked items.
        * @method getCheckedItems
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getCheckedItems method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("getCheckedItems");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        getCheckedItems: function (childId) {
            return this._getElement(childId).find('input.' + this._prefixClass + 'lv-check:checked').closest('li.' + this._prefixClass + 'list');
        },
        //To get all checked list item's text
        /**
        * To get the text of all the checked items.
        * @method getCheckedItemsText
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getCheckedItemsText method.
        * $(document).ready(function(){
        * $("#lb").ejListView("getCheckedItemsText");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To get the text of all the checked items.
        * @method getCheckedItemsText
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getCheckedItemsText method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("getCheckedItemsText");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        getCheckedItemsText: function (childId) {
            return $(this.getCheckedItems(childId)).map(function () { return $(this).text(); }).get();
        },
        //To check whether the list item has child or not
        /**
        * To check whether the item in the given index has child item.
        * @method hasChild
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call hasChild method.
        * $(document).ready(function(){
        * $("#lb").ejListView("hasChild",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To check whether the item in the given index has child item.
        * @method hasChild
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call hasChild method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("hasChild",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        hasChild: function (index, childId) {
            if (index >= 0)
                return this.element.find('#' + $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).attr('data-childid')).length ? true : false;
        },
        //To check whether the list item is checked or not
        /**
        * To check whether item in the given index is checked.
        * @method isChecked
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call isChecked method.
        * $(document).ready(function(){
        * $("#lb").ejListView("isChecked",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To check whether item in the given index is checked.
        * @method isChecked
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-enableCheckMark="true"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call isChecked method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("isChecked",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        isChecked: function (index, childId) {
            if (index >= 0)
                return $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).find('input.' + this._prefixClass + 'lv-check').prop('checked');
        },
        //To show the list item
        /**
        * To show item in the given index.
        * @method showItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call showItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("showItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To show item in the given index.
        * @method showItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call showItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("showItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        showItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).css('visibility', '');
        },
        //To hide the list item
        /**
        * To hide item in the given index.
        * @method hideItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call hideItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("hideItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To hide item in the given index.
        * @method hideItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call hideItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("hideItem",2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        hideItem: function (index, childId) {
            if (index >= 0)
                $(this._getElement(childId).find('li.' + this._prefixClass + 'list')[index]).css('visibility', 'hidden');
        },
        //To show the list
        /**
        * To show the list.
        * @method show
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call show method.
        * $(document).ready(function(){
        * $("#lb").ejListView("show");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To show the list.
        * @method show
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call show method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("show");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        show: function (childId) {
            this._getElement(childId).css('visibility', '');
        },
        //To hide the list
        /**
        * To hide the list.
        * @method hide
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call hide method.
        * $(document).ready(function(){
        * $("#lb").ejListView("hide");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To hide the list.
        * @method hide
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call hide method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("hide");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */

        hide: function (childId) {
            this._getElement(childId).css('visibility', 'hidden');
        },
        //To add list item
        /**
        * To add item in the given index.
        * @method addItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call addItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("addItem",$("&ltli data-ej-text='Comic / Cartoon'&gt&lt/li&gt"),2);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To add item in the given index.
        * @method addItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call addItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("addItem",$("&ltli data-ej-text='Comic / Cartoon'&gt&lt/li&gt"),2);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        addItem: function (list, index) {
            if (index >= 0)
                list.insertBefore($(this._orgEle.children().children()[index]));
            else
                this._orgEle.children().append(list);
            this._refresh();
        },
        //To remove list item
        /**
        * To remove item in the given index.
        * @method removeItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call removeItem method.
        * $(document).ready(function(){
        * $("#lb").ejListView("removeItem",3);
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To remove item in the given index.
        * @method removeItem
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call removeItem method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("removeItem",3);
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        removeItem: function (index, childId) {
            if (index >= 0) {
                element = this._getElement(childId);
                var child = $(element.find('li.' + this._prefixClass + 'list')[index]).attr('data-childid');
                if (this.element.find($('#' + child).length))
                    this.element.find($('#' + child)).remove();
                $(element.find('li.' + this._prefixClass + 'list')[index]).remove();
            }
        },
        //To clear the control before updating with new datasource
        /**
        * To clear all the list item in the control before updating with new datasource.
        * @method clear
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejlistview" data-ej-datasource="window.dbitem1" &gt;
        * &lt;/div&gt;  
        * &lt;input id="button" type="button" data-role="ejbutton" data-ej-text="Clear" data-ej-mouseup="mouseup" /&gt;<br>         
        * &lt;script&gt;
        * window.dbitem1 =
        * [   { "text": "Hot Singles"},
        *     { "text": "Rising Artists"},
        *     { "text": "Live Music" },
        *     { "text": "Best of 2013 So Far"},
        *     { "text": "100 Albums - $5 Each"},
        *     { "text": "Hip-Hop and R&B Sale"},
        *     { "text": "CD Deals"}];
        * window.dbitem2 =
        * [   { "text": "Music"},
        *     { "text": "Videos"},
        *     { "text": "Games" },
        *     { "text": "Chat"},
        *     { "text": "Others"}];
        * function mouseup(){
        *     $('#lb').ejListView("clear");
        *     $("#lb").ejListView({dataSource:"window.dbitem2"});
        * }
        * &lt;/script&gt;  
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To clear all the list item in the control before updating with new datasource.
        * @method clear
        * @return jQuery
        * @example 
        * &lt;div id="lb" data-role="ejmlistview" data-ej-datasource="window.dbitem1" &gt;
        * &lt;/div&gt;  
        * &lt;input id="button" type="button" data-role="ejmbutton" data-ej-text="Clear" data-ej-touchend="touchend" /&gt;<br>         
        * &lt;script&gt;
        * window.dbitem1 =
        * [   { "text": "Hot Singles"},
        *     { "text": "Rising Artists"},
        *     { "text": "Live Music" },
        *     { "text": "Best of 2013 So Far"},
        *     { "text": "100 Albums - $5 Each"},
        *     { "text": "Hip-Hop and R&B Sale"},
        *     { "text": "CD Deals"}];
        * window.dbitem2 =
        * [   { "text": "Music"},
        *     { "text": "Videos"},
        *     { "text": "Games" },
        *     { "text": "Chat"},
        *     { "text": "Others"}];
        * function touchend(){
        *     $('#lb').ejmListView("clear");
        *     $("#lb").ejmListView({dataSource:"window.dbitem2"});
        * }
        * &lt;/script&gt;  
        * @memberof ejmListView
        * @instance
        */
        clear: function () {
            this.element.empty().html();
            this._liEl = this.element.find('li.' + this._prefixClass + 'list');
        },
        //To return the list item count
        /**
        * To get the total item count.
        * @method getItemsCount
        * @example 
        * &lt;div id="lb" data-role="ejlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getItemsCount method.
        * $(document).ready(function(){
        * $("#lb").ejListView("getItemsCount");
        * });
        * &lt;/script&gt;
        * @memberof ejListView
        * @instance
        */
        //Mobile
        /**
        * To get the total item count.
        * @method getItemsCount
        * @example 
        * &lt;div id="lb" data-role="ejmlistview"&gt;
        * 	&lt;ul&gt;
        *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
        * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
        *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
        *	&lt;/ul&gt;
        * &lt;/div&gt;
        * &lt;script&gt;
        * // Call getItemsCount method.
        * $(document).ready(function(){
        * $("#lb").ejmListView("getItemsCount");
        * });
        * &lt;/script&gt;
        * @memberof ejmListView
        * @instance
        */
        getItemsCount: function (childId) {
            return this._getElement(childId).find('li.' + this._prefixClass + 'list').length;
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Waiting pop elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/(function ($, ej, undefined) {
 /**
    * @namespace ej
	* @class ejWaitingPopup
	* @requires jQuery
    * @requires jquery.easing.1.3.js
	* @requires ej.core.js
	* @requires ej.waitingpopup.js
	* @classdesc Custom Design for Html Button control.
	* @example 
	*  &lt;div id="target"&gt;&lt;/div&gt;
	* &lt;script&gt;
	* // Simple waiting popup creation.
    * $("#target").ejWaitingPopup({ showOnInit: true });
	* &lt;/script&gt;
    	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
	*/
    // ejWaitingPopup is the plugin name 
    // "ej.WaitingPopup" is "namespace.className" will hold functions and properties

    ej.widget("ejWaitingPopup", "ej.WaitingPopup", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span"],
        _setFirst: false,
        _rootCSS: "e-waitingpopup",

        // default model
        defaults: {
			/**
			* Enables the visibility of the WaitingPopup control
			* @default false
			* @type {Boolean}
			* @example 
	        *  &lt;div id="target"&gt;&lt;/div&gt;
	        * &lt;script&gt;
			* //To set showOnInit API value during initialization  
			* 	$("#target").ejWaitingPopup({ showOnInit: true});
	        * &lt;/script&gt;
            	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
			 * @memberof ejWaitingPopup
			* @instance
			*/
            showOnInit: false,
			/**
			* Enables or disables the default loading icon.
			* @default true
			* @type {Boolean}
			* @example 
	        *  &lt;div id="target"&gt;&lt;/div&gt;
	        * &lt;script&gt;
			* //To set showImage API value during initialization  
			* 	$("#target").ejWaitingPopup({ showOnInit: true, showImage: false});
	        * &lt;/script&gt;
            	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
			 * @memberof ejWaitingPopup
			* @instance
			*/
            showImage: true,
			/**
			* Sets the root class for the WaitingPopup control theme
			* @default null
			* @type {String}
			* @example 
	        *  &lt;div id="target"&gt;&lt;/div&gt;
	        * &lt;script&gt;
			* //To Initialize the WaitingPopup with the cssClass  value specified. 
			* 	$("#target").ejWaitingPopup({showOnInit: true, cssClass : 'gradient-lime '});
	        * &lt;/script&gt;
            	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
			 * @memberof ejWaitingPopup
			* @instance
			*/
            cssClass : "",
			/**
			* Sets the custom text in the pop-up panel to notify the waiting process
			* @default null
			* @type {String}
			* @example 
	        *  &lt;div id="target"&gt;&lt;/div&gt;
	        * &lt;script&gt;
			* //To Initialize the WaitingPopup with the text value specified
			* 	$("#target").ejWaitingPopup({showOnInit: true, text: 'waiting…' });
	        * &lt;/script&gt;
	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
			 * @memberof ejWaitingPopup
			* @instance
			*/	
            text: null,
			/**
			* Loads HTML content inside the popup panel instead of the default icon
			* @default null
			* @type {object}
			* @example 
			*&lt;div id="content"&gt;
			*   &lt;div class="block"&gt;
            *   &lt;div class="logo"&gt;
            *&lt;/div&gt;
			*    &lt;div class="text"&gt;
			*     &lt;p&gt; Content is loading ... &lt;/p&gt;
			*      &lt;/div&gt;
            &lt;/div&gt;
            *&lt;div class="loader"&gt;
            *&lt;/div&gt;
			*&lt;/div&gt;
	        * &lt;script&gt;
			* //To Initialize the WaitingPopup control with the template value specified.
			* 	$("#target").ejWaitingPopup({ showOnInit: true,template: $('#content') });
	        * &lt;/script&gt;
	        * &lt;style&gt;
         
          .block {
            height: 76px;
        }

        .logo {
            background-image: url("themes/images/waitingpopup/js_logo.png");
            float: left;
            height: 100%;
            width: 77px;
            margin-right: 15px;
        }

        .txt {
            float: left;
            font-size: 17px;
            height: 100%;
            text-align: left;
        }

            .txt p {
                margin: 0;
            }

        .loader {
            background: url("themes/images/waitingpopup/load_light.gif") no-repeat scroll -5px 18px transparent;
            height: 40px;
            width: 100%;
        }

        .darktheme .loader {
            background-image: url("themes/images/waitingpopup/load_dark.gif");
        }

        #content {
            cursor: default;
            height: 112px;
            width: 275px;
        }

            
	        * &lt;/style&gt;
			 * @memberof ejWaitingPopup
			* @instance
			*/	
            template: null,
             /**    
			 * Fires after Create waitingpopup successfully
			 * @event
			 * @name ejWaitingPopup#create		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the waitingpopup model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example 
	        *  &lt;div id="target"&gt;&lt;/div&gt;
	        * &lt;script&gt;
			* //To Initialize the WaitingPopup with the text value specified with create event
			* 	$("#target").ejWaitingPopup({showOnInit: true, text: 'waiting…',create: function (args) {} });
	        * &lt;/script&gt;
	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
			 * @memberof ejWaitingPopup
			* @instance
			*/
            create: null,
            /**    
           * Fires after Destroy waitingpopup successfully
           * @event
           * @name ejWaitingPopup#destroy		
           * @param {boolean}  argument.cancel returns the cancel option value
           * @param {object}  argument.model returns the waitingpopup model
           * @param {string}  argument.type returns the name of the event			 
           * @example 
          *  &lt;div id="target"&gt;&lt;/div&gt;
          * &lt;script&gt;
          * //To Initialize the WaitingPopup with the text value specified with destroy event
          * 	$("#target").ejWaitingPopup({showOnInit: true, text: 'waiting…',destroy: function (args) {} });
          * &lt;/script&gt;
          * &lt;style&gt;
            #target {
          height: 200px;
          width: 600px;
          margin: 0 auto;
      }

     #target_WaitingPopup .e-image {
          display: block;
          height: 70px;
      }
          * &lt;/style&gt;
           * @memberof ejWaitingPopup
          * @instance
          */
            destroy: null
        },
		/**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            showOnInit: "boolean",
            showImage: "boolean",
            cssClass : "string"
        },
		 /**
        * To show the waiting popup
		* @return jQuery
		* @example 
		*  &lt;div id="target"&gt;&lt;/div&gt;
		* &lt;script&gt;
        * $("#target").ejWaitingPopup({showOnInit: true});
		* // Initialize the WaitingPopup object.
		*   var popupObj = $("#target").data("ejWaitingPopup");
		* // Calls the show method of WaitingPopup to display.
	    * popupObj.show();
	    * &lt;/script&gt;
        	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
		* @example 
		*  &lt;div id="target"&gt;&lt;/div&gt;
		* &lt;script&gt;
        * $("#target").ejWaitingPopup({showOnInit: true});
		* // Display WaitingPopup using the show method.
		* $("#target").ejWaitingPopup("show");
		* &lt;/script&gt;
        	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
		*@memberof ejWaitingPopup
		* @instance
        */
        show: function () {
            this._refreshPanel();
            this.maindiv.css("display", "block");
            this.model.showOnInit = true;
        },
		 /**
        * To hide the waiting popup
		* @return jQuery
		* @example 
		*  &lt;div id="target"&gt;&lt;/div&gt;
		* &lt;script&gt;
        * $("#target").ejWaitingPopup({showOnInit: true});
		* // Initialize the WaitingPopup object.
		*   var popupObj = $("#target").data("ejWaitingPopup");
		* // Calls the hide method of WaitingPopup not to display.
	    * popupObj.hide();
	    * &lt;/script&gt;
        	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
		* @example 
		*  &lt;div id="target"&gt;&lt;/div&gt;
		* &lt;script&gt;
        * $("#target").ejWaitingPopup({showOnInit: true});
		* // hide WaitingPopup using the hide method.
		* $("#target").ejWaitingPopup('hide');
		* &lt;/script&gt;
        	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
		*@memberof ejWaitingPopup
		* @instance
        */
        hide: function () {
            this.maindiv.css("display", "none");
            this.model.showOnInit = false;
        },
		/**
        * Refreshes the WaitingPopup control by resetting the pop-up panel position and content position
		* @return jQuery
		* @example 
		*  &lt;div id="target"&gt;&lt;/div&gt;
		* &lt;script&gt;
        * $("#target").ejWaitingPopup({showOnInit: true});
		* // Initialize the WaitingPopup object.
		*   var popupObj = $("#target").data("ejWaitingPopup");
	    * popupObj.refresh();
	    * &lt;/script&gt;
        	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
		* @example 
		*  &lt;div id="target"&gt;&lt;/div&gt;
		* &lt;script&gt;
        * $("#target").ejWaitingPopup({showOnInit: true});
		* // Refresh the WaitingPopup using refresh method.
		* $("#target").ejWaitingPopup('refresh');
		* &lt;/script&gt;
        	        * &lt;style&gt;
              #target {
            height: 200px;
            width: 600px;
            margin: 0 auto;
        }

       #target_WaitingPopup .e-image {
            display: block;
            height: 70px;
        }
	        * &lt;/style&gt;
		*@memberof ejWaitingPopup
		* @instance
        */
        refresh: function () {
            this._refreshPanel();
        },
		 /**
         * To configure text for the waiting popup.		
		 * @private
         */	 
        _setText: function (text) {
            if (text) {
                if (this.popupText) this.popupText.html(text);
                else {
                    this._generateTextTag(text);
                    this._setContentPosition();
                }
            }
            else if (this.popupText) {
                this.popupText.remove();
                this.popupText = null;
            }
        },
		 /**
         * To configure showImage for the waiting popup.		
		 * @private
         */	
        _showImage: function (boolean) {
            if (boolean) {
                this.popupImage = ej.buildTag("span.e-image");
                if (this.popupText) this.popupImage.insertBefore(this.popupText);
                else this.maindiv.append(this.popupImage);
            }
            else if (this.popupImage) {
                this.popupImage.remove();
                this.popupImage = null;
            }
        },
		/**
         * To configure setTemplate for the waiting popup.		
		 * @private
         */	
        _setTemplate: function () {
            var template = this.model.template;
            if (typeof template === "string") template = $(template);
            if (typeof template === "object" && typeof template.css === "function") 
                this.templateObj = template;
            else 
                this.templateObj = ej.buildTag("div", "", { "text-align": "center" }).append(template);

            this.templateObj.css({ "visibility": "visible", "display": "block" });
            this.maindiv.append(this.templateObj);
        },
		/**
         * To configure setTheme for the waiting popup.		
		 * @private
         */	
        _setTheme: function (skin) {
            this.maindiv.removeClass(this.model.cssClass ).addClass(skin);
        },

        // constructor function
		/**
         * Create the WaitingPopup widget
		 * @private
         */	
        _init: function () {
            this._initialize();
            this._render();
        },
		 /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */	 
        _setModel: function (options) {
            var option;
            for (option in options) {
                switch (option) {
                    case "text": this._setText(options[option]); break;
                    case "cssClass ": this._setTheme(options[option]); break;
                    case "showOnInit": this._setVisibility(options[option]); break;
                    case "showImage": this._showImage(options[option]); this._setContentPosition(); break;
                    case "template":
                        this.maindiv.empty();
                        if (options[option]) {
                            this.model.template = options[option];
                            this._setTemplate();
                        }
                        else {
                            this.model.template = options[option] = null;
                            this._showImage(this.model.showImage);
                            if (this.model.text) this._generateTextTag(this.model.text);
                        }
                        this._setContentPosition();
                        break;
                }
            }
        },

        _destroy: function () {
            this.maindiv.remove();
        },
		 /**
         * To initialize the waiting popup		
		 * @private
         */	 
        _initialize: function () {
            this.maindiv = null;
            this.popupText = null;
            this.popupImage = null;
            this.templateObj = null;
        },

		 /**
         * Render Section For waiting popup		
		 * @private
         */	
        _render: function () {
			var oldWrapper = $("#" + this.element.context.id + "_WaitingPopup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.maindiv = ej.buildTag("div.e-waitpopup-pane e-widget " + this.model.cssClass  + "#" + this.element[0].id + "_WaitingPopup");
            if (this.model.template) {
                this._setTemplate();
            }
            else {
                this._showImage(this.model.showImage);
                if (this.model.text) {
                    this._generateTextTag(this.model.text);
                }
            }
            $('body').append(this.maindiv);
            this._setVisibility(this.model.showOnInit);
        },
		/**
         * To configure refreshPanel for the waiting popup	
		 * @private
         */	
        _refreshPanel: function () {
            this.maindiv.width(this.element.outerWidth());
            this.maindiv.height(this.element.outerHeight());
            this._setPanelPosition();
            this._setContentPosition();
        },
		/**
         * To configure setPanelPosition for the waiting popup	
		 * @private
         */	
        _setPanelPosition: function() {
            var location = this.element.offset();
            this.maindiv.css({
                "left": Math.ceil(location.left) + "px",
                "top": Math.ceil(location.top) + "px",
                "z-index": this._maxZindex() + 1
            });
        },
		/**
         * To configure setContentPosition for the waiting popup	
		 * @private
         */	
        _setContentPosition: function () {
            if (this.model.template == null) {
                var textHeight = 0, imgHeight = 0, targetHeight, top = null;
                targetHeight = this.element.outerHeight();
                if (this.popupText) textHeight = this.popupText.outerHeight();
                if (this.popupImage) imgHeight = this.popupImage.outerHeight();

                if (this.popupImage) {
                    top = Math.ceil((targetHeight - (imgHeight + textHeight)) / 2);
                    this.popupImage.css("top", top + "px");
                }
                if (this.popupText) {
                    if (!top) top = Math.ceil((targetHeight - textHeight) / 2);
                    this.popupText.css("top", top + "px");
                }
            }
            else {
                this.templateObj.css({
                    "position": "relative",
                    "left": Math.ceil((this.element.outerWidth() - this.templateObj.outerWidth()) / 2),
                    "top": Math.ceil((this.element.outerHeight() - this.templateObj.outerHeight()) / 2)
                });
            }
        },
		/**
         * To configure generateTextTag for the waiting popup	
		 * @private
         */	
        _generateTextTag: function (text) {
            this.popupText = ej.buildTag("div.e-text", text);
            this.maindiv.append(this.popupText);
        },
		/**
         * To configure setVisibility for the waiting popup	
		 * @private
         */
        _setVisibility: function (showOnInit) {
            if (showOnInit) this.show();
            else this.hide();
        },
		/**
         * To configure maxZindex for the waiting popup	
		 * @private
         */
        _maxZindex: function () {
            var elements = document.getElementsByTagName("div"), maxIndex = 0, i, zindex;
            for (i = 0; i < elements.length - 1; i++) {
                zindex = parseInt(elements[i].style.zIndex, 10);  // 10 - radix value
                if (zindex > maxIndex) {
                    maxIndex = zindex;
                }
            }
            return maxIndex;
        }
    });
})(jQuery, Syncfusion);;
/*!
*  filename: ej.button.js
*  version : 12.1
*  Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
 
(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @classdesc Custom Design for Html Button control.
	* @class ejButton
	* @param {object} options - settings for button
	* @requires jQuery
	* @requires ej.core.js
    * @requires ej.button.js
	* @example 
	* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
	* &lt;script&gt;
	* // Create Button
    * $('#button1').ejButton(); 	
	* &lt;/script&gt;
	*/

    ej.widget("ejButton", "ej.Button", {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        validTags: ["button", "input"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-button",
		
        defaults: {  
			/**		
			* Specifies the size of the Button.	See {@link ButtonSize}
			* @default ej.ButtonSize.Normal
			* @type {enum}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* //To set size API value during initialization  
			* 	$("#button1").ejButton({  size: ej.ButtonSize.Mini});	
			* &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/		
            size: "normal",
            /**		
			* Specifies the Type of the Button.	See {@link ButtonType}
			* @default ej.ButtonType.Submit
			* @type {enum | string}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* //To set type API value during initialization  
			* 	$("#button1").ejButton({type: ej.ButtonType.Submit});	
			* &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/
			type:"submit",
			/**		
			* Specifies the height of the Button.
			* @default 28
			* @type {number}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* //To set height API value during initialization  
			* 	$("#button1").ejButton({ height:"30px" });	
            * &lt;/script&gt;			
			* @memberof ejButton
			* @instance
			*/
            height: "",
			/**		
			* Specifies the width of the Button.
			* @default 100
			* @type {number}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* //To set width API value during initialization  
			* 	$("#button1").ejButton({width: "150px"});	
			* &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/
            width: "",
			/**		
			* Specifies the button control state.
			* @default true
			* @type {boolean}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Enable Button on initialization. 
			* 	$("#button1").ejButton({ enabled:true });	
		    * &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/
            enabled: true,
			/**		
			* Specifies the text content for Button.
			* @default null
			* @type {string}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the button text on initialization. 			
			* 	$("#button1").ejButton({  text: "Hello Word" });
            * &lt;/script&gt;			
			* @memberof ejButton
			* @instance
			*/
            text: null,
			/**		
			* Specifies the contentType of the Button. See {@link ContentType}
			* @default ej.ContentType.TextOnly
			* @type {enum}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the button contentType on initialization. 			
			* 	$("#button1").ejButton({  contentType : ej.ContentType.ImageOnly,prefixIcon: "e-uiLight e-icon e-handup" });			
			* &lt;/script&gt;
            * @memberof ejButton
			* @instance
			*/
            contentType: "textonly",
			/**		
			*  Specifies the image position of the Button. This image position is applicable only with the textandimage contentType property. The images can be positioned in both imageLeft and imageRight options. See {@link ImagePosition}
			* @default ej.ImagePosition.ImageLeft
			* @type {enum}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the image position for button during initialization. 			
			* 	$("#button1").ejButton(
            * {
            *    contentType: ej.ContentType.TextAndImage,
            *    imagePosition: ej.ImagePosition.ImageRight,
			*	prefixIcon: "e-uiLight e-icon e-handup" //Specifies the primary icon for Button
            * });	
            * &lt;/script&gt;			
			 * @memberof ejButton
			* @instance
			*/
            imagePosition: "imageleft",
			/**		
			* Specify the rounded corner to button
			* @default false
			* @type {boolean}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the showRoundedCorner during initialization. 			
			* 	$("#button1").ejButton({  showRoundedCorner : true });			
            * &lt;/script&gt;			
			 * @memberof ejButton
			* @instance
			*/
            showRoundedCorner: false,
			/**		
			* Specify the cssClass to button to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the cssClass during initialization. 			
			* 	$("#button1").ejButton({  cssClass : "gradient-lime" });			
			* &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/
            cssClass: "",
			/**		
			* Specifies the primary icon for Button. This is applicable for the content type’s imageOnly, textandimage, imagetextimage and imageboth.
			* @default null
			* @type {string}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the primary icon during initialization. 			
			* 	$("#button1").ejButton(
            *  {
            *     contentType: "imageonly",
            *     prefixIcon: "e-uiLight e-icon e-handup"
            *  });		
			* &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/
            prefixIcon: null,
			/**		
			* Specifies the secondary icon for Button. This is applicable for the content type’s imagetextimage and imageboth.
			* @default null
			* @type {string}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the secondary icon during initialization. 			
			* 	$("#button1").ejButton(
            *  {
            *       contentType: "imageonly",
			*		prefixIcon: "e-uiLight e-icon e-handup",
            *	    suffixIcon: "e-uiLight e-icon e-padlockclosed"
            *  });		
			* &lt;/script&gt;
			* @memberof ejButton
			* @instance
			*/
            suffixIcon: null,
			/**		
			* Specify the Right to Left direction to button
			* @default false
			* @type {boolean}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set the enableRTL during initialization. 			
			* 	$("#button1").ejButton({ contentType: ej.ContentType.TextAndImage,
            *    imagePosition: ej.ImagePosition.ImageLeft,
            *    prefixIcon: "e-uiLight e-login", enableRTL : true });	
            * &lt;/script&gt;					
			* @memberof ejButton
			* @instance
			*/
            enableRTL: false,
			/**		
			* Convert the button as repeat button. It raises the 'Click' event repeattedly from the it is pressed until it is released.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Create repeat button during initialization. 			
			* 	$("#button1").ejButton({  repeatButton : true });
            * &lt;/script&gt;			
			* @memberof ejButton
			* @instance
			*/
            repeatButton: false,
			/**		
			* Specified the timeInterval between two 'click' events while button in repeat button mode.
			* @default "150"
			* @type {string}
			* @example 
			* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			* &lt;script&gt;
			* // Set interval during initialization. 			
			* 	$("#button1").ejButton({  
			*			repeatButton : true,
			* 			timeInterval : "100" });
			* &lt;/script&gt;
			 * @memberof ejButton
			* @instance
			*/
            timeInterval:"150",
			 /**     
			 * Fires after Button control is created.If the user want to perform any operation after the button control creation then the user can make use of this create event. 
			 * @event
			 * @name ejButton#create		
			 * @param {Object} argument Event parameters from button     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the button model
			 * @param {string}  argument.type returns the name of the event			
			 * @example 
			 * &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			 * &lt;script&gt;
			 * //create event for button
             * $("#button1").ejButton({
             *    create: function (args) {
			 * // Write a code block to perform operation after creating the button.
			 * }
             * });
			 * &lt;/script&gt;
			 * @memberof ejButton
			 * @instance
			 */		
            create: null,
			 /**     
			 * Fires when Button control is clicked successfully.Consider the scenario to perform any validation,modification of content or any other operations click on button,we can make use of this click event to achieve the scenario.  
			 * @event
			 * @name ejButton#click 	
			 * @param {Object} argument Event parameters from button     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the button model
			 * @param {string}  argument.type returns the name of the event
			 * @param {boolean}  argument.status return the button state
			 * @example 
			 * &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			 * &lt;script&gt;
			 * //click event for button
             * $("#button1").ejButton({
             *    click: function (args) {
			 * // Write a code block to perform operation while click on button.
			 * }
             * });
             * &lt;/script&gt;			 
			 * @memberof ejButton
			 * @instance
			 */
            click: null,
			 /**    
			 * Fires when the button is destroyed successfully.If the user want to perform any operation after the destroy button control then the user can make use of this destroy event.  
			 * @event
			 * @name ejButton#destroy 	
			 * @param {Object} argument Event parameters from button     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the button model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example 
			 * &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
			 * &lt;script&gt;
			 * //destroy event for button
             * $("#button1").ejButton({
             *    destroy: function (args) {
			 * // Write a code block to perform operation after destroy the button.
			 * }
             * });
			 * &lt;/script&gt;
			 * @memberof ejButton
			 * @instance
			 */
            destroy: null
        },

          /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            size: "enum",            
            enabled: "boolean",
			type:"enum",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            repeatButton: "boolean",
            enableRTL: "boolean",
            timeInterval:"string"
        },
        /**
        * To disable the button  
		* @return jQuery
		* @example 
		* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
		* &lt;script&gt;
		* // Create Button
		* $("#button1").ejButton();
		* var btnObj = $("#button1").data("ejButton");
		* btnObj.disable(); // disable the button
		* &lt;/script&gt;
		* @example 
		* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
		* &lt;script&gt;
		* // disable the button
		* $("#button1").ejButton();
		* $("#button1").ejButton("disable");	
		* &lt;/script&gt;
		*@memberof ejButton
		* @instance
        */
        disable: function () {
            /// <summary>This function is  used to Disable the Button Object</summary>
            this.element.addClass("e-disable").attr("aria-disabled",true);
            this.model.enabled = false;
        },
		/**
        * To enable the button 		
		* @return jQuery
		* @example 
		* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
		* &lt;script&gt;
		* // Create Button
		* $("#button1").ejButton();
		* var btnObj = $("#button1").data("ejButton");
		* btnObj.enable(); // enable the button
		* &lt;/script&gt;
		* @example 
		* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
		* &lt;script&gt;
		* // enable the button
		* $("#button1").ejButton();
		* $("#button1").ejButton("enable");	
		* &lt;/script&gt;
		* @memberof ejButton
		* @instance
         */
        enable: function () {
            /// <summary>This function is  used to Enable the Button Object</summary>
            this.element.removeClass("e-disable").attr("aria-disabled",false);
            this.model.enabled = true;			
        },
        /**
         * Create the butto widget
		 * @private
         */		 
        _init: function () {
            this._initialize();
            this._render();
            this._controlStatus(this.model.enabled);
            this._wireEvents(this.model.repeatButton);
        },

		 /**
        * destroy the button widget
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
		* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
		* &lt;script&gt;
		* // Create Button
		* $("#button1").ejButton();
		* var btnObj = $("#button1").data("ejButton");
		* btnObj.destroy(); // destroy the button
		* &lt;/script&gt;
		* @example 
		* &lt;button id="button1"&gt;Button&lt;/button&gt; <br> 
		* &lt;script&gt;
		* // enable the button
		* $("#button1").ejButton();
		* $("#button1").ejButton("destroy");	
		* &lt;/script&gt;
		* @memberof ejButton
		* @instance
         */	       
        _destroy: function () {
            /// <summary>This function is  used to destroy the Button Object</summary>
            this.element.removeClass(this.model.cssClass + " e-btn e-select e-disable e-corner-all e-widget");
        },
		
		 /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */	 
        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                    case "timeInterval":
                        this.model.timeInterval = options[option];
                        break;
                }
            }
        },
		
		 /**
         * To configure size of the button		
		 * @private
         */	 
        _setSize: function (val) {
            this.element.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
            this.element.addClass("e-btn-" + val);
        },
		_setType: function (val) {
            this.element.attr({"type":val});
		},
		 /**
         * To configure the height		
		 * @private
         */	 
        _setHeight: function (val) {
            /// <summary>This will set Text property of button </summary>
            this.element.css('height', val);
        },
		 /**
         * To configure width.		
		 * @private
         */	 
        _setWidth: function (val) {
            /// <summary>This will set Text property of button </summary>
            this.element.css('width', val);
        },
		 /**
         * To configure the button text		
		 * @private
         */	 
        _setText: function (val) {
            /// <summary>This will set Text property of button </summary>
            if(this.buttonType == "inputButton"){
                this.element.val(val);
            } else {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.element.text(val);
                } else {
                    this.textspan.text(val);
                }
            }
            this.model.text = val;
        },
		 /**
         * To configure button's prefix image		
		 * @private
         */	 
        _setMajorIcon: function (val) {
            /// <summary>This will set Major Icon property of button </summary>
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
            this.model.prefixIcon = val;
        },
		 /**
         * To configure button's suffix image		
		 * @private
         */	 
        _setMinorIcon: function (val) {
            /// <summary>This will set Minor Icon property of button </summary>
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
            this.model.suffixIcon = val;
        },
		 /**
         * To configure button contents type		
		 * @private
         */	 
        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                this._renderButtonNormal();
            }
        },
		 /**
         * To configure images position inside the button		
		 * @private
         */	 
        _setImagePosition: function (val) {
            if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                this.element.empty();
                this.model.imagePosition = val;
                this._renderButtonNormal();
            }
        },
		 /**
         * To enable or disable the Right to Left behaviour 		
		 * @private
         */	 
        _setRTL: function (val) {
            if (val) {
                this.element.addClass("e-rtl");
            } else {
                this.element.removeClass("e-rtl");
            }
        },
		 /**
         * To enable or disable the button state		
		 * @private
         */	 
        _controlStatus: function (value) {
            //disable status
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },
		 /**
         * To configure the custom theme for button using cssClass property		
		 * @private
         */	 
        _setSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
        },
		 /**
         * To initialize the button		
		 * @private
         */	 
        _initialize: function () {
            /// <summary>This function is  used to Initialize the Button Object</summary>
			if (this.element.is("input")) 
			{
			this.buttonType="inputButton";
			}
			else if ((this.element.is("a")) || (this.element.is("button"))) {
                this.buttonType = "tagButton";
            }
			else {
                this.element.removeClass("e-button");
            }
			if(this.element.attr("type"))
			{		
			this.model.type=this.element.attr("type");
			}
			else
			this._setType(this.model.type);
			
			 
			this._timeout = null;
        },

		 /**
         * Render Section For DifferentTypes		
		 * @private
         */	         
        _render: function () {
            /// <summary>This function is  used to Render the Button Object</summary>
            this._setSize(this.model.size);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._setRTL(this.model.enableRTL);
            this.element.addClass(this.model.cssClass + " e-btn e-select e-widget").attr("role", "button");
            if (this.buttonType == "inputButton") {
                this.element.addClass("e-txt");
                if ((this.model.text != null) && (this.model.text != "")) {
                    this.element.val(this.model.text);
                } else {
                    this.model.text = this.element.val();
                }
            } else { this._renderButtonNormal(); }
            this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.text)
                this.element.attr("aria-describedby", this.model.text);
        },
		 /**
         * Render Section For Normal button		
		 * @private
         */	
        _renderButtonNormal: function () {
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.text();
            }
            this.element.empty();
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            if (this.model.contentType.indexOf("image") > -1) {
                this.majorimgtag = ej.buildTag('span.e-icon ' + this.model.prefixIcon);
                this.minorimgtag = ej.buildTag('span.e-icon ' + this.model.suffixIcon);
                this.imgtxtwrap = ej.buildTag('div');
            }
            /*Rendering Option*/
            if (this.model.contentType == ej.ContentType.TextAndImage) {
				switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                    	this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
					case ej.ImagePosition.ImageLeft:
                    	this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
					case ej.ImagePosition.ImageBottom:	
						this.majorimgtag.attr("style","display:inherit");
                    	this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
                	case ej.ImagePosition.ImageTop:
						this.majorimgtag.attr("style","display:inherit");
                    	this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
                }
				this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
                this.element.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
                this.element.append(this.imgtxtwrap);
            } else {
                this.element.addClass("e-txt");
                this.element.text(this.model.text);
            }
        },
		 /**
         * To enable or disable the rounded corner behaviour 		
		 * @private
         */	
        _roundedCorner: function (value) {
            value == true ? this.element.addClass('e-corner-all') : this.element.removeClass('e-corner-all');
        },
         /**
         * Wiring the events to button control		
		 * @private
         */			 
        _wireEvents: function (val) {
            /// <summary>This function is  used to Apply Events in the Button Object</summary>
            if (val) {
                this._on(this.element, "mousedown", this._btnRepatMouseClickEvent);
                this._on($(document), 'mouseup', this._mouseUpClick);
                this._on(this.element, "keyup", this._btnRepatKeyUpEvent);
                this._on($(document), "keypress", this._btnRepatKeyDownEvent);
                
            }
                this._on(this.element, "click", this._btnMouseClickEvent);
        },
		 /**
         * Section For handle the click event
		 * @private
         */	
        _btnMouseClickEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                self._trigger("click", args);
            }
        },
		/**
         * Section For handle repeat button click action.
		 * @private
         */	
        _btnRepatMouseClickEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if((e.button == 0) ||(e.which == 1)){

                    self._timeout = setInterval(function () { self._trigger("click", { target: e.currentTarget, status: self.model.enabled } ); }, this.model.timeInterval);
                }
            }
        },
		/**
         * Section to track the mouse up event		
		 * @private
         */	
        _mouseUpClick: function (event) {
            clearTimeout(this._timeout);
        },
		/**
         * Section to watch the repeat key down action.		
		 * @private
         */
        _btnRepatKeyDownEvent: function (e) {
            var self = this;
            if (!self.element.hasClass("e-disable")) {
                var args = { status: self.model.enabled };
                if ((e.keyCode ==32 ) || (e.keyCode ==13 )) {
                    self._trigger("click", args);
                }
            }
        },
		/**
         * Section to watch the repeat key up action.		
		 * @private
         */
        _btnRepatKeyUpEvent: function (e) {
           if ((e.keyCode == 32) || (e.keyCode == 13)) {
                clearTimeout(this._timeout);
            }
        },
    });
	
	/**
	 * Enum for button content mode.	 
	 * @enum {string}
	 * @global 
	 */
    ej.ContentType = { 
			/**  Supports only for text content only */
			TextOnly: "textonly", 
			/** Supports only for image content only */
			ImageOnly: "imageonly", 
			/** Supports image for both ends of the button */
			ImageBoth: "imageboth", 
			/** Supports image with the text content */
			TextAndImage: "textandimage", 
			/** Supports image with both ends of the text */
			ImageTextImage: "imagetextimage" 
			};
	
	/**
	 * Enum for Button positioning	 
	 * @enum {string}
	 * @global 
	 */
    ej.ImagePosition = { 
			/**  support for aligning text in left and image in right. */
			ImageRight: "imageright", 
			/**  support for aligning text in right and image in left. */
			ImageLeft: "imageleft",
			/**  support for aligning text in bottom and image in top. */
			ImageTop: "imagetop", 
			/**  support for aligning text in top and image in bottom. */
			ImageBottom: "imagebottom"
			};
	/**
	 * Enum for various button sizes	 
	 * @enum {string}
	 * @global 
	 */
    ej.ButtonSize = { 
			/**  Creates button with inbuilt default size height, width specified */
			Normal : "normal",
			/**  Creates button with inbuilt mini size height, width specified */
			Mini: "mini", 
			/**  Creates button with inbuilt small size height, width specified */
			Small: "small",
			/**  Creates button with inbuilt medium size height, width specified */
			Medium:"medium", 
			/**  Creates button with inbuilt large size height, width specified */
			Large: "large"
    };
    /**
	 * Enum for various button types	 
	 * @enum {string}
	 * @global 
	 */
	ej.ButtonType = { 
				/**  Creates button with inbuilt button type specified */
			Button : "button",
			/**  Creates button with inbuilt reset type specified */
			Reset: "reset", 
			/**  Creates button with inbuilt submit type specified */
			Submit: "submit"};
})(jQuery, Syncfusion);
;
/*!
*  filename: ej.checkbox.js
*  version : 12.1
*  Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html CheckBox elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
   * @namespace ej
   * @class ejCheckBox
   * @requires jQuery
   * @requires ej.core.js
   * @requires ej.checkbox.js
   * @classdesc Custom Design for Html CheckBox Control.
   * @example 
   
   *&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
   * // Create Checkbox  
   * $("#chkbox").ejCheckBox(); 
   * &lt;/script&gt;
   */

    ej.widget("ejCheckBox", "ej.CheckBox", {
        _rootCSS: "e-checkbox",
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _setFirst: false,

        // default model
        defaults: {
            /**
			* Specifies the id atribute of the Checkbox.
			* @default null
			* @type {String}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To set id API value during initialization  
			* $("#chkbox").ejCheckBox({  id: "sync" });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            id: null,
            /**
			* Specifies the name attribute of the Checkbox.
			* @default null
			* @type {String}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To set name API value during initialization  
			* $("#chkbox").ejCheckBox({  name: "sync" });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            name: null,
            /**
			* Specifies the value attribute of the Checkbox.
			* @default null
			* @type {String}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To set value API value during initialization  
			* $("#chkbox").ejCheckBox({ value: "Hello World"});
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            value: null,
            /**
			* Specifies the check attribute of the Checkbox.
			* @default false
			* @type {Boolean}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To set check API value during initialization  
			* $("#chkbox").ejCheckBox({ checked:  true });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            checked: false,
            /**
			* Specifies the checkbox control state.
			* @default true
			* @type {boolean}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To Enable checkbox on initialization. 
			* //To set width API value 
			* $("#chkbox").ejCheckBox ({ enabled: true });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            enabled: true,
            /**
			* Specifies the enable or disable Tri-State for checkbox control.
			* @default false
			* @type {boolean}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* // Specifies to enable or disable Tri-State option checkbox while initialization. 
			* //To set enableTriState API value 
			* $("#chkbox").ejCheckBox({  enableTriState: true });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            enableTriState: false,
            /**
			* Specify the rounded corner to checkbox
			* @default false
			* @type {boolean}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To Set the rounded corner during initialization.
			* $("#chkbox").ejCheckBox({ showRoundedCorner: true });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            showRoundedCorner: false,
            /**
			* Specifies the persist property for Checkbox while initialization. The persist API save current model value to browser cookies for state maintains. While refreshing the Checkbox control page the model value apply from browser cookies. 
			* @default false
			* @type {boolean}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To set persist API value 
			* $("#chkbox").ejCheckBox({ enablePersistence : false });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            enablePersistence: false,
            /**
			* Specify the CSS class to CheckBox to achieve custom theme.
			* @default ""
			* @type {string}
			* @example
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt;  
			* // Set the root class for Checkbox control theme. This cssClass API helps to use custom skinning option for Checkbox control. By defining the root class using this API, we need to include this root class in CSS. 			
			* $("#chkbox").ejCheckBox({cssClass: "gradient-lime"}); 
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            cssClass: "",
            /**
			* Specifies the text content for CheckBox.
			* @default ""
			* @type {string}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   
   * &lt;script&gt; 
			* // To set text API value 
			* $("#chkbox").ejCheckBox({ text: "Hello World"});
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            text: "",
            /**
			* Specify the Right to Left direction to CheckBox
			* @default false
			* @type {boolean}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* // Set the RTL during initialization.
			* $("#chkbox").ejCheckBox({  enableRTL : true });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            enableRTL: false,
            /**
			* Specify the idprefix value to be added before the current id of the checkbox.
			* @default "ej"
			* @type {String}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* // To set  idPrefix  API value
			* $("#chkbox").ejCheckBox ({  idPrefix : "ej" });
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            idPrefix: "ej",
            /**
			* Specifies the size of the CheckBox.See {@link CheckboxSize}
			* @default "small"
			* @type {enum}
			* @example 
			*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			* //To set size API value during initialization
			* $("#chkbox").ejCheckBox({  size: "medium"});
			* &lt;/script&gt;
			* @memberof ejCheckBox
			* @instance
			*/
            size: "small",
            /**
           * Specifies the State of ChecKBox.See {@link CheckState}
           * @default null
           * @type {enum}
           * @example 
           *&lt;input type="checkbox" id="chkbox"/&gt;
           *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
           * &lt;script&gt; 
           * //To set CheckState API value during initialization
           * $("#chkbox").ejCheckBox({ enableTriState: true , checkState:"indeterminate"});
           * &lt;/script&gt;
           * @memberof ejCheckBox
           * @instance
           */
            checkState: null,
            /**
            * Fires before the Checkbox is going to changed its state successfully
            * @event
            * @name ejCheckBox#beforeChange
            * @param {Object} argument Event parameters from CheckBox     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {boolean} argument.model returns the Checkbox model
            * @param {boolean} argument.type returns the name of the event
            * @param {boolean} argument.data.element returns the current element
            * @param {boolean} argument.data.isChecked  returns the status of the element
            * @example 
            *&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt;  
            * //To create beforeChange event for checkbox
            * $("#chkbox").ejCheckBox({
            * beforeChange: function (args) {}
            * });
            * &lt;/script&gt;
            * @memberof ejCheckBox
            * @instance
            */
            beforeChange: null,
            /**
            * Fires when the Checkbox state  is changed successfully
            * @event
            * @name ejCheckBox#change
            * @param {Object} argument Event parameters from CheckBox
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {boolean} argument.model returns the Checkbox model
            * @param {boolean} argument.type returns the name of the event
            * @param {boolean} argument.data.element returns the current element
            * @param {boolean} argument.data.isChecked  returns the status of the element
            * @example
            *&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
            * // change event for checkbox
            * $("#chkbox").ejCheckBox({
            * change: function (args) {}
            * });
            * &lt;/script&gt;
            * @memberof ejCheckBox
            * @instance
            */
            change: null,
            /**
			 * Fires when the Checkbox state  is created successfully
			 * @event
			 * @name ejCheckBox#create
			 * @param {Object} argument Event parameters from CheckBox
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
             * @param {boolean} argument.model returns the Checkbox model
             * @param {boolean} argument.type returns the name of the event             
			 * @example 
			 *&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			 * //To create event for checkbox
             * $("#chkbox").ejCheckBox({
             *   create: function (args) {}
             * });    
             * &lt;/script&gt;
			 * @memberof ejCheckBox
			 * @instance
			 */
            create: null,
            /**
			 * Fires when the Checkbox state  is destroyed successfully
			 * @event
			 * @name ejCheckBox#destroy
			 * @param {Object} argument Event parameters from CheckBox
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
             * @param {boolean} argument.model returns the Checkbox model
             * @param {boolean} argument.type returns the name of the event             
			 * @example 
			 *&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
			 * //To create destroy event for checkbox
             * $("#chkbox").ejCheckBox({
             * destroy: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejCheckBox
			 * @instance
			 */
            destroy: null

        },
        /**
        * Specify the data types for default properties 
        * @private
        */
        dataTypes: {
            id: "string",
            name: "string",
            checked: "boolean",
            enablePersistence: "boolean",
            enableTriState: "boolean",
            size: "enum",
            checkState: "enum",
            enabled: "boolean",
            idPrefix: "string"
        },
        /**
        * Create the CheckBox widget
        * @private
        */

        // constructor function
        _init: function () {
            this._setValue();
            this._renderControl();
            if (this.model.enabled)
                this._wireEvents();
            this._setEnabled(this.model.enabled);
        },
        /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */

        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            for (var prop in options) {
                switch (prop) {
                    case "checked":
                        this._isChecked = options[prop];
                        if (this._isChecked)
                            this._checked();
                        else
                            this._unChecked();
                        break;
                    case "enableTriState":
                        if (options[prop]) {
                            this._setIndeterminate(this._indeterminateState);
                        }
                        break;
                    case "checkState":
                        if (this.model.enableTriState) {
                            this.model.checkState = options[prop];
                            this._changeState(this.model.checkState);
                        }
                        break;
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        if (options[prop])
                            $("#" + this.model.idPrefix + this.model.id + "_wrapper").addClass("e-rtl");
                        else
                            $("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass("e-rtl");
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.chkbx.attr('name', options[prop]); break;
                    case "value": this.chkbx.attr('value', options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[prop]); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                }
            }
        },
        /**
        * destroy the CheckBox widget
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* // Create Checkbox instance
		* var chkObj = $("#chkbox").data("ejCheckBox");
		* chkObj.destroy();// Destroy the CheckBox control
		* &lt;/script&gt;
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* //To destroy the CheckBox control
		* $("#chkbox").ejCheckBox("destroy");
		* &lt;/script&gt;
		* @memberof ejCheckBox
		* @instance
         */

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.chkbx.removeClass("e-checkbox e-input");
            this.chkbx.insertBefore(this.element);
            this.element.remove();
            this.element = this.chkbx;
        },
        /**
         * To configure the custom theme for checkbox using cssClass property		
		 * @private
         */
        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
                $("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass(this.model.cssClass).addClass(skin);
            }
        },
        /**
         * To configure the Value		
		 * @private
         */
        _setValue: function () {
            this._indeterminateState = false;
            !ej.isNullOrUndefined(this.element.attr("id")) && (this.model.id = this.element.attr('id'));
            !ej.isNullOrUndefined(this.element.attr('name')) && (this.model.name = this.element.attr('name'));
            !ej.isNullOrUndefined(this.element.attr('value')) && (this.model.value = this.element.attr('value'));
            ej.isNullOrUndefined(this.model.name) && (this.model.name = this.model.id);
            this._isChecked = this.element.attr('checked');            
            this._isChecked = this._isChecked != undefined ? this._isChecked : this.model.checked;
        },
        /**
         * To configure the Size of the CheckBox		
		 * @private
         */
        _setSize: function (val) {
            if (val == ej.CheckboxSize.Medium)
                this.innerdiv.removeClass('e-chkbox-small').addClass('e-chkbox-medium');
            else
                this.innerdiv.removeClass('e-chkbox-medium').addClass('e-chkbox-small');
        },
        /**
         * To configure the showRoundedCorner of the CheckBox		
		 * @private
         */
        _setRoundedCorner: function (val) {
            if (val)
                this.span.addClass("e-corner-all");
            else
                this.span.removeClass("e-corner-all");
        },
        /**
         * To configure the Enable status of the CheckBox		
		 * @private
         */
        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },
        _setCheckBoxState: function () {
            if (this.model.enableTriState) {
                if (this.model.checkState == "indeterminate")
                    this._indeterminateState = true
                else if (this.model.checkState == "check") {
                    this.model.checked = true;
                    this._isChecked = this.model.checked == null ? this._isChecked : this.model.checked;
                }
                else if (this.model.checkState == "uncheck") {
                    this.model.checked = false;
                    this._isChecked = this.model.checked == null ? this._isChecked : this.model.checked;
                }
            }
        },
        /**
         * Render Section For CheckBox control		
		 * @private
         */
        _renderControl: function () {
            this._setCheckBoxState();
            this.maindiv = ej.buildTag("span.e-chkbox-wrap e-widget " + this.model.cssClass + "#" + this.model.idPrefix + this.model.id, "", {}, { "role": "checkbox", tabindex: 0 });
            this.innerdiv = $('<div></div>');
            this._setSize(this.model.size);
            this.span = $('<span></span>');
            this.spanImg = $('<span class="e-chk-image"></span>').attr("role", "presentation");
            this.element.addClass("e-input");
            this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
            this.element.attr({ "id": this.model.id, "name": this.model.name, "value": this.model.value });
            //this.span.addClass("e-innerspan");
            this._setRoundedCorner(this.model.showRoundedCorner);
            if (this._isChecked) {
                this.spanImg.addClass("e-chk-activeicon");
                this.span.addClass("e-chk-act");
                this.maindiv.attr({ "aria-checked": true });
            }
            else {
                this.span.addClass("e-chk-inact");
                this.maindiv.attr({ "aria-checked": false });
            }
            this.span.append(this.spanImg);
            this.innerdiv.append(this.span);
            this.maindiv.insertBefore(this.element);
            this.maindiv.append(this.element);
            this.maindiv.append(this.innerdiv);
            this._setTextWrapper(this.model.text);
            this.chkbx = this.element;
            this.element = this.maindiv;
            if (this.model.enableTriState == true && this._indeterminateState == true)
                this._setIndeterminate(this._indeterminateState);
        },
        _changeState: function (state) {
            if (state == "indeterminate") {
                this.spanImg.removeClass("e-chk-activeicon").addClass("e-chk-indetericon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-inact").addClass("e-chk-indeter");
                this.maindiv.attr({ "aria-checked": "mixed" });
                this.element.find('input').prop('enableTriState', true);
                this.model.checked = null;
            }
            else if (state == "check") {
                this.spanImg.removeClass("e-chk-indetericon").addClass("e-chk-activeicon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-inact").removeClass("e-chk-indeter").addClass("e-chk-act");
                this.maindiv.attr({ "aria-checked": true });
            }
            else if (state == "uncheck") {
                this.spanImg.removeClass("e-chk-activeicon").removeClass("e-chk-indetericon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-indeter").addClass("e-chk-inact");
                this.maindiv.attr({ "aria-checked": false });
            }
        },
        /**
        * To configure checkbox tri-state type		
        * @private
        */
        _setIndeterminate: function (indeter) {
            if (indeter) {
                this.spanImg.removeClass("e-chk-activeicon").addClass("e-chk-indetericon");
                this.span.removeClass("e-chk-act").removeClass("e-chk-inact").addClass("e-chk-indeter");
                this.maindiv.attr({ "aria-checked": "mixed" });
                this.element.find('input').prop('enableTriState', true);
                this.model.checked = null;
            }
            else {
                this.element.find(".e-chk-indeter").removeClass("e-chk-indeter");
                this.element.find(".e-chk-image").removeClass("e-chk-indetericon");
                this.element.find('input').removeAttr('enableTriState');
                this.element.find('input').prop('enableTriState', false);
                if (this.model.checked)
                    this._checked();
                else
                    this._unChecked();
            }
        },
        /**
         * To configure checkbox textwrapper		
		 * @private
         */
        _setTextWrapper: function (val) {
            if (val != "") {
                //this.textWrapDiv = ej.buildTag("div.e-chkbox-wrap " + this.model.cssClass + "#" + this.model.idPrefix + this.model.id + "_wrapper");
                //this.maindiv.wrap(this.textWrapDiv);
                this.txtSpan = ej.buildTag("div.e-text", val);
                this.maindiv.append(this.txtSpan);
                if (this.model.enableRTL)
                    $("#" + this.model.idPrefix + this.model.id + "_wrapper").addClass("e-rtl");
            }
        },
        /**
         * To configure checkbox text value
		 * @private
         */
        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },
        /**
         * To configure checkbox ID attribute value
		 * @private
         */
        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            this.chkbx.attr('id', val);
        },
        /**
        * Wiring the events to checkbox control
        * @private
        */
        _wireEvents: function () {
            this._on(this.element, "click", this._checkedHandler);
            this._on(this.element, "focus", this._focusIn);
            this._on(this.element, "focusout", this._focusOut);
        },
        /**
         * Unwiring the events to checkbox control
		 * @private
         */

        _unWireEvents: function () {
            this._off(this.element, "click");
            this._off(this.element, "focus");
            this._off(this.element, "focusout");
        },
        _focusIn: function (evt) {
            $(this.element).addClass("e-focus");
            $(this.element).bind("keydown", $.proxy(this._checkUnCheck, this));
        },
        _focusOut: function (evt) {
            $(this.element).removeClass("e-focus");
            $(this.element).unbind("keypress", $.proxy(this._checkUnCheck, this));
        },
        _checkUnCheck: function (evt) {
            //Space bar to check and uncheck
            if (evt.keyCode == 32) {
                evt.preventDefault();
                this._checkedHandler();
            }
        },
        _checkedHandler: function (evt) {
            var data = { isChecked: this._isChecked, event: evt };
            if (true == this._trigger("beforeChange", data)) {
                return false;
            }
            if (this.element.find("span:first").hasClass("e-chk-inact")) {
                this._checked();
                this._isChecked = this.model.checked = true;
                if (this.model.enableTriState) {
                    this._indeterminateState = true;
                }
            }
            else if (this.element.find("span:first").hasClass("e-chk-act")) {
                if ((this.model.enableTriState == true) && (this._indeterminateState == true)) {
                    this._setIndeterminate(true);
                    this._isChecked = this.model.checked = true;
                } else {
                    this._unChecked();
                    this._isChecked = this.model.checked = false;
                }


            }
            else if (this.element.find("span:first").hasClass("e-chk-indeter")) {
                this._isChecked = this.model.checked = false;
                this._setIndeterminate(false);
                this._indeterminateState = false;
            }
            var data = { isChecked: this._isChecked, event: evt };
            this._trigger("change", data);
            return true;
        },
        /**
         * Section For handling the Check event handler
		 * @private
         */

        _checked: function () {
            this.element.find("span:first").removeClass("e-chk-inact").addClass("e-chk-act");
            this.element.find(".e-chk-image").removeClass("e-chk-indetericon").addClass("e-chk-activeicon");
            this.maindiv.attr({ "aria-checked": true });
            this.element.find('input[type=checkbox]').prop('checked', true);
            this.model.checkState = "check";
        },
        /**
         * Section For handling the Uncheck event handler
		 * @private
         */

        _unChecked: function () {
            this.element.find("span:first").removeClass("e-chk-act").addClass("e-chk-inact");
            this.maindiv.attr({ "aria-checked": false });
            this.element.find(".e-chk-image").removeClass("e-chk-activeicon").removeClass("e-chk-indetericon");
            this.element.find('input[type=checkbox]').removeAttr('checked');
            this.model.checkState = "uncheck";
        },
        /**
        * To disable the checkbox
		* @return jQuery
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* // Create Checkbox instance 
		* var chkObj = $("#chkbox").data("ejCheckBox");
		* chkObj.disable(); //disables the CheckBox
		* &lt;/script&gt;
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* //To disable the CheckBox
		* $("#chkbox").ejCheckBox("disable");
		* &lt;/script&gt;
		* @memberof ejCheckBox
		* @instance
        */

        disable: function () {
            if (!this.element.hasClass("e-disable")) {
                this.element.addClass("e-disable").attr("aria-disabled", true);
                this._unWireEvents();
                this.model.enabled = false;
            }
        },
        /**
        * To enable the checkbox
		* @return jQuery
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* // Create Checkbox instance 
		* var chkObj = $("#chkbox").data("ejCheckBox");
		* chkObj.enable(); // enables the CheckBox
		* &lt;/script&gt;
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* //To enable the CheckBox
		* $("#chkbox").ejCheckBox("enable");
		* &lt;/script&gt;
		* @memberof ejCheckBox
		* @instance
        */
        enable: function () {
            if (this.element.hasClass("e-disable")) {
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                this._wireEvents();
                this.model.enabled = true;
            }
        },
        /**
        * To Check the status of checkbox
		* @return jQuery
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* // Create Checkbox  instance
		* var chkObj = $("#chkbox").data("ejCheckBox");
		* chkObj.isChecked(); // check the status of checkbox
		* &lt;/script&gt;
		* @example 
		*&lt;input type="checkbox" id="chkbox"/&gt;
   *&lt;label for="chkbox"&gt;Experienced&lt;/label&gt;
   * &lt;script&gt; 
        * $("#chkbox").ejCheckBox();
		* //To check the status of checkbox
		* $("#chkbox").ejCheckBox("isChecked");
		* &lt;/script&gt;
		* @memberof ejCheckBox
		* @instance
        */
        isChecked: function () {
            if ((this._isChecked != null) && (this._isChecked != undefined))
                return this._isChecked;
        }
    });
    /**
	 * Enum for various checkbox sizes	 
	 * @enum {string}
	 * @global 
	 */
    ej.CheckboxSize = {
        /**  Creates checkbox with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates checkbox with inbuilt medium size height, width specified */
        Medium: "medium"
    };
    /**
    * Enum for various checkbox states	 
    * @enum {string}
    * @global 
    */
    ej.CheckState = {
        /**  Specifies the Check attribute of the Checkbox */
        Check: "check",
        /**  Specifies the Uncheck attribute of the Checkbox */
        Uncheck: "uncheck",
        /**  Specifies the Indeterminate state of the Checkbox */
        Indeterminate: "indeterminate"
    };
})(jQuery, Syncfusion);;;
/*!
*  filename: ej.radiobutton.js
*  version : 12.1
*  Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html Radiobutton elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @class ejRadioButton
	* @requires jQuery
   * @requires ej.core.js
   * @requires ej.radiobutton.js
	* @classdesc Custom Design for Html RadioButton Control. 
	* @example
	*&lt;input type="radio" id="radiobtn"/&gt;
	*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
    *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	*&lt;label for="radiobtn1"&gt; Fresher &lt;/label&gt;
	*&lt;script&gt;
	*$("#radiobtn").ejRadioButton({checked:true});
    *$("#radiobtn1").ejRadioButton();
	*&lt;/script&gt;
	*/
    ej.widget("ejRadioButton", "ej.RadioButton", {
        _rootCSS: "e-radiobtn",
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _setFirst: false,

        // default model
        defaults: {
            /**		
			* Specifies the id attribute for the Radio Button while initialization.
			* @default null
			* @type {String}
			* @example 
			*&lt;input type="radio" name="radiobtn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobtn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
			*&lt;script&gt;
			* //To set id API value during initialization  
			* 	$("#radiobtn").ejRadioButton({  id: "sync" });
            * 	$("#radiobtn1").ejRadioButton({  id: "sync1" });
			 * &lt;/script&gt;
			 * @memberof ejRadioButton
			* @instance
			*/
            id: null,
            /**		
			* Specifies the name attribute for the Radio Button while initialization.
			* @default Sets id as name if it is null
			* @type {String}
			 * @memberof ejRadioButton
			* @instance
			*/
            name: null,
            /**		
			* Specifies the value atribute of the Radio Button.
			* @default null
			* @type {String}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	        *&lt;script&gt;
			* //To set value API value during initialization  
			* 	$("#radiobtn").ejRadioButton({ value: "Experienced"});
            * 	$("#radiobtn1").ejRadioButton({ value: "Fresher"});
			* &lt;/script&gt;		
			* @memberof ejRadioButton
			* @instance
			*/
            value: null,
            /**		
			* Specifies the check atribute of the Radio Button.
			* @default false
			* @type {Boolean}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	*&lt;script&gt;
			* //To set check API value during initialization  
			* 	$("#radiobtn").ejRadioButton({ checked:  true });	
            * 	$("#radiobtn1").ejRadioButton({ checked:  true });
			  * &lt;/script&gt;
			 * @memberof ejRadioButton
			* @instance
			*/
            checked: false,
            /**		
			* Specify the CSS class to RadioButton to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	*&lt;script&gt;
			* // Set the root class for RadioButton control theme. This cssClass API helps to use custom skinning option for RadioButton control. By defining the root class using this API, we need to include this root class in CSS. 			
			* 	$("#radiobtn").ejRadioButton({cssClass: "gradient-lime"});
            * 	$("#radiobtn1").ejRadioButton({cssClass: "gradient-lime"});
			* &lt;/script&gt;
			* @memberof ejRadioButton
			* @instance
			*/
            cssClass: "",
            /**		
			* Specifies the text content for RadioButton.
			* @default ""
			* @type {string}
			* @memberof ejRadioButton
			* @instance
			*/
            text: "",
            /**		
			* Specify the Right to Left direction to RadioButton
			* @default false
			* @type {boolean}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	*&lt;script&gt;
			* // Set the enableRTL during initialization. 			
			* 	$("#radiobtn").ejRadioButton({  enableRTL:true });	
            * 	$("#radiobtn1").ejRadioButton({  enableRTL:true });	
			* &lt;/script&gt;
			* @memberof ejRadioButton
			* @instance
			*/
            enableRTL: false,
            /**		
			* Specifies the enablePersistence property for RadioButton while initialization. The enablePersistence API save current model value to browser cookies for state maintains. While refreshing the radiobutton control page the model value apply from browser cookies. 
			* @default false
			* @type {boolean}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	*&lt;script&gt;
			* // To set enablePersistence API value 
			* $("#radiobtn").ejRadioButton({ enablePersistence: false });	
            * $("#radiobtn1").ejRadioButton({ enablePersistence: false });
			* &lt;/script&gt;
			 * @memberof ejRadioButton
			* @instance
			*/
            enablePersistence: false,
            /**		
			* Specify the idprefix value to be added before the current id of the RadioButton.
			* @default "ej"
			* @type {String}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	*&lt;script&gt;
			* // To set  idPrefix  API value
			* $("#radiobtn").ejRadioButton ({  idPrefix : "ej" }); 
            * $("#radiobtn1").ejRadioButton ({  idPrefix : "ej" }); 
			* &lt;/script&gt;
			* @memberof ejRadioButton
			* @instance
			*/
            idPrefix: "ej",
            /**		
			* Specifies the size of the RadioButton.	See {@link RadioButtonSize}
			* @default "small"
			* @type {enum}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	        *&lt;script&gt;
			* //To set size API value during initialization  
			* 	$("#radiobtn").ejRadioButton({  size: "medium"});	
            * 	$("#radiobtn1").ejRadioButton({  size: "medium"});
			 * &lt;/script&gt;
			* @memberof ejRadioButton
			* @instance
			*/
            size: "small",
            /**		
			* Specifies the RadioButton control state.
			* @default true
			* @type {boolean}
			* @example 
			*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
             *&lt;br/&gt; &lt;input type="radio" name="radiobutn" id="radiobtn1"/&gt;
	         *&lt;label for="radiobtn1"&gt;Fresher &lt;/label&gt;
	        *&lt;script&gt;
			* // Enable RadioButton on initialization. 
			* 	//To set width API value 
			* 	 $("#radiobtn").ejRadioButton ({ enabled: true });	
            * 	 $("#radiobtn1").ejRadioButton ({ enabled: true });	
			* &lt;/script&gt;
			 * @memberof ejRadioButton
			* @instance
			*/
            enabled: true,
            /**    
			 * Fires before the RadioButton is going to changed its state successfully
			 * @event
			 * @name ejRadioButton#beforeChange 	
			 * @param {Object} argument Event parameters from RadioButton     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
             * @param {boolean} argument.model returns the RadioButton model
             * @param {boolean} argument.type returns the name of the event
             * @param {boolean} argument.data.element returns the current element
             * @param {boolean} argument.data.isChecked  returns the status of the element
			 * @example 
			 *&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;   
	         *&lt;script&gt;
			 * //beforeChange event for RadioButton
             * $("#radiobtn").ejRadioButton({
             *   beforeChange:function (args){ }
             *});  
             * &lt;/script&gt;         
			 * @memberof ejRadioButton
			 * @instance
			 */
            beforeChange: null,
            /**    
			 * Fires when the RadioButton state  is changed successfully
			 * @event
			 * @name ejRadioButton#change 	
			 * @param {Object} argument Event parameters from RadioButton     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
             * @param {boolean} argument.model returns the RadioButton model
             * @param {boolean} argument.type returns the name of the event
             * @param {boolean} argument.data.element returns the current element
             * @param {boolean} argument.data.isChecked  returns the status of the element
			 * @example 
			 *&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
	        *&lt;script&gt;
			 * //change event for RadioButton
             * $("#radiobtn").ejRadioButton({
             *   change: function (args){}
             *}); 
             * &lt;/script&gt;          
			 * @memberof ejRadioButton
			 * @instance
			 */
            change: null,
            /**    
            * Fires when the RadioButton created successfully
            * @event
            * @name ejRadioButton#create 	
            * @param {Object} argument Event parameters from RadioButton     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {boolean} argument.model returns the RadioButton model
            * @param {boolean} argument.type returns the name of the event
            * @example 
            * &lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
            * &lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
            * &lt;script&gt;
            * // //create event for RadioButton
            * $("#radiobtn").ejRadioButton({
            *   create:function(args){}
            *}); 
            * &lt;/script&gt;          
            * @memberof ejRadioButton
            * @instance
            */
            create: null,
            /**    
            * Fires when the RadioButton destroyed successfully
            * @event
            * @name ejRadioButton#destroy 	
            * @param {Object} argument Event parameters from RadioButton     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {boolean} argument.model returns the RadioButton model
            * @param {boolean} argument.type returns the name of the event           
            * @example 
            *&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
           *&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
           *&lt;script&gt;
            * // //destroy event for RadioButton
            * $("#radiobtn").ejRadioButton({
            *   destroy:function(args){}
            *}); 
            * &lt;/script&gt;          
            * @memberof ejRadioButton
            * @instance
            */
            destroy: null
        },
        /**
         * Specify the data types for default properties 
		 * @private
         */

        dataTypes: {
            id: "string",
            name: "string",
            checked: "boolean",
            enablePersistence: "boolean",
            size: "enum",
            enabled: "boolean",
            idPrefix: "string"
        },
        /**
		 * Create the RadioButton widget
		 * @private
		 */
        // constructor function
        _init: function () {
            this._setValue();
            this._renderControl();
            this._setEnabled(this.model.enabled);
            this._wireEvents();
            if (this.isChecked)
                this._checkedHandler();
        },
        /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */

        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            for (var prop in options) {
                switch (prop) {
                    case "cssClass": this._changeSkin(options[prop]); break;
                    case "enableRTL":
                        if (options[prop])
                            this.textWrapDiv.addClass("e-rtl");
                        else
                            this.textWrapDiv.removeClass("e-rtl");
                        break;
                    case "text": this._setText(options[prop]); break;
                    case "size": this._setSize(options[prop]); break;
                    case "checked": this.model.checked = options[prop]; this._checkedChange(this.model.checked); break;
                    case "enabled": this._setEnabled(options[prop]); break;
                    case "id": this._setIdAttr(options[prop]); break;
                    case "name": this.radbtn.attr('name', options[prop]); break;
                    case "value": this.radbtn.attr('value', options[prop]); break;
                }
            }
        },
        /**
        * destroy the RadioButton widget
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
		*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
	    *&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
	   *&lt;script&gt; 
		* // Create RadioButton
		* $("#radiobtn").ejRadioButton();
		* var chkObj = $("#radiobtn").data("ejRadioButton");
		* chkObj.destroy();
		* &lt;/script&gt;
		* @example 
		*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
		*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
	    *&lt;script&gt;
		* // enable the RadioButton
		* $("#radiobtn").ejRadioButton();
		* $("#radiobtn").ejRadioButton("destroy");	
		* &lt;/script&gt;
		* @memberof ejRadioButton
		* @instance
         */

        // all events bound using this._on will be unbind automatically _checkedChange
        _destroy: function () {
            this.radbtn.removeClass("e-radiobtn e-input");
            this.radbtn.insertBefore(this.element);
            this.element.remove();
            this.element = this.radbtn;
        },
        /**
         * To configure the custom theme for RadioButton using cssClass property		
		 * @private
         */
        //Skin Change at run time
        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.element.removeClass(this.model.cssClass).addClass(skin);
                this.textWrapDiv.removeClass(this.model.cssClass).addClass(skin);
            }
        },
        /**
         * To configure the Value		
		 * @private
         */
        _setValue: function () {
		
		     if(!ej.isNullOrUndefined(this.element.attr("id")))
		         this.model.id=this.element.attr("id");
		     if(!ej.isNullOrUndefined(this.element.attr("name")))
		         this.model.name=this.element.attr("name");
		     if(!ej.isNullOrUndefined(this.element.attr("value")))
		         this.model.value=this.element.attr("value");
		     this.element.attr({ "id": this.model.id,"name": this.model.name,"value": this.model.value});
             this.isChecked = this.element.attr('checked');
             this.isChecked = this.isChecked != undefined ? this.isChecked : this.model.checked;
        },
        /**
       * To configure Radio button ID attribute value
       * @private
       */
        _setIdAttr: function (val) {
            $("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
            $("#" + this.model.idPrefix + this.model.id).attr('id', this.model.idPrefix + val);
            this.radbtn.attr('id', val);
        },
        /**
         * To configure the Size of the RadioButton		
		 * @private
         */
        _setSize: function (val) {
            if (val == ej.RadioButtonSize.Medium)
                this.span.removeClass('e-radsmaller').addClass('e-radmedium');
            else
                this.span.removeClass('e-radmedium').addClass('e-radsmaller');
        },
        /**
         * To configure the Enable status of the RadioButton		
		 * @private
         */
        _setEnabled: function (val) {
            if (val) {
                this.enable();
            } else {
                this.disable();
            }
        },
        /**
         * Render Section For RadioButton control		
		 * @private
         */
        _renderControl: function () {
            this.div = $('<div class="e-radiobtn-wrap e-widget" ></div>');
            this.div.attr({'id':this.model.idPrefix + this.model.id,"role":"radio","tabindex":-1,"aria-checked":false});
            this.span = $('<span></span>');
            this.span.addClass("e-spanicon");
            this._setSize(this.model.size);
            this.spanImg = $('<span class="e-rad-icon e-rad-select"></span>', "", {}, {"role":"presentation"});
            this.element.addClass("e-input");
            this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
            this.element.attr({"id": this.model.id,"name":this.model.name,"value":this.model.value});
            this.div.addClass(this.model.cssClass);
            this.span.append(this.spanImg);
            this.div.insertBefore(this.element);
            this.div.append(this.element);
            this.div.append(this.span);
            this._setTextWrapper(this.model.text);
            this.radbtn = this.element;
            this.element = this.div;
            if (this.isChecked) {
                this.element.find(".e-input").attr('checked', true);
            }
        },
        /**
         * To configure RadioButton textwrapper		
		 * @private
         */
        _setTextWrapper: function (val) {
            if (val != "") {
                this.textWrapDiv = ej.buildTag("div.e-radiobtn-wrap " + this.model.cssClass + "#" + this.model.idPrefix + this.model.id + "_wrapper");
                this.div.wrapAll(this.textWrapDiv);
                this.txtSpan = ej.buildTag("div.e-text", this.model.text);
                this.textWrapDiv = $("#" + this.model.idPrefix + this.model.id + "_wrapper");
                this.textWrapDiv.append(this.txtSpan);
                if (this.model.enableRTL)
                    this.textWrapDiv.addClass("e-rtl");
            }
        },
        /**
         * To configure RadioButton text value		
		 * @private
         */
        _setText: function (val) {
            if ((this.model.text == "") && (val != "")) {
                this._setTextWrapper(val);
            } else {
                this.txtSpan.html(val);
            }
        },
        /**
        * Wiring the events to RadioButton control		
        * @private
        */
        _wireEvents: function () {
            this._on(this.element, "click", this._checkedHandler);
            this._on(this.element, "focus", this._focusIn);
            this._on(this.element, "focusout", this._focusOut);
        },
        _focusIn: function (evt) {
            $(this.element).addClass("e-focus");
        },
        _focusOut: function (evt) {
            $(this.element).removeClass("e-focus");
        },
        _checkedHandler: function (evt) {
            if (!this.element.hasClass('e-disable')) {
                this.isChecked = this.element.find('input.e-radiobtn:radio').attr('checked') == 'checked' ? true : false;
                this._changeEvent();
            }
        },
        /**
         * Section For handle the change in check for radiobutton
		 * @private
         */
        _checkedChange: function (val) {
            this.isChecked = val;
            if ((this.isChecked) && (this.model.enabled))
                this._changeEvent();
        },
        /**
         * Section For handle the change event for radiobutton
		 * @private
         */
        _changeEvent: function () {
            var data = { isChecked: this.isChecked };
            if (true == this._trigger("beforeChange", data)) {
                return false;
            }
            if (!$(this.element).find(".e-rad-icon").hasClass("e-rad-active")) {
                var curname = this.element.find(".e-input").attr('name'),
                input = $('input.e-radiobtn[name=' + curname + ']:radio'),
                proxy = this,
                currElement = this.element.find('.e-input'),
                currObj = $(currElement).data("ejRadioButton");
                if (data.isChecked) {
                    this.spanImg.addClass("e-rad-active").removeClass('e-rad-select');
                    this.div.attr({ "tabindex": 0, "aria-checked": true });
                }
                $.each(input, function (i, obj) {
                    $(obj).parent().parent().find(".e-rad-icon").removeClass("e-rad-active").addClass("e-rad-select");
                    $(obj).parent().parent().find('.e-radiobtn-wrap').attr({ "tabindex": -1, "aria-checked": false });
                    var prevObj = $(obj).data("ejRadioButton");
                    if (prevObj != null) {
                        prevObj.model.checked = false;
                    }
                });
                if (currObj != null)
                    currObj.model.checked = true;
                this.element.find(".e-rad-icon").addClass("e-rad-active").removeClass("e-rad-select");
                this.div.attr({ "tabindex": 0, "aria-checked": true });
                this.element.find(".e-input").click();
                this.isChecked = true;
            }
            var data = { isChecked: this.isChecked };
            this._trigger("change", data)
        },
        /**
        * To disable the RadioButton
		* @return jQuery
		* @example 
		*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
			*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;           
	*&lt;script&gt; 
		* // Create RadioButton
		* $("#radiobtn").ejRadioButton();
		* var chkObj = $("#radiobtn").data("ejRadioButton");
		* chkObj.disable();
		* &lt;/script&gt;
		* @example 
		*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
		*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
	    *&lt;script&gt; 
		* // disable the RadioButton
		* $("#radiobtn").ejRadioButton();
		* $("#radiobtn").ejRadioButton("disable");	
		* &lt;/script&gt;
		* @memberof ejRadioButton
		* @instance
        */
        disable: function () {
            if (!this.element.hasClass("e-disable"))
                this.element.addClass("e-disable");
            this.div.attr("aria-disabled", true);
            this.model.enabled = false;
        },
        /**
        * To enable the RadioButton
		* @return jQuery
		* @example 
		*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
		*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
	    *&lt;script&gt; 
		* // Create RadioButton
		* $("#radiobtn").ejRadioButton();
		* var chkObj = $("#radiobtn").data("ejRadioButton");
		* chkObj.enable();
		* &lt;/script&gt;
		* @example 
		*&lt;input type="radio" name="radiobutn" id="radiobtn"/&gt;
		*&lt;label for="radiobtn"&gt;Experienced&lt;/label&gt;
	    *&lt;script&gt; 
		* // enable the RadioButton
		* $("#radiobtn").ejRadioButton();
		* $("#radiobtn").ejRadioButton("enable");	
		* &lt;/script&gt;
		* @memberof ejRadioButton
		* @instance
        */
        enable: function () {
            if (this.element.hasClass("e-disable"))
                this.element.removeClass("e-disable");
            this.div.attr("aria-disabled", false);
            this.model.enabled = true;
        }
    });
    /**
	 * Enum for various radio button sizes	 
	 * @enum {string}
	 * @global 
	 */
    ej.RadioButtonSize = {
        /**  Creates radio button with inbuilt small size height, width specified */
        Small: "small",
        /**  Creates radio button with inbuilt medium size height, width specified */
        Medium: "medium"
    };
})(jQuery, Syncfusion);;
/// <reference path="../../samples/web/autocomplete/angularsupport.html" />
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @classdesc Custom Design for Html Textbox control.
	* @class ejAutocomplete
	* @requires jQuery
    * @requires jquery.easing.1.3.js
	* @requires ej.core.js
    * @requires ej.data.js
	* @requires ej.autocomplete.js
	* @requires ej.scroller.js
	* @example 
	* &lt;input type="text" id="autocomplete" /&gt; <br> 
	* &lt;script&gt;
	* // Create AutoComplete
    * $('#autocomplete').ejAutocomplete({ dataSource: window.carList,value:"Austin-Healey" }); 	
	* &lt;/script&gt;
	*/

    // ejAutocomplete is the plugin name 
    // "ej.Autocomplete" is "namespace.className" will hold functions and properties

    ej.widget("ejAutocomplete", "ej.Autocomplete", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "focusIn", "focusOut", "change", "select", "create", "destroy"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-autocomplete",
        type: "editor",

        // default model
        defaults: {
            /**		
			* Specifies the Data Source of the AutoComplete.	
			* @default null
			* @type {data}
			* @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* //To set dataSource API value during initialization  
			* 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,value:"Austin-Healey"});				
			* &lt;/script&gt;
			* @memberof ejAutocomplete
			* @instance
			*/
            dataSource: null,
            /**		
             * Specifies the query to retrieve the data from online server.	
             * @default null
             * @type {object}
             * @example
			 * &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;			 
             * //To set query API value during initialization  
             * var dataManger = ej.DataManager({       url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"});
             * var queryString = ej.Query().from("Suppliers").select("ContactName");
             * 	$("#autocomplete").ejAutocomplete({ dataSource: dataManger, query: queryString, fields: { text: "ContactName" }});
            * &lt;/script&gt;
             * @memberof ejAutocomplete
             * @instance
             */
            query: null,
            /**		
             * Specifies mapping fields for the data items of the Autocomplete textbox.	
             * @default null
             * @type {object}
             * @example 
			 * &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;	
             * //To set fields API value during initialization         
             * 	$("#autocomplete").ejAutocomplete({ dataSource:window.countriesField,fields: { text: "name", key: "key" }});
             * &lt;/script&gt;
             * @memberof ejAutocomplete
             * @instance
             */
            fields: /** @lends ejAutocomplete# */{ 
			     /**		
                 * Defines the tag value or display text..
				 * @alias ejAutocomplete#fields->text
				 * @type String
                 */
				text: null, 
				  /**		
                 * Defines the key for the items to differentiate two items with same.
				 * @alias ejAutocomplete#fields->key
				 * @type String
                 */
				key: null,
                 /**		
                 * Used to categorize the items. It is used when the grouping is enabled..
				 * @alias ejAutocomplete#fields->category
				 * @type String
                 */				
				category: null, 
				 /**		
                 * Defines the html attributes such as id, class, styles for the item..
				 * @alias ejAutocomplete#fields->htmlAttributes
				 * @type Object
                 */
				htmlAttributes: null 
				},
            /**		
			* Specifies the template for Autocomplete.
			* @default null
			* @type {string}
			* @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* // To set template API value during initialization. 	
			* $("#autocomplete").ejAutocomplete({ dataSource: window.countries,template:"&lt;div class='flag ${sprite}'&gt; &lt;/div&gt;"+"&lt;div class='txt'&gt; ${text} &lt;/div&gt;"});
			* &lt;/script&gt;
			* @memberof ejAutocomplete
			* @instance
			*/
            template: null,
            /**		
			* Groups the search result based on the category value.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* // Initialize the Autocomplete with the grouping value specified.
			* $("#autocomplete").ejAutocomplete({ dataSource: window.vehicle,	allowGrouping: true});
			* &lt;/script&gt;
			* @memberof ejAutocomplete
			* @instance
			*/
            allowGrouping: false,
            /**		
            * Prevents the duplicate names presents in the search result.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * // Initialize the Autocomplete with the enableDistinct value specified.
            * $("#autocomplete").ejAutocomplete({dataSource: window.carList,enableDistinct: true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            enableDistinct: false,
            /**		
            * Sorts the lists value in ascending order if set to true.
            * @default true
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * // Initialize the Autocomplete with the allowSorting value specified.
            * $("#autocomplete").ejAutocomplete({dataSource: window.carList,allowSorting: false });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            allowSorting: true,
            /**		
            * Sort order specifies whether the suggestion list values has to display in ascending or descending order. 	See {@link SortOrder}
            * @default ej.SortOrder.Ascending
            * @type {enum}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the sortOrder value specified
            * 	$("#autocomplete").ejAutocomplete({dataSource: window.carList,sortOrder:"descending" });					
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            sortOrder: "ascending",
            /**		
            * Allows to select multiple values from the suggestion list. Multiple values can be selected through either of the following options,Delimiter-Multiple values separated using comma.Visual mode- Each values are displayed in separate box with close button. 	See {@link MultiSelectMode}
            * @default ej.MultiSelectMode.None
            * @type {enum}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the multiSelectMode value specified
            * 	$("#autocomplete").ejAutocomplete({dataSource: window.carList,multiSelectMode: ej.MultiSelectMode.Delimiter  });					 
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            multiSelectMode: "none",
            /**		
            * Sets the separator to allow multiple word searches. While typing the texts in the text box, if we enter the delimiter value, the texts after the delimiter are considered as a separate word or query. The delimiter string should have a single character and must be a symbol. Mostly the delimiter symbol is used as (comma ,) or (semi-colon ;) or any other special character.
            * @default ';'
            * @type {string}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the delimiterChar value specified
            * 	$("#autocomplete").ejAutocomplete({dataSource: window.carList,multiSelectMode: ej.MultiSelectMode.Delimiter,delimiterChar: ';' });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            delimiterChar: ',',
            /**		
            * Specifies new values can be added to the autocomplete input other than the values in the suggestion list.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the allowAddNew value specified.
            * $("#autocomplete").ejAutocomplete({dataSource: window.carList,allowAddNew: true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            allowAddNew: false,
            /**		
            * Allows new text to be added to in the dropdown list when there are no suggestions. This property can only be used in the Visual mode only.
            * @default "Add New"
            * @type {string}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the addNewText value specified
            * 	$("#autocomplete").ejAutocomplete({dataSource: window.carList,allowAddNew: true,addNewText: "Add New Car" });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            addNewText: "Add New",
            /**		
            * Autocomplete textbox to be displayed with rounded corner style.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the showRoundedCorner value specified.
            * $("#autocomplete").ejAutocomplete({dataSource: window.carList,showRoundedCorner: true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            showRoundedCorner: false,
           /**		
           * Indicates that the autocomplete textbox values can only be read.
           * @default false
           * @type {boolean}
           * @example 
		   * &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
           * // Initialize the Autocomplete with the readOnly value specified.
           * $("#autocomplete").ejAutocomplete({dataSource: window.carList,readOnly: true });
           * &lt;/script&gt;
           * @memberof ejAutocomplete
           * @instance
           */
            readOnly: false,
            /**		
            * Sets the root class for Autocomplete theme. This cssClass API helps to use custom skinning option for Autocomplete control. By defining the root class using this API, we need to include this root class in CSS.
            * @default ""
            * @type {string}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the cssClass value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,cssClass: 'gradient-lime'});
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            cssClass: "",
            /**		
            * Sets the watermarkText text. When the textbox is empty the watermarkText text is visible like a shaded text. 
            * @default Null
            * @type {string}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the watermarkText value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,watermarkText: 'Enter the car name' });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            watermarkText: null,
            /**		
            * Defines the default value to be display in the autocomplete textbox.
            * @default Null
            * @type {string}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete value property with the  value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,value:"Elantra" });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            value: "",
            /**		
            * Sets the search filter type. There are several filter types are available such as ‘startswith’, ‘contains’, ‘endswith’, ‘lessthan’, ‘lessthanorequal’, ‘greaterthan’, ‘greaterthanorequal’, ‘equal’, ‘notequal’. 	See {@link filterType}
            * @default ej.filterType.StartsWith
            * @type {enum}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete with the filterType value specified
            * 	$("#autocomplete").ejAutocomplete({dataSource: window.carList,filterType: 'contains'  });					 
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            filterType: "startswith",
            /**		
            * Sets the case sensitivity of the search operation..
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the caseSensitiveSearch value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,caseSensitiveSearch: true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            caseSensitiveSearch: false,
            /**		
            * Enables the loading icon to intimate the searching operation. The loading icon is visible when there is a time delay to perform the search.
            * @default true
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the showLoadingIcon value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,showLoadingIcon: false });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            showLoadingIcon: true,
            itemsCount: 0,
            minCharacter: 1,
            /**		
          * The delaySuggestionTimeout used to set the milliseconds time between a keypress and when the widget displays the suggestion popup.
          * @default 200
          * @type {number}
          * @example 
          * &lt;input type="text" id="autocomplete" /&gt; <br> 
            * &lt;script&gt;
          * // Initialize the Autocomplete with delaySuggestionTimeout in milliseconds value specified.
          * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,delaySuggestionTimeout : 500 });
          * &lt;/script&gt;
          * @memberof ejAutocomplete
          * @instance
          */
            delaySuggestionTimeout:200,
            /**		
           * Enables the showPopup button. When the Showpopup button clicks, it displays the full list from the dataSource.
           * @default false
           * @type {boolean}
           * @example 
		   * &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
           * // Initialize the Autocomplete with the showPopupButton  value specified.
           * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,showPopupButton : true });
           * &lt;/script&gt;
           * @memberof ejAutocomplete
           * @instance
           */
            showPopupButton: false,
            /**		
            * Enables the highlight search option. When the highlightSearch option set to true, the corresponding string entered in the textbox is highlighted in the suggestion list.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the highlightSearch  value specified.
            * $("#autocomplete").ejAutocomplete({dataSource: window.carList, highlightSearch : true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            highlightSearch: false,
            /**		
            * Automatically fills the first item from the suggestion list in an AutoComplete text box. The autoFill property is only applicable for “startswith” filterType type.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * // Initialize the Autocomplete with the enableAutoFill  value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,enableAutoFill : true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            enableAutoFill: false,
            /**		
            * Sets the Autocomplete textbox direction as right to left alignment.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the enableRTL    value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,enableRTL   : true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            enableRTL  : false,
            /**		
            * When this property sets to false, it disables the Autocomplete control.
            * @default true
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the enabled  value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,enabled : false });
           * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            enabled: true,
            /**		
            * Defines the height of the Autocomplete textbox.
            * @default Null
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete height property with the  value specified
            * 	$("#autocomplete").ejAutocomplete({dataSource: window.carList, height: 30 });
           * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            height: "",
            /**		
            * Defines the width of the Autocomplete textbox.
            * @default Null
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete width property with the width value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,width: 200 });
           * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            width: "",
            /**		
            * Sets the emptyResultText message text. When there is no suggestions are available at the time this 	message will be shown.
            * @default "No suggestions"
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * //Initialize the Autocomplete emptyResultText property with the  value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,emptyResultText: 'No Results Found' });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            emptyResultText: "No suggestions",
            /**		
            * Sets whether the noResults message will be shown or not.
            * @default true
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			 * &lt;script&gt;
            * // Initialize the Autocomplete with the showEmptyResultText value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList, showEmptyResultText : false });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            showEmptyResultText : true,
            /**		
            * Save current model value to browser cookies for state maintains. While refresh the Autocomplete control page retains the model value apply from browser cookies.  
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * // Initialize the Autocomplete with the enablePersistence   value specified.
            * $("#autocomplete").ejAutocomplete({ dataSource: window.carList,enablePersistence  : true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            enablePersistence : false,
            /**		
            * Defines the popupHeight of the suggestion box.
            * @default "152px"
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * //Initialize the Autocomplete popupHeight property with the  value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,popupHeight: '152px' });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            popupHeight: "152px",
            /**		
            * Defines the popupWidth of the suggestion box.
            * @default "auto"
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * //Initialize the Autocomplete popupWidth property with the  value specified
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,popupWidth: '152px' });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            popupWidth: "auto",
            /**		
            * This property enables to active the first element in the popup.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
            * //Initialize the Autocomplete autoFocus property 
            * 	$("#autocomplete").ejAutocomplete({ dataSource: window.carList,autoFocs: true });
            * &lt;/script&gt;
            * @memberof ejAutocomplete
            * @instance
            */
            autoFocus:false,
            /**     
			* Fires when focusIn successfully.
			* @event
			* @name ejAutocomplete#focusIn 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the autocomplete model
			* @param {string}  argument.type returns the name of the event
			* @param {string}  argument.value returns the value 
			* @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
			* //focusIn event for Autocomplete
            * $("#autocomplete").ejAutocomplete({ 
            *   	focusIn: function(args) {}
            * });      
			* &lt;/script&gt;			
			* @memberof ejAutocomplete
			* @instance
			*/
            focusIn: null,
            /**     
            * Fires when focusOut successfully.
            * @event
            * @name ejAutocomplete#focusOut 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
			* @param {string}  argument.value returns the value 
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
            * //focusOut event for Autocomplete
            * $("#autocomplete").ejAutocomplete({ 
            *   	focusOut: function(args) {}
            * });  
            * &lt;/script&gt;						
            * @memberof ejAutocomplete
            * @instance
            */
            focusOut: null,
            /**     
            * Fires when change successfully.
            * @event
            * @name ejAutocomplete#change 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
			* @param {string}  argument.value returns the selected value
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
            * //change event for Autocomplete
            * $("#autocomplete").ejAutocomplete({ 
            *   	change: function(args) {}
            * });  
            * &lt;/script&gt;			
            * @memberof ejAutocomplete
            * @instance
            */
            change: null,
            /**     
            * Fires when select successfully.
            * @event
            * @name ejAutocomplete#select 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the autocomplete model
            * @param {string}  argument.type returns the name of the event
			* @param {string}  argument.text returns the name of the event
			* @param {string}  argument.value returns the selected value
			* @param {string}  argument.type returns the selected text
			* @param {object}  argument.key returns the selected value key
            * @example 
			* &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
            * //select event for Autocomplete
            * $("#autocomplete").ejAutocomplete({ 
            *   	select: function(args) {}
            * }); 
            * &lt;/script&gt;			
            * @memberof ejAutocomplete
            * @instance
            */
            select: null,
			  /**     
          * Fires after Autocomplete control is created.
          * @event
          * @name ejAutocomplete#create 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the Autocomplete model
          * @param {string}  argument.type returns the name of the event		  
          * @example 
		  * &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
            * //create event for Autocomplete
            * $("#autocomplete").ejAutocomplete({ 
            *   	create: function(args) {}
            * }); 
            * &lt;/script&gt;			 
          * @memberof ejAutocomplete
          * @instance
          */
            create: null,
            /**     
         * Fires after Autocomplete control popup is opned.
         * @event
         * @name ejAutocomplete#open 	
         * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
         * @param {object}  argument.model returns the Autocomplete model
         * @param {string}  argument.type returns the name of the event		  
         * @example 
         * &lt;input type="text" id="autocomplete" /&gt; <br> 
           * &lt;script&gt;
           * $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
           * //open event for Autocomplete
           * $("#autocomplete").ejAutocomplete({ 
           *   	open: function(args) {}
           * }); 
           * &lt;/script&gt;			 
         * @memberof ejAutocomplete
         * @instance
         */
            open: null,
            /**     
         * Fires after Autocomplete control popup is closed.
         * @event
         * @name ejAutocomplete#close 	
         * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
         * @param {object}  argument.model returns the Autocomplete model
         * @param {string}  argument.type returns the name of the event		  
         * @example 
         * &lt;input type="text" id="autocomplete" /&gt; <br> 
           * &lt;script&gt;
           * $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
           * //close event for Autocomplete
           * $("#autocomplete").ejAutocomplete({ 
           *   	close: function(args) {}
           * }); 
           * &lt;/script&gt;			 
         * @memberof ejAutocomplete
         * @instance
         */
            close: null,
		  /**     
          * Fires when the Autocomplete is destroyed successfully
          * @event
          * @name ejAutocomplete#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the Autocomplete model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input type="text" id="autocomplete" /&gt; <br> 
			* &lt;script&gt;
			* $("#autocomplete").ejAutocomplete({ dataSource: window.carList});
            * //destroy event for Autocomplete
            * $("#autocomplete").ejAutocomplete({ 
            *   	destroy: function(args) {}
            * }); 
            * &lt;/script&gt;			 
          * @memberof ejAutocomplete
          * @instance
          */
            destroy: null
        },
        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            cssClass: "string",
            filterType: "enum",
            caseSensitiveSearch: "boolean",
            showLoadingIcon: "boolean",
            template: "string",
            allowGrouping: "boolean",
            enableDistinct: "boolean",
            allowSorting: "boolean",
            sortOrder: "enum",
            allowAddNew: "boolean",
            addNewText: "string",
            showRoundedCorner: "boolean",
            readOnly: "boolean",
            itemsCount: "number",
            minCharacter: "number",
            showPopupButton: "boolean",
            highlightSearch: "boolean",
            enableAutoFill: "boolean",
            enableRTL  : "boolean",
            multiSelectMode: "enum",
            delimiterChar: "string",
            emptyResultText: "string",
            showEmptyResultText : "boolean",
            enabled: "boolean",
            enablePersistence : "boolean",
            dataSource: "data",
            query: "data",
            fields: "data"
        },
        observables: ["value"],
        /**
       * To enable the autocomplete  
       * @return jQuery
       * @example 
       * &lt;input type="text" id="autocomplete" /&gt; <br> 
       * &lt;script&gt;
	   * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 	
       * // Create autocomplete
       * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
       * autocompleteObj.enable(); // enable the autocomplete
       * &lt;/script&gt;
       * @example 
       * &lt;input type="text" id="autocomplete" /&gt; <br> 
	   * &lt;script&gt;
	   * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 	
	   * // Create autocomplete
       * $('#autocomplete').ejAutocomplete("enable"); 	
	   * &lt;/script&gt;
       *@memberof ejAutocomplete
       * @instance
       */
        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.target.disabled = false;
                this.element.removeClass("e-disable").attr({ "aria-disabled": false });
                if (this.model.showPopupButton) this.dropdownbutton.removeClass("e-disable").attr({ "aria-disabled": false });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable").attr({ "aria-disabled": false });
            }
        },
        /**
      * To disable the autocomplete  
      * @return jQuery
      * @example 
      * &lt;input type="text" id="autocomplete" /&gt; <br> 
      * &lt;script&gt;
	  * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
      * // Create autocomplete
      * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
      * autocompleteObj.disable(); // disable the autocomplete
      * &lt;/script&gt;
      * @example 
      * &lt;input type="text" id="autocomplete" /&gt; <br> 
      * &lt;script&gt;
	  * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
      * // Create autocomplete
      * $('#autocomplete').ejAutocomplete("disable"); 	
      * &lt;/script&gt;
      *@memberof ejAutocomplete
      * @instance
      */
        disable: function () {
            if (this.model.enabled) {
                this._hideResult();
                this.element.attr("aria-expanded", false);
                this.model.enabled = false;
                this.target.disabled = true;
                this.element.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.showPopupButton) this.dropdownbutton.addClass("e-disable").attr({ "aria-disabled": true });
                if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable").attr({ "aria-disabled": true });
            }
        },
        /**
      * Clears the text in the Autocomplete textbox.
      * @return jQuery
      * @example 
      * &lt;input type="text" id="autocomplete" /&gt; <br> 
      * &lt;script&gt;
	  * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
      * // Create autocomplete
      * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
      * autocompleteObj.clearText(); // clear the autocomplete text
      * &lt;/script&gt;
      * @example 
      * &lt;input type="text" id="autocomplete" /&gt; <br> 
      * &lt;script&gt;
	  * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
      * // Create autocomplete
      * $('#autocomplete').ejAutocomplete("clearText"); 	
      * &lt;/script&gt;
      *@memberof ejAutocomplete
      * @instance
      */
        clearText: function () {
            if (this.model.enabled) {
                if (this.model.multiSelectMode == "visualmode")
                    this._deleteBox(this._ulBox.children("li"));
                this.element.val("");
                this._valueChange();
                if (this._isFocused) this.element.blur();
                else this._targetBlur();
            }
        },
        /**
      * Returns the current value selected in the Autocomplete textbox.
      * @return jQuery
      * @example 
      * &lt;input type="text" id="autocomplete" /&gt; <br> 
      * &lt;script&gt;
	  * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
      * // Create autocomplete
      * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
      * autocompleteObj.getValue(); // getValue of the autocomplete text
      * &lt;/script&gt;
      * @example 
      * &lt;input type="text" id="autocomplete" /&gt; <br> 
      * &lt;script&gt;
	  * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
      * // Create autocomplete
      * $('#autocomplete').ejAutocomplete("getValue"); 	
      * &lt;/script&gt;
      *@memberof ejAutocomplete
      * @instance
      */
        getValue: function () {
            if (this.model.multiSelectMode == "visualmode")
                return this._hiddenInput.val();
            if (this.element.hasClass("e-watermark"))
                return "";
            return this.target.value;
        },
        /**
     * Returns the values selected in the Autocomplete textbox.
     * @return jQuery
     * @example 
     * &lt;input type="text" id="autocomplete" /&gt; <br> 
     * &lt;script&gt;
	 * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
     * // Create autocomplete
     * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
     * autocompleteObj.getSelectedItems(); // getSelectedItems the autocomplete text
     * &lt;/script&gt;
     * @example 
     * &lt;input type="text" id="autocomplete" /&gt; <br> 
     * &lt;script&gt;
	 * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"}); 
     * // Create autocomplete
     * $('#autocomplete').ejAutocomplete("getSelectedItems"); 	
     * &lt;/script&gt;
     *@memberof ejAutocomplete
     * @instance
     */
        getSelectedItems: function () {
            return this._selectedItems;
        },
        _setValue: function (value) {
            if (this.element.hasClass("e-watermark"))
                this.element.removeClass("e-watermark")
            if (typeof value === "object" || (typeof value === "number" && isNaN(value))) value = "";
            value = $.trim(value);
            this.element.val("");
            if (value) {
                if (this.model.multiSelectMode == "visualmode") {
                    this._selectedItems = [];
                    this._deleteBox(this._ulBox.children("li"));
                    this._hiddenInput.val(value);
                    var values = value.split(this.model.delimiterChar);

                    if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                        this._createBoxForObjectType(values);
                    }
                    else {
                        this.suggestionListItems = this.model.dataSource;
                        if (typeof this.suggestionListItems[0] != "object") {
                            for (var i = 0; i < values.length; i++) {
                                if (values[i]) {
                                    this._ulBox.append(this._createBox(values[i]));
                                    this._selectedItems.push(values[i]);
                                }
                            }
                        }
                        else this._createBoxForObjectType(values);
                    }
                }
                else {
                    this.element.val(value);
                    this._hiddenInput.val(value);
                    this._updateSelectedItemArray();
                }
            }
            else
                this._hiddenInput.val("");
            this.model.value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
            this._preVal = this.element.val();
            !this._isWatermark && this._setWatermarkTxt();
            return value;
        },
        _createBoxForObjectType: function (values) {
            var dataQuery, promise, mapper, strData, proxy = this;
            mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
            mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
            for (var data = 0; data < values.length; data++) {
                var _val = $.trim(values[data]);
                if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
                    dataQuery = this._getQuery().where(mapFld._text, "equal", _val, false);
                    promise = (this.model.dataSource).executeQuery(dataQuery);
                    promise.done(function (e) {
                        var res = e.result;
                        strData = res instanceof Array && res.length ? res[0] : _val;
                        proxy._selectedItems.push(strData);
                    }).fail(function (e) {
                        proxy._selectedItems.push(_val);
                    });
                }
                else {
                    dataQuery = ej.Query().where(mapFld._text, "equal", _val, false);
                    promise = ej.DataManager(this.suggestionListItems).executeLocal(dataQuery);
                    strData = promise instanceof Array && promise.length ? promise[0] : _val;
                    this._selectedItems.push(strData);
                }
                this._ulBox.append(this._createBox(_val));
            }
        },

        /**
  * Set the values to the Autocomplete textbox by input key value.
  * @return jQuery
  * @example 
  * &lt;input type="text" id="autocomplete" /&gt; <br> 
  * &lt;script&gt;
   * $('#autocomplete').ejAutocomplete({dataSource: window.vehicle});   
  * // Create autocomplete
  * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
  * autocompleteObj.selectValueByKey("F"); // set key value corresponding text to the autocomplete textbox
  * &lt;/script&gt;
  * @example 
  * &lt;input type="text" id="autocomplete" /&gt; <br> 
  * &lt;script&gt;
  * // Create autocomplete
  * $('#autocomplete').ejAutocomplete({dataSource: window.vehicle});
  * $('#autocomplete').ejAutocomplete("selectValueByKey","F");  
  * &lt;/script&gt;
  *@memberof ejAutocomplete
  * @instance
  */
        selectValueByKey: function (key) {
            this._setOperation(key, "key");
        },
        /**
    * Set the values to the Autocomplete textbox by input text value.
    * @return jQuery
    * @example 
    * &lt;input type="text" id="autocomplete" /&gt; <br> 
    * &lt;script&gt;
	 * $('#autocomplete').ejAutocomplete({dataSource: window.vehicle}); 	
    * // Create autocomplete
    * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
    * autocompleteObj.selectValueByText("BMW 7"); // set text value to the autocomplete textbox
    * &lt;/script&gt;
    * @example 
    * &lt;input type="text" id="autocomplete" /&gt; <br> 
    * &lt;script&gt;
    * // Create autocomplete
    * $('#autocomplete').ejAutocomplete({dataSource: window.vehicle}); 
    * $('#autocomplete').ejAutocomplete("selectValueByText","BMW 7"); 	
    * &lt;/script&gt;
    *@memberof ejAutocomplete
    * @instance
    */
        selectValueByText: function (text) {
            this._setOperation(text, "text");
        },

        //Based on source value and mapper value to generate query to find the required result set
        _setOperation: function (source, value) {
            if (!this.model.enabled) return false;
            var bindTo = "", promise, dataQuery, proxy = this, list = this.model.dataSource;
            if (ej.isNullOrUndefined(list)) return false;
            if (typeof list[0] == "object" || list instanceof ej.DataManager) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper[value]) ? mapper[value] : value;
            } else if (value == "key")
                return false;
            if (ej.DataManager && list instanceof ej.DataManager) {
                dataQuery = this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = (list).executeQuery(dataQuery);
                promise.done(function (e) {
                    proxy._setText(e.result[0]);
                });
            }
            else {
                if ((!list || !list.length || list.length < 1)) return false;
                dataQuery = ej.Query().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
                promise = ej.DataManager(list).executeLocal(dataQuery);
                this._setText(promise[0]);
            }
        },
        //Obtained data set check with its type to set the value to textbox 
        _setText: function (data) {
            if (!data) return false;
            var currentValue, mapper = this.model.fields;
            if ((typeof this.model.dataSource[0] == "object") || (typeof data == "object"))
                currentValue = (mapper && mapper["text"]) ? data[mapper["text"]] : data["text"];
            else currentValue = data;
            if (currentValue) {
                if (this.model.multiSelectMode == "visualmode" && this._removeDuplicates(data)) return false;
                this._valueToTextBox(currentValue, data, true);
                this.model.value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
            }
        },
        /*To set value to textbox in visualmode or delimiter mode 
        currentValue- specify the value to be displayed
        date- specify the current value object
        flag-set true ,when value set by using public methods,false when select value from popuplist
        */
        _valueToTextBox: function (currentValue, data, flag) {
            var delimiterIndex;
            if (this.model.multiSelectMode == "visualmode") {
                if (this._addNewTemplate) currentValue = currentValue.substr(0, currentValue.length - this._addNewTemplate.length);
                delimiterIndex = this._hiddenInput.val() ? this.model.delimiterChar : "";
                this._hiddenInput.val(this._hiddenInput.val() + delimiterIndex + currentValue);
                this.element.val("");
                this._ulBox.append(this._createBox(currentValue));
            }
            else if (this.model.multiSelectMode == "delimiter") {
                delimiterIndex = (this.target.value).lastIndexOf(this.model.delimiterChar)
                if (this._typed || this.element.val() == "" || flag || !this.model.showPopupButton) {
                    if (flag)
                        this.element.val(this.element.val() == "" ? (currentValue) : (this.element.val() + this.model.delimiterChar + currentValue));
                    else
                        this.element.val(this._queryString.substr(0, delimiterIndex + 1) + currentValue + this.model.delimiterChar + " ");
                }
                else {
                            if (this._checkDeli())
                                this.element.val(this._queryString.substr(0, delimiterIndex) + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                            else
                                this.element.val(this.element.val() + this.model.delimiterChar + currentValue + this.model.delimiterChar);
                        }
                this._typed = false;
            }
            else this.element.val(currentValue);
            this._selectedItems.push(data);
            this._moveCaretToEnd(this.element[0]);
        },
        // while we set the value using public methods,it prevents the duplicate entry in visual mode
        _removeDuplicates: function (currentValue) {
            if (this._selectedItems.length == 0) return false;
            if (this._selectedItems.indexOf(currentValue) != -1) return true;
        },
        /**
    * search values in the Autocomplete textbox.
    * @return jQuery
    * @example 
    * &lt;input type="text" id="autocomplete" /&gt; <br> 
    * &lt;script&gt;
	* $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"});
    * // Create autocomplete
    * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
    * autocompleteObj.search(); // search the autocomplete text
    * &lt;/script&gt;
    * @example 
    * &lt;input type="text" id="autocomplete" /&gt; <br> 
    * &lt;script&gt;
	* $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"});
    * // Create autocomplete
    * $('#autocomplete').ejAutocomplete("search"); 	
    * &lt;/script&gt;
    *@memberof ejAutocomplete
    * @instance
    */
        search: function () {
            if (this.model.enabled && this._checkDelimiter()) {
                this._hideResult();
                this.element.attr("aria-expanded", false);
                this._autoFill = false;
                this._queryString = $.trim(this._queryString);
                if (this._queryString.length > 0) this._OnTextEnter();
            }
        },

        hide: function () {
            this._hideResult();
            this.element.attr("aria-expanded", false);
        },

        _changeWatermark: function (text) {
            if (this._isWatermark) this.element.attr("placeholder", text);
            else if (this.element.hasClass("e-watermark")) this.element.val(text);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.suggestionList.removeClass(this.model.cssClass).addClass(skin);
        },
        _setDropdown: function (boolean) {
            this.model.showPopupButton = boolean;
            if (boolean) this._renderDropdown();
            else this._destroyDropdown();
        },
        _changeHeight: function (height) {
            this.wrapper.height(height);
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },

        // constructor function
        _init: function () {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
        },
        /**
        * To configure the properties at runtime using SetModel		
        * @private
        */
        _setModel: function (options) {
            if (!this.model.enabled && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": this.model.dataSource = null; break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "delaySuggestionTimeout": this.model.delaySuggestionTimeout= parseInt(options[option]); break;
                    case "value":
                        options[option] = this._setValue(options[option]);
                        this._valueChange();
                        break;
                    case "showPopupButton": this._setDropdown(options[option]); break;
                    case "enableRTL": this._RightToLeft(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "readOnly": this.model.readOnly = options[option]; this._checkReadOnly(); break;
                    case "delimiterChar": options[option] = this._validateDelimiter(options[option]); break;
                    case "multiSelectMode":
                        this.model.multiSelectMode = options[option];
                        if (options[option] == "visualmode") this._renderBoxModel();
                        else if (this.element.hasClass("e-visual-mode")) this._destroyBoxModel();
                        this._setValue(this.model.value);
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "itemsCount ": if (options[option] <= 0 || isNaN(options[option])) options[option] = 0; break;
                    case "popupHeight": this.suggestionList.css({ "max-height": options[option] }); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                }
            }
        },
        /**
 * destroy in the Autocomplete textbox.
 * @alias destroy
 * @return jQuery
 * @example 
 * &lt;input type="text" id="autocomplete" /&gt; <br> 
 * &lt;script&gt;
 * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"});
 * // Create autocomplete
 * var autocompleteObj  = $("#autocomplete").data("ejAutocomplete");
 * autocompleteObj.destroy(); // destroy the autocomplete 
 * &lt;/script&gt;
 * @example 
 * &lt;input type="text" id="autocomplete" /&gt; <br> 
 * &lt;script&gt;
 * $('#autocomplete').ejAutocomplete({dataSource: window.carList,value:"Aston Martin"});
 * // Create autocomplete
 * $('#autocomplete').ejAutocomplete("destroy"); 	
 * &lt;/script&gt;
 *@memberof ejAutocomplete
 * @instance
 */
        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-input e-watermark").val("");
            if (this._isWatermark) this.element.removeAttr("placeholder");
            this.suggestionList.remove();
        },

        _initialize: function () {
            this.element.attr("role", "combobox").attr("aria-label", "Autocomplete textbox").attr("aria-expanded", false).attr("tabindex", 0).attr("aria-autocomplete", "list").attr("value", this.model.value);
            this.target = this.element[0];
            this.dropdownbutton = null;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            this.showSuggestionBox = false;
            this.noresult = true;
            this._queryString = null;
            this.suggLen = 0;
            this._selectedItems = [];

            this._activeItem = 0;
            this.ctrlKeyPressed = false;
            this._isFocused = false;
            this._isOpened = false;
            this._typed = false;
            this._isWatermark = this._checkWatermarkSupport();
        },

        _render: function () {
            this._renderWrapper();
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
            this._setWatermark();
            this._renderSuggestionList();
            this._RightToLeft(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr("autocomplete", "off");
            this.wrapper = ej.buildTag("span.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
            this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
        },

        _renderDropdown: function () {
            if (this.model.showPopupButton) {
                var span = ej.buildTag("span.e-icon e-search").attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                this.dropdownbutton = ej.buildTag("span.e-select#" + this.target.id + "_dropdown").attr((this._isIE8) ? { 'unselectable': 'on' } : {}).append(span);
                this.container.append(this.dropdownbutton).addClass("e-padding");
                this.dropdownbutton.bind("mousedown", $.proxy(this._OnDropdownClick, this));
            }
        },

        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },

        _renderBoxModel: function () {
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            this.element.val("").removeAttr("name").width(1).addClass("e-visual-mode");
            this.container.prepend(this._hiddenInput, this._ulBox);
            this.wrapper.height("auto");

            this._on(this.container, "mousedown", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if (!$target.is(this.element)) {
                    e.preventDefault();
                    if (!this._isFocused) this.element.focus();
                    if ($target.hasClass("e-options")) {
                        if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                        if ($target.hasClass("e-active")) $target.removeClass("e-active");
                        else $target.addClass("e-active");
                    }
                    else this._moveCaretToEnd(this.element[0]);
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes") || $target.hasClass("e-input"))) this._removeActive();
            });
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.attr({ name: this._hiddenInput.attr("name") }).removeAttr("style").removeClass("e-visual-mode");
            this.wrapper.height(this.model.height);
            this._hiddenInput.remove();
            this._ulBox.remove();
            this._off(this.container, "mousedown");
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children();
            var item = items.last(), flag = item.hasClass("e-active");
            this._removeActive();
            flag ? this._deleteBox(item) : item.addClass("e-active");
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {
                var boxes = this._ulBox.children();
                var index = boxes.index(items[i]);
                this._selectedItems.splice(index, 1);

                var deli = this.model.delimiterChar;
                var values = this._hiddenInput.val().split(deli);
                values.splice(index, 1);
                this._hiddenInput.val(values.join(deli));
                $(items[i]).remove();
            }
            if (this.showSuggestionBox) this._refreshPopup();
            this._valueChange();
        },
        _removeActive: function () {
            this._ulBox.children("li.e-active").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this.element.val()), wid, minWidth;
            this.container.append(tempSpan);
            minWidth = 30;  //  some additional width for textbox in visualmode
            wid = tempSpan.width() + minWidth;
            if (this.element.width() != wid)
                this.element.width(wid);
            tempSpan.remove();
        },

        _checkProperties: function () {
            this._checkReadOnly();
            this.model.delimiterChar = this._validateDelimiter(this.model.delimiterChar);
            if (!this.model.enabled) {
                this.model.enabled = true;
                this._disabled(true);
            }
            else if(this.model.enabled && $(this.element).hasClass("e-disable")) {
                this.model.enabled = false;
                this._disabled(false);
            }
            if (this.model.multiSelectMode == "visualmode") this._renderBoxModel();
            this._checkNameAttr();
            this.model.value = this._setValue(this.model.value);
        },

        _checkNameAttr: function () {
            if (this.element.attr("name"))
                this._hiddenInput.attr("name", this.element.attr("name"));
            else {
                this._hiddenInput.attr("name", this.element[0].id);
				this.element.attr("name", this.element[0].id);
			}
        },

        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },

        _destroyDropdown: function () {
            this.dropdownbutton.unbind("mousedown", $.proxy(this._OnDropdownClick, this));
            this.dropdownbutton.remove();
            this.dropdownbutton = null;
            this.container.removeClass("e-padding");
        },

        _validateDelimiter: function (deli) {
            if (deli.length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },

        _checkWatermarkSupport: function () {
            return 'placeholder' in document.createElement('input');
        },
        _setWatermark: function () {
            if (this._isWatermark) this.element.attr("placeholder", this.model.watermarkText);
        },
        _setWatermarkTxt: function () {
            if (this.model.watermarkText != null && $.trim(this.element.val()) == "") {
                this.element.addClass("e-watermark");
                this.element.val(this.model.watermarkText);
            }
        },

        _renderSuggestionList: function () {
			var oldWrapper = $("#" + this.element.context.id + "_suggestion").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.suggestionList = ej.buildTag("div.e-atc-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_suggestion", "", { "display": "none" }).attr("role", "listbox");
            this.element.attr("aria-owns", this.target.id + "_suggestion");
            this.popup = this.suggestionList;
            var scrollerDiv = ej.buildTag("div");
            this.ul = ej.buildTag("ul.e-ul").attr("role", "listbox");
            scrollerDiv.append(this.ul);
            this.suggestionList.append(scrollerDiv);
            $('body').append(this.suggestionList);
            this._setListWidth();
            this._setListHeight();
            this.suggestionList.ejScroller({ height: this.suggestionList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.suggestionList.ejScroller("instance");
        },

        _checkEmptyList: function () {
            if (this.model.multiSelectMode == "visualmode") this._removeRepeated();
            if (this.suggestionListItems.length == 0) {
                this.suggestionListItems.push(this.model.emptyResultText);
                this.noresult = true;
            }
            else this.noresult = false;
        },
        _showSuggestionList: function () {
            this._checkEmptyList();
            this._addNewTemplate = null;
            if (this.noresult && this.model.multiSelectMode == "visualmode" && this.model.allowAddNew && this.element.val() != "") {
                this.noresult = false;
                this.suggestionListItems.pop();
                this._addNewTemplate = "   (" + this.model.addNewText + ")";
                this.suggestionListItems.push(this.element.val() + this._addNewTemplate);
                this._checkEmptyList();
            }

            if (!this.noresult || this.model.showEmptyResultText )
                this._generateSuggestionList();
        },
        /**
* generate suggestion list using the given object
* @private
*/
        _generateSuggestionList: function () {
            var list = this.suggestionListItems, i, suggList = [];
            this.ul.empty();

            if (typeof list[0] != "object") {
			
                if (this.model.enableDistinct) list = ej.dataUtil.distinct(list, "", true);
                for (i = 0; i < list.length; i++) {
                    var _txt = (this.model.highlightSearch && !this.noresult) ? this._highlightSuggestion(list[i]) : list[i];
                    this.ul.append(ej.buildTag("li", _txt).attr("role", "option").attr((this._isIE8) ? { 'unselectable': 'on' } : {}));
                }
                this._currList = list;
                this._mapper = { txt: null, key: null };
            }
            else {
                var mapper = this.model.fields, mapFld = { _key: null, _text: null, _attr: null };
                mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
                mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                mapFld._attr = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this._mapper = { txt: mapFld._text, key: mapFld._key }, this._currList = [];
                if (this.model.enableDistinct) list = ej.dataUtil.distinct(list, mapFld._text, true);

                if (this.model.allowGrouping) {
                    var mapCateg = (mapper && mapper.category) ? mapper["category"] : "category", groupedList, _query;
                    _query = ej.Query().group(mapCateg);
                    this._addSortingQuery(_query, "key");
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._swapUnCategorized(groupedList);
                    for (i = 0; i < groupedList.length; i++) {
                        if (groupedList[i].key)
                            this.ul.append(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option").attr((this._isIE8) ? { 'unselectable': 'on' } : {}));
                        this._generateLi(groupedList[i].items, mapFld);
                    }
                }
                else this._generateLi(list, mapFld);
            }
            if (this._getLiTags().length > 0) this._showResult();
        },
        /**
* swaping uncategorized values in the sorting order
* @private
*/
        _swapUnCategorized: function (list) {
            $(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },
        /**
* generate li tagd with the given data source
* @private
*/
        _generateLi: function (list, mapFld) {
            for (var j = 0; j < list.length; j++) {
                var _text = this._getField(list[j], mapFld._text);
                if (!ej.isNullOrUndefined(_text)) {
                    if (this.model.highlightSearch) _text = this._highlightSuggestion(_text);
                    if (this.model.template) _text = this._getTemplatedString(list[j], mapFld._text, _text);

                    var li = $(document.createElement("li")).append(_text);
                    this._setAttributes(this._getField(list[j], mapFld._attr), li);
                    this.ul.append(li);
                    this._currList = $.merge(this._currList, [list[j]]);
                }
            }
        },
        /**
* generate li tagd for the box model
* @private
*/
        _getLiTags: function () {
            return this.ul.children("li:not('.e-category')");
        },
        /**
* refresh popup using templated string
* @private
*/
        _getTemplatedString: function (list, searchLabl, searchTxt) {
            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                var replace = this._getField(list, field);
                // if highlightSearch is enabled, it replaces the highlighted search text
                if (searchLabl == field) replace = searchTxt;
                if (!replace) replace = "";
                str = str.replace(content, replace);
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },
        /**
* get the field name for the given object
* @private
*/
        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },
        /**
* Set the key attribute for the input element
* @private
*/
        _setAttributes: function (data, element) {
            if (data) {
                for (var key in data)
                    element.attr(key, data[key]);
            }
        },
        /**
* Set width for the popuplist
* @private
*/
        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width && width != "auto") this.suggestionList.css({ "width": width });
            else this.suggestionList.css({ "width": this.wrapper.width() });
        },
        /**
* Set height for the popuplist
* @private
*/
        _setListHeight: function () {
            this.suggestionList.css({ "max-height": this.model.popupHeight });
        },
        /**
* Refresh the popup with the given width
* @private
*/
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto" && this.wrapper.outerWidth() != this.suggestionList.outerWidth()) {
                this.suggestionList.css({ "width": this.wrapper.width() });
                this._refreshScroller();
            }
            this._setListPosition();
        },
        /**
* showing the popup with the result
* @private
*/
        _showResult: function () {
            this._refreshPopup();
            this._refreshScroller();
            if (this._isOpened) 
                $(document).bind("mousedown", $.proxy(this._OnDocumentClick, this));
            else {
                this.suggestionList.css("display", "none");
                var tis = this;
                clearTimeout(this._typing);
                this._typing = setTimeout(function () {
                    tis.suggestionList.slideDown(200, "easeOutQuad", function () {
                        $(document).bind("mousedown", $.proxy(tis._OnDocumentClick, tis));
                    });
                },this.model.delaySuggestionTimeout);
                this._trigger("open");
            }

            this._isOpened = true;
            this.showSuggestionBox = true;
            var _suggestionListItems = this._getLiTags();
            this._listSize = _suggestionListItems.size();

            _suggestionListItems.bind("mouseenter", $.proxy(this._OnMouseEnter, this));
            _suggestionListItems.bind("mouseleave", $.proxy(this._OnMouseLeave, this));
            _suggestionListItems.bind("click", $.proxy(this._OnMouseClick, this));
            $(window).bind("resize", $.proxy(this._OnWindowResize, this));
        },
        /**
* Refresh the scroller popup functions
* @private
*/
        _hideResult: function () {
            if (this.showSuggestionBox) {
                this.showSuggestionBox = false;
                this._activeItem = 0;
                if (this._isOpened) this.suggestionList.css("display", "none");
                else this.suggestionList.slideUp(100, "easeOutQuad");
                $(document).unbind("mousedown", $.proxy(this._OnDocumentClick, this));
                $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
            }
        },
        /**
* Refresh the scroller popup functions
* @private
*/
        _refreshScroller: function () {
            this.suggestionList.css("height", "auto");
            this.suggestionList.find(".e-content, .e-vscroll").removeAttr("style");
            this.suggestionList.find(".e-vscroll div").removeAttr("style");
			this.suggestionList.find(".e-content, .e-vhandle").removeAttr("style");
            this.suggestionList.find(".e-vhandle div").removeAttr("style");

            this.suggestionList.css("display", "block");

             if (this.suggestionList.height() > (parseInt(this.model.popupHeight.replace("px", "")) - 4)) {
                this.scrollerObj.model.height = this.suggestionList.height();
                this.scrollerObj.refresh();
                this.scrollerObj.option("scrollTop", 0);
                this.suggestionList.addClass("e-scroller")
            }
            else
                this.suggestionList.removeClass("e-scroller")
            this.suggestionList.css("height", "auto");
             if (this._isIE8)
                 this.suggestionList.find('.e-vscroll div, .e-hscroll div').attr("unselectable", "on");
        },
        /**
* set list position while opening the popup
* @private
*/
        _setListPosition: function () {
            var elementObj = this.wrapper;
            var pos = this._getOffset(elementObj),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial();
            if (this.model.enableRTL  ) left -= this.suggestionList.outerWidth() - elementObj.outerWidth();

            this.suggestionList.css({
                "left": left + "px",
                "top": pos.top + totalHeight - border + 3 + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },

        /**
* Z-index calculation for body element
* @private
*/
        _getZindexPartial: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },
        /**
* define target focus for the value.
* @private
*/
        _targetFocus: function () {
            var minWidth = 30;  //  minimum width for textbox in visualmode
            if (this.model.multiSelectMode == "visualmode") this.element.width(minWidth);
            if (this.element.hasClass("e-watermark")) {
                this.element.removeClass("e-watermark");
                this.element.val("");
            }
            this.wrapper.addClass("e-focus");
            this._isFocused = true;
            /* Raise focusIn Event*/
           
            this._trigger("focusIn", { value:this.model.value });
        },
        /**
* define visual mode and other modes with value
* @private
*/
        _targetBlur: function () {
            this._isFocused = false;
            this.wrapper.removeClass("e-focus");
            !this._isWatermark && this._setWatermarkTxt();
            this._removeSelection();

            if (this.model.multiSelectMode == "visualmode") {
                this._removeActive();
                this.element.val("").width(1);
                this._preVal = "";
            }
            else {
                if (this.model.multiSelectMode == "delimiter") {
                    if (this._checkDeli())
                        this._valueChange();
                }
                this._updateSelectedItemArray();
            }

            /* Raise focusOut Event*/
            this.model.multiSelectMode != "visualmode" && this._hiddenInput.val(this.element.val());
            this._trigger("focusOut", { value: this.model.value });
        },
        /**
* remove selection from the autocomplete textbox.
* @private
*/
        _checkDeli: function () {
            var val, deli, last;
            val = $.trim(this.element.val());
            deli = this.model.delimiterChar;
            last = val.substr(val.length - deli.length, val.length);
            if (last == deli) {
                this.element.val(val.substr(0, val.length - deli.length));
                return true;
            }
            else
                return false;
        },
        _removeSelection: function () {
            if (this.model.enableAutoFill) {
                this.element.attr("aria-autocomplete", "both");
                var selection = this._getCaretSelection();
                if (selection.end - selection.start != 0 && selection.end - selection.start != this.element.val().length) 
                    this.target.value = this.target.value.substr(0, selection.start);
            }
        },
        /**
* remove list hover after hover item is changed.
* @private
*/
        _removeListHover: function () {
            this._getLiTags().removeClass("e-hover");
        },
        /**
* add hover class for the hovered  list item.
* @private
*/
        _addListHover: function () {
            var activeItem = $(this._getLiTags()[this._activeItem - 1]);
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
        },
        /**
* Caluculate scroll top for  the scroller.
* @private
*/
        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), li = this.ul.find("li"), liH = 0, index, top, i;
            index = this.ul.find("li.e-hover").index();
            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(); }
            top = liH - ((this.suggestionList.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },
        /**
* Retrives the text from the active item.
* @private
*/
        _getActiveText: function () {
            if (this._mapper.txt) return this._getField(this._currList[this._activeItem - 1], this._mapper.txt);
            else return this._currList[this._activeItem - 1];
        },
        /**
* Retrives the unique key of the curent selected item.
* @private
*/
        _getUniqueKey: function () {
            var key = null;
            if (this._mapper.key) key = this._getField(this._currList[this._activeItem - 1], this._mapper.key);
            ej.isNullOrUndefined(key) && (key = null);
            return key;
        },
        /**
* set the textbox value for selecting the function
* @private
*/
        _setTextBoxValue: function () {
            if (this._activeItem && !this.noresult) {
                var currentValue, selection, val, text;
                currentValue = this._getActiveText();
                selection = this._getCaretSelection();
                this.suggLen = selection.start;
                val = this.target.value.substr(0, this.suggLen);

                if (val && val.toLowerCase() == currentValue.substr(0, this.suggLen).toLowerCase()) {
                    if (this.model.multiSelectMode == "delimiter") {
                        var _deliIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
                        var query = $.trim(val.substr(_deliIndex + 1, this.suggLen));
                        text = val + currentValue.substr(query.length, currentValue.length);
                    }
                    else {
                        text = val + currentValue.substr(val.length, currentValue.length);
                    }
                    this.element.val(text);
                    this._autofilSelection();
                    if (this.model.multiSelectMode == "visualmode")
                        this._adjustWidth();
                    if (this.model.autoFocus && !this.noresult) this._addListHover();
                }
                else this._removeSelection();
            }
        },
        /**
* entering textbox value with the value selected.
* @private
*/
        _enterTextBoxValue: function () {
			this.element.removeClass("e-watermark");
            if (this._activeItem && !this.noresult && !this.model.readOnly) {
                var currentValue = this._getActiveText(), currItem = this._currList[this._activeItem - 1];
                this._valueToTextBox(currentValue, currItem, false);
                var _value = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
               
                    this._trigger("select", { value: _value, text: currentValue, key: this._getUniqueKey() });
                this._valueChange();
            }
            this._trigger("close");
        },
        /**
* creating box functionality for the box model.
* @private
*/
        _createBox: function (value) {
            var span = ej.buildTag("span.e-icon e-close");
            var li = ej.buildTag("li.e-options", value).append(span);

            this._on(span, "click", function (e) {
                if (!this.model.enabled) return false;
                this._deleteBox($(e.target).parent());
            });
            return li;
        },
        /**
* add loading class while data in search.
* @private
*/
        _addLoadingClass: function () {
            if (this.model.showLoadingIcon)
                this.element.addClass("e-load");
        },
        /**
* Remove loading class after data is loaded.
* @private
*/
        _removeLoadingClass: function () {
            this.element.removeClass("e-load");
        },
        /**
* define functionalities for the highlighted search.
* @private
*/

        _highlightSuggestion: function (suggestion) {
            if ($.trim(this._queryString) != "") {
                var caseSensitive, tempQueryString, RegEx, mch, split, query, str;
                caseSensitive = this.model.caseSensitiveSearch ? "g" : "gi";
                query = $.trim(this._queryString);
                tempQueryString = this.model.filterType == "startswith" ? "^" + query : query;
                RegEx = new RegExp(tempQueryString, caseSensitive);

                if (RegEx.test(suggestion)) {
                    mch = suggestion.match(RegEx);
                    //for IE-8 the regEx doesnt returns the empty string.So manually we replace string to return empty string.
                    str = suggestion.replace(RegEx, "~^");
                    split = str.split("~^");
                    suggestion = "";
                    $(split).each(function (i, val) {
                        if (mch[i])
                            suggestion += val + "<span class='e-hilight-txt'>" + mch[i] + "</span>";
                        else
                            suggestion += val;
                    });
                }
            }
            return suggestion;
        },
        /**
* Applying rtl option for the autocomplete widget.
* @private
*/
        _RightToLeft: function (value) {
            if (value) {
                this.wrapper.addClass("e-rtl");
                this.suggestionList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.suggestionList.removeClass("e-rtl");
            }
        },
        /**
* Set rounded corner for the autocomplete widget.
* @private
*/
        _setRoundedCorner: function (value) {
            if (value) {
                this.container.addClass("e-corner-all");
                this.suggestionList.addClass("e-corner-all");
            }
            else {
                this.container.removeClass("e-corner-all");
                this.suggestionList.removeClass("e-corner-all");
            }
        },
        /**
*Checking readonly functionality of autocomplete widget.
* @private
*/
        _checkReadOnly: function () {
            if (this.model.readOnly) {
                this.element.attr({ "readonly": "readonly", "aria-readonly": true });
                this._off(this.element, "keydown", this._OnKeyDown);
                this._off(this.element, "keyup", this._OnKeyUp);
            }
            else {
                this.element.removeAttr("readonly").removeAttr("aria-readonly");
                this._on(this.element, "keydown", this._OnKeyDown);
                this._on(this.element, "keyup", this._OnKeyUp);
            }
        },
        /**
* Defining key down functionality for autocomplete widget.
* @private
*/
        _OnKeyDown: function (e) {
            if (this.model.filterType != "startswith")
                this.model.enableAutoFill = false;

            switch (e.keyCode) {
                case 37:    // Left arrow
                case 35:    // End Key
                case 36:    // Home Key
                    this._removeSelection();
                case 39:    //Right arrow
                    break;
                case 38:    //Up arrow
                    e.preventDefault();
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem > 1)
                            this._activeItem -= 1;
                        else
                            this._activeItem = this._listSize;
                        this._addListHover();
                        if (this.model.enableAutoFill) {
                            this.element.attr("aria-autocomplete", "both");
                            this._queryString = this.target.value;
                            this._setTextBoxValue();
                        }
                    }
                    break;
                case 40:    //Down arrow
                    e.preventDefault();
                    if (this.showSuggestionBox && this.suggestionList) {
                        this._removeListHover();
                        if (this._activeItem < this._listSize)
                            this._activeItem += 1;
                        else
                            this._activeItem = 1;
                        this._addListHover();
                        if (this.model.enableAutoFill) {
                            this.element.attr("aria-autocomplete", "both");
                            this._queryString = this.target.value;
                            this._setTextBoxValue();
                        }
                    }
                    break;
                case 8:    // Backspace key
                    if ($.trim(this.element.val()) == "") this._isOpened = false;
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteLastBox();
                    }
                    break;
                case 17:    // Ctrl key
                    this.ctrlKeyPressed = true;
                    break;
                case 9:    // Tab key
                    if (this.showSuggestionBox) {
                        e.preventDefault();
                        this._queryString = this.element.val();
                        this._enterTextBoxValue();
                        this._hideResult();
                        this.element.attr("aria-expanded", false);
                    }
                    break;
                case 27:    // Esc key
                    this._isOpened = false;
                    this._hideResult();
                    this.element.attr("aria-expanded", false);
                    break;
            }
            if (this.model.multiSelectMode == "visualmode") {
                if (e.keyCode != 17 && e.keyCode != 8 && e.keyCode != 46) this._removeActive();
                this._adjustWidth();
            }
        },
        /**
 * Defining key up  for autocomplete widget.
 * @private
 */
        _OnKeyUp: function (e) {
            this._keyDownComplete();
            if (this.ctrlKeyPressed) {
                if (e.keyCode == 17)
                    this.ctrlKeyPressed = false;
                return false;
            }

            if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                this._hideResult();
                this.element.attr("aria-expanded", false);
                return false;
            }
            if (!this._checkDelimiter()) return false;
            this._queryString = $.trim(this._queryString);

            switch (e.keyCode) {
                //Restricts the keyup event for other functional keys          

                case 38: // Up Key
                case 40: // Down Key
                case 37: // Left Key
                case 39: // Right Key
                case 20: // CapsLk
                case 16: // Shift Key
                case 17: // Ctrl Key
                case 18: // Alt Key
                case 35: // End Key
                case 36: // Home Key
                case 144: // Num Lock
                case 9:    // Tab key
                case 27: break;  // Esc Key

                case 13:    // Enter Key
                    e.preventDefault();
                    this._queryString = this.element.val();
                    this._enterTextBoxValue();
                    if (this.model.enableAutoFill) {
                        this.element.attr("aria-autocomplete", "both");
                        this.suggLen = this.element.val().length;
                        this._autofilSelection();
                    }
                    this._isOpened = false;
                    this._hideResult();
                    this.element.attr("aria-expanded", false);
                    break;

                case 46:    // Delete Key
                    if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
                        this._deleteBox(this._ulBox.children("li.e-active"));
                        break;
                    }
                case 8:     // Backspace Key
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = false;
                        this._OnTextEnter();
                    }
                    else {
                        this.noresult = true;
                        this._hideResult();
                        this.element.attr("aria-expanded", false);
                        if ($.trim(this.element.val()) == "") {
                            this._isOpened = false;
                            this._trigger("close");
                        }
                    }
                    break;

                default:
                    if (this._queryString.length >= this.model.minCharacter) {
                        this._autoFill = true;
                        this._OnTextEnter();
                    }
                    else this.noresult = true;
                    this._typed = true;
                    break;
            }
        },
        /**
* Getting filtered list from the data source.
* @private
*/
        _getFilteredList: function (list) {
            if (!list || !list.length || list.length < 1) this.suggestionListItems = [];
            else {
                var tempQuery = ej.Query();
                this._addQuery(tempQuery, typeof list[0] == "object");
                this.suggestionListItems = ej.DataManager(list).executeLocal(tempQuery);
            }
            this._doneRemaining();
        },
        /**
* Performing searching operation using query.
* @private
*/
        _performSearch: function () {
            var source = this.model.dataSource;
            if (ej.DataManager && source instanceof ej.DataManager) {
                if (!source.dataSource.offline) {
                    window.clearTimeout(this.timer);
                    var proxy = this;
                    // a time delay to avoid the continuous request
                    this.timer = window.setTimeout(function () {
                        proxy._fetchRemoteDat(source);
                    }, 700);
                }
                else this._getFilteredList(source.dataSource.json);
            }
            else this._getFilteredList(source);
        },
        /**
* Fetching data from the remote location using query.
* @private
*/
        _fetchRemoteDat: function (source) {
            var proxy = this, queryPromise, tempQuery = this._getQuery();
            this._addQuery(tempQuery, true);
            queryPromise = source.executeQuery(tempQuery);
            queryPromise.fail(function (e) {
                proxy.suggestionListItems = null;
                proxy._removeLoadingClass();
            }).done(function (e) {
                proxy.suggestionListItems = e.result;
                proxy._doneRemaining();
            });
        },
        /**
 * Add sorting operation for the query.
 * @private
 */
        _addSortingQuery: function (query, key) {
            if (this.model.allowSorting) {
                var order = (this.model.sortOrder == "descending") ? true : false;
                query.sortBy(key, order);
            }
        },
        /**
 * Add value to the query for by retriving value from maaper value field
 * @private
 */
        _addQuery: function (_query, checkMapper) {
            var bindTo = "";
            if (checkMapper) {
                var mapper = this.model.fields;
                bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
            }
            if (this._queryString) _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
            this._addSortingQuery(_query, bindTo);
            if (this.model.itemsCount > 0) _query.take(this.model.itemsCount);
        },
        /**
 * creates a query for the given value to process the data spurce
 * @private
 */
        _getQuery: function () {
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = ej.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query.clone();
            return queryManager;
        },
        /**
 * While typing the text in text box the functionalities has to be done are mentioned here
 * @private
 */
        _OnTextEnter: function () {
            this._addLoadingClass();
            this._hideResult();
            this.element.attr("aria-expanded", false);
            this._performSearch();
        },
        /**
     * Fill the text box with the complete word in the auto fill option
     * @private
     */
        _doneRemaining: function () {
            this._showSuggestionList();
            this.element.attr("aria-expanded", true).attr("aria-haspopup", true);
            if (this.model.enableAutoFill && this._autoFill && !this.noresult || this.model.autoFocus) {
                this.element.attr("aria-autocomplete", "both");
                this._activeItem = 1;
                this._queryString = this.target.value;
            }
            if (this.model.enableAutoFill && this._autoFill && !this.noresult) this._setTextBoxValue();
            if (this.model.autoFocus && !this.noresult) this._addListHover();
            this._removeLoadingClass();
        },
        /**
      * Remove repeated values in the suggestion list
      * @private
      */
        _removeRepeated: function () {
            var results = this.suggestionListItems;
            if (!results || results.length == 0 || this._selectedItems.length == 0)
                return false;
            for (var i = 0; i < this._selectedItems.length; i++) {
                var index = results.indexOf(this._selectedItems[i]);
                if (index != -1) this.suggestionListItems.splice(index, 1);
            }
        },
        /**
      * Check deleimiter while typing in textbox widget
      * @private
      */
        _checkDelimiter: function () {
            this._queryString = !this.element.hasClass("e-watermark") ? this.element.val() : "";
            var _deliIndex = (this.model.multiSelectMode != "delimiter") ? -1 : this._queryString.lastIndexOf(this.model.delimiterChar);

            /*Check Delimiter Conditions and current text*/
            if (_deliIndex == -1) {
                return true;
            }
            else if (_deliIndex + 1 == this._queryString.length) {
                this._hideResult();
                this.element.attr("aria-expanded", false);
                return false;
            }
            else {
                this._queryString = this._queryString.substr(_deliIndex + 1, this._queryString.length);
                return true;
            }
        },
        /**
      * autofill selection in autocomplete is processed with below functionalities
      * @private
      */
        _autofilSelection: function () {
            var element = this.element[0], totLen = this.element.val().length;

            if (element.setSelectionRange)
                element.setSelectionRange(this.suggLen, totLen);
            else if (element.createTextRange) {
                // For lower version browsers (IE8, IE7 ...)
                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', totLen);
                element.moveStart('character', this.suggLen);
                element.select();
            }
        },
        /**
      * dropdown button click is processed with the following action
      * @private
      */
        _OnDropdownClick: function (e) {
            if (this.model.enabled && !this.model.readOnly) {
                e.preventDefault();
                this._addLoadingClass();
                if (this.showSuggestionBox) {
                    this._isOpened = false;
                    this._hideResult();
                    this.element.attr("aria-expanded", false);
                    this._removeLoadingClass();
                }
                else this._showFullList();
            }
        },
        /**
      * Shows the autocomplete popup with full list
      * @private
      */
        _showFullList: function () {
            if (!this._isFocused)
                this.element.focus();
            this._queryString = null;
            this._autoFill = false;
            this._performSearch();
        },
        /**
      * Mouse enter in popup is detected and processed here
      * @private
      */
        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            if (e.target.tagName != "LI") targetEle = $(e.target).parents("li");
            this._getLiTags().removeClass("e-hover");
            $(targetEle).addClass("e-hover");

            this._queryString = this.element.val();
            this._activeItem = this._getLiTags().index($(targetEle)) + 1;
        },
        /**
      * Mouse leave in popup is detected and processed here
      * @private
      */
        _OnMouseLeave: function (e) {
            this._getLiTags().removeClass("e-hover");
            if (this.model.highlightSearch)
                this._getLiTags().find(".e-hilight-txt").removeClass("e-hover");
        },
        /**
      * Mouse click of popup is detected and processed here	
      * @private
      */
        _OnMouseClick: function (e) {
            if (!this.noresult) {
                this._enterTextBoxValue();
                this._isOpened = false;
                this._hideResult();
                this.element.attr("aria-expanded", false);
            }
        },
        /**
      * document click detection and binding and prodcessing
      * @private
      */
        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.suggestionList) && !$(e.target).parents(".e-atc-popup").is(this.suggestionList) &&
                !$(e.target).is(this.element) && !$(e.target).parents(".e-atc").is(this.wrapper)) {
                this._isOpened = false;
                this._hideResult();
                this.element.attr("aria-expanded", false);
                this._trigger("close");
            }
            else if ($(e.target).is(this.suggestionList) || $(e.target).parents(".e-atc-popup").is(this.suggestionList))
                e.preventDefault();
        },
        /**
      * window resize events for popup control		
      * @private
      */
        _OnWindowResize: function (e) {
            this._refreshPopup();
        },
        /**
      * value change fuction in checkbox events	
      * @private
      */
        _valueChange: function () {
            var currValue = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
            if (this.model.value != currValue) {
                this.model.value = currValue;
                this.model.multiSelectMode != "visualmode" && this._hiddenInput.val(this.element.val());
                    this._trigger("change", { value: currValue });
            }
        },
        /**
      * Update selected array of selection from datasource 
      * @private
      */
        _updateSelectedItemArray: function (e) {
            var value = this.getValue();
            this._selectedItems = [];
            if (this.model.multiSelectMode == "delimiter") {
                var values = value.split(this.model.delimiterChar);
                for (var i = 0; i < values.length; i++)
                    if (values[i]) this._selectedItems.push(values[i]);
            }
            else if (this.model.multiSelectMode == "none" && value)
                this._selectedItems.push(value);
        },
        /**
       * KeyDown complete of selection event		
       * @private
       */
        _keyDownComplete: function () {
            var currValue = this.element.val();
            if (this._preVal != currValue) {
                this._preVal = currValue;
                if (this.model.multiSelectMode == "visualmode") this._adjustWidth();
                this._valueChange();
            }
        },
        /**
       * character Move to End of Autocomple control		
       * @private
       */
        _moveCaretToEnd: function (el) {
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = el.value.length;
            } else if (typeof el.createTextRange != "undefined") {
                var range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        },
        /**
       * character selection of Autocomple control		
       * @private
       */
        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;

            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }
            // For lower version browsers (IE8, IE7 ...)
            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },

        //-------------------- Event Wire-up -------------------------//
        /**
         * Wiring the events to Autocomple control		
		 * @private
         */
        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
        }
    });
    /**
	 * Enum for Autocomplete Filter mode.	 
	 * @enum {string}
	 * @global 
	 */
    ej.filterType = {
        /**  Supports to search text with startswith  */
        StartsWith: "startswith",
        /**  Supports to search text with contains */
        Contains: "contains",
        /**  Supports to search text with endswith */
        EndsWith: "endswith",
        /**  Supports only for number lessthan only */
        LessThan: "lessthan",
        /**  Supports only for number greaterthan only */
        GreaterThan: "greaterthan",
        /**  Supports only for number lessthanorequal only */
        LessThanOrEqual: "lessthanorequal",
        /**  Supports only for number greaterthanorequal only */
        GreaterThanOrEqual: "greaterthanorequal",
        /**  Supports only for number equal only */
        Equal: "equal",
        /** Supports only for number notequal only */
        NotEqual: "notequal"
    };
    /**
	 * Enum for Autocomplete sortOrder mode.	 
	 * @enum {string}
	 * @global 
	 */
    ej.SortOrder = {
        /** Supports to sorts with ascending only */
        Ascending: "ascending",
        /** Supports to sorts with descending only */
        Descending: "descending"
    };
    /**
	 * Enum for Autocomplete selection mode.	 
	 * @enum {string}
	 * @global 
	 */
    ej.MultiSelectMode = {
        /** Supports to selection mode with none only */
        None: "none",
        /** Supports to selection mode with delimitter only */
        Delimiter: "delimiter",
        /** Supports to selection mode with visualmode only */
        VisualMode: "visualmode"
    }
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin provides support to display calendar within your web page and allows to pick the date.
* @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @classdesc Date selection with the input field.
	* @class ejDatePicker
	* @param {object} options - settings for Date Picker.
	* @requires jQuery
    * @requires jquery.easing.1.3.js
    * @requires jquery.globalize.js
    * @requires globalize.cultures.min.js
	* @requires ej.core.js
	* @requires ej.datepicker.js
	* @example 
	* &lt;input type="text" id="datepicker" /&gt;
	* &lt;script&gt;
	* // Create DatePicker
    * $("#datepicker").ejDatePicker();
	* &lt;/script&gt;
	*/

    ej.widget("ejDatePicker", "ej.DatePicker", /** @lends ejDatePicker# */ {
        // widget element will be automatically set in this
        element: null,
        _rootCss: "e-datepicker",
        // user defined model will be automatically set in this
        model: null,
        validTags: ["input", "div", "span"],
        _setFirst: false,
		_cancelValue: false,
        type: "editor",

        // default model
        defaults:/** @lends ejDatePicker# */{
            /**		
			* Specifies the header format of days in short, longer or min types. See {@link Header}
			* @default ej.DatePicker.Header.ShowHeaderMin
			* @type {String | Enum}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set dayHeaderFormat API value during initialization  
			* 	$("#datepicker").ejDatePicker({  dayHeaderFormat: ej.DatePicker.Header.ShowHeaderShort });
			* &lt;/script&gt;
			* @memberof ejDatePicker
			* @instance
			*/
            dayHeaderFormat: "showheadermin",

            /**		
			* Shows the date icon button at right side of textbox and shows DatePicker popup on clicking it.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set showPopupButton API during initialization  
			* 	$("#datepicker").ejDatePicker({  showPopupButton: false });
			* &lt;/script&gt;
			* @memberof ejDatePicker
			* @instance
			*/
            showPopupButton: true,
			/**		
			* Enable or disable the animation effect in datepicker.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the enableAnimation value during initialization. 			
			* 	$("#datepicker").ejDatePicker({  enableAnimation : false });
			* &lt;/script&gt; <br>
			 * @memberof ejDatePicker
			* @instance
			*/
			enableAnimation: true,
            /**		
			* It allows to show footer in DatePicker calendar to select today date.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set showFooter API during initialization  
			* 	$("#datepicker").ejDatePicker({  showFooter: false });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            showFooter: true,

            /**		
			* Allows to embed the DatePicker in the page. Also associate DatePicker with div element instead of input.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set displayInline API during initialization  
			* 	$("#datepicker").ejDatePicker({  displayInline: true });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            displayInline: false,

            /**		
			* Specifies the date format to be displayed in the input textbox of Datepicker. The selected Datepicker value will be displayed in specified date format.
			* @default "MM/dd/yyyy"
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set dateFormat API during initialization  
			* 	$("#datepicker").ejDatePicker({  dateFormat: "dd/MM/yyyy" });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            dateFormat: '',

            /**		
			* Specifies the water mark text to be display in input text.
			* @default "Select date"
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set watermarkText during initialization  
			* 	$("#datepicker").ejDatePicker({  watermarkText: "Enter date" });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            watermarkText: "Select date",

            /**		
			* Allow to display default date value in input textbox.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set displayDefaultDate API during initialization  
			* 	$("#datepicker").ejDatePicker({  displayDefaultDate: true });
			* &lt;/script&gt;
			* @memberof ejDatePicker
			* @instance
			*/
            displayDefaultDate: true,

            /**		
			* Specifies the selected date value.
			* @default null
			* @type {String | DateObject}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set the datepicker value during initialization  
			* 	$("#datepicker").ejDatePicker({  value: new Date("5/5/2014") });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            value: null,
			/**		
			* Maintain the selected date value for EJWEB.
			* @default null
			* @type {String | DateObject}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To maintain datepicker value in EJWEB
			 * @memberof ejDatePicker
			* @instance
			*/
			selectedDate: "",

           /**		
           * Specifies the minimum date range to be displayed in DatePicker calendar.
           * @default new Date(1900, 00, 01)
           * @type {String | DateObject}
           * @example 
		   * &lt;input type="text" id="datepicker" /&gt;
	       * &lt;script&gt;
           * //To set minDate value during initialization  
           * 	$("#datepicker").ejDatePicker({  minDate: new Date("5/1/2013") });
           * &lt;/script&gt;
            * @memberof ejDatePicker
           * @instance
           */
            minDate: new Date(1900, 01, 01),

            /**		
           * Specifies the maximum date range to be displayed in DatePicker calendar.
           * @default new Date(2099, 11, 31)
           * @type {String | DateObject}
           * @example 
		   * &lt;input type="text" id="datepicker" /&gt;
	       * &lt;script&gt;
           * //To set maxDate value during initialization  
           * 	$("#datepicker").ejDatePicker({  maxDate : new Date("5/30/2015") });
           * &lt;/script&gt;
            * @memberof ejDatePicker
           * @instance
           */
            maxDate: new Date(2099, 12, 31),

            /**		
			* Specifies the start level view in DatePicker calendar. See {@link Level}
			* @default ej.DatePicker.Level.Month
			* @type {String | Enum}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set startLevel API during initialization  
			* 	$("#datepicker").ejDatePicker({  startLevel: ej.DatePicker.Level.Year });
			* &lt;/script&gt;
			* @memberof ejDatePicker
			* @instance
			*/
            startLevel: "month",

            /**		
			* Specifies the start level view in DatePicker calendar. See {@link Level}
			* @default ""
			* @type {String | Enum}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set depthLevel API during initialization  
			* 	$("#datepicker").ejDatePicker({  depthLevel: ej.DatePicker.Level.Year });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            depthLevel: "",

            /**		
			* Set the root class for DatePicker theme. This cssClass API helps to use custom skinning option for DatePicker control. 
			* @default ""
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set cssClass API during initialization  
			* 	$("#datepicker").ejDatePicker({  cssClass: "gradient-lime" });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            cssClass: "",

            /**		
			* Specifies the start day of the week in DatePicker calendar.
			* @default 0
			* @type {Number}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set startDay API during initialization  
			* 	$("#datepicker").ejDatePicker({  startDay: 2 });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            startDay: -1,

            /**		
			* Specifies the number of months to navigate at one click in next and previous button.
			* @default 1
			* @type {Number}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set stepMonths API during initialization  
			* 	$("#datepicker").ejDatePicker({  stepMonths: 2 });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            stepMonths: 1,

            /**		
			* Culture the language of DatePicker calendar.
			* @default "en-US"
			* @type {String}
			* @example 
		    * &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set locale API during initialization  
			* 	$("#datepicker").ejDatePicker({  locale: "en-US" });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            locale: "en-US",

            /**		
			* It allows to show days in other months of DatePicker calendar.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set showOtherMonths API during initialization  
			* 	$("#datepicker").ejDatePicker({  showOtherMonths: false });
			* &lt;/script&gt; 
			 * @memberof ejDatePicker
			* @instance
			*/
            showOtherMonths: true,

            /**		
			* When enableStrictMode true it allows the value outside of the range also, otherwise it internally changed to the correct value.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set enableStrictMode API during initialization  
			* 	$("#datepicker").ejDatePicker({  enableStrictMode: true });
		    * &lt;/script&gt; 
			 * @memberof ejDatePicker
			* @instance
			*/
            enableStrictMode: false,

            /**		
			* Enables or disables the state maintenance of DatePicker.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set enablePersistence API during initialization  
			* 	$("#datepicker").ejDatePicker({  enablePersistence: true });
			* &lt;/script&gt; 
			 * @memberof ejDatePicker
			* @instance
			*/
            enablePersistence: false,

            /**		
			* Enables or disables the datepicker control.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set enabled API during initialization  
			* 	$("#datepicker").ejDatePicker({  enabled: false });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            enabled: true,

            /**		
			* Specifies the width of the datepicker input text.
			* @default "160px"
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set width API during initialization  
			* 	$("#datepicker").ejDatePicker({  width: 200 });
			* &lt;/script&gt; 
			 * @memberof ejDatePicker
			* @instance
			*/
            width: "",

            /**		
			* Specifies the height of the datepicker input text.
			* @default "28px"
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set height API during initialization  
			* 	$("#datepicker").ejDatePicker({  height: 35 });
			* &lt;/script&gt; 
			 * @memberof ejDatePicker
			* @instance
			*/
            height: "",

            /**		
			* Display Right to Left direction of DatePicker calendar and input box.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set enableRTL API during initialization  
			* 	$("#datepicker").ejDatePicker({  enableRTL : true });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            enableRTL: false,

            /**		
			* DatePicker input will be displayed in rounded corner style, when this property is set to true.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set showRoundedCorner API during initialization  
			* 	$("#datepicker").ejDatePicker({  showRoundedCorner : true });
			* &lt;/script&gt;
			 * @memberof ejDatePicker
			* @instance
			*/
            showRoundedCorner: false,

            /**		
			* Specifies the header format to be displayed in the pop up of Datepicker.
			* @default "MMMM yyyy"
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set headerFormat API during initialization  
			* 	$("#datepicker").ejDatePicker({  headerFormat : "MMMM yy" });
			* &lt;/script&gt; 
			 * @memberof ejDatePicker
			* @instance
			*/
            headerFormat: 'MMMM yyyy',

            /**		
			* Set the text name for the today button in the datepicker popup. 
			* @default "Today"
			* @type {String}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set buttonText API during initialization  
			* 	$("#datepicker").ejDatePicker({  buttonText : "Now" });
			* &lt;/script&gt;
			* @memberof ejDatePicker
			* @instance
			*/
            buttonText: 'Today',

            /**		
			* Indicates that the datepicker value can only be read. 
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
			* //To set readOnly API during initialization  
			* 	$("#datepicker").ejDatePicker({  readOnly : true });
			* &lt;/script&gt; 
			* @memberof ejDatePicker
			* @instance
			*/
            readOnly: false,
            /**		
           * Specify the special dates in datepicker
           * @default null
           * @type {object}
           * @example 
           * &lt;input type="text" id="datepicker" /&gt;
           * &lt;script&gt;
           * //To set specialDates API value during initialization             
		   * // declaration
           *$("#datepicker").ejDatePicker({specialDates:window.spldays});
           * &lt;/script&gt;
           * @memberof ejDatePicker
           * @instance
           */
            specialDates: null,
            /**		
        * Specify the fields mapping in datepicker
        * @default null
        * @type {object}
        * @example 
        * &lt;input type="text" id="datepicker" /&gt;
        * &lt;script&gt;
        * //To set fields API value during initialization         
        * // declaration
        * $("#datepicker").ejDatePicker({	
        * specialDates: window.spldays, fields: {date:"date",tooltip:"tooltip",icon:"icon"}});
        * &lt;/script&gt;
        * @memberof ejDatePicker
        * @instance
        */
            fields: {
                date: "date",
                tooltip: "tooltip",
                icon: "icon",
            },
            /**		
             * DatePicker Tooltip will be displayed, when this property is set to true.
             * @default true
             * @type {Boolean}
             * @example 
             * &lt;input type="text" id="datepicker" /&gt;
             * &lt;script&gt;
             * //To set tooltip API during initialization  
             * 	$("#datepicker").ejDatePicker({  showTooltip : false });
             * &lt;/script&gt;
              * @memberof ejDatePicker
             * @instance
             */
            showTooltip: true,
           /**		
           * HighlightSection used to highlight current month, week, workdays. See {@link HighlightSection}
           * @default "none"
           * @type {String | Enum}
           * @example 
           * &lt;input type="text" id="datepicker" /&gt;
           * &lt;script&gt;
           * //To set highlightSection API during initialization  
           * 	$("#datepicker").ejDatePicker({  highlightSection: "week" });
           * &lt;/script&gt;
           * @memberof ejDatePicker
           * @instance
           */
            highlightSection: "none",
            /**		
            * Week end will be displayed in bold, when this property is set to true.
            * @default false
            * @type {Boolean}
            * @example 
            * &lt;input type="text" id="datepicker" /&gt;
            * &lt;script&gt;
            * //To set highlightWeekend API during initialization  
            * 	$("#datepicker").ejDatePicker({  highlightWeekend : true });
            * &lt;/script&gt;
             * @memberof ejDatePicker
            * @instance
            */
            highlightWeekend: false,

            /**     
            * Fires when each date is created in the DatePicker popup.
            * @event
            * @name ejDatePicker#beforeDateCreate 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {object}  argument.date returns the current created date object
            * @param {object}  argument.element returns the current DOM object of the date from the Calendar
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //beforeDateCreate event for datepicker
            * $("#datepicker").ejDatePicker({
            *    beforeDateCreate: function (args) {}
            * });  
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */
            beforeDateCreate: null,

            /**     
            * Fires when DatePicker popup opened.
            * @event
            * @name ejDatePicker#open 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the eventclose"
            * @param {string}  argument.value returns the current date value
            * @param {string}  argument.prevDate returns the previously selected value
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //open event for datepicker
            * $("#datepicker").ejDatePicker({
            *    open: function (args) {}
            * });  
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */
            open: null,

            /**     
            * Fires when DatePicker popup closed.
            * @event
            * @name ejDatePicker#close 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.value returns the current date value
            * @param {string}  argument.prevDate returns the previously selected value
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //close event for datepicker
            * $("#datepicker").ejDatePicker({
            *    close: function (args) {}
            * });   
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */
            close: null,

            /**     
            * Fires when a date is selected from the datepicker popup.
            * @event
            * @name ejDatePicker#select 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.value returns the current date value
            * @param {string}  argument.prevDate returns the previously selected value
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //select event for datepicker
            * $("#datepicker").ejDatePicker({
            *    select: function (args) {}
            * }); 
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */
            select: null,

            /**     
            * Fires when the datepicker input value is changed.
            * @event
            * @name ejDatePicker#change 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.value returns the datepicker input value
            * @param {string}  argument.prevDate returns the previously selected value
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //change event for datepicker
            * $("#datepicker").ejDatePicker({
            *    change: function (args) {}
            * });  
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */
            change: null,

            /**     
            * Fires when datePicker input gets focus.
            * @event
            * @name ejDatePicker#focusIn 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the event
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //focusIn event for datepicker
            * $("#datepicker").ejDatePicker({
            *    focusIn: function (args) {}
            * }); 
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */
            focusIn: null,

            /**     
            * Fires when datePicker input losses the focus.
            * @event
            * @name ejDatePicker#focusOut 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the datepicker model
            * @param {string}  argument.type returns the name of the event
            * @example 
			* &lt;input type="text" id="datepicker" /&gt;
	        * &lt;script&gt;
            * //focusOut event for datepicker
            * $("#datepicker").ejDatePicker({
            *    focusOut: function (args) {}
            * });
		    * &lt;/script&gt;				
            * @memberof ejDatePicker
            * @instance
            */

            focusOut: null,           

			/**     
          * Fires when create DatePicker successfully.
          * @event
          * @name ejDatePicker#create 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DatePicker model
          * @param {string}  argument.type returns the name of the event
          * @example 
			* &lt;input type="text" id="datepicker" /&gt;
			* &lt;script&gt;
			* //create event for datepicker
            * $("#datepicker").ejDatePicker({
            *    create: function (args) {}
            * });
		  * &lt;/script&gt;				
          * @memberof ejDatePicker
          * @instance
          */
            create: null,
			/**     
          * Fires when the DatePicker is destroyed successfully.
          * @event
          * @name ejDatePicker#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DatePicker model
          * @param {string}  argument.type returns the name of the event
          * @example 
			* &lt;input type="text" id="datepicker" /&gt;
			* &lt;script&gt;
			* //destroy event for datepicker
            * $("#datepicker").ejDatePicker({
            *    destroy: function (args) {}
            * }); 
		  * &lt;/script&gt;			
          * @memberof ejDatePicker
          * @instance
          */
            destroy: null


        },

        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            displayDefaultDate: "boolean",
            displayInline: "boolean",
            showPopupButton: "boolean",
            locale: "string",
            readOnly: "boolean",
            cssClass: "string",
            dateFormat: "string",
            watermarkText: "string",
            headerFormat: "string",
            buttonText: "string",
            specialDates: "data",
            showTooltip: "boolean",
            highlightSection: "enum",
            highlightWeekend: "boolean",
			enableAnimation: "boolean",          

        },

        _setModel: function (jsondata) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(jsondata["enabled"])) return false;
            var callRefresh = false, start = false, validate = false;
            for (var key in jsondata) {
                switch (key) {
                    case "dayHeaderFormat":
                        this.model.dayHeaderFormat = jsondata[key];
                        callRefresh = true;
                        break;
                    case "showPopupButton":
                        this._renderDateIcon(jsondata[key], true);
                        break;
                    case "displayInline":
                        this._setDisplayInline(jsondata[key]);
                        break;
                    case "value":
                        this._setDateValue(jsondata[key]);
                        jsondata[key] = this.model.value;
                        validate = true;
                        callRefresh = true;
                        break;
                    case "specialDates":
                        this.model.specialDates = jsondata[key];
                        this._createSpecialDateObject();
                        callRefresh = true;
                        break;
                    case "fields":
                        this.model.fields = jsondata[key];
                        this._mapField = this._getMapper();
                        callRefresh = true;
                        break;
                    case "showTooltip":
                        this.model.showTooltip = jsondata[key];
                        callRefresh = true;
                        break;
                    case "highlightWeekend":
                        this.model.highlightWeekend = jsondata[key];
                        callRefresh = true;
                        break;
                    case "highlightSection":
                        this.model.highlightSection = jsondata[key];                        
                        callRefresh = true;
                        break;
                    case "dateFormat":
                        this.model.dateFormat = jsondata[key];
                        this._setDateValue(this.model.value);
                        break;
                    case "minDate":
                        this._setMinDate(jsondata[key]);
                        jsondata[key] = this.model.minDate;
                        validate = true;
                        callRefresh = true;
                        break;
                    case "maxDate":
                        this._setMaxDate(jsondata[key]);
                        jsondata[key] = this.model.maxDate;
                        validate = true;
                        callRefresh = true;
                        break;
                    case "locale":
                        this.model.locale = jsondata[key];
						this.model.startDay=-1;
                        this.model.dateFormat = '';
                        this._setCulture(jsondata[key]);
                        this._setDateValue(this.model.value);
                        callRefresh = true;
                        break;
                    case "showOtherMonths":
                        this.model.showOtherMonths = jsondata[key];
                        this._otherMonthsVisibility();
                        break;
                    case "enableStrictMode":
                        this.model.enableStrictMode = jsondata[key];
                        validate = true;
                        callRefresh = true;
                        break;
                    case "readOnly":
                        this.model.readOnly = jsondata[key];
                        this._disbleMaualInput();
                        break;
                    case "width":
                        this._setWidth(jsondata[key]);
                        break;
                    case "height":
                        this._setHeight(jsondata[key]);
                        break;
                    case "cssClass":
                        this._setSkin(jsondata[key]);
                        break;
                    case "enableRTL":
                        this._setRTL(jsondata[key]);
                        break;
                    case "showRoundedCorner":
                        this._setRoundedCorner(jsondata[key]);
                        break;
                    case "enabled":
                        if (!jsondata[key]) this.disable();
                        else this.enable();
                        break;
                    case "buttonText":
                        this._setFooterText(jsondata[key]);
                        break;
                    case "showFooter":
                        this._enableFooter(jsondata[key]);
                        break;
                    case "watermarkText":
                        this.model.watermarkText = jsondata[key]; this._setWaterMark();
                        break;
                    case "startDay":
                        if (parseInt(jsondata[key]) < 0 || parseInt(jsondata[key]) > 6) jsondata[key] = 0;
                        this.model.startDay = jsondata[key];
                        callRefresh = true;
                        break;
                    case "startLevel":
                        this.model.startLevel = jsondata[key]; start = true;
                        callRefresh = true;
                        break;
                    case "headerFormat":
                        this.model.headerFormat = jsondata[key];
                        callRefresh = true;
                        break;
                    case "depthLevel":
                        this.model.depthLevel = jsondata[key]; start = true;
                        callRefresh = true;
                        break;
					case "enableAnimation":
							this.model.enableAnimation=options[key];
                        break;
                
                }
            }
            if (validate) {
                this._validateMinMaxDate();
                jsondata["value"] = this.model.value;
                jsondata["maxDate"] = this.model.maxDate;
                jsondata["minDate"] = this.model.minDate;
            }
            this._setWaterMark();

            if (callRefresh && this.isValidState )
                this._refreshDatepicker();            
            if (start) this._startLevel(this.model.startLevel);
            this._triggerChangeEvent();
            this._checkErrorClass();
        },
        observables: ["value"],
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            if (this._isOpen)
                this.hide();
            this.sfCalendar.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
            }
            this.element.removeClass('e-datepicker e-input');
        },
        // constructor function
        _init: function () {
            this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
            this._setValues();
            this._createDatePicker();
        },
        //------------------------------Private Methods---------------------------------------------
        _setValues: function () {
            this.Date = new Date();
            this._id = this.element[0].id;
            this.isValidState = true;
            this._setCulture(this.model.locale);
            this._setMinDate(this.model.minDate);
            this._setMaxDate(this.model.maxDate);
            this._calendarDate = this._zeroTime(new Date());
            if (this.model.startDay < 0 || this.model.startDay > 6) this.model.startDay = 0;
            this.Date.firstDayOfWeek = this.model.startDay;
            this.Date.fullYearStart = '20';
            this._showHeader = true,
            this._validateMinMaxDate();
            this._dateValue = new Date(this._calendarDate.toString());
            this._isIE7 = this._checkIE7();
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            // this variable is set to true in DateTimePicker control
            this._getInternalEvents = false;
            this._flag = true;
            this._ejHLWeekEnd = false;
            this._isOpen = false;
            this._prevDate = null;
            this._isFocused = false;
        },

        _createDatePicker: function () {
            this._createWrapper();
            this._wireEvents();
            if (this.model.displayInline)
                this.show();
            if (this.model.enableRTL) this._setRTL(true);
            if (this.model.showRoundedCorner) this._setRoundedCorner(true);
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name"))
                this.element.attr("name", this.element[0].id);
        },
        _createWrapper: function () {
            this._mapField = this._getMapper();
            if (this.model.specialDates) {
                this._createSpecialDateObject();
            }
            if (this._isInputBox()) {
                this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'tabindex': '0' }); //
                this.wrapper = ej.buildTag("span.e-datewidget e-widget " + this.model.cssClass);
                this.innerWrapper = ej.buildTag("span.e-in-wrap e-box");
                this.wrapper.append(this.innerWrapper).insertBefore(this.element);
                this.innerWrapper.append(this.element);
                this.innerWrapper.addClass('e-padding');
                this.dateIcon = ej.buildTag("span.e-select#" + this._id + "-img", "", {}, (this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-icon e-date", "", {}, { 'aria-label': 'Select'}).attr((this._isIE8) ? { 'unselectable': 'on' } : {})).insertAfter(this.element);
            }
            if (!this._isSupport) {
                this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, { type: "text" }).insertAfter(this.element);
                this._hiddenInput.val(this.model.watermarkText);
                this._hiddenInput.css("display","block");
                var proxy = this;
                $(this._hiddenInput).focus(function(){
                    proxy.element.focus();
                });
            }
            this._checkNameAttr();
            this._setHeight(this.model.height);
            if (this.model.width != "") this._setWidth(this.model.width);
			var oldWrapper = $("#e-" + this.element.context.id).get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.sfCalendar = ej.buildTag('div.e-datepicker e-popup e-widget ' + this.model.cssClass + ' e-calendar ' + (this.model.specialDates ? (this.model.specialDates[0][this._mapField._icon] ? 'e-icons ' : '') : ''), "", {}, { id: 'e-' + this._id }).attr({ 'aria-hidden': 'true' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                .insertBefore(this.element);
            this.popup = this.sfCalendar;
            this._resizeCalender();
            if (this.model.displayDefaultDate) this._setDateValue(this.model.value);
            this._preValue = this.element.val();
            this._setWaterMark();
            this._createCalender();
            this._setDisplayInline(this.model.displayInline);
            if (this.model.readOnly) this._disbleMaualInput();
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && $(this.element).hasClass("e-disable")) this.enable();
            this._layoutChanged();
            this._checkErrorClass();
        },
        _isInputBox: function () {
            return (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type')));
        },

        _renderDateIcon: function (bool, reRender) {
            if (reRender && this.model.showPopupButton == bool) return;
            if (!bool && this.dateIcon) {
                this.dateIcon.css('display', 'none');
                this.innerWrapper.removeClass('e-padding');
                this._bindInputEvent();
            }
            else {
                if (this.innerWrapper) {
                    this.innerWrapper.addClass('e-padding');
                    this.dateIcon.css('display', 'block');
                }
                if (!this.model.displayInline)
                    this._bindDateButton();
            }
            this.model.showPopupButton = bool;
        },

        _resizeCalender: function () {
            if (this.model.dayHeaderFormat == "showheadershort")
                this.sfCalendar.removeClass("e-headerlong");
            else if (this.model.dayHeaderFormat == "showheaderlong") {
                this.sfCalendar.addClass("e-headerlong");
            }
        },

        _setWidth: function (value) {
            if (this.wrapper) this.wrapper.width(value);
            else this.element.width(value);
        },
        _setHeight: function (value) {
            if (value) {
                if (this.wrapper) this.wrapper.height(value);
                else this.element.height(value);
            }
            if (this._isIE7) this.element.height(this.innerWrapper.height());
        },
        _setRTL: function (isRTL) {
            if (isRTL) {
                if (this.model.showPopupButton && this.wrapper)
                    this.wrapper.addClass("e-rtl");
                else this.element.addClass("e-rtl");
                this.sfCalendar.addClass("e-rtl");
            }
            else {
                if (this.model.showPopupButton && this.wrapper)
                    this.wrapper.removeClass("e-rtl");
                else this.element.removeClass("e-rtl");
                this.sfCalendar.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (bool) {
            if (bool) {
                if (this.innerWrapper) this.innerWrapper.addClass("e-corner-all");
                this.sfCalendar.addClass("e-corner-all");
            }
            else {
                if (this.innerWrapper) this.innerWrapper.removeClass("e-corner-all");
                this.sfCalendar.removeClass("e-corner-all");
            }
        },

        _refreshDatepicker: function () {
            this._setDateValue(this.element.val());
            $(".e-text", this.sfCalendar).text(this._asString(this._calendarDate, this.model.headerFormat));
            this._resizeCalender();
            this._dateValue = new Date(this._calendarDate.toString());
            this._hoverDate = this._calendarDate.getDate() - 1;
            this._renderCalendar(this, this._dateValue);
            this._setFooterText(this.model.buttonText);
            this._enableFooter(this.model.showFooter);
            this._layoutChanged();
        },
        _setFooterText: function (footerText) {
            $('.e-footer-text', this.sfCalendar).html(footerText);
        },
        _setSkin: function (skin) {
            if (this.wrapper) {
                this.wrapper.removeClass(this.model.cssClass);
                this.wrapper.addClass(skin);
            }
            else {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass(skin);
            }
            this.sfCalendar.removeClass(this.model.cssClass);
            this.sfCalendar.addClass(skin);
        },
        _setDisplayInline: function (isDisplayInline) {
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this._isInputBox()) {
                this.sfCalendar.insertAfter(this.wrapper);
                this._setDatePickerPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.sfCalendar);
            }
            else {
                this.sfCalendar.css('display', 'none');
                $('body').append(this.sfCalendar);
                this._isOpen = false;
            }
            if (isDisplayInline) {
                this.show();
                this._off($(this.dateIcon, this.wrapper), "click", $.proxy(this._showDatePopUp, this));
                this.element.unbind("click", $.proxy(this._showDatePopUp, this));
            }
            else this._renderDateIcon(this.model.showPopupButton, false);
        },
        /*Disabling Manual input */
        _disbleMaualInput: function () {
            if (this.model.readOnly) {
                $(this.element).attr("readonly", "readonly");
                if (!this.model.displayInline) this.hide();
            }
            else {
                $(this.element).removeAttr("readonly");
            }
        },
        _checkDateObject: function (date) {
            if (!date || (typeof JSON === "object" && JSON.stringify(date) === "{}")) return date = "";
            else if (!(date instanceof Date)) {
                var val = this._parseDate(date);
                date = (val != null) ? val : ((this._prevDate == null) ? ((this.element.val() != date && this.element.val() == "") ? new Date(date) :null) : null);
            }
            if (!isNaN(Date.parse(date))) return this._dateValue = this._calendarDate = this._zeroTime(date);
            return null;
        },
        _checkInstanceType: function (date) {
            date = this._stringToObject(date);
            if (!date) return null;
            else if (!(date instanceof Date)) {
                date = this._parseDate(date);
            }
            if (!isNaN(Date.parse(date))) return this._zeroTime(date);
            return null;
        },
        _stringToObject: function (value) {
            if (typeof value === "string") {
                var val = Globalize.parseDate(value, this.model.dateFormat);
                value = (val != null) ? val : new Date(value);
            }
            return value;
        },
        _validateMinMaxDate: function () {
            var dateChange = false, valueExceed = false;
            if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
            if (!this.model.enableStrictMode) {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.value = this.model.minDate;
                        dateChange = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.value = this.model.maxDate;
                        dateChange = true;
                    }
                }
                else {
                    this.element.val("");
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
                this.isValidState = true;
            }
            else {
                if (this.model.value) {
                    if (this.model.value < this.model.minDate) {
                        this._calendarDate = this.model.minDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else if (this.model.value > this.model.maxDate) {
                        this._calendarDate = this.model.maxDate;
                        this.isValidState = false;
                        valueExceed = true;
                    }
                    else this.isValidState = true;
                }
                else {
                    if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
                    else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
                }
            }
            if (dateChange) this.element.val(this._formatter(this.model.value, this.model.dateFormat));
            if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
        },
        _setCulture: function (culture) {
            this.culture = Globalize.culture(culture);
            if (this.culture) {
				this.model.locale=this.culture.name=="en"?"en-US":this.culture.name;
                this.Date.dayNames = this.culture.calendar.days.names;
                this.Date.dayNamesMin = this.culture.calendar.days.namesShort;
                this.Date.abbrDayNames = this.culture.calendar.days.namesAbbr;
                this.Date.monthNames = this.culture.calendar.months.names;
                this.Date.abbrMonthNames = this.culture.calendar.months.namesAbbr;
                this.Date.format = this.culture.calendar.patterns.d;
                if (this.model.dateFormat == '') this.model.dateFormat = this.culture.calendar.patterns.d;
				if(this.model.startDay==-1) this.model.startDay=this.culture.calendar.firstDay;
            } else {
                this.Date.dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                this.Date.dayNamesMin = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
                this.Date.abbrDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                this.Date.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                this.Date.abbrMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                this.Date.format = 'MM/dd/yyyy';
                if (this.model.dateFormat == '') this.model.dateFormat = 'MM/dd/yyyy';
				this.model.locale="en-US";
            }
            this._separator = this._getSeparator();
        },
        /* Set Water Mark Text */
        _setWaterMark: function () {
            if (this.element != null && this.element.hasClass("e-input") && this.element.val() == "") {
                if (this.model.watermarkText) {
                    this.isValidState = true;
                    this._checkErrorClass();
                }               
                    if (!this._isSupport)
                        this._hiddenInput.css("display","block").val(this.model.watermarkText);
                    else
                        $(this.element).attr("placeholder",this.model.watermarkText);
                this.model.value = null;
                return true;
            }
        },
        _setDatePickerPosition: function () {
            var pos = this._getOffset(this.wrapper);
            var left = pos.left;
            var totalHeight = this.wrapper.outerHeight();
            var maxZ = this._getZindexPartial();
            if (this.model.enableRTL) left += this.wrapper.width() - this.sfCalendar.width();

            this.sfCalendar.css({
                "left": left + "px",
                'position': 'absolute',
                "top": (pos.top + totalHeight + 3) + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },
        _getZindexPartial: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },

        _setMinDate: function (d) {
            this.model.minDate = this._checkInstanceType(d);
            if (!this.model.minDate) {
                this.model.minDate = (new Date('11/31/1899'));
            }
        },

        _setMaxDate: function (d) {
            this.model.maxDate = this._checkInstanceType(d);
            if (!this.model.maxDate) {
                this.model.maxDate = (new Date('12/31/2099')); // using the JS Date.parse function which expects mm/dd/yyyy
            }
        },
        _setDateValue: function (date) {
            var newDate = this._checkDateObject(date);
            if (newDate != null) {
                this.isValidState = true;
                if (newDate == "") {
                    this.element.val("");
                    this.model.value = "";
                } else {
                    this.model.value = newDate;
                    this._validateMinMaxDate();
                    this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
                }
            }
            else {
                (typeof date === "string" && this.model.enableStrictMode) ? this.element.val(date) : this.element.val("");
                this.model.value = "";
                this.isValidState = (this.element.val() == "") ? true : false;
            }
			 if(this.model.value)
            this.model.selectedDate = this.model.value.toDateString();
			this._removeWatermark();
        },
        _updateInputVal: function () {
            var val = this._validateValue();
            if (val != null) {
                if (this.sfCalendar.find('.e-datepicker-days').is(':visible')) {
                    this._refreshDatepicker();
                }
                else if (this.model.displayDefaultDate) {
                    this._setDateValue(val);
                }
            }
        },
        _validateInputVal: function () {
            var val = this._validateValue();
            if (val != null) {
                if (val <= this.model.maxDate && val >= this.model.minDate)
                    this.isValidState = true;
                else {
                    this.model.value = "";
                    this.isValidState = false;
                }
            }
        },

        _validateValue: function () {
            return this._parseDate(this.element.val());
        },
        _getSeparator: function () {
            if (this.culture) {
                formats = this.culture.calendar.patterns.d;
            }
            else formats = this.model.dateFormat;
            var regex = new RegExp("^[a-zA-Z0-9]+$");
            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats[i])) return formats[i];
            }
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },
        /*----------------------------------------------region date methods------------------------------------------------------*/

        //Date formatter - Convert date object to specific date format
        _formatter: function (date, format) {
            return Globalize.format(date, format, this.model.locale);
        },
        _parseDate: function (date) {
            return Globalize.parseDate(date, this.model.dateFormat);
        },
        // Checks if the year is a leap year.
        isLeapYear: function (year) {
            return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
        },
        //Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
        _zeroTime: function (date) {
			var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        _zeroPad: function (number) {
            // Pad a number with a zero, to make it 2 digits
            return ((number < 10) ? "0" : "") + String(number);
        },
        //Convert date object to specific format
        _formatDate: function (date) {
            return this._formatter(date, this.Date.format);
        },
        //Gets the number of days in the month.
        _getDaysInMonth: function (date) {
            return [31, (this.isLeapYear(date) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][date.getMonth()];
        },
        //Add a number of days to the date object.
        _addDays: function (d, number) {
            d.setDate(d.getDate() + number);
            return d;
        },
        //Add a number of years to the date object.
        _addYears: function (d, number) {
            d.setFullYear(d.getFullYear() + number);
            return d;
        },
        //Add a number of months to the date object.
        _addMonths: function (d, number) {
            var tempDatedateMonth = d.getDate();
            d.setMonth(d.getMonth() + number);
            if (tempDatedateMonth > d.getDate())
                this._addDays(d, -d.getDate());
            return d;
        },
        //Checks if the day is a weekend day (Sat or Sun).
        _isWeekend: function (date) {
            return date.getDay() == 0 || date.getDay() == 6;
        },

        _isSpecialDates: function (dates) {
            if (this.model.specialDates) {
                for (var i = 0; i < this.model.specialDates.length; i++) {
                    if (this.model.specialDates[i]) {
                        if (dates.getDate() == this.model.specialDates[i][this._mapField._date].getDate() && dates.getMonth() == this.model.specialDates[i][this._mapField._date].getMonth() && dates.getFullYear() == this.model.specialDates[i][this._mapField._date].getFullYear()) {
                            this._getIndex = i;
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        _getMapper: function () {
            var mapper = this.model.fields, mapFld = { _date: null, _tooltip: null, _icon: null };
            mapFld._date = (mapper && mapper.date) ? mapper["date"] : "date";
            mapFld._tooltip = (mapper && mapper.tooltip) ? mapper["tooltip"] : "tooltip";
            mapFld._icon = (mapper && mapper.icon) ? mapper["icon"] : "icon";
            return mapFld;
        },
        _createSpecialDateObject: function () {
            
            for (var i = 0; i < this.model.specialDates.length; i++) {
                this.model.specialDates[i][this._mapField._date] = this._checkInstanceType(this.model.specialDates[i][this._mapField._date]);
            }            
        },

        // Returns a string representation of the date object according to Date.Format.
        _asString: function (date, format) {
            var r = format || this.Date.format;
            return r
                .split('yyyy').join(date.getFullYear())
                .split('yy').join((date.getFullYear() + '').substring(2))
                .split('MMMM').join(this._getMonthName(false, date))
                .split('MMM').join(this._getMonthName(true, date))
                .split('MM').join(this._zeroPad(date.getMonth() + 1))
                .split('dd').join(this._zeroPad(date.getDate()))
                .split('hh').join(this._zeroPad(date.getHours()))
                .split('min').join(this._zeroPad(date.getMinutes()))
                .split('ss').join(this._zeroPad(date.getSeconds()));
        },
        //Gets the name of the month.
        _getMonthName: function (abbreviated, date) {
            return abbreviated ? this.Date.abbrMonthNames[date.getMonth()] : this.Date.monthNames[date.getMonth()];
        },
        _currentDay: function () {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();
            return new Date(mm + '/' + dd + '/' + yyyy);
        },
        /*---------------------------------------------region Basic Functionality---------------------------------------*/

        _displayNewMonth: function (m, y) {
            this._setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
            return false;
        },

        _setDisplayedMonth: function (m, y, rerender) {
            if (this.model.minDate == undefined || this.model.maxDate == undefined) {
                return;
            }
            var s = new Date(this.model.minDate.getTime());
            s.setDate(1);
            var e = new Date(this.model.maxDate.getTime());
            e.setDate(1);

            var t;
            if ((!m && !y) || (isNaN(m) && isNaN(y))) {
                // no month or year passed - default to current month
                t = this._zeroTime(new Date());
                t.setDate(1);
            } else if (isNaN(m)) {
                // just year passed in - presume we want the displayedMonth
                t = new Date(y, this.displayedMonth, 1);
            } else if (isNaN(y)) {
                // just month passed in - presume we want the displayedYear
                t = new Date(this.displayedYear, m, 1);
            } else {
                // year and month passed in - that's the date we want!
                t = new Date(y, m, 1);
            }
            // check if the desired date is within the range of our defined minDate and maxDate
            if (t.getTime() < s.getTime()) {
                t = s;
            } else if (t.getTime() > e.getTime()) {
                t = e;
            }
            var oldMonth = this.displayedMonth;
            var oldYear = this.displayedYear;
            this.displayedMonth = t.getMonth();
            this.displayedYear = t.getFullYear();
            var tempDate = t;
            if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear)) {
                this._renderCalendar(this, tempDate);
                this._dateValue = tempDate;
                this._trigger("monthChanged", [this.displayedMonth, this.displayedYear]);
            }
        },
        _clearSelected: function () {
            this.numSelected = 0;
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false).parent().removeClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false).parent().parent().removeClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false).parent().removeClass('e-work-week');
            }
            else
                $('td.e-active', this.sfCalendar).removeClass('e-active').attr('aria-selected', false);

        },
        _addSelected: function () {
            if (this.model.highlightSection == "week") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-selected-week');
            }
            else if (this.model.highlightSection == "month") {
                $('td.e-active, this.sfCalendar').parent().parent().addClass('e-selected-month');
            }
            else if (this.model.highlightSection == "workdays") {
                $('td.e-active', this.sfCalendar).parent().addClass('e-work-week');
            }
        },

        _hideOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css("visibility", "hidden");
        },
        _showOtherMonths: function (sfCalendar) {
            $('td.other-month', sfCalendar).css({ 'visibility': 'visible' });
        },
		_otherMonthsVisibility: function () {
            if (this.model.showOtherMonths)
				this._showOtherMonths(this.sfCalendar);
            else
                this._hideOtherMonths(this.sfCalendar);
        },


        /*---------------------Region Rendering simple calender----------------------------------------------------------*/

        _createCalender: function () {
           
           
            ej.buildTag("div.e-header").attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                    .append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-left-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .append(ej.buildTag("span.e-text").text(this._asString(this._calendarDate, this.model.headerFormat)).attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', 'role': 'heading' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {}))
                    .append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-right-arrow').attr({ 'role': 'button' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})))
                    .appendTo(this.sfCalendar);
            this._enableHeader(this._showHeader);
            var table = ej.buildTag("table.e-dp-viewdays", "", {}, { 'cellspacing': 2 }).data("e-table", "data").attr({ 'role': 'grid', 'aria-activedescendant': '' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.sfCalendar.append(table);

            this._renderCalendar(this);
            this._startLevel(this.model.startLevel);
            ej.buildTag("div.e-footer")
                .append(ej.buildTag("span.e-footer-icon"))
                .append(ej.buildTag("span.e-footer-text"))
                .appendTo(this.sfCalendar);
            $('.e-footer-text', this.sfCalendar).html(this.model.buttonText);
            this._enableFooter(this.model.showFooter);
        },
        _enableHeader: function (show) {
            if (show) $(".e-header", this.sfCalendar).show();
            else $(".e-header", this.sfCalendar).hide();
        },
        _enableFooter: function (show) {
            if (show) $('.e-footer', this.sfCalendar).show();
            else $('.e-footer', this.sfCalendar).hide();
        },

        //Date picker navigation arrows enable/disable operations
        _checkArrows: function (min, max) {
            this._preArrowCondition(min, this.model.minDate.getFullYear());
            this._nextArrowCondition(max, this.model.maxDate.getFullYear());
        },
        _checkDateArrows: function () {
            this._preArrowCondition(this._tempMinDate, this.model.minDate);
            this._nextArrowCondition(this._tempMaxDate, this.model.maxDate);
        },
        _preArrowCondition: function (val1, val2) {
            if (val1 <= val2) this.sfCalendar.find(".e-left-arrow").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-left-arrow").removeClass("e-disable").attr({ "aria-disabled": false });
        },
        _nextArrowCondition: function (val1, val2) {
            if (val1 >= val2) this.sfCalendar.find(".e-right-arrow").addClass("e-disable").attr({ "aria-disabled": true });
            else this.sfCalendar.find(".e-right-arrow").removeClass("e-disable").attr({ "aria-disabled": false });
        },

        _previousNextHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            event.preventDefault();
            var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
            var progress = element.hasClass('e-prev') ? true : false;
            this._processNextPrevDate(progress);
        },
        _processNextPrevDate: function (progress) {
            if (progress && this.sfCalendar.find(".e-left-arrow").hasClass("e-disable")) return false;
            else if (!progress && this.sfCalendar.find(".e-right-arrow").hasClass("e-disable")) return false;

            var currentTable = $("table", this.sfCalendar), temp;
            var tClassName = currentTable.get(0).className;
            switch (tClassName) {
                case 'e-dp-viewdays':
                    var step = this.model.stepMonths;
                    if (progress) {
                        if (this._dateValue <= this.model.minDate) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (this._dateValue >= this.model.maxDate) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addMonths(this._dateValue, (progress ? -step : step));
                    if (this._clickedDate)
                        this._calendarDate = this._clickedDate;
                    this._renderCalendar(this, this._dateValue);
                    $('.e-text', this.sfCalendar).text(this._asString(this._dateValue, this.model.headerFormat));
                    this._addFocus('day', this._hoverDate);
                    break;
                case 'e-dp-viewmonths':
                    if (progress) {
                        if (this._dateValue.getFullYear() <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (this._dateValue.getFullYear() >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._addYears(this._dateValue, (progress ? -1 : 1));
                    this._renderCalendar(this, this._dateValue);
                    temp = this._dateValue.getFullYear();
                    $('.e-text', this.sfCalendar).text(temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-months').hide();
                    $($(currentTable).find('.e-datepicker-months')).show();
                    this._addFocus('month', this._hoverMonth);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewyears':
                    if (progress) {
                        if (parseInt($('td.e-year-first:first').text()) <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    } else {
                        if (parseInt($('td.e-year-last:first').prev().text()) >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        }
                    }
                    this._flag = true;
                    this._dateValue.setFullYear(this._dateValue.getFullYear() + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    $('.e-text').text((setYear + 1) + ' - ' + (setYear + 10));
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-years').hide();
                    $($(currentTable).find('.e-datepicker-years')).show();
                    this._addFocus('year', this._hoverYear);
                    this._checkArrows(setYear + 1, setYear + 10);
                    break;
                case 'e-dp-viewallyears':
                    var headYears;
                    if (progress) {
                        headYears = parseFloat($('td.e-allyear-first', currentTable.get(0)).text().split('-')[1]);
                        if (headYears <= this.model.minDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else {
                            this._flag = true;
                        }

                    } else {
                        headYears = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                        if (headYears >= this.model.maxDate.getFullYear()) {
                            this._flag = false;
                            return false;
                        } else
                            this._flag = true;
                    }
                    this._dateValue.setFullYear(headYears + (progress ? -10 : 10));
                    this._renderCalendar(this, this._dateValue);
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 100) + 1);
                    temp = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
                    $('.e-text', this.sfCalendar).text((setYear + 1) + ' - ' + temp);
                    $('tbody,tr.e-week-header', currentTable).not('.e-datepicker-allyears').hide();
                    $($(currentTable).find('.e-datepicker-allyears')).show();
                    this._addFocus('allyear', this._hoverAllYear);
                    this._checkArrows(setYear + 1, temp);
                    break;
            }
            this._layoutChanged();
        },
        _addFocus: function (selection, index) {
            var cls = 'e-current-' + selection;
            if (selection == 'day') cls = 'current-month';
            var items = this.sfCalendar.find('tbody tr td.' + cls);
            var cell = items[index];
            if (!cell) cell = items.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            $(cell).addClass("e-state-hover");
            return $(cell);
        },
        _setFocusByName: function (name, value) {
            var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name), index, cell;
            $(allValues).each(function (i, ele) {
                if (parseInt(ele.innerHTML) == parseInt(value)) {
                    index = i;
                    return;
                }
            });
            cell = allValues[index];
            if (!cell) cell = allValues.last();
            this.sfCalendar.find('table td').removeClass("e-state-hover");
            $(cell).addClass("e-state-hover");
            return index;
        },
        _getHeaderTxt: function () {
            return this.sfCalendar.find(".e-text").text();
        },
        _forwardNavHandler: function (event) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (event) event.preventDefault();

            var currentTable = $("table", this.sfCalendar);
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this, headerTxt;
            switch (tclassName) {
                case 'e-dp-viewdays':
                    this._hoverMonth = this._getDateObj(currentTable.find(".e-state-hover")).getMonth() ||
                                this._getDateObj(currentTable.find(".e-active")).getMonth() || 0;
                    this._startLevel("year");
                    this._addFocus('month', this._hoverMonth);
                    break;
                case 'e-dp-viewmonths':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("decade");
                    this._hoverYear = this._setFocusByName('year', headerTxt);
                    break;
                case 'e-dp-viewyears':
                    headerTxt = this._getHeaderTxt();
                    this._startLevel("century");
                    this._hoverAllYear = this._setFocusByName('allyear', headerTxt);
                    break;
            }
            this._layoutChanged();
        },
        _backwardNavHandler: function (event) {

            if (this.model.readOnly || !this.model.enabled) return false;
            var element;
            if (event.type) {
                event.preventDefault();
                element = $(event.currentTarget);
            }
            else element = event;
            var cTable = $("table", this.sfCalendar), temp;
            var tclassName = $("table", this.sfCalendar).get(0).className, proxy = this;
            switch (tclassName) {
                case 'e-dp-viewmonths':
                    cTable.removeClass("e-dp-viewmonths").addClass("e-dp-viewdays");
                    this._dateValue = new Date(this._dateValue.getFullYear(), parseInt($(element).attr('index')), 1);
                    this._renderCalendar(this, this._dateValue);
                    $('tbody', cTable).not('.e-datepicker-days,.e-week-header').hide();
                    $($(cTable).find('.e-datepicker-days,.e-week-header')).fadeIn("fast", function () {
                        proxy._addFocus('day', proxy._hoverDate || 0);
                    });
                    $('.e-text', this.sfCalendar).text(this._asString(this._dateValue, this.model.headerFormat));
                    break;
                case 'e-dp-viewyears':
                    cTable.removeClass("e-dp-viewyears").addClass("e-dp-viewmonths");
                    this._dateValue.setFullYear(parseInt(element.text()));
                    this._renderCalendar(this, this._dateValue);
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-months').hide();
                    $($(cTable).find('.e-datepicker-months')).fadeIn("fast", function () {
                        proxy._addFocus('month', proxy._hoverMonth || 0);
                    });
                    temp = element.text();
                    $('.e-text', this.sfCalendar).text(temp);
                    this._checkArrows(temp, temp);
                    break;
                case 'e-dp-viewallyears':
                    var headYears = element.text().split('-');
                    cTable.removeClass("e-dp-viewallyears").addClass("e-dp-viewyears");
                    if (headYears[0] < this.model.minDate.getFullYear()) headYears[0] = this.model.minDate.getFullYear().toString();
                    else if (headYears[0] > this.model.maxDate.getFullYear()) headYears[0] = this.model.maxDate.getFullYear().toString();
                    this._renderCalendar(this, (new Date(headYears[0], 0, 1)));
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).fadeIn("fast", function () {
                        proxy._addFocus('year', proxy._hoverYear || 0);
                    });
                    $('.e-text', this.sfCalendar).text(headYears[0] + '-' + headYears[1]);
                    this._checkArrows(headYears[0], headYears[1]);
                    break;
                default:
                    this._clearSelected();
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    element.not('td.other-month').addClass('e-active e-state-hover').attr('aria-selected', true);
                    this._addSelected();
                    //this.sfCalendar.find('table').attr({ 'aria-activedescendant': element[0].id, 'aria-describedby': element[0].id });                  
                    this._hoverDate = this._getDateObj(element).getDate() - 1;
                    this._dateValue = new Date(element.attr('date'));
                    this._clickedDate = new Date(element.attr('date'));
                    break;
            }
            this._layoutChanged();
        },

        _startLevel: function (start) {
            var cTable = $("table", this.sfCalendar);
            var headerText = $(".e-text", this.sfCalendar), s, e;
            switch (start) {
                case "decade":
                    cTable.removeClass("e-dp-viewmonths e-dp-viewdays").addClass("e-dp-viewyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
                    $($(cTable).find('.e-datepicker-years')).show();
                    var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
                    s = setYear + 1;
                    e = setYear + 10;
                    headerText.text(s + ' - ' + e);
                    this._checkArrows(s, e);
                    break;
                case "century":
                    this._renderCalendar(this, this._dateValue);
                    cTable.removeClass("e-dp-viewyears e-dp-viewdays e-dp-viewmonths").addClass("e-dp-viewallyears");
                    $('tbody,tr.e-week-header', cTable).not('.e-datepicker-allyears').hide();
                    $($(cTable).find('.e-datepicker-allyears')).show();
                    s = parseFloat($('td.e-allyear-first', cTable.get(0)).text().split('-')[1]) + 1;
                    e = parseFloat($('td.e-allyear-last', cTable.get(0)).prev().text().split('-')[1]);
                    var headYears = s + '-' + e;
                    headerText.text(headYears);
                    this._checkArrows(s, e);
                    break;
                case "year":
                    cTable.removeClass("e-dp-viewdays").addClass("e-dp-viewmonths");
                    $('tbody,tr.e-week-header', cTable).hide();
                    $($(cTable).find('.e-datepicker-months')).show();
                    s = this._dateValue.getFullYear();
                    headerText.text(s);
                    this._checkArrows(s, s);
                    break;
            }
        },
        _depthLevel: function (depth) {
            var calendarTable = this.sfCalendar;
            switch (depth) {
                case "year":
                    $(calendarTable.find('.e-current-year,.e-current-allyear')).bind("click", $.proxy(this._backwardNavHandler, this));
                    this._on($('.e-current-month', this.sfCalendar), "click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "decade":
                    $(calendarTable.find('.e-current-allyear')).bind("click", $.proxy(this._backwardNavHandler, this));
                    $('.e-current-year', this.sfCalendar).bind("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
                case "century":
                    $(calendarTable.find('.e-current-allyear')).bind("click", $.proxy(this._onDepthSelectHandler, this));
                    break;
            }
        },
        _onDepthSelectHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if ($(e.target).hasClass("e-current-month"))
                this._dateValue = new Date(this._dateValue.setMonth(parseInt(e.target.attributes["index"].value)));
            else if ($(e.target).hasClass("e-current-year"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            else if ($(e.target).hasClass("e-current-allyear"))
                this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
            this._onSetCancelDateHandler(e);
        },
        //Generates datepicker months view
        _datepickerMonths: function (tbody, calendarTable, currentDate) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var month = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'))
                        .addClass('e-current-month e-state-default')
                        .attr({ 'index': month }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .html(this.Date.abbrMonthNames[month++]);
                    if (currentDate.getFullYear() < this.model.minDate.getFullYear() || currentDate.getFullYear() > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate e-disable');
                        td.removeClass('e-current-month');
                    }
                    else if ((currentDate.getFullYear() <= this.model.minDate.getFullYear() && month < this.model.minDate.getMonth() + 1) ||
                        (currentDate.getFullYear() >= this.model.maxDate.getFullYear() && month > this.model.maxDate.getMonth() + 1)) {
                        td.addClass('e-hidedate e-disable');
                        td.removeClass('e-current-month');
                    }
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            var s = currentDate.getFullYear();
            this._checkArrows(s, s);
        },
        //Generates datepicker years view
        _datepickerYears: function (tbody, calendarTable, currentYear) {
            var dc = function (a) {
                return document.createElement(a);
            };
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 10) + 1);
            var years = [];
            for (var j = 0; j < 12; j++) {
                years.push(Year + j);
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(dc('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(dc('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0) {
                        if (parseInt(years[year]) <= this.model.minDate.getFullYear())
                            td.css("visibility", "hidden");
                        else
                            td.css("visibility", "visible");
                        td.addClass('e-year-first e-current-year ');
                    } else if (year == 11) {
                        if (parseInt(years[year]) >= this.model.maxDate.getFullYear()) {
                            td.css("visibility", "hidden");
                        }
                        else {
                            td.css("visibility", "visible");
                        }
                        td.addClass('e-year-last e-current-year ');
                    } else
                        td.addClass('e-current-year e-state-default');
                    if (years[year] < this.model.minDate.getFullYear() || years[year] > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate e-disable');
                        td.removeClass('e-current-year');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
            this._checkArrows(years[0], years[years.length]);
        },
        //Generates datepicker all-years view
        _datepickerAllYears: function (tbody, calendarTable, currentYear) {
            var Year = parseInt(currentYear) - ((parseInt(currentYear) % 100) + 10);
            var headYear = Year;
            var years = [];

            for (var j = 0; j < 12; j++) {
                years.push(parseInt(Year) + "-\n" + parseInt(Year + 9));
                Year = Year + 10;
            }
            var year = 0;
            for (var i = 0; i < 3; i++) {
                var row = $(document.createElement('tr'));
                for (var j = 0; j < 4; j++) {
                    var td = $(document.createElement('td'));
                    td.attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                    if (year == 0) {
                        if (parseInt(years[year].split('-\n')[1]) <= this.model.minDate.getFullYear())
                            td.css("visibility", "hidden");
                        else
                            td.css("visibility", "visible");
                        td.addClass('e-allyear-first e-current-allyear ');
                    } else if (year == 11) {
                        if (parseInt(years[year].split('-\n')[0] - 1) >= this.model.maxDate.getFullYear()) {
                            td.css("visibility", "hidden");
                        } else {
                            td.css("visibility", "visible");
                        }
                        td.addClass('e-allyear-last e-current-allyear ');
                    } else
                        td.addClass('e-current-allyear e-state-default');
                    if (parseInt(years[year].split('-\n')[1]) < this.model.minDate.getFullYear() || parseInt(years[year].split('-\n')[0]) > this.model.maxDate.getFullYear()) {
                        td.addClass('e-hidedate e-disable');
                        td.removeClass('e-current-allyear');
                    }
                    td.html(years[year++]);
                    row.append(td);
                }
                tbody.append(row);
            }
            calendarTable.append(tbody);
        },
        _renderHeader: function (dpObject) {
            var thead = $(document.createElement('thead'));
            if (dpObject.model.dayHeaderFormat != "showheadernone") {
                var headRow = ej.buildTag("tr.e-week-header").attr({ 'role': 'columnheader' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
                for (var i = this.Date.firstDayOfWeek; i < this.Date.firstDayOfWeek + 7; i++) {
                    var weekday = i % 7;
                    var day = this.Date.dayNames[weekday];
                    var headerday;
                    if (dpObject.model.dayHeaderFormat == "showheadershort")
                        headerday = day.substr(0, 3);
                    else if (dpObject.model.dayHeaderFormat == "showheaderlong") headerday = day;
                    else headerday = day.substr(0, 2);
                    var th = ej.buildTag("th", "", {}, { 'scope': 'col', 'abbr': day, 'date': day, 'title': this._formatter(day, "dddd"), 'class': (weekday == 0 || weekday == 6 ? 'e-week-end' : 'e-week-day')}).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                            .html(headerday);
                    headRow.append(th);
                }
            };
            return thead.append(headRow);
        },
        // Render a calendar table into any matched elements.
        _renderCalendar: function (dpObject, date) {
            var proxy = this, today;
            dpObject = $.extend({}, ej.DatePicker.prototype.defaults, dpObject);
            this.Date.firstDayOfWeek = this.model.startDay;
            if (date) today = date;
            else if (this._calendarDate) today = this._calendarDate;
            else today = proxy._zeroTime(new Date());
            var calendarTable = $('table', this.sfCalendar);
            calendarTable.empty();
            // header render section
            calendarTable.append(this._renderHeader(dpObject));
            //all years render section
            var tbody = ej.buildTag('tbody.e-datepicker-allyears', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerAllYears(tbody, calendarTable, today.getFullYear());
            //all years render section
            tbody = ej.buildTag("tbody.e-datepicker-years", "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this._datepickerYears(tbody, calendarTable, today.getFullYear());
            var month = dpObject.model.month == undefined ? today.getMonth() : dpObject.model.month;
            var year = dpObject.model.year || today.getFullYear();
            var currentDate = (new Date(year, month, 1, 0, 0, 0));
            var firstDayOffset = this.Date.firstDayOfWeek - currentDate.getDay() + 1;
            if (firstDayOffset > 1) firstDayOffset -= 7;
            var weeksToDraw = Math.ceil(((-1 * firstDayOffset + 1) + this._getDaysInMonth(currentDate)) / 7);
            this._addDays(currentDate, (firstDayOffset - 1));
            var newdate = proxy._zeroTime(new Date());
            var selected = this._calendarDate;
            tbody = ej.buildTag('tbody.e-datepicker-months', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            // month rennder section
            this._datepickerMonths(tbody, calendarTable, today);
            //days render section
            tbody = ej.buildTag('tbody.e-datepicker-days', "", { 'display': 'none' }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var w = 0, _first = true, _last = true;
            while (w++ < weeksToDraw) {
                var r = jQuery(document.createElement('tr'));
                for (var i = 0; i < 7; i++) {
                    var thisMonth = currentDate.getMonth() == month;
                    var checkSpecialDate = this._isSpecialDates(currentDate);
                    var index = this._getIndex;
                    var d = $(document.createElement('td')).
                        html(checkSpecialDate ? '<span></span><span>' + currentDate.getDate() + '</span>' : currentDate.getDate() + '')
                        .attr({
                            //'id':this._formatter(currentDate, "ddd MMM dd yyyy").replace(/ /g,''),
                            'date': currentDate.toDateString(),
                            'title': (this.model.showTooltip ? (checkSpecialDate && this.model.specialDates[index][this._mapField._tooltip] ? this.model.specialDates[index][this._mapField._tooltip] : this._formatter(currentDate, "ddd MMM dd yyyy")) : ''),
                            'aria-selected': false,
                            'role': 'gridcell'
                        }).attr((this._isIE8) ? { 'unselectable': 'on' } : {})
                        .addClass((thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ') +
                            (this._isWeekend(currentDate) ? (this._ejHLWeekEnd ? 'e-dp-weekend e-week-end ' : (this.model.highlightWeekend ? 'e-week-end ' : '')) : 'e-week-day ') +
                            (checkSpecialDate ? (this.model.specialDates[index][this._mapField._icon] ? 'flag ' + this.model.specialDates[index][this._mapField._icon] + ' ' : 'e-special-day ') : '') +
                            (thisMonth && currentDate.getTime() == newdate.getTime() ? 'today ' : ''));
                    d.find('span:first-of-type ').addClass('e-image ');

                    if (selected.getTime() == currentDate.getTime() && thisMonth) {
                        d.addClass('e-active').attr({ 'aria-selected': true });
                        if (this.model.highlightSection == "week") {
                            r.addClass('e-selected-week');
                        }
                        if (this.model.highlightSection == "month") {
                            tbody.addClass('e-selected-month');
                        }
                        if (this.model.highlightSection == "workdays") {
                            r.addClass('e-work-week');
                        }
                        //this.sfCalendar.find('table').attr({ 'aria-activedescendant': d[0].id, 'aria-describedby': d[0].id });
                        if (!this._hoverDate) {
                            d.addClass('e-state-hover');
                            this._hoverDate = currentDate.getDate() - 1;
                        }
                    }
                    var cond = true;
                    if (currentDate < this.model.minDate || currentDate > this.model.maxDate) {
                        d.addClass('e-hidedate e-disable');
                        d.removeClass('current-month other-month');
                        cond = _last = false;
                    }
                    if (thisMonth) {
                        if (cond && _first) {
                            this._tempMinDate = currentDate;
                            _first = false; _last = true;
                        }
                        if (_last) this._tempMaxDate = currentDate;
                    }
                    this._trigger("beforeDateCreate", { date: currentDate, element: d });
                    r.append(d);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1, 0, 0, 0);
                }
                tbody.append(r);
            }
            calendarTable.append(tbody);
			(this._isIE8 || this._isIE7) ? $(tbody).css("display","block") : $(tbody).fadeIn("fast");
            if (this.model.startLevel === this.model.depthLevel)
                this._depthLevel(this.model.depthLevel);
            else if (this.model.depthLevel != "month" && this.model.depthLevel != "") {
                if (this.model.startLevel == "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else if (this.model.startLevel == "year" && this.model.depthLevel != "decade" && this.model.depthLevel != "century")
                    this._depthLevel(this.model.depthLevel);
                else {
                    this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                    this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
                }
            }
            else {
                this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
                this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
            }

            this._otherMonthsVisibility();
            this._checkDateArrows();
        },

        /*---------------------Keyboard Support----------------------------------------------------------*/

        _keyboardNavigation: function (e) {
            if ((this._isOpen) && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
                e.preventDefault && e.preventDefault();
                var t = { row: null, col: null };

                t.col = this.sfCalendar.find('tbody tr td.e-state-hover').index();
                t.row = this.sfCalendar.find('tbody tr td.e-state-hover').parent().index();

                t.col = (t.col != -1) ? t.col + 1 : this.sfCalendar.find('tbody tr td.e-active').index() + 1;
                t.row = (t.row != -1) ? t.row + 1 : this.sfCalendar.find('tbody tr td.e-active').parent().index() + 1;

                var tableClass = this.sfCalendar.find('table')[0].className, next, rowLength = 3, colLength = 4;
                switch (tableClass) {
                    case "e-dp-viewallyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "yearall", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverAllYear = this.sfCalendar.find('tbody.e-datepicker-allyears tr td').index(next);
                        break;
                    case "e-dp-viewyears":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "year", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverYear = this.sfCalendar.find('tbody.e-datepicker-years tr td').index(next);
                        break;
                    case "e-dp-viewmonths":
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "month", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverMonth = this.sfCalendar.find('tbody.e-datepicker-months tr td').index(next);
                        break;
                    case "e-dp-viewdays":
                        rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length, colLength = 7;
                        next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "day", e.ctrlKey);
                        if (!e.ctrlKey) this._hoverDate = this._getDateObj(next).getDate() - 1;
                        break;
                }
                if (!e.ctrlKey) {
                    this.sfCalendar.find('table td').removeClass("e-state-hover");
                    next.addClass("e-state-hover");
                }
            }
            else if (!this.model.displayInline && (e.keyCode == 27 || e.keyCode == 9)) { this.hide(); e.stopPropagation(); }
            else if (e.altKey && e.keyCode == 40) { this.show(); return false; }
        },
        _changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
            var eleClass, cls = { parent: null, child: null };
            switch (target) {
                case "day": eleClass = "tbody.e-datepicker-days tr td.current-month";
                    cls.parent = ".e-datepicker-days", cls.child = ".current-month";
                    break;
                case "month": eleClass = "tbody.e-datepicker-months tr td.e-current-month";
                    cls.parent = ".e-datepicker-months", cls.child = ".e-current-month";
                    break;
                case "year": eleClass = "tbody.e-datepicker-years tr td.e-current-year";
                    cls.parent = ".e-datepicker-years", cls.child = ".e-current-year";
                    break;
                case "yearall": eleClass = "tbody.e-datepicker-allyears tr td.e-current-allyear";
                    cls.parent = ".e-datepicker-allyears", cls.child = ".e-current-allyear";
                    break;
            }
            if (t.row <= 0 && t.col <= 0)
                return this.sfCalendar.find(eleClass + ':first');
            var cell, proxy = this;
            switch (key) {
                case 36:         // Home Key
                    return this.sfCalendar.find(eleClass + ':first');
                    break;
                case 35:         // End Key
                    return this.sfCalendar.find(eleClass + ':last');
                    break;
                case 38:         // Up Key
                    if (ctrlKey) {
                        this._forwardNavHandler();
                    }
                    else if (t.row > 1) {
                        t.row -= 1;
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
                    }
                    return cell;
                    break;
                case 37:        // Left Key
                    if (ctrlKey) {
                        this._processNextPrevDate(true);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col > 1)
                        t.col -= 1;
                    else if (t.row > 1) {
                        t = { row: t.row - 1, col: cols }
                    }
                    else {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        this._processNextPrevDate(true);
                        cell = this.sfCalendar.find(eleClass + ':last');
                    }
                    return cell;
                    break;
                case 39:         // Right Key
                    if (ctrlKey) {
                        this._processNextPrevDate(false);
                        return this.sfCalendar.find('tbody tr td.e-state-hover');
                    }
                    else if (t.col < cols)
                        t.col += 1;
                    else if (t.row < rows) {
                        t = { row: t.row + 1, col: 1 }
                    }
                    else {
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                        return cell;
                    }
                    cell = this._getCell(t, cls);
                    if (cell.length <= 0) {
                        this._processNextPrevDate(false);
                        cell = this.sfCalendar.find(eleClass + ':first');
                    }
                    return cell;
                    break;
                case 40:        // Down Key
                    if (!ctrlKey) {
                        if (t.row < rows) {
                            t.row += 1;
                        }
                        else {
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                            return cell;
                        }
                        cell = this._getCell(t, cls);
                        if (cell.length <= 0) {
                            this._processNextPrevDate(false);
                            cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
                        }
                        return cell;
                        break;
                    }
                case 13:    // Enter Key
                    var tclassName = $("table", this.sfCalendar).get(0).className;
                    var ele = this._getCell(t, cls);
                    this._backwardNavHandler(ele);
                    if (tclassName == "e-dp-viewdays")
                        this._onSetCancelDateHandler({ type: null, target: ele });
                    break;
            }
            return this._getCell(t, cls);
        },
        _getCell: function (t, cls) {
            return this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child + ':nth-child(' + t.col + ')');
        },
        _getDateObj: function (element) {
            return new Date(element.attr("date"));
        },
        _touchCalendar: function (e) {
            var tableClass = this.sfCalendar.find('table')[0].className;
            switch (e.type) {
                case "pinchin":
                    if (tableClass != "e-dp-viewdays")
                        this._keyboardNavigation({ keyCode: 13 });
                    break;
                case "pinchout":
                    if (tableClass != "e-dp-viewallyears")
                        this._forwardNavHandler();
                    break;
                case "swipeleft":
                    this._processNextPrevDate(false);
                    break;
                case "swiperight":
                    this._processNextPrevDate(true);
                    break;
            }
        },

        /*---------------------client side methods----------------------------------------------------------*/

        /**
        * Opens the datepicker popup  
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datepicker" /&gt;
		* &lt;script&gt;
		* $("#datepicker").ejDatePicker();
		* // Create DatePicker instance
		* var dateObj = $("#datepicker").data("ejDatePicker");
		* dateObj.show(); // shows the datepicker popup
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datepicker" /&gt;
	    * &lt;script&gt;
		* $("#datepicker").ejDatePicker();
	    * // shows the datepicker popup
        * $("#datepicker").ejDatePicker("show");
	    * &lt;/script&gt;
		*@memberof ejDatePicker
		* @instance
        */
        show: function () {
            if (this._isOpen) return false;
            var proxy = this;
            if (!this.model.enabled) return;
            if (!this.model.displayInline) this._setDatePickerPosition();
            this.sfCalendar.attr({ 'aria-hidden': 'false' })
            this.sfCalendar.slideDown(this.model.enableAnimation?200:0, "easeOutQuad", function () {
                proxy._isOpen = true;
                if (!proxy.model.displayInline)
                    $(document).bind("mousedown", $.proxy(proxy._onDocumentClick, proxy));
            });
            if (this.element.val() !== "") this._updateInputVal();

            this._trigger("open", { prevDate: this._prevDate, value: this._formatter(this.model.value, this.model.dateFormat) });

        },

        /**
        * Hides the datepicker popup, if in opended state.
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datepicker" /&gt;
		* &lt;script&gt;
		* $("#datepicker").ejDatePicker();
		* // Create DatePicker instance
		* var dateObj = $("#datepicker").data("ejDatePicker");
		* dateObj.hide(); // hides the datepicker popup
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datepicker" /&gt;
	    * &lt;script&gt;
		* $("#datepicker").ejDatePicker();
	    * // hides the datepicker popup
        * $("#datepicker").ejDatePicker("hide");
	    * &lt;/script&gt;
		*@memberof ejDatePicker
		* @instance
        */
        hide: function () {
            if (!this._isOpen) return false;
            var proxy = this;
            this.sfCalendar.attr({ 'aria-hidden': 'true' })
            this.sfCalendar.slideUp(this.model.enableAnimation?100:0, "easeOutQuad", function () {
                proxy._isOpen = false;
                $(document).unbind("mousedown", $.proxy(proxy._onDocumentClick, proxy));
                proxy._setWaterMark();
            });
            if (this.element.val() != "") this._validateInputVal();

            this._trigger("close", { prevDate: this._prevDate, value: this._formatter(this.model.value, this.model.dateFormat) });
        },

        /**
        * Enables the datepicker control
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datepicker" /&gt;
		* &lt;script&gt;
		* $("#datepicker").ejDatePicker();
		* // Create DatePicker instance
		* var dateObj = $("#datepicker").data("ejDatePicker");
		* dateObj.enable(); // enables the datepicker
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datepicker" /&gt;
	    * &lt;script&gt;
		* $("#datepicker").ejDatePicker();
	    * // enables the datepicker
        * $("#datepicker").ejDatePicker("enable");
	    * &lt;/script&gt;
		*@memberof ejDatePicker
		* @instance
        */
        enable: function () {
            this.model.enabled = true;
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            if (this.dateIcon) this.dateIcon.removeClass('e-disable').attr({ "aria-disabled": false });
            this.element.removeAttr("disabled");
            this.sfCalendar.removeClass('e-disable').attr({ "aria-disabled": false });
        },

        /**
        * Disables the datepicker control
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datepicker" /&gt;
		* &lt;script&gt;
		* $("#datepicker").ejDatePicker();
		* // Create DatePicker instance
		* var dateObj = $("#datepicker").data("ejDatePicker");
		* dateObj.disable(); // disables the datepicker
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datepicker" /&gt;
	    * &lt;script&gt;
		* $("#datepicker").ejDatePicker();
	    * // disables the datepicker
        * $("#datepicker").ejDatePicker("disable");
	    * &lt;/script&gt;
		*@memberof ejDatePicker
		* @instance
        */
        disable: function () {
            this.model.enabled = false;
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            if (this.dateIcon) this.dateIcon.addClass('e-disable').attr({ "aria-disabled": true });
            this.element.attr("disabled", "disabled");
            this.sfCalendar.addClass('e-disable').attr({ "aria-disabled": true });
            if (this._isOpen) {
                if (this.element.is(':input')) this.element.blur();
                if (!this.model.displayInline) this.hide();
            }
        },

        /**
        * Returns the current date value in the datepicker control
		* @return Date value
		* @example 
		* &lt;input type="text" id="datepicker" /&gt;
		* &lt;script&gt;
		* $("#datepicker").ejDatePicker();
		* // Create DatePicker instance
		* var dateObj = $("#datepicker").data("ejDatePicker");
		* dateObj.getValue(); // returns the date value
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datepicker" /&gt;
	    * &lt;script&gt;
	    * // returns the date value
		* $("#datepicker").ejDatePicker();
        * $("#datepicker").ejDatePicker("getValue");
	    * &lt;/script&gt;
		*@memberof ejDatePicker
		* @instance
        */
        getValue: function () { return this._formatter(this.model.value, this.model.dateFormat); },

        /*----------------------------------------region - Event Binding and Handlers---------------------------------------- */

        _wireEvents: function () {
            this._on($('.e-text', this.sfCalendar), "click", $.proxy(this._forwardNavHandler, this));
            this._on($('.e-next', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
            this._on($('.e-prev', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));

            if (this.element.is(":input")) {
                this._on(this.element, "blur", this._onFocusOut);
                this._on(this.element, "focus", this._onFocusIn);
                this._on(this.element, "keyup", this._keyUp);
            }

            if (this.model.showFooter) {
                this._on($('.e-footer', this.sfCalendar), "click", this._setCurrDate);
            }

            this._on(this.sfCalendar, "pinchin pinchout swipeleft swiperight", $.proxy(this._touchCalendar, this));

        },
        _bindDateButton: function () {
            this._on($(this.dateIcon, this.wrapper), "mousedown", $.proxy(this._showDatePopUp, this));
            this.element.unbind("mousedown", $.proxy(this._showDatePopUp, this));
        },
        _bindInputEvent: function () {
            this._off($(this.dateIcon, this.wrapper), "mousedown", $.proxy(this._showDatePopUp, this));
            if (this.element.is(":input") && !this.model.displayInline) {
                this.element.bind("mousedown", $.proxy(this._showDatePopUp, this));
                if(!this._isSupport && !this.model.showPopupButton) 
                	this._on(this.element.next('.e-placeholder'), "mousedown", this._showDatePopUp);
            }
        },

        _onFocusOut: function (e) {
            var calenderDate = this._formatter(this._calendarDate, this.model.dateFormat);
            var currDate = this._formatter(this._currentDay(), this.model.dateFormat);
            this._isFocused = false;
            var val = this._validateValue();
            if (val != null && !this.model.enableStrictMode) {
                if (ej.isNullOrUndefined(this.model.value))
                    this.model.value = this._parseDate(this.element.val());
                this._validateMinMaxDate();
                var _currentVal = this.element.val();
                if (this._preValue != _currentVal) {
                    this._triggerChangeEvent(e);
                }
            }
            else if (val == null && !this.model.enableStrictMode) {
                if (this._preTxtValue == null || this.element.val() == "") {
                    this.element.val("");
                    if (!this._isSupport)
                        this._hiddenInput.css("display","block");
                } else
                    this.element.val(calenderDate);
                this._triggerChangeEvent(e);
            }
            else
                this.isValidState = false;
            this.wrapper.removeClass("e-focus");
            if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && this._preValue != this.element.val()) this._updateInputVal();
            if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) this._validateInputVal();
            this.element.unbind("keydown", $.proxy(this._keyboardNavigation, this));

            this._trigger("focusOut");
            this._checkErrorClass();
        },
        _onFocusIn: function (e) {
            if(this._isSupport) {
            	e.preventDefault(); 
            	this._isFocused = true;
            }
            this.wrapper.removeClass('e-error').attr('aria-invalid', "false");
            this.isValidState = true;
            this.wrapper.addClass("e-focus");
            if (this.model.readOnly)
                return;
			if(!this._isSupport) this._hiddenInput.css("display","none");
            this.element.bind("keydown", $.proxy(this._keyboardNavigation, this));

            this._trigger("focusIn");
        },
        _removeWatermark: function () {
            if (this.element.val() != "" && !this._isSupport)
                this._hiddenInput.css("display","none");
        },
        _keyUp: function (e) {
            var _currentVal = this.element.val();
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            if (this._preValue != _currentVal && this.model.enableStrictMode)
                this._triggerChangeEvent();
        },
        _showhidePopup: function () {
            if (!this.model.enabled) return false;
            if (this._isOpen) {
                if (!this._isFocused && this.element.is(':input')) this.element.focus();
                if (!this._cancelValue) this.hide();
            }
            else {                              // Open
                if (!this._isFocused && this.element.is(':input')) this.element.focus();
                this.show();
            }
        },

        _triggerChangeEvent: function (e) {
            var _currentVal = this.element.val();
            this.model.value = this._parseDate(_currentVal);
            var data = { prevDate: this._prevDate, value: _currentVal };
            if (this._preValue != _currentVal) {
                this._preValue = _currentVal;
                this._trigger("change", data);
            }
			 if(this.model.value)
            this.model.selectedDate = this.model.value.toDateString();
        },

        _triggerSelectEvent: function (e) {
            var val = this.element.val();
            if (this._parseDate(val)) {
                var data = { prevDate: this._prevDate, value: val, isSpecialDay: this._isSpecialDates(this.model.value) };
                if (this._prevDate != val) {
                    if (this._parseDate(data.value) && (this.model.value >= this.model.minDate && this.model.value <= this.model.maxDate)) {
                        this._cancelValue = this._trigger("select", data);
                    }
                }
            }
        },

        _onDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datewidget").is(this.wrapper)) {
                        this._showhidePopup();
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-popup").is(this.popup)) {
                    e.preventDefault();
                }
            }
        },
        _showDatePopUp: function (e) {
        	if(!this._isSupport && !this.model.showPopupButton) {
	            e.preventDefault();
        		this._onFocusIn();
        	} 
            if (this.model.readOnly) return;
            e.preventDefault();
            if (!this.model.enabled && this.model.displayInline) return false;
            this._showhidePopup();
        },
        _layoutChanged: function (e) {
            // this event internally used to observe the layout change in "DateTimePicker" control
            if (this._getInternalEvents) this._trigger("layoutChange");
        },
        _setCurrDate: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e) e.preventDefault();
            var proxy = this;
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._dateValue = this._zeroTime(new Date());
            this.model.value = this._calendarDate = this._dateValue;
            this._setDateValue(this.model.value);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            this._refreshDatepicker();
            this._changeDayClass();
            this._startLevel(this.model.startLevel);
            this._onSetCancelDateHandler(e);
            this._layoutChanged();
        },
        _changeDayClass: function () {
            var className = this.popup.children("table")[0].className;
            if (className != "e-dp-viewdays") {
                this.popup.children("table").removeClass(className).addClass("e-dp-viewdays");
            }
        },
        //handler for setting dates to input field
        _onSetCancelDateHandler: function (e) {
            if (this.model.readOnly || !this.model.enabled) return false;
            if (e && $(e.target).hasClass("e-disable")) return false;
            if (e && e.type) e.preventDefault();
            this.model.value = this._parseDate(this.element.val());
            //sets prev date before value gets change to current selected date
            this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
            this._setDateValue(this._dateValue);
            this._triggerSelectEvent(e);
            this._triggerChangeEvent(e);
            if (this.element.is(':input') && !this.model.displayInline) {
                this._showhidePopup();
            }
            if (e && $(e.target).hasClass("other-month"))
                this._refreshDatepicker();
        },
        _closeCalendar: function (ele) {
            if (!ele || ele == this.element) {
                this.sfCalendar.empty().remove();
            }
        },
        //Error class for input value validation
        _checkErrorClass: function () {
            if (this.wrapper) {
                if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
                else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
            }
        }
    });

    /**
	 * Enum for DatePicker dayHeaderFormat	 
	 * @enum {String}
	 * @global 
	 */
    ej.DatePicker.Header = {
        /**  Shows the day header format in short like Sun, Mon, Tue … */
        ShowHeaderNone: "showheadernone",
        /**  Shows the day header format in min like Su, Mo, Tu … */
        ShowHeaderShort: "showheadershort",
        /**  Shows the day header format in long like Sunday, Monday, Tuesday … */
        ShowHeaderMin: "showheadermin",
        /**  Removes the day header */
        ShowHeaderLong: "showheaderlong"
    };
    /**
    * Enum for DatePicker highlightSection	 
    * @enum {String}
    * @global 
    */
    ej.DatePicker.HighlightSection = {
        /**  Highlight the Current Month. */
        Month: "month",
        /**  Highlight the Current Week. */
        Week: "week",
        /**  Highlight the Current WorkDays. */
        WorkDays: "workdays",
        /** Don't Highlight Anything. */
        None: "none"
    };

    /**
	 * Enum for DatePicker startLevel and depthLevel	 
	 * @enum {String}
	 * @global 
	 */
    ej.DatePicker.Level = {
        /**  Starts from month level view. */
        Month: "month",
        /**  Starts from year level view. */
        Year: "year",
        /**  Starts from year decade level view. */
        Decade: "decade",
        /**  Starts from century level view.  */
        Century: "century"
    };
   

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to craete a Timepicker with the Html input element
* @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @classdesc Time selection with the input field.
	* @class ejTimePicker
	* @requires jQuery
    * @requires jquery.easing.1.3.js
    * @requires jquery.globalize.js
    * @requires globalize.cultures.min.js
	* @requires ej.core.js
	* @requires ej.timepicker.js
	* @requires ej.scroller.js
	
	* @example 
	* &lt;input type="text" id="timepicker" /&gt;<br/>
	* &lt;script&gt;
	* // Create TimePicker
    * $("#timepicker").ejTimePicker();
	* &lt;/script&gt;
	*/

    ej.widget("ejTimePicker", "ej.TimePicker", {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _rootCSS: "e-timepicker",
        _setFirst: false,
        type: "editor",

        // default model
        defaults: {
            /**		
			* Specify the CSS class to timepicker to achieve custom theme.
			* @default ""
			* @type {String}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the CSS class during initialization. 			
			* 	$("#timepicker").ejTimePicker({  cssClass : "gradient-lime" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            cssClass: "",

            /**		
			* Defines the time format displayed in the TimePicker.
			* @default "h:mm tt"
			* @type {String}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the timeFormat during initialization. 			
			* 	$("#timepicker").ejTimePicker({  timeFormat : "h:mm:ss tt" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            timeFormat: "",

            /**		
			* Sets a specified time value on the TimePicker.
			* @default null
			* @type {String | DateObject}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the time value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  value : "5:10 PM" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            value: null,
			/**		
			* Specifies the animation behaviour in timepicker.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the enableAnimation value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  enableAnimation : false });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
			enableAnimation: true,
            /**		
			* Defines the localization locale for TimePicker.
			* @default "en-US"
			* @type {String}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the locale value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  locale : "en-US" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            locale: "en-US",

            /**		
			* Indicates that the timepicker value can only be read.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the readOnly value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  readOnly : false });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            readOnly: false,

            /**		
			* Shows or hides the arrow button from the TimePicker textbox.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the showPopupButton property during initialization. 			
			* 	$("#timepicker").ejTimePicker({  showPopupButton : false });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            showPopupButton: true,
			
			/**		
			* When enableStrictMode true it allows the value outside of the range also, otherwise it internally changed to the correct value.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;
	        * &lt;script&gt;
			* //To set enableStrictMode API during initialization  
			* 	$("#timepicker").ejTimePicker({  enableStrictMode: true });
		    * &lt;/script&gt; 
			 * @memberof ejTimePicker
			* @instance
			*/
            enableStrictMode: false,

            /**		
			* Sets the time interval between the two adjacent time values in the popup.
			* @default 30
			* @type {Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the interval value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  interval : 60 });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            interval: 30,

            /**		
			* Sets the step value for increment an hour value through arrow keys or mouse scroll.
			* @default 1
			* @type {Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the hourInterval value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  hourInterval : 2 });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            hourInterval: 1,

            /**		
			* Sets the step value for increment the minute value through arrow keys or mouse scroll.
			* @default 1
			* @type {Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the minute interval value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  minutesInterval : 5 });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            minutesInterval: 1,

            /**		
			* Sets the step value for increment the seconds value through arrow keys or mouse scroll.
			* @default 1
			* @type {Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the seconds interval value during initialization. 			
			* 	$("#timepicker").ejTimePicker({ timeFormat : "h:mm:ss tt",secondsInterval : 5 });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            secondsInterval: 1,

            /**		
			* Defines the height of the TimePicker textbox.
			* @default ""
			* @type {String | Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the height value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  height : "35" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            height: "",

            /**		
			* Defines the width of the TimePicker textbox.
			* @default ""
			* @type {String | Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the width value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  width : "120" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            width: "",

            /**		
			* Sets the minimum time value to the TimePicker.
			* @default "12:00:00 AM"
			* @type {String}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the minTime value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  minTime : "8:00 AM" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            minTime: "12:00:00 AM",

            /**		
			* Sets the maximum time value to the TimePicker.
			* @default "11:59:59 PM"
			* @type {String}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the maxTime value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  maxTime : "5:00 PM" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            maxTime: "11:59:59 PM",

            /**		
			* Changes the sharped edges into rounded corner for the TimePicker textbox and popup.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the showRoundedCorner value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  showRoundedCorner : true });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            showRoundedCorner: false,

            /**		
			* Sets the TimePicker direction as right to left alignment.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the enableRTL value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  enableRTL : true });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            enableRTL: false,

            /**		
			* Defines the height of the TimePicker popup.
			* @default "191px"
			* @type {String | Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the popupHeight value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  popupHeight : "250px" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            popupHeight: "191px",

            /**		
			* Defines the width of the TimePicker popup.
			* @default "auto"
			* @type {String | Number}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the popupWidth value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  popupWidth : "150px" });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            popupWidth: "auto",

            /**		
			* When this property is set to false, it disables the timepicker control.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the enabled value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  enabled : false });
			* &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			* @instance
			*/
            enabled: true,

            /**		
			* Enables or disables the state maintenance of TimePicker.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
			* // Set the enablePersistence value during initialization. 			
			* 	$("#timepicker").ejTimePicker({  enablePersistence : true });
			* &lt;/script&gt; <br>
			* @memberof ejTimePicker
			* @instance
			*/
            enablePersistence: false,

            /**     
			 * Fires when the timepicker control gets focus.
			 * @event
			 * @name ejTimePicker#focusIn 	
			 * @param {Object} argument Event parameters from timepicker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the timepicker model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.value returns the current time value
			 * @example 
			 * &lt;input type="text" id="timepicker" /&gt;<br/>
			 * &lt;script&gt;
			 * //focusIn event for timepicker
             * $("#timepicker").ejTimePicker({
             *    focusIn: function (args) {}
             * });      
			 * &lt;/script&gt; <br>
			 * @memberof ejTimePicker
			 * @instance
			 */
            focusIn: null,

            /**     
			 * Fires when the timepicker control get lost focus.
			 * @event
			 * @name ejTimePicker#focusOut 	
			 * @param {Object} argument Event parameters from timepicker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the timepicker model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.value returns the current time value
			 * @example 
			 * &lt;input type="text" id="timepicker" /&gt;<br/>
			 * &lt;script&gt;
			 * //focusOut event for timepicker
             * $("#timepicker").ejTimePicker({
             *    focusOut: function (args) {}
             * }); 
			 * &lt;/script&gt; <br>			 
			 * @memberof ejTimePicker
			 * @instance
			 */
            focusOut: null,
			
		    /**     
            * Fires when the time value changed in the TimePicker.
            * @event
            * @name ejTimePicker#beforeChange 	
            * @param {Object} argument Event parameters from timepicker     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the timepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.value returns the modified time value
            * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //change event for timepicker
            * $("#timepicker").ejTimePicker({
            *    beforeChange: function (args) {}
            * });  
			* &lt;/script&gt; <br>			
            * @memberof ejTimePicker
            * @instance
            */
            beforeChange: null,

            /**     
            * Fires when the time value changed in the TimePicker.
            * @event
            * @name ejTimePicker#change 	
            * @param {Object} argument Event parameters from timepicker     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the timepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.value returns the modified time value
            * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //change event for timepicker
            * $("#timepicker").ejTimePicker({
            *    change: function (args) {}
            * });  
			* &lt;/script&gt; <br>			
            * @memberof ejTimePicker
            * @instance
            */
            change: null,

            /**     
            * Fires when the value is selected from the timepicker dropdownlist.
            * @event
            * @name ejTimePicker#select 	
            * @param {Object} argument Event parameters from timepicker     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the timepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.value returns the selected time value
            * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //select event for timepicker
            * $("#timepicker").ejTimePicker({
            *    select: function (args) {}
            * });   
			* &lt;/script&gt; <br>			
            * @memberof ejTimePicker
            * @instance
            */
            select: null,
			/**     
          * Fires when create TimePicker successfully.
          * @event
          * @name ejTimePicker#create 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the TimePicker model
          * @param {string}  argument.type returns the name of the event
          * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //create event for timepicker
            * $("#timepicker").ejTimePicker({
            *    create: function (args) {}
            * });   
			* &lt;/script&gt; <br>					
          * @memberof ejTimePicker
          * @instance
          */
            create: null,
			/**     
          * Fires when the TimePicker is destroyed successfully.
          * @event
          * @name ejTimePicker#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the TimePicker model
          * @param {string}  argument.type returns the name of the event
          * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //destroy event for timepicker
            * $("#timepicker").ejTimePicker({
            *    destroy: function (args) {}
            * });   
			* &lt;/script&gt; <br>					
          * @memberof ejTimePicker
          * @instance
          */
            destroy: null,
            /**     
          * Fires when the TimePicker popup before opened .
          * @event
          * @name ejTimePicker#beforeOpen 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the TimePicker model
          * @param {string}  argument.type returns the name of the event
          * @param {string}  argument.model returns the previous value
          * @param {string}  argument.value returns the time value
          * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //beforeOpen event for timepicker
            * $("#timepicker").ejTimePicker({
            *    beforeOpen: function (args) {}
            * });   
			* &lt;/script&gt; <br>					
          * @memberof ejTimePicker
          * @instance
          */
            beforeOpen: null,
            /**     
          * Fires when the TimePicker popup opened.
          * @event
          * @name ejTimePicker#open 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the TimePicker model
          * @param {string}  argument.type returns the name of the event
          * @param {string}  argument.model returns the previous value
          * @param {string}  argument.value returns the time value
          * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //open event for timepicker
            * $("#timepicker").ejTimePicker({
            *    open: function (args) {}
            * });   
			* &lt;/script&gt; <br>					
          * @memberof ejTimePicker
          * @instance
          */
            open: null,
            /**     
          * Fires when the TimePicker popup closed.
          * @event
          * @name ejTimePicker#close 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the TimePicker model
          * @param {string}  argument.type returns the name of the event
          * @param {string}  argument.model returns the previous value
          * @param {string}  argument.value returns the time value
          * @example 
			* &lt;input type="text" id="timepicker" /&gt;<br/>
			* &lt;script&gt;
            * //close event for timepicker
            * $("#timepicker").ejTimePicker({
            *    close: function (args) {}
            * });   
			* &lt;/script&gt; <br>					
          * @memberof ejTimePicker
          * @instance
          */
            close:null
        },

        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            timeFormat: "string",
            minTime: "string",
            maxTime: "string",
            readOnly: "boolean",
            interval: "number",
            showPopupButton: "boolean",
            locale: "string",
            hourInterval: "number",
            minutesInterval: "number",
            secondsInterval: "number",
            enabled: "boolean",
            enablePersistence: "boolean",
			enableAnimation: "boolean",
			enableStrictMode: "boolean",
        },

        observables: ["value"],
        // public functions

        /**
        * To enable the timepicker  
		* @return jQuery
		* @example 
		* &lt;input type="text" id="timepicker" /&gt;<br/>
		* &lt;script&gt;
		* $("#timepicker").ejTimePicker();
		* // Create TimePicker instance
		* var timeObj = $("#timepicker").data("ejTimePicker");
		* timeObj.enable(); // enables the timepicker
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="timepicker" /&gt;<br/>
	    * &lt;script&gt;
		* $("#timepicker").ejTimePicker();
	    * // enables the timepicker
        * $("#timepicker").ejTimePicker("enable");
	    * &lt;/script&gt;
		*@memberof ejTimePicker
		* @instance
        */
        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.model.enabled = true;
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.model.showPopupButton) {
                    this.timeIcon.removeClass("e-disable").attr("aria-disabled", false);
                    this.popupList.removeClass("e-disable").attr("aria-disabled", false);
                }
            }
        },

        /**
        * To disable the timepicker  
		* @return jQuery
		* @example 
		* &lt;input type="text" id="timepicker" /&gt;<br/>
		* &lt;script&gt;
		* $("#timepicker").ejTimePicker();
		* // Create TimePicker instance
		* var timeObj = $("#timepicker").data("ejTimePicker");
		* timeObj.disable(); // disable the timepicker
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="timepicker" /&gt;<br/>
	    * &lt;script&gt;
		* $("#timepicker").ejTimePicker();
	    * // disable the timepicker
        * $("#timepicker").ejTimePicker("disable");
	    * &lt;/script&gt;
		*@memberof ejTimePicker
		* @instance
        */
        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.element.addClass("e-disable").attr("aria-disabled", true);
                if (this.model.showPopupButton) {
                    this.timeIcon.addClass("e-disable").attr("aria-disabled", true);
                    this.popupList.addClass("e-disable").attr("aria-disabled", true);
                }
                this._hideResult();
            }
        },

        /**
        * returns the current time value
		* @return jQuery
		* @example 
		* &lt;input type="text" id="timepicker" /&gt;<br/>
		* &lt;script&gt;
		* $("#timepicker").ejTimePicker();
		* // Create TimePicker instance
		* var timeObj = $("#timepicker").data("ejTimePicker");
		* timeObj.getValue(); // returns the timepicker value
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="timepicker" /&gt;<br/>
	    * &lt;script&gt;
		* $("#timepicker").ejTimePicker();
	    * // to get the time value
        * $("#timepicker").ejTimePicker("getValue");
	    * &lt;/script&gt;
		*@memberof ejTimePicker
		* @instance
        */
        getValue: function () {
            return this.element.val();
        },

        /**
        * updates the current system time to timepicker
		* @return jQuery
		* @example 
		* &lt;input type="text" id="timepicker" /&gt;<br/>
		* &lt;script&gt;
		* $("#timepicker").ejTimePicker();
		* // Create TimePicker instance
		* var timeObj = $("#timepicker").data("ejTimePicker");
		* timeObj.setCurrentTime(); // updates the current system
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="timepicker" /&gt;<br/>
	    * &lt;script&gt;
		* $("#timepicker").ejTimePicker();
	    * // updates the current system
        * $("#timepicker").ejTimePicker("setCurrentTime");
	    * &lt;/script&gt;
		*@memberof ejTimePicker
		* @instance
        */
        setCurrentTime: function () {
            if (this.model.enabled && !this.model.readOnly) this._setMask();
        },

        _timeFormat: function (format) {
            var validatedformat = this._validateTimeFormat(format);
            if (validatedformat) {
                this.model.timeFormat = validatedformat;
                this.model.value = this._localizeTime(this.getValue());
                this.element.val(this.model.value);
            }
            return validatedformat;
        },

        _getTimeFormat: function () {
            this.model.timeFormat = Globalize.culture(this.model.locale).calendar.patterns.t || "h:mm tt";
            this.seperator = this._getSeperator();
        },

        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            if (this.popupList) this.popupList.removeClass(this.model.cssClass).addClass(skin);
        },

        _localize: function (culture) {
            var currentTime = this._createObject(this.element.val());
            this.model.locale = culture;
            this._getTimeFormat()

            this.model.value = this._localizeTime(currentTime);
            this.element.val(this.model.value);
            this._getAmPm();
        },

        // constructor function
        _init: function () {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
        },

        _setModel: function (options) {
            if (!this.model.enabled && ej.isNullOrUndefined(options["enabled"])) return false;

            var change = false, prev = this.model.value;
            if (!ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"])) {
                if (!ej.isNullOrUndefined(options["minTime"]) && $.trim(options["minTime"]) && this._isValid(options["minTime"])) {
						this.model.minTime = options["minTime"];
						this._validateTimes();
					}
                if (!ej.isNullOrUndefined(options["maxTime"]) && $.trim(options["maxTime"]) && this._isValid(options["maxTime"])) {
						this.model.maxTime = options["maxTime"];
						this._validateTimes();
					}

                this._validateMinMax();
                if (!ej.isNullOrUndefined(options["minTime"])) options["minTime"] = this.model.minTime;
                if (!ej.isNullOrUndefined(options["maxTime"])) options["maxTime"] = this.model.maxTime;

                if (this.model.showPopupButton) this._reRenderDropdown();
                if (options["value"] == undefined) this._enableMask();
                change = true;
            }

            var option;
            for (option in options) {
                switch (option) {
                    case "timeFormat":
                        var newFormat = this._timeFormat(options[option]);
                        options[option] = this.model.timeFormat;
                        if (newFormat) {
                            this.seperator = this._getSeperator();
                            if (this.model.showPopupButton) this._reRenderDropdown();
                        }
                        break;
                    case "locale":
                        this._localize(options[option]);
                        if (this.model.showPopupButton) this._reRenderDropdown();
                        break;
                    case "interval":
                        this.model.interval = options[option];
                        if (this.model.showPopupButton) this._reRenderDropdown();
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "height":
                        this._setHeight(options[option]); break;
                    case "width":
                        this.wrapper.width(options[option]);
                        this._setListWidth();
                        break;
                    case "value":
						if (!this.model.enableStrictMode){
							if (this._isValid(options[option])) {
								this.model.value = options[option];
								this._enableMask();
							}
						}
						else {
							this.model.value = options[option];
							this._enableMask();
						}
                        options[option] = this.model.value;
                        change = true;
                        break;
					case "enableStrictMode":
                        this.model.enableStrictMode = jsondata[key];
                        break;
					case "enableAnimation":{
							this.model.enableAnimation=options[key];
							break;
					}
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "enabled": if (options[option]) this.enable(); else this.disable(); break;
                }
            }
            if (change) this._raiseChangeEvent(prev);
            this._checkErrorClass();
        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-input").removeAttr("ondragstart draggable").val("");
            if (this.popupList) this.popupList.remove();
        },

        _initialize: function () {
            this.target = this.element[0];
            this.timeIcon = null;
            this.popupList = null;
            this.focused = false;
            this.start = 0;
            this.end = 0;
            this.min = null;
            this.max = null;
            this.incomplete = false;
            this.downPosition = 0;
            this._getAmPm();
            this.showDropdown = false;
            this._activeItem = 0;
            this.isValidState = true;
            this._manualFocus = false;
            this._isIE7 = this._checkIE7();
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            // _getInternalEvents is used when TimePicker used as a subcontrol of DateTimePicker 
            this._getInternalEvents = false;
            if (!this.model.timeFormat) this._getTimeFormat();
            else this.seperator = this._getSeperator();
        },

        _render: function () {
            this._renderWrapper();
            this._setDimentions();
            this._renderTimeIcon();
            this._validateTimes();
            this._renderDropdown();
            this._checkProperties();
            this._enableMask();
            this._checkErrorClass();
            this.element.attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "aria-readonly": this.model.readOnly, "value":this.model.value });
			if (this.model.showPopupButton || !ej.isNullOrUndefined(this.popupList))
            this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr("tabindex", "0");
            this.wrapper = ej.buildTag("span.e-timewidget e-widget " + this.model.cssClass + "#" + this.target.id + "_timewidget").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
        },

        _renderTimeIcon: function () {
            if (this.model.showPopupButton) {
                this.timeIcon = ej.buildTag("span.e-select").attr({ 'role': 'button', 'aria-label': 'select' });
                var icon = ej.buildTag("span.e-icon e-time").attr('role', 'presentation');
                if (this._isIE8) {
                    this.timeIcon.attr("unselectable", "on");
                    icon.attr("unselectable", "on");
                }
                this.timeIcon.append(icon);
                this.container.append(this.timeIcon).addClass("e-padding");
                this._on(this.timeIcon, "mousedown", this._timeIconClick);
            }
        },

        _renderDropdown: function () {
			var oldWrapper = $("#" + this.element.context.id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            if (!this.model.showPopupButton || this.popupList) return false;
            this.popupList = ej.buildTag("div.e-time-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_popup", "", {}, { 'tabindex': 0, 'aria-activedescendant': '' });
            this.popup = this.popupList;
            this.ul = ej.buildTag("ul.e-ul");
            if (this._isIE8)
                this.ul.attr("unselectable", "on");
            var scrollDiv = ej.buildTag("div").append(this.ul);
            $('body').append(this.popupList.append(scrollDiv));
            this._renderLiTags();
            this._setListHeight();
            this._setListWidth();
            this.popupList.ejScroller({ height: this.popupList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.css("display", "none");
            this._listSize = this.ul.find("li").size();
        },
        _renderLiTags: function () {
            if (this.model.interval < 1) return false;
            var start, end, timeVal, interval = this.model.interval * 60000
            start = (this.model.minTime) ? this._createObject(this.model.minTime) : this._createObject("12:00:00 AM");
            end = (this.model.maxTime) ? this._createObject(this.model.maxTime) : this._createObject("11:59:59 PM");

            while (this._compareTime(end, start, true)) {
                timeVal = this._localizeTime(start);
                var litag = ej.buildTag("li", timeVal);
                if (this._isIE8)
                    litag.attr("unselectable", "on");
                this.ul.append(litag);
                start = this._createObject(start).getTime() + interval;
            }

            var liTags = this.ul.find("li");
            this._on(liTags, "mouseenter", $.proxy(this._OnMouseEnter, this));
            this._on(liTags, "mouseleave", $.proxy(this._OnMouseLeave, this));
            this._on(liTags, "click", $.proxy(this._OnMouseClick, this));
        },
        _reRenderDropdown: function () {
            this.ul.empty();
            this._renderLiTags();
            this._refreshScroller();
            this._changeActiveEle();
        },
        _refreshScroller: function () {
            var flag = this.popupList.css("display") == "none" ? true : false;
            this.popupList.css("height", "auto");
            this.popupList.find(".e-content, .e-vscroll").removeAttr("style");
            this.popupList.find(".e-vscroll div").removeAttr("style");

            if (flag) this.popupList.css("display", "block");  // For get the height of the popup
            this.scrollerObj.model.height = this.popupList.height();
            this.scrollerObj.model.scrollTop = 0;
            this.scrollerObj.refresh();
            if (this._isIE8) {
                $("#" + this.scrollerObj._id).children('.e-vscroll').children().attr("unselectable", "on");
                $("#" + this.scrollerObj._id).find('.e-vhandle').attr("unselectable", "on");
            }
            if (flag) this.popupList.css("display", "none");
        },

        _setListWidth: function () {
            if (this.popupList) {
                var width = this.model.popupWidth;
                if (width && width != "auto") this.popupList.css({ "width": width });
                else this.popupList.css({ "width": this.wrapper.width() });
            }
        },
        _setListHeight: function () {
            if (this.popupList) this.popupList.css({ "max-height": this.model.popupHeight || "191px" });
            if (this.scrollerObj) {
                this._refreshScroller();
                this._updateScrollTop();
            }
        },
        _updateScrollTop: function () {
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
        },
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupList.css({ "width": this.wrapper.width() });
            this._setListPosition();
            this._refreshScroller();
        },
        _setListPosition: function () {
            var pos = this._getOffset(this.wrapper),
            left = pos.left,
            totalHeight = this.wrapper.outerHeight(),
            border = (totalHeight - this.wrapper.height()) / 2,
            maxZ = this._getZindexPartial();
            if (this.model.enableRTL) left -= this.popupList.outerWidth() - this.wrapper.outerWidth();

            this.popupList.css({
                "left": left + "px",
                "top": pos.top + totalHeight - border + 3 + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },
        _getZindexPartial: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },

        _enableMask: function () {
            if (this.model.value) {
                var flag = false;
                if ((this.model.minTime && this._compareTime(this.model.minTime, this.model.value)) ||
                    this.model.maxTime && this._compareTime(this.model.value, this.model.maxTime))
                    this.isValidState = false;
                else this.isValidState = true;

                this._setTime(this.model.value);
                if (this._getInternalEvents && !this.isValidState) this._trigger("outOfRange");
            }
            else this._setMask();
            this._changeActiveEle();
            this._preVal = this.element.val();
        },
        _setTime: function (time) {
            var modifiedTime = this._localizeTime(time);
            this.element.val(modifiedTime);
            this.model.value = modifiedTime;
        },
        _setMask: function () {
            this.model.value = new Date();
            this._enableMask();
        },

        _validateTimes: function () {
            var validatedformat = this._validateTimeFormat(this.model.timeFormat);
            if (validatedformat) this.model.timeFormat = validatedformat;
            else this.model.timeFormat = "h:mm tt";

            if (!this._isValid(this.model.minTime)) this.model.minTime = "12:00:00 AM";
            if (!this._isValid(this.model.maxTime)) this.model.maxTime = "11:59:59 PM";
			if (!this._isValid(this.model.value)) this.model.value = null;
			if(!this._checkMinMax(this.model.value) && !this.model.enableStrictMode)
				this.model.value = this.model.minTime;
            this._validateMinMax();
        },
        _validateMinMax: function () {
            if (this.model.minTime && this.model.maxTime && this._compareTime(this.model.minTime, this.model.maxTime)) {
                this.model.minTime = this.model.maxTime;
            }
        },
        _checkProperties: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                this.disable();
            }
            else if (this.model.enabled && this.element.hasClass("e-disable")) {
                this.model.enabled = false;
                this.enable();
            }
            this._addProperty();
            this._checkAttributes();
        },
        _addProperty: function () {
            this._setRtl(this.model.enableRTL);
            this._setRoundedCorner(this.model.showRoundedCorner);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                if (this.popupList) this.popupList.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                if (this.popupList) this.popupList.removeClass("e-rtl");
            }
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner-all");
                if (this.popupList) this.popupList.addClass("e-corner-all");
            }
            else {
                this.container.removeClass("e-corner-all");
                if (this.popupList) this.popupList.removeClass("e-corner-all");
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderTimeIcon();
                this._renderDropdown();
                this._addProperty();
            }
            else {
                this.container.removeClass("e-padding");
                this.timeIcon.remove();
                this.popupList.remove();
                this.timeIcon = this.popupList = null;
            }
        },
        _checkAttributes: function () {
            if (!this.element.attr("name"))
                this.element.attr({ "name": this.element[0].id });
            if ('ondragstart' in document.createElement('input'))
                this.element.attr({ "ondragstart": "return false" });
            if ('draggable' in document.createElement('input'))
                this.element.attr({ "draggable": "false" });
        },

        _getAmPm: function () {
            this.ttAM = $.trim(this._localizeMeridian("00:00"));
            this.ttPM = $.trim(this._localizeMeridian("23:00"));
        },

        _setDimentions: function () {
            this._setHeight(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },
        _setHeight: function (height) {
            if (height) this.wrapper.height(height);
            if (this._isIE7) this.element.height(this.container.height());
        },

        _validateTimeFormat: function (timeFormat) {
            var parts = timeFormat.split(" "), format = "";
            if (parts.length == 1 || parts.length == 2) {
                $(parts).each(function (i, part) {
                    format += $.trim(part) + " ";
                });
                return $.trim(format);
            }
            else return null;
        },

        _getSeperator: function () {
            var p = this._getElePlace(), formats = this.model.timeFormat.split(" ")[p.time];
            var regex = new RegExp("^[a-zA-Z0-9]+$");

            for (var i = 0; i < formats.length; i++) {
                if (!regex.test(formats.charAt(i))) return formats.charAt(i);
            }
        },

        _checkInComplete: function () {
            var pos = this._getCaretSelection(), cursor = this._getStartEnd(pos);
            var replace = "00", selected = this._getSelectedValue(cursor), category = this._getCategory(cursor);
            if (pos.end - pos.start == this.element.val().length) this._checkAll();

            if (category && category != "tt") {
                this._findCategoryPosition(category);
                if (selected == "__") {
                    if (category == "h" || category == "hh") replace = "12";
                    this._changeToDefault(replace);
                }
                else if (category.length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.target.value, this.start, this.end, selected));
                }
            }
        },
        _checkAll: function () {
            var i, p = this._getElePlace(), categories = this.model.timeFormat.split(" ")[p.time].split(this.seperator);
            for (i = 0; i < categories.length; i++) {
                this._findCategoryPosition(categories[i]);
                var selected = this._getSelectedValue({ start: this.start, end: this.end });

                if (categories[i].length != 1 && selected.length == 1) {
                    selected = this._changeWhole(selected);
                    this.element.val(this._replaceAt(this.element.val(), this.start, this.end, selected));
                }
            }
        },

        _changeToDefault: function (replace) {
            this.incomplete = true;
            var preVal = this.element[0].value
            this.element[0].value = this._replaceAt(this.target.value, this.start, this.end, replace);
            var timeValue = this._checkExceedRange(this.target.value);
            if (!!timeValue) {
                this._setTime(this.model[timeValue]);
            }
            this._setSelection(this.start, this.end);
            this._raiseChangeEvent(preVal);
        },

        _setSelection: function (start, end) {
            var element = this.element[0];

            if (element.setSelectionRange)
                element.setSelectionRange(start, end);
            else if (element.createTextRange) {
                // For lower version browsers (IE8, IE7 ...)
                element = element.createTextRange();
                element.collapse(true);
                element.moveEnd('character', end);
                element.moveStart('character', start);
                element.select();
            }
        },

        _getSelectedValue: function (cursor) {
            return this.target.value.substring(cursor.start, cursor.end);
        },

        _getMinMax: function (currPart, keydown) {
            if (currPart == "hh" || currPart == "h") {
                this.min = 1; this.max = 11;
                if (keydown) this.max = 12;
            }
            else if (currPart == "HH" || currPart == "H") {
                this.min = 0; this.max = 23;
            }
            else if (currPart == "mm" || currPart == "m" || currPart == "ss" || currPart == "s") {
                this.min = 0; this.max = 59;
            }
        },

        _focusElement: function () {
            this._manualFocus = true;
            this.element.focus();
        },
        _targetFocus: function (e) {
            e.preventDefault();
            this.focused = true;
            this.element.bind('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            this.wrapper.addClass("e-focus").removeClass("e-error").attr('aria-invalid', "false");
            if (!this._manualFocus) {
                this._findCategoryPosition(this._getLeast(false));
                this._setSelection(this.start, this.end);
            }
            this._manualFocus = false;
			this._prevTimeVal = this.element.val();
            this._raiseEvent("focusIn");
        },
        _targetBlur: function () {
            this.focused = false;
            this.element.unbind('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
            this.wrapper.removeClass("e-focus");
            this._checkInComplete();
            if (!this._checkMinMax(this.target.value)){
				if(!this.model.enableStrictMode){
					this.element.val(this._prevTimeVal);
					this.model.value = this._prevTimeVal;
					this.isValidState = true;
				}
				else
					this.isValidState = false;
			}
            else this.isValidState = true;
            this._checkErrorClass();
            this._raiseEvent("focusOut");
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
            else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
        },

        _getCaretSelection: function () {
            var input = this.element[0], start = 0, end = 0;

            if (!isNaN(input.selectionStart)) {
                start = input.selectionStart;
                end = input.selectionEnd;
                return { start: Math.abs(start), end: Math.abs(end) };
            }
            // For lower version browsers (IE8, IE7 ...)
            var bookmark = document.selection.createRange().getBookmark();
            var selection = input.createTextRange();
            selection.moveToBookmark(bookmark);

            var before = input.createTextRange();
            before.collapse(true);
            before.setEndPoint("EndToStart", selection);
            var beforeLength = before.text.length, selLength = selection.text.length;
            return { start: beforeLength, end: beforeLength + selLength };
        },

        _mouseDownOnInput: function (e) {
            if (!this.focused) this._focusElement();
            this.downPosition = this._getCaretSelection();
            this._checkInComplete();
            $(document).bind("mouseup", $.proxy(this._mouseUpOnInput, this));
        },

        _mouseUpOnInput: function (e) {
            e.preventDefault();
            $(document).unbind("mouseup", $.proxy(this._mouseUpOnInput, this));
            var pos = this._getCaretSelection();

            if (this.incomplete) {
                this.incomplete = false;
                pos = this.downPosition;
            }
            var cursor = this._getStartEnd(pos);
            this._setSelection(cursor.start, cursor.end);
        },

        _getCategoryPosition: function (category) {
            var s = 0, e = 0, parts = this.target.value.split(" "), p = this._getElePlace(), sep = this.seperator, valid = false;
            var fParts = this.model.timeFormat.split(" ")[p.time].split(sep);
            var tParts = parts[p.time].split(sep);
            if (fParts.length > tParts.length) return { start: s, end: e, isValid: valid };

            if (category == "tt") {
                if (parts[p.tt] == this.ttAM || parts[p.tt] == this.ttPM) {
                    if (p.tt == 0) s = 0;
                    else s = parts[p.time].length + 1;
                    e = s + parts[p.tt].length;
                    valid = true;
                }
            }
            else {
                if (p.time == 0) s = 0;
                else s = parts[p.tt].length + 1;

                var index = fParts.indexOf(category);
                if (index != -1) {
                    for (var i = 0; i < fParts.length; i++) {
                        e = tParts[i].length + 1;
                        if (i == index) break;
                        else s += e;
                    }
                    e += s - 1;
                    valid = true;
                }
            }
            return { start: s, end: e, isValid: valid };
        },
        _getCategory: function (cursor) {
            var parts = this.model.timeFormat.split(" "), sep = this.seperator;

            var p = this._getElePlace();

            if (cursor.isTT) return parts[p.tt];
            else return parts[p.time].split(sep)[cursor.index];
        },

        _getStartEnd: function (pos) {
            var sep = this.seperator;
            var value = this.element.val(), parts = value.split(" "), s = 0, e = 0, place = tt = null, i, j;

            for (j = 0; j < parts.length; j++) {
                if (parts[j] != this.ttAM && parts[j] != this.ttPM) {
                    var time = parts[j].split(sep), tempS = s, tempE = s + time[0].length;
                    for (i = 0; i < time.length; i++) {
                        e = time[i].length + s;
                        if (pos.start <= e) {
                            place = i;
                            tt = false;
                            j = parts.length;
                            break;
                        }
                        else s += time[i].length + 1;
                    }
                }
                else {
                    if (pos.start <= s + parts[j].length) {
                        e = parts[j].length + s;
                        place = 0;
                        tt = true;
                        j = parts.length;
                        break;
                    }
                    else s += parts[j].length + 1;
                }
            }
            if (place == null) s = tempS, e = tempE, place = 0, tt = false;

            return { start: s, end: e, index: place, isTT: tt };
        },

        _modifyValue: function (isIncrement) {
            this._checkInComplete();
            var pos = this._getCaretSelection(), cursor;
            if (pos.start == pos.end) {
                var cate = this._getLeast(true);
                var position = this._getCategoryPosition(cate);
                cursor = this._getStartEnd(position);
            }
            else cursor = this._getStartEnd(pos);
            this.start = cursor.start; this.end = cursor.end;

            this._changeValue(cursor, isIncrement);
        },

        _keyUpOnInput: function (e) {
            e.preventDefault();
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
                this._raiseChangeEvent();
            }
        },

        _getNextCategory: function (cate, direction) {
            var categories = [], sep = this.seperator;
            var fParts = this.model.timeFormat.split(" ");
            $(fParts).each(function (i, part) {
                if (part == "tt") categories.push(part);
                else {
                    var inner = part.split(sep);
                    categories = inner.concat(categories);
                }
            });
            var index = categories.indexOf(cate), ix;
            if (index != -1) {
                if (direction) {
                    if (index == 0) ix = categories.length - 1;
                    else ix = index - 1;
                }
                else {
                    if (index == categories.length - 1) ix = 0;
                    else ix = index + 1;
                }
                return categories[ix];
            }
            return cate;
        },
        _getElePlace: function () {
            var fParts = this.model.timeFormat.split(" "), time, tt;
            if (fParts[0] == "tt") time = 1, tt = 0;
            else time = 0, tt = 1;
            return { time: time, tt: tt };
        },
        _movePosition: function (pos, direction) {
            var cursor = this._getStartEnd(pos);
            var currCate = this._getCategory(cursor);
            if (!currCate) currCate = this._getLeast(direction);
            var next = this._getNextCategory(currCate, direction);
            var cursor = this._getCategoryPosition(next);

            if (cursor.isValid) {
                this._setSelection(cursor.start, cursor.end);
            }
        },

        _keyDownOnInput: function (e) {
            if (this.model.readOnly && !this._readOnlyKeys(e)) return false;

            var pos, cursor, category, key = e.keyCode;
            // _getInternalEvents is set to true when TimePicker used inside DateTimePicker control
            // in DateTimePicker control it allows Up, Down, Home, End, Tab keys only
            if (this._getInternalEvents && key != 38 && key != 40 && key != 36 && key != 35 && key != 9) return false;
            // Up, Down, Esc
            if (this.showDropdown && key != 38 && key != 40 && key != 27 && !this._readOnlyKeys(e)) return false;
            else if (this.showDropdown && (key == 37 || key == 39)) e.keyCode = (key == 37) ? 38 : 40;

            pos = this._getCaretSelection();
            cursor = this._getStartEnd(pos);
            category = this._getCategory(cursor);

            switch (e.keyCode) {
                case 38:        // Up Key
                    e.preventDefault();
                    if (!this.showDropdown)
                        this._modifyValue(true);
                    else {
                        if (this._activeItem > 1) this._activeItem -= 1;
                        //else this._activeItem = this._listSize;         // For cycle rotation
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 40:        // Down Key
                    e.preventDefault();
                    if (e.altKey && this.model.showPopupButton)
                        this._showhidePopup();
                    else if (!this.showDropdown)
                        this._modifyValue(false);
                    else {
                        if (this._activeItem < this._listSize) this._activeItem += 1;
                        //else this._activeItem = 1;        // For cycle rotation
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 37:        // Left Key
                    e.preventDefault();
                    this._checkInComplete();
                    if (pos.start == pos.end) this._setSelection(pos.start - 1, pos.start - 1);
                    else this._movePosition(pos, true);
                    break;
                case 39:         // Right Key
                    e.preventDefault();
                    this._checkInComplete();
                    if (pos.start == pos.end) this._setSelection(pos.start + 1, pos.start + 1);
                    else this._movePosition(pos, false);
                    break;

                case 36:         // Home Key
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var homecate = this._firstlastVal(true);
                        var hPos = this._getCategoryPosition(homecate);
                        if (hPos.isValid) this._setSelection(hPos.start, hPos.end);
                    }
                    else {
                        this._activeItem = 1;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 35:         // End Key
                    e.preventDefault();
                    if (!this.showDropdown) {
                        var endcate = this._firstlastVal(false);
                        var ePos = this._getCategoryPosition(endcate);
                        if (ePos.isValid) this._setSelection(ePos.start, ePos.end);
                    }
                    else {
                        this._activeItem = this._listSize;
                        this._addListHover();
                        this._selectTimeItem(this._getActiveItem());
                    }
                    break;
                case 9:     // Tab Key
                    if (this._getInternalEvents) break;
                    this._hideResult();
                    var flag = null;
                    if (e.shiftKey && pos.start > 0) flag = true;
                    else if (!e.shiftKey && pos.end < this.element.val().length) flag = false;
                    if (flag != null) {
                        e.preventDefault();
                        this._checkInComplete();
                        this._movePosition(pos, flag);
                    }
                    break;
                case 27:    // Esc Key
                case 13:    // Enter Key
                    this._hideResult();
                    break;
                case 8:          // Backspace Key
                case 46:         // Delete Key
                    e.preventDefault();
                    if (category && category != "tt") {
                        this._findCategoryPosition(category);
                        var _doBackspace = (key == 8 && pos.start != this.start), _doDelete = (key == 46 && pos.end != this.end), len;
                        len = this.end - this.start;

                        if ((pos.start != pos.end || len == 1) && (_doBackspace || _doDelete || pos.start != pos.end)) {
                            var s1 = this.start, s2 = this.end, te;
                            this.element[0].value = this._replaceAt(this.target.value, s1, s2, "__");
                            te = (s2 - s1 != 2) ? s2 + 1 : s2;
                            this._setSelection(s1, te);
                        }
                        else {
                            if (_doBackspace) {
                                this.element[0].value = this._replaceAt(this.target.value, pos.start - 1, pos.start, "");
                                this._setSelection(pos.start - 1, pos.start - 1);
                            }
                            else if (_doDelete) {
                                this.element[0].value = this._replaceAt(this.target.value, pos.end, pos.end + 1, "");
                                this._setSelection(pos.end, pos.end);
                            }
                        }
                    }
                    break;
            }

            var currSelection = this._getSelectedValue(cursor);
            var unicode = e.keyCode ? e.keyCode : e.charCode, actualkey;

            if (e.keyCode > 47 && e.keyCode < 58)
                actualkey = String.fromCharCode(unicode);
            else if (e.keyCode > 95 && e.keyCode < 106)
                actualkey = String.fromCharCode(unicode - 48);

            if (category == "tt" && ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 64 && e.keyCode < 91) || (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106))) {
                e.preventDefault();
                var ttPos = this._getCategoryPosition(category);
                this.start = ttPos.start;
                this.end = ttPos.end;
                this._changeAmPm(currSelection);
                this._raiseChangeEvent();
            }

            if ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
                if (category != "tt") {
                    this._getMinMax(category, true);
                    if (pos.start == pos.end) {
                        this._findCategoryPosition(category);
                        var newVal;
                        if (pos.start == this.start) newVal = actualkey + currSelection;
                        else newVal = currSelection + actualkey;
                        if (newVal.length > 2 || !(Number(newVal) >= this.min && this.max >= Number(newVal)))
                            e.preventDefault();
                    }
                    else if (!(Number(actualkey) >= this.min && this.max >= Number(actualkey)))
                        e.preventDefault();
                }
            }
            else if (!this._allowKeyCodes(e))
				!this.model.enableStrictMode ? e.preventDefault() : e.stopPropagation();
        },

        _allowKeyCodes: function (e) {
            // ctrl + A, C, Z, Y,  Tab, F5, Enter
            if ((e.ctrlKey && (e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 90 || e.keyCode == 89))
                || e.keyCode == 9 || e.keyCode == 116 || e.keyCode == 13)
                return true;
            return false;
        },
        _readOnlyKeys: function (e) {
            // Left, Right, Home, End
            if (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || this._allowKeyCodes(e))
                return true;
            return false;
        },

        _firstlastVal: function (initial) {
            var parts = this.model.timeFormat.split(" "), sep = this.seperator;
            if (initial) {
                if (parts[0] != "tt") return parts[0].split(sep)[0];
                return "tt";
            }
            else {
                if (parts[0] != "tt") return "tt";
                else if (parts[1]) {
                    var lastItem = parts[1].split(sep);
                    return lastItem.length ? lastItem[lastItem.length - 1] : "tt";
                }
                return "tt";
            }
        },

        _mouseWheel: function (event) {
            event.preventDefault();
            if (this.model.readOnly) return false;

            var delta, rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._modifyValue(true);
            else if (delta < 0)
                this._modifyValue(false);
        },

        _addListHover: function () {
            this._addSelected();
            this._updateScrollTop();
        },
        _addSelected: function () {
            this.ul.find("li").removeClass("e-active");
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-active");
        },
        _getActiveItem: function () {
            return $(this.ul.find("li")[this._activeItem - 1]);
        },

        _timeIconClick: function (event) {
            event.preventDefault();
            if (!this.model.enabled || this.model.readOnly || this.ul.find("li").length < 1) return false;
            this._showhidePopup();
            var len = this.element.val().length;
            this._setSelection(len, len);
        },
        _showhidePopup: function () {
            if (this._getInternalEvents) return false;
            if (!this.showDropdown)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            this._raiseEvent("beforeOpen");
            this._refreshPopup();
            if (!this.focused) this._focusElement();
            this._changeActiveEle();
            var proxy = this, sTop = this._vissibleAndCalculateTop();
            this.popupList.slideDown(this.model.enableAnimation?200:0, "easeOutQuad", function () {
                $(document).bind("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
            });
            this.scrollerObj.setModel({ "scrollTop": sTop });
            this.showDropdown = true;
            this._listSize = this.ul.find("li").size();
            $(window).bind("resize", $.proxy(this._OnWindowResize, this));
            this._raiseEvent("open");
        },
        _hideResult: function () {
            if (this.showDropdown && !this._getInternalEvents) {
                this.showDropdown = false;
                this.popupList.slideUp(this.model.enableAnimation?100:0, "easeOutQuad");
                $(document).unbind("mousedown", $.proxy(this._OnDocumentClick, this));
                $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
                this._raiseEvent("close");
            }
        },

        _vissibleAndCalculateTop: function () {
            this.popupList.css({ "display": "block" });  // For get the height of the popup
            var scrollTop = this._calcScrollTop();
            this.popupList.css({ "display": "none" });
            return scrollTop;
        },
        _calcScrollTop: function () {
            var ulH = this.ul.outerHeight(), liH = this.ul.find("li").outerHeight(), index, top;
            index = this.ul.find("li.e-active").index();
            top = (liH * index) - ((this.popupList.outerHeight() - liH) / 2);
            return top;
        },
        _changeActiveEle: function () {
		    if (!this.model.showPopupButton || !this.popupList) return false;
            var elements = this.ul.find("li");
            var currTime = this.element.val(), firstTime = elements.first().html(), index;
            index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
            index = Math.round(index);
            this._activeItem = (index == elements.length) ? index : index + 1;
            if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem)) this._activeItem = 1;
            this._addListHover();
        },

        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-time-popup").is(this.popupList) &&
                !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-timewidget").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-time-popup").is(this.popupList))
                e.preventDefault();
        },
        _OnWindowResize: function (e) {
            this._refreshPopup();
        },

        _OnMouseEnter: function (e) {
            var targetEle = e.target;
            this.ul.find("li").removeClass("e-hover");
            $(targetEle).addClass("e-hover");
        },
        _OnMouseLeave: function (e) {
            this.ul.find("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            e.preventDefault();
            if (this.model.enabled && !this.model.readOnly) {
                this._activeItem = $(e.target).index() + 1;
                this.ul.find("li").attr({ 'tabindex': -1, 'aria-selected': false });
                $(e.target).attr({ 'aria-selected': true, 'tabindex': 0 });
                this._addSelected();
                this._selectTimeItem($(e.target));
            }
            this._showhidePopup();
        },
        _selectTimeItem: function (ele) {
            this._beforeChange(ele);
            var flag = this._raiseChangeEvent();
            if (flag)
                this._trigger("select", { value: this.model.value,prevTime:this._previousValue });
        },

        _findCategoryPosition: function (category) {
            if (category == "least") category = this._getLeast(true);
            var pos = this._getCategoryPosition(category);
            this.start = pos.start;
            this.end = pos.end;
        },

        _getLeast: function (lower) {
            var formats = this.model.timeFormat.split(" "), sep = this.seperator, res = null;
            $(formats).each(function (i, e) {
                if (e != "tt") {
                    var times = e.split(sep);
                    if (lower) res = times[times.length - 1];
                    else res = times[0];
                }
            });
            return res;
        },

        _changeValue: function (cursor, isIncrement) {
            var preVal = this.target.value, currValue, category = this._getCategory(cursor);
            if (!category) return false;
            this._setSelection(this.start, this.end);
            currValue = this.target.value.substring(this.start, this.end);
            if (this._checkMinMax(this.target.value)) {
                if (currValue != this.ttAM && currValue != this.ttPM) {
                    currValue = this._changeCurrentValue(currValue, category, isIncrement);
                    if (category.length != 1) currValue = this._changeWhole(currValue);
                    this._findCategoryPosition(category);
                    this.model.value = this._replaceAt(this.target.value, this.start, this.end, currValue);
                    this.element.val(this.model.value);
                    this.end = this.start + currValue.toString().length;
                    this._setSelection(this.start, this.end);
                }
                else this._changeAmPm(currValue);
            }
            else {
                var timeValue = this._checkExceedRange(this.target.value);
                this._setTime(this.model[timeValue]);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            // Min Max validation
            if (!this._checkMinMax(this.target.value)) {
                this.element.val(preVal);
                this._findCategoryPosition(category);
                this._setSelection(this.start, this.end);
            }
            else this._raiseChangeEvent(preVal);
        },

        _checkMinMax: function (value) {
            var res = this._checkExceedRange(value);
            return !res;
        },
        _checkExceedRange: function (value) {
            if (this.model.minTime && !this._compareTime(value, this.model.minTime, true)) return "minTime";
            if (this.model.maxTime && !this._compareTime(this.model.maxTime, value, true)) return "maxTime";
            return null;
        },

        _changeWhole: function (currValue) {
            return currValue > 9 ? "" + currValue : "0" + currValue;
        },
        _changeAmPm: function (ampm) {
            ampm = ampm == this.ttAM ? this.ttPM : this.ttAM;
            this.element.val(this._replaceAt(this.target.value, this.start, this.end, ampm));
            this._setSelection(this.start, this.end);
        },
        _changeMinute: function (isIncrement) {
            var formats = ["mm", "m"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var minute = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (minute == this.max) {
                        minute = this.min;
                        this._changeHour();
                    }
                    else minute += 1;
                }
                else {
                    if (minute == this.min) {
                        minute = this.max;
                        this._changeHour();
                    }
                    else minute -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) minute = this._changeWhole(minute);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, minute));
            }
        },
        _changeHour: function (isIncrement) {
            var formats = ["hh", "h", "HH", "H"];
            var currFormat = this._getExactFormat(formats);
            if (currFormat) {
                this._findCategoryPosition(currFormat);
                var hour = Number(this.target.value.substring(this.start, this.end));
                this._getMinMax(currFormat);
                if (isIncrement) {
                    if (hour == this.max) {
                        hour += 1;
                        this._changeMeridian();
                    }
                    else if (hour > this.max) hour = this.min;
                    else hour += 1;
                }
                else {
                    if (hour == this.min) hour = this.max + 1;
                    else if (hour > this.max) {
                        hour = this.max;
                        this._changeMeridian();
                    }
                    else hour -= 1;
                }
                this._findCategoryPosition(currFormat);
                if (currFormat.length != 1) hour = this._changeWhole(hour);
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, hour));
            }
        },
        _getExactFormat: function (cate) {
            var tFormat = this.model.timeFormat;
            for (var i = 0; i < cate.length; i++) {
                if (tFormat.indexOf(cate[i]) != -1) return cate[i];
            }
            return null;
        },
        _changeMeridian: function () {
            var start = this.model.timeFormat.indexOf("tt");
            if (start != -1) {
                this._findCategoryPosition("tt");
                var meridian = this.target.value.substring(this.start, this.end);
                meridian = (meridian == this.ttAM) ? this.ttPM : this.ttAM;
                this.element.val(this._replaceAt(this.target.value, this.start, this.end, meridian));
            }
        },
        _changeCurrentValue: function (current, category, isIncrement) {
            current = Number(current);
            var c = category, step = 1, change = true;
            this._getMinMax(c);

            if (c == "hh" || c == "h" || c == "HH" || c == "H") step = this.model.hourInterval;
            else if (c == "mm" || c == "m") step = this.model.minutesInterval;
            else if (c == "ss" || c == "s") step = this.model.secondsInterval;
            if (step <= 0) return current;

            if (isIncrement) {
                if ((c == "hh" || c == "h") && current > this.max) current = this.min - 1 + step;
                else if (current < this.max) current += step;
                else {
                    change = false;
                    if (c != "hh" && c != "h") current = this.min - 1 + step;
                    else current += step;
                    this._changeAdjacent(c, isIncrement);
                }
                if ((c == "hh" || c == "h") && current == this.max + 1)
                    change && this._changeAdjacent(c, isIncrement);
                else if (current > this.max + 1) {
                    current = current - (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
                if ((c != "hh" && c != "h") && current == this.max + 1) {
                    current = this.min;
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            else {
                if ((c != "hh" && c != "h") && current > this.min) current -= step;
                else if ((c == "hh" || c == "h") && current > this.min && current <= this.max) current -= step;
                else if ((c == "hh" || c == "h") && current == this.min) current = this.max + 2 - step;
                else {
                    change = false;
                    current = this.max + 1 - step;
                    this._changeAdjacent(c, isIncrement);
                }
                if (current < this.min) {
                    current = current + (this.max + 1);
                    change && this._changeAdjacent(c, isIncrement);
                }
            }
            return current;
        },
        _changeAdjacent: function (c, isIncrement) {
            if (c == "ss" || c == "s") this._changeMinute(isIncrement);
            else if (c == "mm" || c == "m") this._changeHour(isIncrement);
            else if (c == "hh" || c == "h" || c == "HH" || c == "H") this._changeMeridian();
        },

        _valueChange: function (e) {
            this._raiseChangeEvent();
        },

		_beforeChange:function (ele)
		{
		 if(!this._raiseEvent("beforeChange"))
		 {
		   this.element.val(ele.text());
		 }
		 return true;
		},

        _raiseChangeEvent: function (prev) {
            prev = (prev == undefined) ? this.model.value : prev;
            this._previousValue = prev;
            if (prev == this.target.value) return false;
            if (this._checkMinMax(this.target.value)) this.isValidState = true;
            else this.isValidState = false;
            this.model.value = this.target.value;
            this._raiseEvent("change", { prevTime: this._previousValue });
            return true;
        },
        _raiseEvent: function (name) {           
            return(this._trigger(name, { value: this.model.value, prevTime: this._previousValue }));
        },
        _checkIE7: function () {
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"), version = -1;
                if (re.exec(navigator.userAgent) != null)
                    version = parseFloat(RegExp.$1);
                if (version >= 7 && version < 8) return true;
            }
            return false;
        },
        _replaceAt: function (mainString, from, to, replace) {
            return mainString.substring(0, from) + replace + mainString.substring(to);
        },
        _localizeTime: function (value) {
            return $.trim(Globalize.format(this._createObject(value), this.model.timeFormat, this.model.locale));
        },
        _localizeMeridian: function (value) {
            return $.trim(Globalize.format(this._createObject(value), "tt", this.model.locale));
        },
        _compareTime: function (time1, time2, orEqual) {
            orEqual = (!orEqual) ? false : true;
            if (orEqual) return this._parse(time1) >= this._parse(time2);
            else return this._parse(time1) > this._parse(time2);
        },
        _isValid: function (time) {
            time = this._createObject(time);
            return time && typeof time.getTime === "function" && isFinite(time.getTime());
        },
        _parse: function (time) {
            return Date.parse(this._createObject(time));
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _createObject: function (value) {
            if (typeof value === "string" || value == null) {
                var obj = Globalize.parseDate("1/1/2000 " + value, "d/M/yyyy " + this.model.timeFormat);
                if (!obj) obj = new Date("1/1/2000 " + value);
                return obj;
            }
            else if (typeof value === "number")
                return new Date(value);
            else if (value instanceof Date)
                return this._setEmptyDate(value);
        },

        //-------------------- Event Wire-up -------------------------//
        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "mousedown", this._mouseDownOnInput);
            this._on(this.element, "keydown", this._keyDownOnInput);
            this._on(this.element, "keyup", this._keyUpOnInput);
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html TileView elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/


(function ($, ej, undefined) {
    ej.widget("ejTileBase", "ej.TileBase", {
        defaults: {
            /**		
            * Section for badge specific functionalities.                      
            * @memberof ejTile
            * @member badge {object}
            * @instance
            */

            /**		
            * Section for badge specific functionalities.                      
            * @memberof ejmTile
            * @member badge {object}
            * @instance
            */
            badge: {
                //Web
                /**	
                * Specifies whether to enable badge or not.
                * @default false
                * @member badge->enabled {object}
                * @type {boolean}
                * @alias ejTile#badge->enabled
                * @example 
                * //Set the enabled property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile"  data-ej-imageurl="themes/sample/tile/people.png" data-ej-badge-enabled="true" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set enabled on initialization. 
                * // To set enabled API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", badge: { enabled: true } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the enabled, after initialization:<br>
                * // Get the enabled API value.
                *  $("#tile").ejTile("option", "badge.enabled");			
                * // Set the enabled API
                * $("#tile").ejTile("option", "badge.enabled", true);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies whether to enable badge or not.
                * @default false
                * @member badge->enabled {object}
                * @type {boolean}
                * @alias ejmTile#badge->enabled
                * @example 
                * //Set the enabled property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-imagepath="themes/sample/tile" data-ej-imageurl="people.png" data-ej-badge-enabled="true" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set enabled on initialization. 
                * // To set enabled API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ imageUrl: "people.png", badge: { enabled: true },imagePath:"themes/sample/tile" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the enabled, after initialization:<br>
                * // Get the enabled API value.
                *  $("#tile").ejmTile("option", "badge.enabled");			
                * // Set the enabled API
                * $("#tile").ejmTile("option", "badge.enabled", true);            
                * @memberof ejmTile
                * @instance
                */
                enabled: false,
                //Web
                /**	
                * Sets value for tile badge.
                * @default 1
                * @member badge->value {object}
                * @type {number}
                * @alias ejTile#badge->value
                * @example 
                * //Set the value property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png" data-ej-badge-enabled="true"  data-ej-badge-value="5"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set value on initialization. 
                * // To set value API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", badge: { enabled: true, value:5 }}); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the value, after initialization:<br>
                * // Get the value API value.
                *  $("#tile").ejTile("option", "badge.value");			
                * // Set the value API
                * $("#tile").ejTile("option", "badge.value", 5);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Sets value for tile badge.
                * @default 1
                * @member badge->value {object}
                * @type {number}
                * @alias ejmTile#badge->value
                * @example 
                * //Set the value property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-imagepath="themes/sample/tile" data-ej-imageurl="people.png" data-ej-badge-enabled="true" data-ej-badge-value="5"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set value on initialization. 
                * // To set value API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ imageUrl: "people.png", badge: { enabled: true, value:5 },imagePath:"themes/sample/tile" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the value, after initialization:<br>
                * // Get the value API value.
                *  $("#tile").ejmTile("option", "badge.value");			
                * // Set the value API
                * $("#tile").ejmTile("option", "badge.value", 5);            
                * @memberof ejmTile
                * @instance
                */
                value: 1,
                //Web
                /**	
                * Specifies maximum value for tile badge.
                * @default 100
                * @member badge->maxValue {object}
                * @type {number}
                * @alias ejTile#badge->maxValue
                * @example 
                * //Set the maxValue property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png"  data-ej-badge-enabled="true" data-ej-badge-value="5" data-ej-badge-maxvalue="3" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set maxValue on initialization. 
                * // To set maxValue API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", badge: { enabled: true, value:5, maxValue:3 } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the maxValue, after initialization:<br>
                * // Get the maxValue API value.
                *  $("#tile").ejTile("option", "badge.maxValue");			
                * // Set the maxValue API
                * $("#tile").ejTile("option", "badge.maxValue", 3);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies maximum value for tile badge.
                * @default 100
                * @member badge->maxValue {object}
                * @type {number}
                * @alias ejmTile#badge->maxValue
                * @example 
                * //Set the maxValue property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-badge-enabled="true" data-ej-badge-value="5" data-ej-badge-maxvalue="3" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set maxValue on initialization. 
                * // To set maxValue API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ imageUrl: "people.png", badge: { enabled: true, value:5, maxValue:3 },imagePath:"themes/sample/tile"}); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the maxValue, after initialization:<br>
                * // Get the maxValue API value.
                *  $("#tile").ejmTile("option", "badge.maxValue");			
                * // Set the maxValue API
                * $("#tile").ejmTile("option", "badge.maxValue", 3);            
                * @memberof ejmTile
                * @instance
                */
                maxValue: 100,
                //Web
                /**	
                * Specifies minimum value for tile badge.
                * @default 1
                * @member badge->minValue {object}
                * @type {number}
                * @alias ejTile#badge->minValue
                * @example 
                * //Set the minValue property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png"  data-ej-badge-enabled="true" data-ej-badge-value="3" data-ej-badge-minvalue="5"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set minValue on initialization. 
                * // To set minValue API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", badge: { enabled: true, value:3, minValue:5 }}); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the minValue, after initialization:<br>
                * // Get the minValue API value.
                *  $("#tile").ejTile("option", "badge.minValue");			
                * // Set the minValue API
                * $("#tile").ejTile("option", "badge.minValue", 5);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies minimum value for tile badge.
                * @default 1
                * @member badge->minValue {object}
                * @type {number}
                * @alias ejmTile#badge->minValue
                * @example 
                * //Set the minValue property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-badge-enabled="true" data-ej-badge-value="3" data-ej-badge-minvalue="5"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set minValue on initialization. 
                * // To set minValue API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ imageUrl: "people.png", badge: { enabled: true, value:3, minValue:5 } ,imagePath="themes/sample/tile"}); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the minValue, after initialization:<br>
                * // Get the minValue API value.
                *  $("#tile").ejmTile("option", "badge.minValue");			
                * // Set the minValue API
                * $("#tile").ejmTile("option", "badge.minValue", 5);            
                * @memberof ejmTile
                * @instance
                */
                minValue: 1,
                //Web
                /**	
                * Specifies text instead of number for tile badge.
                * @default null
                * @member badge->text {object}
                * @type {string}
                * @alias ejTile#badge->text
                * @example 
                * //Set the text property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png"  data-ej-badge-enabled="true" data-ej-badge-text="ten"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set text on initialization. 
                * // To set text API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({imageUrl: "themes/sample/tile/people.png", badge: { enabled: true, text:"ten" } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the badge text, after initialization:<br>
                * // Get the badge text API value.
                *  $("#tile").ejTile("option", "badge.text");			
                * // Set the badge text API
                * $("#tile").ejTile("option", "badge.text", "ten");            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies text instead of number for tile badge.
                * @default null
                * @member badge->text {object}
                * @type {string}
                * @alias ejmTile#badge->text
                * @example 
                * //Set the text property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-badge-enabled="true" data-ej-badge-text="ten"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set text on initialization. 
                * // To set text API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ imageUrl: "people.png", badge: { enabled: true, text:"ten" } ,imagePath:"themes/sample/tile"}); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the badge text, after initialization:<br>
                * // Get the badge text API value.
                *  $("#tile").ejmTile("option", "badge.text");			
                * // Set the badge text API
                * $("#tile").ejmTile("option", "badge.text", "ten");            
                * @memberof ejmTile
                * @instance
                */
                text: null
            },
            //Web
            /**		
            * Specifies the tile caption in outside template content.
            * @default null
            * @member captionTemplateId {object}
            * @type {string}
            * @example 
            * //Set the captionTemplateId property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png" data-ej-captiontemplateid="sample" &gt;
            * &lt;/div&gt; 
            * &lt;div id="sample" &gt; Settings
            * &lt;/div&gt;
            * @example 
            * // Set captionTemplateId on initialization. 
            * // To set captionTemplateId API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;div id="sample" &gt; Settings
            * &lt;/div&gt;
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", captionTemplateId: "sample"}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the captionTemplateId, after initialization:<br>
            * // Get the captionTemplateId API value.
            *  $("#tile").ejTile("option", "captionTemplateId");			
            * // Set the captionTemplateId API
            * $("#tile").ejTile("option", "captionTemplateId", "sample");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies the tile text in outside template content.
            * @default null
            * @member captionTemplateId {object}
            * @type {string}
            * @example 
            * //Set the captionTemplateId property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-captiontemplateid="sample" &gt;
            * &lt;/div&gt; 
            * &lt;div id="sample" &gt; Settings
            * &lt;/div&gt;
            * @example 
            * // Set captionTemplateId on initialization. 
            * // To set captionTemplateId API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;div id="sample" &gt; Settings
            * &lt;/div&gt;
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", captionTemplateId: "sample",imagePath:"themes/sample/tile"}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the captionTemplateId, after initialization:<br>
            * // Get the captionTemplateId API value.
            *  $("#tile").ejmTile("option", "captionTemplateId");			
            * // Set the captionTemplateId API
            * $("#tile").ejmTile("option", "captionTemplateId", "sample");            
            * @memberof ejmTile
            * @instance
            */
            captionTemplateId: null,
            //Web
            /**		
            * Saves current model value to browser cookies for state maintains. While refreshing the page retains the model value applies from browser cookies.
            * @default false
            * @member enablePersistence {object}
            * @type {boolean}
            * @example 
            * //Set the enablePersistence property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile"  data-ej-imageurl="themes/sample/tile/people.png"  data-ej-enablepersistence="true"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set enablePersistence on initialization. 
            * // To set enablePersistence API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", enablePersistence:true}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the enablePersistence, after initialization:<br>
            * // Get the enablePersistence API value.
            *  $("#tile").ejTile("option", "enablePersistence");			
            * // Set the enablePersistence API
            * $("#tile").ejTile("option", "enablePersistence", true);            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Saves current model value to browser cookies for state maintains. While refreshing the page retains the model value applies from browser cookies.
            * @default false
            * @member enablePersistence {object}
            * @type {boolean}
            * @example 
            * //Set the enablePersistence property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile"  data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-enablepersistence="true"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set enablePersistence on initialization. 
            * // To set enablePersistence API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", enablePersistence:true,imagePath:"themes/sample/tile" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the enablePersistence, after initialization:<br>
            * // Get the enablePersistence API value.
            *  $("#tile").ejmTile("option", "enablePersistence");			
            * // Set the enablePersistence API
            * $("#tile").ejmTile("option", "enablePersistence", true);            
            * @memberof ejmTile
            * @instance
            */
            enablePersistence: false,
            //Web
            /**		
            * Specifies Tile imageclass, using this property we can give images for each tile through css classes.
            * @default null
            * @member imageClass {object}
            * @type {string}
            * @example 
            * //Set the imageClass property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageclass="sample"&gt;
            * &lt;/div&gt;  
            *&lt;style&gt;
            *.sample
            *{
            * background-image:url("themes/sample/tile/people.png");
            *}
            *&lt;/style&gt;
            * @example 
            * // Set imageClass on initialization. 
            * // To set imageClass API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageClass: "sample"}); 
            * &lt;/script&gt;
            * &lt;style&gt;
            * .sample
            * {
            * background-image:url("themes/sample/tile/people.png");
            * }
            * &lt;/style&gt;
            * @example 
            * //Get or set the imageClass, after initialization:<br>
            * // Get the imageClass API value.
            *  $("#tile").ejTile("option", "imageClass");			
            * // Set the imageClass API
            * $("#tile").ejTile("option", "imageClass", "sample");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies Tile imageclass, using this property we can give images for each tile through css classes.
            * @default null
            * @member imageClass {object}
            * @type {string}
            * @example 
            * //Set the imageClass property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageclass="sample"&gt;
            * &lt;/div&gt;  
            * &lt;style&gt;
            * .sample
            * {
            * background-image:url("themes/sample/tile/ios7/people.png");
            * }
            * &lt;/style&gt;
            * @example 
            * // Set imageClass on initialization. 
            * // To set imageClass API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageClass: "sample" }); 
            * &lt;/script&gt;
            * &lt;style&gt;
            * .sample
            * {
            * background-image:url("themes/sample/tile/ios7/people.png");
            * }
            * &lt;/style&gt;
            * @example 
            * //Get or set the imageClass, after initialization:<br>
            * // Get the imageClass API value.
            *  $("#tile").ejmTile("option", "imageClass");			
            * // Set the imageClass API
            * $("#tile").ejmTile("option", "imageClass", "sample");            
            * @memberof ejmTile
            * @instance
            */
            imageClass: null,
            //Web
            /**		
            * Specifies the position of tile image.
            * @default "center"
            * @member imagePosition {object}
            * @type {enum}
            * @example 
            * //Set the imagePosition property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png"   data-ej-imageposition="right"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set imagePosition on initialization. 
            * // To set imagePosition API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", imagePosition: "right"}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the imagePosition, after initialization:<br>
            * // Get the imagePosition API value.
            *  $("#tile").ejTile("option", "imagePosition");			
            * // Set the imagePosition API
            * $("#tile").ejTile("option", "imagePosition", "right");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies the position of tile image.
            * @default "center"
            * @member imagePosition {object}
            * @type {enum}
            * @example 
            * //Set the imagePosition property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-imageposition="right"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set imagePosition on initialization. 
            * // To set imagePosition API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", imagePosition: "right" ,imagePath:"themes/sample/tile"}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the imagePosition, after initialization:<br>
            * // Get the imagePosition API value.
            *  $("#tile").ejmTile("option", "imagePosition");			
            * // Set the imagePosition API
            * $("#tile").ejmTile("option", "imagePosition", "right");            
            * @memberof ejmTile
            * @instance
            */
            imagePosition: "center",
            //Web
            /**		
            * Specifies the tile image in outside template content.
            * @default null
            * @member imageTemplateId {object}
            * @type {string}
            * @example 
            * //Set the imageTemplateId property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imagetemplateid="sample" &gt;
            * &lt;/div&gt; 
            * &lt;div id="sample" style="background-image: url('themes/sample/tile/ios7/people.png');height:100%;width:100%;"&gt;
            * &lt;/div&gt;
            * @example 
            * // Set imageTemplateId on initialization. 
            * // To set imageTemplateId API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;div id="sample" style="background-image: url('themes/sample/tile/people.png');height:100%;width:100%;"&gt;
            * &lt;/div&gt;
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageTemplateId: "sample" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the imageTemplateId, after initialization:<br>
            * // Get the imageTemplateId API value.
            *  $("#tile").ejTile("option", "imageTemplateId");			
            * // Set the imageTemplateId API
            * $("#tile").ejTile("option", "imageTemplateId", "sample");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies the tile image in outside template content.
            * @default null
            * @member imageTemplateId {object}
            * @type {string}
            * @example 
            * //Set the imageTemplateId property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imagetemplateid="sample" &gt;
            * &lt;/div&gt; 
            * &lt;div id="sample" style="background-image: url('themes/sample/tile/ios7/people.png');height:100%;width:100%;"&gt;
            * &lt;/div&gt;
            * @example 
            * // Set imageTemplateId on initialization. 
            * // To set imageTemplateId API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;div id="sample" style="background-image: url('themes/sample/tile/ios7/people.png');height:100%;width:100%;"&gt;
            * &lt;/div&gt;
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageTemplateId: "sample" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the imageTemplateId, after initialization:<br>
            * // Get the imageTemplateId API value.
            *  $("#tile").ejmTile("option", "imageTemplateId");			
            * // Set the imageTemplateId API
            * $("#tile").ejmTile("option", "imageTemplateId", "sample");            
            * @memberof ejmTile
            * @instance
            */
            imageTemplateId: null,
            //Web
            /**		
            * Specifies the file name of tile image.
            * @default null
            * @member imageUrl {object}
            * @type {string}
            * @example 
            * //Set the imageUrl property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set imageUrl on initialization. 
            * // To set imageUrl API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png"}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the imageUrl, after initialization:<br>
            * // Get the imageUrl API value.
            *  $("#tile").ejTile("option", "imageUrl");			
            * // Set the imageUrl API
            * $("#tile").ejTile("option", "imageUrl", "themes/sample/tile/people.png");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies the file name of tile image.
            * @default null
            * @member imageUrl {object}
            * @type {string}
            * @example 
            * //Set the imageUrl property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imagepath="themes/sample/tile" data-ej-imageurl="people.png"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set imageUrl on initialization. 
            * // To set imageUrl API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png",imagePath:"themes/sample/tile" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the imageUrl, after initialization:<br>
            * // Get the imageUrl API value.
            *  $("#tile").ejmTile("option", "imageUrl");			
            * // Set the imageUrl API
            * $("#tile").ejmTile("option", "imageUrl", "people.png");            
            * @memberof ejmTile
            * @instance
            */
            imageUrl: null,
            /**		
            * Section for livetile specific functionalities.                      
            * @memberof ejTile
            * @member livetile {object}
            * @instance
            */

            /**		
            * Section for livetile specific functionalities.                      
            * @memberof ejmTile
            * @member livetile {object}
            * @instance
            */
            liveTile: {
                //Web
                /**	
                * Specifies whether to enable livetile or not.
                * @default false
                * @member livetile->enabled {object}
                * @type {boolean}
                * @alias ejTile#livetile->enabled
                * @example 
                * //Set the liveTile enabled property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-rendermode="windows" data-ej-livetile-imageurl="['themes/sample/tile/people.png','themes/sample/tile/sports.png']" data-ej-livetile-enabled="true" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile enabled on initialization. 
                * // To set liveTile enabled API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ renderMode:"windows", liveTile: { enabled: true, imageUrl:['themes/sample/tile/people.png','themes/sample/tile/sports.png'] } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile enabled, after initialization:<br>
                * // Get the liveTile enabled API value.
                *  $("#tile").ejTile("option", "liveTile.enabled");			
                * // Set the liveTile enabled API
                * $("#tile").ejTile("option", "liveTile.enabled", true);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies whether to enable livetile or not.
                * @default false
                * @member livetile->enabled {object}
                * @type {boolean}
                * @alias ejmTile#livetile->enabled
                * @example 
                * //Set the liveTile enabled property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-rendermode="windows" data-ej-imagepath="themes/sample/tile" data-ej-livetile-imageurl="['people.png','sports.png']" data-ej-livetile-enabled="true" data-ej-backgroundcolor="blue" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile enabled on initialization. 
                * // To set liveTile enabled API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ renderMode:"windows", liveTile: { enabled: true, imageUrl:['people.png','sports.png'] },imagePath:"themes/sample/tile",backgroundColor:"blue" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile enabled, after initialization:<br>
                * // Get the liveTile enabled API value.
                *  $("#tile").ejmTile("option", "liveTile.enabled");			
                * // Set the liveTile enabled API
                * $("#tile").ejmTile("option", "liveTile.enabled", true);            
                * @memberof ejmTile
                * @instance
                */
                enabled: false,
                //Web
                /**	
                * Specifies liveTile images in css classes.
                * @default null
                * @member livetile->imageClass {object}
                * @type {string}
                * @alias ejTile#liveTile->imageClass
                * @example 
                * //Set the liveTile imageClass property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-rendermode="windows"  data-ej-livetile-imageclass="['img1','img2','img3']" data-ej-livetile-enabled="true" &gt;
                * &lt;/div&gt;  
                * &lt;style&gt;
                * .img1
                * {
                * background-image:url("themes/sample/tile/ios7/people.png");
                * }
                * .img2
                * {
                * background-image:url("themes/sample/tile/ios7/sports.png");
                * }
                * .img3
                * {
                * background-image:url("themes/sample/tile/ios7/people_1.png");
                * }
                * &lt;/style&gt;
                * @example 
                * // Set liveTile imageClass on initialization. 
                * // To set liveTile imageClass API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ renderMode:"windows", liveTile: { enabled: true, imageClass: ['img1','img2','img3'] } }); 
                * &lt;/script&gt;
                * &lt;style&gt;
                * .img1
                * {
                * background-image:url("themes/sample/tile/people.png");
                * }
                * .img2
                * {
                * background-image:url("themes/sample/tile/sports.png");
                * }
                * .img3
                * {
                * background-image:url("themes/sample/tile/people_1.png");
                * }
                * &lt;/style&gt;
                * @example 
                * //Get or set the liveTile imageClass, after initialization:<br>
                * // Get the liveTile imageClass API value.
                *  $("#tile").ejTile("option", "liveTile.imageClass");			
                * // Set the liveTile imageClass API
                * $("#tile").ejTile("option", "liveTile.imageClass", ['img1','img2','img3']);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies liveTile images in css classes.
                * @default null
                * @member livetile->imageClass {object}
                * @type {string}
                * @alias ejmTile#liveTile->imageClass
                * @example 
                * //Set the liveTile imageClass property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-rendermode="windows" data-ej-livetile-imageclass="['img1','img2','img3']" data-ej-livetile-enabled="true" data-ej-backgroundcolor="blue" &gt;
                * &lt;/div&gt;  
                * &lt;style&gt;
                * .img1
                * {
                * background-image:url("themes/sample/tile/windows/people.png");
                * }
                * .img2
                * {
                * background-image:url("themes/sample/tile/windows/sports.png");
                * }
                * .img3
                * {
                * background-image:url("themes/sample/tile/windows/people_1.png");
                * }
                * &lt;/style&gt;
                * @example 
                * // Set liveTile imageClass on initialization. 
                * // To set liveTile imageClass API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ renderMode:"windows", liveTile: { enabled: true, imageClass: ['img1','img2','img3'] },backgroundColor:"blue" }); 
                * &lt;/script&gt;
                * &lt;style&gt;
                * .img1
                * {
                * background-image:url("themes/sample/tile/windows/people.png");
                * }
                * .img2
                * {
                * background-image:url("themes/sample/tile/windows/sports.png");
                * }
                * .img3
                * {
                * background-image:url("themes/sample/tile/windows/people_1.png");
                * }
                * &lt;/style&gt;
                * @example 
                * //Get or set the liveTile imageClass, after initialization:<br>
                * // Get the liveTile imageClass API value.
                *  $("#tile").ejmTile("option", "liveTile.imageClass");			
                * // Set the liveTile imageClass API
                * $("#tile").ejmTile("option", "liveTile.imageClass", ['img1','img2','img3']);            
                * @memberof ejmTile
                * @instance
                */
                imageClass: null,
                //Web
                /**	
                * Specifies liveTile images in templates.
                * @default null
                * @member livetile->imageTemplateId {object}
                * @type {string}
                * @alias ejTile#liveTile->imageTemplateId
                * @example 
                * //Set the liveTile imageTemplateId property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-rendermode="windows" data-ej-livetile-imagetemplateid="['img1','img2','img3']" data-ej-livetile-enabled="true" &gt;
                * &lt;/div&gt;
                * &lt;div id="img1" style="background-image: url('themes/sample/tile/people.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img2" style="background-image: url('themes/sample/tile/sports.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img3" style="background-image: url('themes/sample/tile/settings.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;                
                * @example 
                * // Set liveTile imageTemplateId on initialization. 
                * // To set liveTile imageTemplateId API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;div id="img1" style="background-image: url('themes/sample/tile/people.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img2" style="background-image: url('themes/sample/tile/sports.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img3" style="background-image: url('themes/sample/tile/settings.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ renderMode:"windows", liveTile: { enabled: true, imageTemplateId: ['img1','img2','img3'] } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile imageTemplateId, after initialization:<br>
                * // Get the liveTile imageTemplateId API value.
                *  $("#tile").ejTile("option", "liveTile.imageTemplateId");			
                * // Set the liveTile imageTemplateId API
                * $("#tile").ejTile("option", "liveTile.imageTemplateId", ['img1','img2','img3']);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies liveTile images in templates.
                * @default null
                * @member livetile->imageTemplateId {object}
                * @type {string}
                * @alias ejmTile#liveTile->imageTemplateId
                * @example 
                * //Set the liveTile imageTemplateId property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-rendermode="windows" data-ej-livetile-imagetemplateid="['img1','img2','img3']" data-ej-livetile-enabled="true" data-ej-backgroundcolor="blue" &gt;
                * &lt;/div&gt;
                * &lt;div id="img1" style="background-image: url('themes/sample/tile/windows/people.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img2" style="background-image: url('themes/sample/tile/windows/sports.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img3" style="background-image: url('themes/sample/tile/windows/settings.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;                
                * @example 
                * // Set liveTile imageTemplateId on initialization. 
                * // To set liveTile imageTemplateId API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;div id="img1" style="background-image: url('themes/sample/tile/windows/people.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img2" style="background-image: url('themes/sample/tile/windows/sports.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;div id="img3" style="background-image: url('themes/sample/tile/windows/settings.png');height:100%;width:100%;"&gt;
                * &lt;/div&gt;
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ renderMode:"windows", liveTile: { enabled: true, imageTemplateId: ['img1','img2','img3'] },backgroundColor:"blue" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile imageTemplateId, after initialization:<br>
                * // Get the liveTile imageTemplateId API value.
                *  $("#tile").ejmTile("option", "liveTile.imageTemplateId");			
                * // Set the liveTile imageTemplateId API
                * $("#tile").ejmTile("option", "liveTile.imageTemplateId", ['img1','img2','img3']);            
                * @memberof ejmTile
                * @instance
                */
                imageTemplateId: null,
                //Web
                /**	
                * Specifies liveTile images in css classes.
                * @default null
                * @member livetile->imageUrl {object}
                * @type {string}
                * @alias ejTile#liveTile->imageUrl
                * @example 
                * //Set the liveTile imageUrl property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-rendermode="windows" data-ej-livetile-enabled="true" data-ej-livetile-imageurl="['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png']" &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile imageUrl on initialization. 
                * // To set liveTile imageUrl API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ renderMode: "windows", livetile: { enabled: true, imageUrl: ['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png'] } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile imageUrl, after initialization:<br>
                * // Get the liveTile imageUrl API value.
                *  $("#tile").ejTile("option", "liveTile.imageUrl");			
                * // Set the liveTile imageUrl API
                * $("#tile").ejTile("option", "liveTile.imageUrl", ['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png']);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies liveTile images in css classes.
                * @default null
                * @member livetile->imageUrl {object}
                * @type {string}
                * @alias ejmTile#liveTile->imageUrl
                * @example 
                * //Set the liveTile imageUrl property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-backgroundcolor="blue" data-ej-rendermode="windows" data-ej-livetile-enabled="true" data-ej-imagepath="themes/sample/tile" data-ej-livetile-imageurl="['people.png','sports.png','settings.png']"  &gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile imageUrl on initialization. 
                * // To set liveTile imageUrl API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ backgroundColor:"blue",renderMode: "windows", liveTile: { enabled: true, imageUrl: ['people.png','sports.png','settings.png'] },imagePath:"themes/sample/tile" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile imageUrl, after initialization:<br>
                * // Get the liveTile imageUrl API value.
                *  $("#tile").ejmTile("option", "liveTile.imageUrl");			
                * // Set the liveTile imageUrl API
                * $("#tile").ejmTile("option", "liveTile.imageUrl", ['people.png','sports.png','settings.png']);            
                * @memberof ejmTile
                * @instance
                */
                imageUrl: null,
                //Web
                /**	
                * Specifies liveTile type for Tile. i.e flip, slide or carousel
                * @default "flip"
                * @member livetile->type {object}
                * @type {enum}
                * @alias ejTile#liveTile->type
                * @example 
                * //Set the liveTile type property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-rendermode="windows" data-ej-livetile-enabled="true" data-ej-livetile-imageurl="['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png']"  data-ej-livetile-type="carousel"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile type on initialization. 
                * // To set liveTile type API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({ renderMode: "windows", liveTile: { enabled: true, imageUrl: ['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png'], type:"carousel" } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile type, after initialization:<br>
                * // Get the liveTile type API value.
                *  $("#tile").ejTile("option", "liveTile.type");			
                * // Set the liveTile type API
                * $("#tile").ejTile("option", "liveTile.type", "carousel");            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies liveTile type for Tile. i.e flip, slide or carousel
                * @default "flip"
                * @member livetile->type {object}
                * @type {enum}
                * @alias ejmTile#liveTile->type
                * @example 
                * //Set the liveTile type property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-rendermode="windows" data-ej-backgroundcolor="blue" data-ej-imagepath="themes/sample/tile" data-ej-livetile-enabled="true" data-ej-livetile-imageurl="['people.png','sports.png','settings.png']"  data-ej-livetile-type="carousel"&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile type on initialization. 
                * // To set liveTile type API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({backgroundColor:"blue", renderMode: "windows", liveTile: { enabled: true, imageUrl: ['people.png','sports.png','settings.png'], type:"carousel" },imagePath:"themes/sample/tile" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile type, after initialization:<br>
                * // Get the liveTile type API value.
                *  $("#tile").ejmTile("option", "liveTile.type");			
                * // Set the liveTile type API
                * $("#tile").ejmTile("option", "liveTile.type", "carousel");            
                * @memberof ejmTile
                * @instance
                */
                type: "flip",
                //Web
                /**	
                * Specifies time interval between two successive livetile animation
                * @default 2000
                * @member livetile->updateInterval {object}
                * @type {number}
                * @alias ejTile#liveTile->updateInterval
                * @example 
                * //Set the liveTile updateInterval property in unobtrusive way.
                * &lt;div id="tile" data-role="ejtile" data-ej-rendermode="windows"  data-ej-livetile-enabled="true" data-ej-livetile-imageurl="['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png']"  data-ej-livetile-updateinterval=1000&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile updateInterval on initialization. 
                * // To set liveTile updateInterval API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejTile({renderMode: "windows", liveTile: { enabled: true, imageUrl: ['themes/sample/tile/people.png','themes/sample/tile/sports.png','themes/sample/tile/settings.png'], updateInterval:1000 } }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile updateInterval, after initialization:<br>
                * // Get the liveTile updateInterval API value.
                *  $("#tile").ejTile("option", "liveTile.updateInterval");			
                * // Set the liveTile updateInterval API
                * $("#tile").ejTile("option", "liveTile.updateInterval", 1000);            
                * @memberof ejTile
                * @instance
                */

                //Mobile
                /**	
                * Specifies time interval between two successive livetile animation
                * @default 2000
                * @member livetile->updateInterval {object}
                * @type {number}
                * @alias ejmTile#liveTile->updateInterval
                * @example 
                * //Set the liveTile updateInterval property in unobtrusive way.
                * &lt;div id="tile" data-role="ejmtile" data-ej-rendermode="windows" data-ej-backgroundcolor="blue" data-ej-imagepath="themes/sample/tile" data-ej-livetile-enabled="true" data-ej-livetile-imageurl="['people.png','sports.png','settings.png']"  data-ej-livetile-updateinterval=1000&gt;
                * &lt;/div&gt;  
                * @example 
                * // Set liveTile updateInterval on initialization. 
                * // To set liveTile updateInterval API value 
                * &lt;div id="tile" &gt;&lt;/div&gt;<br>
                * &lt;script&gt; 
                * // Create Tile control 
                * $("#tile").ejmTile({ backgroundColor:"blue",renderMode: "windows", liveTile: { enabled: true, imageUrl: ['people.png','sports.png','settings.png'], updateInterval:1000 },imagePath:"themes/sample/tile" }); 
                * &lt;/script&gt;
                * @example 
                * //Get or set the liveTile updateInterval, after initialization:<br>
                * // Get the liveTile updateInterval API value.
                *  $("#tile").ejmTile("option", "liveTile.updateInterval");			
                * // Set the liveTile updateInterval API
                * $("#tile").ejmTile("option", "liveTile.updateInterval", 1000);            
                * @memberof ejmTile
                * @instance
                */
                updateInterval: 2000
            },
            //Web
            /**		
            * Specifies whether the tile text to be shown or hidden.
            * @default true
            * @member showText {object}
            * @type {boolean}
            * @example 
            * //Set the showText property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile"  data-ej-imageurl="themes/sample/tile/people.png" data-ej-showtext=false &gt;
            * &lt;/div&gt;  
            * @example 
            * // Set showText on initialization. 
            * // To set showText API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", showText:false }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the showText, after initialization:<br>
            * // Get the showText API value.
            *  $("#tile").ejTile("option", "showText");			
            * // Set the showText API
            * $("#tile").ejTile("option", "showText", false);            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies whether the tile text to be shown or hidden.
            * @default true
            * @member showText {object}
            * @type {boolean}
            * @example 
            * //Set the showText property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imagepath="themes/sample/tile"  data-ej-imageurl="people.png" data-ej-showtext=false&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set showText on initialization. 
            * // To set showText API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", showText:false,imagePath:"themes/sample/tile" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the showText, after initialization:<br>
            * // Get the showText API value.
            *  $("#tile").ejmTile("option", "showText");			
            * // Set the showText API
            * $("#tile").ejmTile("option", "showText", false);            
            * @memberof ejmTile
            * @instance
            */
            showText: true,
            //Web
            /**		
            * Changes the text of a tile.
            * @default "Text"
            * @member text {object}
            * @type {string}
            * @example 
            * //Set the text property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png" data-ej-text="Settings"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set text on initialization. 
            * // To set text API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", text:"Settings"}); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the text, after initialization:<br>
            * // Get the text API value.
            *  $("#tile").ejTile("option", "text");			
            * // Set the text API
            * $("#tile").ejTile("option", "text", "Settings");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Changes the text of a tile.
            * @default "Text"
            * @member text {object}
            * @type {string}
            * @example 
            * //Set the text property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-text="Settings"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set text on initialization. 
            * // To set text API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", text:"Settings",imagePath:"themes/sample/tile" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the text, after initialization:<br>
            * // Get the text API value.
            *  $("#tile").ejmTile("option", "text");			
            * // Set the text API
            * $("#tile").ejmTile("option", "text", "Settings");            
            * @memberof ejmTile
            * @instance
            */
            text: "Text",
            //Web
            /**		
            * Aligns the text of a tile. i.e left, right or center.
            * @default "normal"
            * @member textAlignment {object}
            * @type {enum}
            * @example 
            * //Set the textAlignment property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png"  data-ej-textalignment="left"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set textAlignment on initialization. 
            * // To set textAlignment API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", textAlignment:"left" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the textAlignment, after initialization:<br>
            * // Get the textAlignment API value.
            *  $("#tile").ejTile("option", "textAlignment");			
            * // Set the textAlignment API
            * $("#tile").ejTile("option", "textAlignment", "left");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Aligns the text of a tile. i.e left, right or center.
            * @default "normal"
            * @member textAlignment {object}
            * @type {enum}
            * @example 
            * //Set the textAlignment property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-textalignment="left"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set textAlignment on initialization. 
            * // To set textAlignment API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", textAlignment:"left",imagePath:"themes/sample/tile" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the textAlignment, after initialization:<br>
            * // Get the textAlignment API value.
            *  $("#tile").ejmTile("option", "textAlignment");			
            * // Set the textAlignment API
            * $("#tile").ejmTile("option", "textAlignment", "left");            
            * @memberof ejmTile
            * @instance
            */
            textAlignment: "normal",
            //Web
            /**		
            * Specifies the size of a tile. i.e small, medium, large or wide.
            * @default "small"
            * @member tileSize {object}
            * @type {enum}
            * @example 
            * //Set the tileSize property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png" data-ej-tilesize="medium"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set tileSize on initialization. 
            * // To set tileSize API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", tileSize:"medium" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the tileSize, after initialization:<br>
            * // Get the tileSize API value.
            *  $("#tile").ejTile("option", "tileSize");			
            * // Set the tileSize API
            * $("#tile").ejTile("option", "tileSize", "medium");            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Specifies the size of a tile. i.e small, medium, large or wide.
            * @default "small"
            * @member tileSize {object}
            * @type {enum}
            * @example 
            * //Set the tileSize property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-tilesize="medium" data-ej-backgroundcolor="blue"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set tileSize on initialization. 
            * // To set tileSize API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", tileSize:"medium",imagePath:"themes/sample/tile",backgroundColor:"blue" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the tileSize, after initialization:<br>
            * // Get the tileSize API value.
            *  $("#tile").ejmTile("option", "tileSize");			
            * // Set the tileSize API
            * $("#tile").ejmTile("option", "tileSize", "medium");            
            * @memberof ejmTile
            * @instance
            */
            tileSize: "small",
            //Web
            /**		
            * Customize the tile size width.
            * @default "null"
            * @member width {object}
            * @type {number}
            * @example 
            * //Set the width property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png" data-ej-width=300 &gt;
            * &lt;/div&gt;  
            * @example 
            * // Set width on initialization. 
            * // To set width API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", width:300,height:300 }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the width, after initialization:<br>
            * // Get the width API value.
            *  $("#tile").ejTile("option", "width");			
            * // Set the width API
            * $("#tile").ejTile("option", "width", 300);            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Customize the tile size width.
            * @default "null"
            * @member width {object}
            * @type {number}
            * @example 
            * //Set the width property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-height=300 data-ej-width=300 data-ej-backgroundcolor="blue"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set width on initialization. 
            * // To set width API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", width:300, height:300, imagePath:"themes/sample/tile",backgroundColor:"blue" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the width, after initialization:<br>
            * // Get the width API value.
            *  $("#tile").ejmTile("option", "width");			
            * // Set the width API
            * $("#tile").ejmTile("option", "width", 300);            
            * @memberof ejmTile
            * @instance
            */
            width: null,
            //Web
            /**		
            * Customize the tile size height.
            * @default "null"
            * @member height {object}
            * @type {number}
            * @example 
            * //Set the height property in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="themes/sample/tile/people.png" data-ej-height=300 data-ej-width=300&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set height on initialization. 
            * // To set height API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "themes/sample/tile/people.png", width:300, height:300 }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the height, after initialization:<br>
            * // Get the height API value.
            *  $("#tile").ejTile("option", "height");			
            * // Set the width API
            * $("#tile").ejTile("option", "height", 300);            
            * @memberof ejTile
            * @instance
            */

            //Mobile
            /**		
            * Customize the tile size height.
            * @default "null"
            * @member height {object}
            * @type {number}
            * @example 
            * //Set the height property in unobtrusive way.
            * &lt;div id="tile" data-role="ejmtile" data-ej-imageurl="people.png" data-ej-imagepath="themes/sample/tile" data-ej-height=300 data-ej-width=300 data-ej-backgroundcolor="blue"&gt;
            * &lt;/div&gt;  
            * @example 
            * // Set height on initialization. 
            * // To set height API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejmTile({ imageUrl: "people.png", width:300,height:300 imagePath:"themes/sample/tile",backgroundColor:"blue" }); 
            * &lt;/script&gt;
            * @example 
            * //Get or set the height, after initialization:<br>
            * // Get the height API value.
            *  $("#tile").ejmTile("option", "height");			
            * // Set the height API
            * $("#tile").ejmTile("option", "height", 300);            
            * @memberof ejmTile
            * @instance
            */
            height: null
        },
        dataTypes: {
            badge: { enabled: "boolean", value: "number", maxValue: "number", minValue: "number" },
            imagePosition: "enum",
            liveTile: {
                type: "enum",
                enabled: "boolean",
                updateInterval: "number",
                imageUrl: "array",
                imageClass: "array",
                imageTemplateId: "array"
            },
            showText: "boolean",
            textAlignment: "enum",
            tileSize: "enum",
            width: "number",
            height: "number"
        },
        //Common method to render tile control
        _tileRender: function () {
            this.element.addClass(this._prefix + "tile " + this._prefix + "tile-wrapper " + this._prefix + "tile-wrapper-" + this.model.tileSize);
            this._mainTile = ej.buildTag("div." + this._prefix + "child-tile " + this._prefix + "tile-image" + this.model.imagePosition);
            this.model.liveTile.enabled && this.model.liveTile.type == "flip" ? this.element.addClass(this._prefix + 'tile-' + this.model.liveTile.type) : this.element.addClass(this._prefix + 'tile-common');
            this.element.append(this._mainTile);
            this._image = ej.buildTag("div." + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition);
            this._layer = ej.buildTag("div." + this._prefix + "layer");
            if (this.model.showText) {
                this.element.addClass(this._prefix + "enabled-text");
                this._text = ej.buildTag("div").addClass(this._prefix + "tile-text " + this._prefix + "user-select " + this._prefix + "textalign-" + this.model.textAlignment);
            }
            else
                this.element.removeClass(this._prefix + "enabled-text").addClass(this._prefix + "disabled-text");
            //Live Tile implementation
            if ((!this._isAppView() || this.model.renderMode == "windows") && this.model.liveTile.enabled) {
                this.element.addClass(this._prefix + "live-type-" + this.model.liveTile.type);
                this._mainTile.addClass(this._prefix + "live-tile-enable");
                if (!this._liveImageWrapper) {
                    this._liveImageWrapper = ej.buildTag("div." + this._prefix + "live-image-wrapper");
                    if (this.model.liveTile.imageTemplateId) {
                        this._liveImageWrapper.addClass(this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition);
                        for (var i = 0; i < this.model.liveTile.imageTemplateId.length; i++) {
                            var template = this._isAppView() ? ej.getCurrentPage().find('#' + this.model.liveTile.imageTemplateId[i]).addClass(this._prefix + "tile-template " + this._prefix + "live-tile " + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition + " " + this._prefix + "tile-" + this.model.liveTile.type) :
                                $('#' + this.model.liveTile.imageTemplateId[i]).addClass(this._prefix + "tile-template " + this._prefix + "live-tile " + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition + " " + this._prefix + "tile-" + this.model.liveTile.type);
                            this._liveImageWrapper.append(template);

                        }
						this._mainTile.addClass(this._prefix + "tile-template");
                    }
                    else {
                        if (this.model.liveTile.imageClass) {
                            for (var i = 0; i < this.model.liveTile.imageClass.length; i++)
                                this._liveImageWrapper.append(ej.buildTag("div").addClass(this.model.liveTile.imageClass[i] + " " + this._prefix + "live-tile " + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition + " " + this._prefix + "tile-" + this.model.liveTile.type));
                        }
                        else {
                            for (var i = 0; i < this.model.liveTile.imageUrl.length; i++) {
                                var url = this._isAppView() && this.model.imagePath ? this._getAbsolutePath(this.model.imagePath) + "/windows/" + this.model.liveTile.imageUrl[i] : this._getAbsolutePath(this.model.liveTile.imageUrl[i]);
                                this._liveImageWrapper.append(ej.buildTag("div." + this._prefix + "live-tile " + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition + " " + this._prefix + "tile-" + this.model.liveTile.type).css({ "background-image": "url('" + url + "')" }));
                            }
                        }
                    }
                    $(this._liveImageWrapper.children()[0]).addClass(this._prefix + "tile-" + this.model.liveTile.type + 'back').removeClass(this._prefix + "tile-" + this.model.liveTile.type);
                }
                this._mainTile.append(this._liveImageWrapper);
            }
            //Normal Tile implementation
            else {
                if (this.model.imageTemplateId) {
                    var imageTemp = this._isAppView() ? ej.getCurrentPage().find('#' + this.model.imageTemplateId).addClass(this._prefix + "tile-template") : $('#' + this.model.imageTemplateId).addClass(this._prefix + "tile-template");
                    this._image.append(imageTemp);
                }
                else {
                    this._image = ej.buildTag("div").addClass(this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition);
                    if (this.model.imageClass)
                        this._image.addClass(this.model.imageClass);
                    else if (this.model.imageUrl) {
                        var url = this._isAppView() && this.model.imagePath ? (this._getAbsolutePath(this.model.imagePath) + "/" + this.model.renderMode.toLowerCase() + "/" + this.model.imageUrl) : this._getAbsolutePath(this.model.imageUrl);
                        this._image.css({ "background-image": "url('" + url + "')" });
                        if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9 && this.model.imagePosition == "fill")
                            this._image.css({ "filter": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + url + "',sizingMethod='scale')", "-ms-filter": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + url + "',sizingMethod='scale')" });
                    }
                }
                this._mainTile.append(this._image).addClass(this._prefix + "tile-image" + this.model.imagePosition);
            }
            //Badge wrapper creation
            if (this.model.badge.enabled)
                this._setBadgeValue();
            //Text Wrapper creation
            if (this._text) {
                if (this.model.captionTemplateId) {
                    this._isAppView() ? this._text.append(ej.getCurrentPage().find('#' + this.model.captionTemplateId)).addClass(this._prefix + "template-caption") :this._text.append($('#' + this.model.captionTemplateId)).addClass(this._prefix + "template-caption");                   
                    this._mainTile.addClass(this._prefix + "template-caption")
                }
                else
                    this._text.html(this.model.text);
                this._mainTile.append(this._text);
            }
            //customize the tile size
            if (this._isCustomizeSize()) {
                this.element.css({ "width": this.model.width, "height": this.model.height });
                if (this.model.imagePosition != "fill") {
                    if (this.model.renderMode == "windows" || this.model.renderMode == "flat" || !this._isAppView()) {
                        this.model.showText ? this.element.find("." + this._prefix + "tile-image").css({ "width": (this.model.width) - 20, "height": (this.model.height) - 45 }) : this.element.find("." + this._prefix + "tile-image").css({ "width": (this.model.width) - 20, "height": (this.model.height) - 20 });
                        this.model.textAlignment == "left" || ((this.model.renderMode == "windows" || this.model.renderMode == "flat" || !this._isAppView()) && this.model.textAlignment == "normal") ? this.element.find("." + this._prefix + "tile-text").css({ "width": this.model.width - 14 }) : "";
                    }
                    else
                        this.model.showText ? this.element.find("." + this._prefix + "tile-image").css({ "width": (this.model.width) - 14, "height": (this.model.height) - 39 }) : this.element.find("." + this._prefix + "tile-image").css({ "width": (this.model.width) - 14, "height": (this.model.height) - 14 });
                }
                else {
                    this.element.find("." + this._prefix + "tile-image").css({ "width": this.model.width, "height": this.model.height });
                    this.model.textAlignment == "left" || ((this.model.renderMode == "windows" || this.model.renderMode == "flat" || !this._isAppView()) && this.model.textAlignment == "normal") ? this.element.find("." + this._prefix + "tile-text").css({ "width": this.model.width - 14 }) : "";
                }
                if (this._isBelowSmallSize()) {
                    this.element.find("." + this._prefix + "tile-text").css("display", "none");
                    this.element.find("." + this._prefix + "tile-image").css({ "margin": 0, "width": this.model.width, "height": this.model.height });
                }
                else
                    this.element.find("." + this._prefix + "tile-text").css("display", "block");
                this.model.tileSize == "small" ? this.element.removeClass(this._prefix + "tile-wrapper-small").addClass(this._prefix + "tile-wrapper-medium") :
                this._isBelowSmallSize() ? (this.model.renderMode == "windows" || this.model.renderMode == "flat" || !this._isAppView()) ? this.element.removeClass(this._prefix + "tile-wrapper-" + this.model.tileSize).addClass(this._prefix + "tile-wrapper-small") : this.element.removeClass(this._prefix + "tile-wrapper-" + this.model.tileSize).addClass(this._prefix + "tile-wrapper-medium") : "";
            }
        },
        _isBelowSmallSize:function()
        {
            return ((this.model.width <= 70 && this.model.width != null) || (this.model.height <= 70 && this.model.height != null));
        },
        _isCustomizeSize:function()
        {
            return this.model.height && this.model.width;
        },
        //Delegates for Tile control
        _createDelegates: function () {
            this._onStartDelegate = $.proxy(this._isAppView() ? this._onTouchStartHandler : this._onMouseDownHandler, this);
            this._onEndDelegate = $.proxy(this._isAppView() ? this._onTouchEndHandler : this._onMouseUpHandler, this);
            this._onMoveDelegate = $.proxy(this._isAppView() ? this._onTouchMoveHandler : this._onMouseMoveHandler, this);
            this._onDocClickDelegate = $.proxy(this._onDocClickHandler, this);
            this._startAnimationDelegate = $.proxy(this["_" + this.model.liveTile.type + "Tile"], this);
        },
        //Wiring the events to Tile control	
        _wireEvents: function (remove) {
            this._createDelegates();
            ej.listenEvents([this.element,  $(document)], [ej.startEvent(), ej.endEvent()], [this._onStartDelegate, this._onDocClickDelegate], remove, this);
            if (this.model.liveTile.enabled && (!this._isAppView() || this.model.renderMode == "windows"))
                remove ? this._stopTileAnimation() : this._startTileAnimation();
        },
        //Section for handling the onDoc click
        _onDocClickHandler: function (evt) {
            this._removeActiveClass();
        },
        //Section for removing acive class for tile
        _removeActiveClass: function () {
            (!this._isAppView() || this.model.renderMode == "windows") ? ej._removeSkewClass(this.element) : $(this.element).removeClass(this._prefix + "state-active");
        },
        //Section for start tile animation
        _startTileAnimation: function () {
            this._intervalCounter = setInterval(this._startAnimationDelegate, this.model.liveTile.updateInterval);
        },
        //Section for stop tile animation
        _stopTileAnimation: function () {
            clearInterval(this._intervalCounter);
        },
        //Section for adding flip effect to windows live tile control
        _flipTile: function () {
            var front = this.element.find("." + this._prefix + "tile-flipback");
            var back = this.element.find("." + this._prefix + "tile-flip").first();
            front.addClass(this._prefix + "tile-flip").removeClass(this._prefix + "tile-flipback");
            back.addClass(this._prefix + "tile-flipback").removeClass(this._prefix + "tile-flip");
        },
        //Section for adding slide effect to windows live tile control
        _slideTile: function () {
            this._animateEffect();
        },
        //Section for adding carousel effect to windows live tile control
        _carouselTile: function () {
            this._animateEffect();
        },
        //Common method for slide and carousel effect
        _animateEffect: function () {
            var type = this.model.liveTile.type.toLowerCase();
            var items = this.element.find("." + this._prefix + "live-tile");
            var currentitem = this.element.find("." + this._prefix + "tile-" + type + "back");
            var nextitem = currentitem.next()[0] == null ? items.first() : currentitem.next();
            var previtem = currentitem.prev()[0] == null ? items.last() : currentitem.prev();
            previtem.addClass(this._prefix + "tile-" + type).removeClass(this._prefix + "tile-" + type + "up");
            currentitem.addClass(this._prefix + "tile-" + type + "up").removeClass(this._prefix + "tile-" + type + "back");
            nextitem.removeClass(this._prefix + "tile-" + type).addClass(this._prefix + "tile-" + type + "back");
        },
        //To get the absolute path for image url
        _getAbsolutePath: function (path) {
            return this._isAppView() ? App.route.makeUrlAbsolute(path, true).toString() : path;
        },
        _isAppView: function () {
            return this._prefix == "e-m-" ? true : false;
        },
        //Public method for template update
        //Web
        /**		
        * Update the image template to another one.
        * @method updateTemplate
        * @return jQuery
        * @example 
        * &lt;div id="tile" data-role="ejtile" data-ej-imagetemplateid="sample1" &gt;
        * &lt;/div&gt; 
        * &lt;div id="sample1" style="background-image: url('themes/sample/tile/people.png');height:100%;width:100%;"&gt;
        * &lt;/div&gt;
        * &lt;div id="sample2" style="background-image: url('themes/sample/tile/sports.png');height:100%;width:100%;"&gt;
        * &lt;/div&gt;
        * &lt;script&gt; 
        * $(function () {
        * var value = $("#tile").data("ejmTile");
        * value.updateTemplate("sample2");
        * });
        * &lt;/script&gt;
        * @memberof ejTile
        * @instance
        */

        //Mobile
        /**		
        * Update the image template to another one.
        * @method updateTemplate
        * @return jQuery
        * @example 
        * &lt;div id="tile" data-role="ejmtile" data-ej-imagetemplateid="sample1" &gt;
        * &lt;/div&gt; 
        * &lt;div id="sample1" style="background-image: url('themes/sample/tile/ios7/people.png');height:100%;width:100%;"&gt;
        * &lt;/div&gt;
        * &lt;div id="sample2" style="background-image: url('themes/sample/tile/ios7/sports.png');height:100%;width:100%;"&gt;
        * &lt;/div&gt;
        * &lt;script&gt; 
        * $(function () {
        * var value = $("#tile").data("ejmTile");
        * value.updateTemplate("sample2");
        * });
        * &lt;/script&gt;
        * @memberof ejmTile
        * @instance
        */
        updateTemplate: function (id, index) {
            if (this.model.liveTile.enabled) {
                $(this._liveImageWrapper).children()[index].remove();
                var tempLive = this._isAppView()?ej.getCurrentPage().find('#' + id).addClass(this._prefix + "tile-template " + this._prefix + "live-tile " + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition + " " + this._prefix + "tile-" + this.model.liveTile.type):
                    $('#' + id).addClass(this._prefix + "tile-template " + this._prefix + "live-tile " + this._prefix + "fontimage " + this._prefix + "tile-image " + this._prefix + "tile-image" + this.model.imagePosition + " " + this._prefix + "tile-" + this.model.liveTile.type);
                if ($(this._liveImageWrapper).children()[index - 1])
                    $($(this._liveImageWrapper).children()[index - 1]).after(tempLive);
                else
                    $($(this._liveImageWrapper).children()[index + 1]).before(tempLive);
            }
            else
            {
                var template=this._isAppView()?ej.getCurrentPage().find('#' + id).addClass(this._prefix + "tile-template"):$('#' + id).addClass(this._prefix + "tile-template");
                this._image.empty().append(template);
                
            }
        },
        //SetModel
        _setModel: function (options) {
            var refresh = false;
            for (var property in options) {
                var setModel = "_set" + property.charAt(0).toUpperCase() + property.slice(1);
                if (this[setModel])
                    this[setModel](options[property]);
                else
                    refresh = true
            }
            if (refresh)
                this._refresh();
        },
        //To set image position
        _setImagePosition: function (value) {
            if (this.model.liveTile.enabled && $($(this._mainTile.children()[0]).children()).hasClass(this._prefix + "tile-image")) {
                $($(this._mainTile.children()[0]).children()).removeClass(this._prefix + "tile-imagecenter " + this._prefix + "tile-imagetop " + this._prefix + "tile-imagebottom " + this._prefix + "tile-imageright " + this._prefix + "tile-imageleft " + this._prefix + "tile-imagetopleft " + this._prefix + "tile-imagetopright " + this._prefix + "tile-imagebottomright " + this._prefix + "tile-imagebottomleft " + this._prefix + "tile-imagefill").addClass(this._prefix + "tile-image" + value);
                this._mainTile.removeClass(this._prefix + "tile-imagecenter " + this._prefix + "tile-imagetop " + this._prefix + "tile-imagebottom " + this._prefix + "tile-imageright " + this._prefix + "tile-imageleft " + this._prefix + "tile-imagetopleft " + this._prefix + "tile-imagetopright " + this._prefix + "tile-imagebottomright " + this._prefix + "tile-imagebottomleft " + this._prefix + "tile-imagefill").addClass(this._prefix + "tile-image" + value);
                this.model.imagePosition = value;
            }
            else {
                $(this._mainTile.children()[0]).removeClass(this._prefix + "tile-imagecenter " + this._prefix + "tile-imagetop " + this._prefix + "tile-imagebottom " + this._prefix + "tile-imageright " + this._prefix + "tile-imageleft " + this._prefix + "tile-imagetopleft " + this._prefix + "tile-imagetopright " + this._prefix + "tile-imagebottomright " + this._prefix + "tile-imagebottomleft " + this._prefix + "tile-imagefill").addClass(this._prefix + "tile-image" + value);
                this._mainTile.removeClass(this._prefix + "tile-imagecenter " + this._prefix + "tile-imagetop " + this._prefix + "tile-imagebottom " + this._prefix + "tile-imageright " + this._prefix + "tile-imageleft " + this._prefix + "tile-imagetopleft " + this._prefix + "tile-imagetopright " + this._prefix + "tile-imagebottomright " + this._prefix + "tile-imagebottomleft " + this._prefix + "tile-imagefill").addClass(this._prefix + "tile-image" + value);
                this.model.imagePosition = value;
            }
        },
        //To show text
        _setShowText: function (showtext) {
            this.model.showText = showtext;
            if (showtext) {
                this.element.removeClass(this._prefix + "disabled-text").addClass(this._prefix + "enabled-text");
                this._setText(this.model.text);
                this._isAppView() && this.model.renderMode != "windows" && this.model.renderMode != "flat" && this.model[this.model.renderMode].textPosition == "outer" ? this.element.removeClass(this._prefix + "text-inner").addClass(this._prefix + "text-outer") : "";
            }
            else {
                this.element.removeClass(this._prefix + "enabled-text").addClass(this._prefix + "disabled-text");
                this._isAppView() && this.model.renderMode != "windows" && this.model.renderMode != "flat" && this.model[this.model.renderMode].textPosition == "outer" ? this.element.removeClass(this._prefix + "text-outer").addClass(this._prefix + "text-inner") : "";
            }
        },
        //To set text
        _setText: function (text) {
            if (this.model.showText) {
                if (this.element.find('.' + this._prefix + "tile-text").length)
                    this.element.find('.' + this._prefix + "tile-text").html(text);
                else
                    this.element.prepend(ej.buildTag("div." + this._prefix + "tile-text", text));
            }
        },
        //To set text position
        _setTextPosition: function (position) {
            if (position == "outer")
                this.element.removeClass(this._prefix + "text-inner").addClass(this._prefix + "text-outer")
            else
                this.element.removeClass(this._prefix + "text-outer").addClass(this._prefix + "text-inner").find("." + this._prefix + "child-tile");
        },
        //To set text alignment
        _setTextAlignment: function (value) {
            $(this.element.find("." + this._prefix + "tile-text")).removeClass(this._prefix + "textalign-left " + this._prefix + "textalign-right " + this._prefix + "textalign-normal " + this._prefix + "textalign-center").addClass(this._prefix + "textalign-" + value);
            this.model.textAlignment = value;
        },
        //To modify badge
        _setBadge: function (options) {
            if (this.model.badge.enabled) {
                this._setBadgeEnabled(true);
                for (var property in options) {
                    var setModel = "_setBadge" + property.charAt(0).toUpperCase() + property.slice(1);
                    if (this[setModel])
                        this[setModel](options[property]);
                }
            }
            else
                this._setBadgeEnabled(false);
        },
        //To set badge value
        _setBadgeValue: function () {
            var badgeValue = this.model.badge.text ? this.model.badge.text : ((this.model.badge.value <= this.model.badge.maxValue && this.model.badge.value >= this.model.badge.minValue) ? this.model.badge.value.toString() : (this.model.badge.value > this.model.badge.maxValue ? this.model.badge.maxValue.toString() + "+" : this.model.badge.minValue.toString()));
            if (this.element.find('.' + this._prefix + "tile-badge").length)
                this.element.find('.' + this._prefix + "tile-badge").html(badgeValue);
            else
                this.element.prepend(ej.buildTag("div." + this._prefix + "tile-badge", badgeValue));
        },
        //To enable or disable badge
        _setBadgeEnabled: function (enabled) {
            this.element.find("." + this._prefix + "tile-badge")[enabled ? "show" : "hide"]();
        },
        //To clear element
        _clearElement: function () {
            this.element.removeAttr("class");
            this.element.html(this._orgEle.html());
        },
        //To destroy element
        _destroy: function () {
            this._wireEvents(true);
            this._clearElement();
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html TileView elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
    * @namespace ej
    * @class ejTile
    * @requires jQuery
    * @requires ej.core
    * @requires ej.unobtrusive
    * @requires ej.data
    * @requires ej.touch
    * @requires ej.tilebase
    * @classdesc Custom Design for Html Tile control.
    * @example 
    * &lt;div id="tile" data-role="ejtile" data-ej-imageurl="people.png"&gt;&lt;/div&gt;<br>
    * @example 
    * &lt;div id="tile" &gt;&lt;/div&gt;<br>
    * &lt;script&gt; 
    * // Create Tile control 
    * $("#tile").ejTile({ imageUrl: "people.png" }); 
    * &lt;/script&gt;
    */

    // ejTile is the plugin name 
    // "ej.Tile" is "namespace.className" will hold functions and properties

    ej.widget("ejTile", "ej.Tile", {
        _setFirst: true,
        validTags: ["div"],
        _rootCSS: "e-tile",
        defaults: {
            /**    
            * Event triggers when the mousedown happens in the tile
            * @event
            * @name ejTile#mouseDown 	
            * @param {Object} argument Event parameters from tile     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {boolean} argument.model returns the tile model
            * @param {boolean} argument.type returns the name of the event
            * @param {boolean} argument.text returns the current tile text
            * @example 
            * //Define mouseDown event in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl='people.png' data-ej-mousedown="mousedown" &gt;
            * &lt;/div&gt;  
            * &lt;script&gt;
            * // mouseDown event for tile
            * function mousedown(args){ 
            * //handle the event
            * }
            * &lt;/script&gt;
            * @example 
            * // Define mouseDown event on initialization. 
            * // To set mouseDown event API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "people.png", 
            * mouseDown: function (args) { 
            * //handle the event 
            * }
            * }); 
            * &lt;/script&gt;
            * @memberof ejTile
            * @instance
            */
            mouseDown: null,
            /**    
            * Event triggers when the mouseup happens in the tile
            * @event
            * @name ejTile#mouseUp 	
            * @param {Object} argument Event parameters from tile     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {boolean} argument.model returns the tile model
            * @param {boolean} argument.type returns the name of the event
            * @param {boolean} argument.text returns the current tile text
            * @example 
            * //Define mouseUp event in unobtrusive way.
            * &lt;div id="tile" data-role="ejtile" data-ej-imageurl='people.png' data-ej-mouseup="mouseup" &gt;
            * &lt;/div&gt;  
            * &lt;script&gt;
            * // mouseUp event for tile
            * function mouseup(args){ 
            * //handle the event
            * }
            * &lt;/script&gt;
            * @example 
            * // Define mouseUp event on initialization. 
            * // To set mouseUp event API value 
            * &lt;div id="tile" &gt;&lt;/div&gt;<br>
            * &lt;script&gt; 
            * // Create Tile control 
            * $("#tile").ejTile({ imageUrl: "people.png", 
            * mouseUp: function (args) { 
            * //handle the event 
            * }
            * }); 
            * &lt;/script&gt;
            * @memberof ejTile
            * @instance
            */
            mouseUp: null
        },
        //Constructor function
        _init: function () {
            this._orgEle = this.element.clone();
            this._renderEJControl();
        },
        //To render the Tile control
        _renderEJControl: function () {
            this.element.addClass("e-tile-web");
            this._prefix = "e-";
            this._tileRender();
            this._mainTile.append(this._layer);
            this._wireEvents();
        },
        //Section for handling the mousedown event
        _onMouseDownHandler: function (evt) {
            var item = this.element;
            item.addClass(ej._getSkewClass(item, evt.pageX, evt.pageY).replace('e-m-', 'e-'));
            if (this.model.mouseDown)
                this._trigger("mouseDown", { text: item.find(".e-tile-text").html() });
            ej.listenTouchEvent(this.element, ej.moveEvent(), this._onMoveDelegate, false, this);
            ej.listenTouchEvent(this.element, ej.endEvent(), this._onEndDelegate, false, this);
            this._isMoved = false;
        },
        //Section for handling the mousemove event
        _onMouseMoveHandler: function (evt) {
            this._isMoved = true;
            this._removeActiveClass();
        },
        //Section for handling the mouseup event
        _onMouseUpHandler: function (evt) {
            if (!this._isMoved && this.model.mouseUp)
                this._trigger("mouseUp", { text: this.element.find(".e-tile-text").html() });
            this._removeActiveClass();
            this._isMoved = false;
            ej.listenTouchEvent(this.element, ej.moveEvent(), this._onMoveDelegate, true, this);
            ej.listenTouchEvent(this.element, ej.endEvent(), this._onEndDelegate, true, this);
        },
        //To refresh the control
        _refresh: function () {
            this._destroy();
            this.element.addClass("e-tile");
            this._renderEJControl();
        }
    });
    /**
    * Enum for Tile ImagePosition
    * @enum {string}
    * @global
    */
    ej.Tile.ImagePosition = {
        /**
        Enum for center position of tile image*/
        Center: "center",
        /**
        Enum for top position of tile image*/
        Top: "top",
        /**
        Enum for bottom position of tile image*/
        Bottom: "bottom",
        /**
        Enum for right position of tile image*/
        Right: "right",
        /**
        Enum for left position of tile image*/
        Left: "left",
        /**
        Enum for topleft position of tile image*/
        TopLeft: "topleft",
        /**
        Enum for topright position of tile image*/
        TopRight: "topright",
        /**
        Enum for bottomright position of tile image*/
        BottomRight: "bottomright",
        /**
        Enum for bottomleft position of tile image*/
        BottomLeft: "bottomleft",
        /**
        Enum for fill position of tile image*/
        Fill: "fill"
    },
    /**
    * Enum for Tile TextAlignment
    * @enum {string}
    * @global
    */
    ej.Tile.TextAlignment = {
        /**
        Enum for normal alignment of tile text*/
        Normal: "normal",
        /**
        Enum for left alignment of tile text*/
        Left: "left",
        /**
        Enum for right alignment of tile text*/
        Right: "right",
        /**
        Enum for center alignment of tile text*/
        Center: "center"
    },
    ej.Tile.TextPosition = {
        /**
        Enum for inner position of tile text*/
        Inner: "inner",
        /**
        Enum for outer position of tile text*/
        Outer: "outer"
    },
    /**
    * Enum for Tile Size
    * @enum {string}
    * @global
    */
    ej.Tile.TileSize = {
        /**
        Enum for medium size of tile*/
        Medium: "medium",
        /**
        Enum for small size of tile*/
        Small: "small",
        /**
        Enum for large size of tile*/
        Large: "large",
        /**
        Enum for wide size of tile*/
        Wide: "wide"
    },
    /**
    * Enum for LiveTileType
    * @enum {string}
    * @global
    */
    ej.Tile.LiveTileType = {
        /**
        Enum for flip type of livetile*/
        Flip: "flip",
        /**
        Enum for slide type of livetile*/
        Slide: "slide",
        /**
        Enum for carousel type of livetile*/
        Carousel: "carousel"
    }
    $.extend(true, ej.Tile.prototype, ej.TileBase.prototype);
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to select the date and time values.
* @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
    * @namespace ej
	* @classdesc Date and Time selection with the input field.
	* @class ejDateTimePicker
	* @param {object} options - settings for Date Picker.
	* @requires jQuery
    * @requires jquery.easing.1.3.js
    * @requires jquery.globalize.js
    * @requires globalize.cultures.min.js
	* @requires ej.core.js
	* @requires ej.datetimepicker.js
	* @requires ej.datepicker.js
	* @requires ej.timepicker.js
	* @requires ej.scroller.js
	* @example 
	* &lt;input type="text" id="datetime" /&gt;
	* &lt;script&gt;
	* // Create DateTimePicker
    * $("#datetime").ejDateTimePicker();
	* &lt;/script&gt;
	*/

    ej.widget("ejDateTimePicker", "ej.DateTimePicker", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _setFirst: false,
        _rootCSS: "e-datetimepicker",
        type: "editor",

        // default model
        defaults: {
            // Common properties
            /**		
			* Set the root class for DateTimePicker theme. This cssClass API helps to use custom skinning option for DateTimePicker control. 
			* @default ""
			* @type {string}
			* @example
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;			
			* //To set cssClass API during initialization  
			* 	$("#datetime").ejDateTimePicker({  cssClass: "gradient-lime" });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            cssClass: "",

            /**		
			* Defines the localization culture for DateTimePicker.
			* @default "en-US"
			* @type {string}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set locale API during initialization  
			* 	$("#datetime").ejDateTimePicker({  locale: "en-US" });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            locale: "en-US",

            /**		
			* Indicates that the DateTimePicker value can only be read and can’t change.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set readOnly API during initialization  
			* 	$("#datetime").ejDateTimePicker({  readOnly: true });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            readOnly: false,

            /**		
			* Changes the sharped edges into rounded corner for the DateTimePicker textbox and popup.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set showRoundedCorner API during initialization  
			* 	$("#datetime").ejDateTimePicker({  showRoundedCorner: true });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            showRoundedCorner: false,

            /**		
			* Sets the DateTimePicker direction as right to left alignment.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set enableRTL API during initialization  
			* 	$("#datetime").ejDateTimePicker({  enableRTL: true });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            enableRTL: false,

            /**		
			* When this property is set to false, it disables the DateTimePicker control.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set enabled API during initialization  
			* 	$("#datetime").ejDateTimePicker({  enabled: true });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            enabled: true,

            /**		
			* Sets the DateTime value to the control.
			* @default ""
			* @type {String | DateObject}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set value API during initialization  
			* 	$("#datetime").ejDateTimePicker({  value:"6/2/2014 6:00 AM" });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            value: "",

            /**		
			* Sets the minimum value to the DateTimePicker. Behind the minimum value an error class is added to the wrapper element.
			* @default new Date("1/1/1900 12:00:00 AM")
			* @type {String | DateObject}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set minDateTime API during initialization  
			* 	$("#datetime").ejDateTimePicker({  minDateTime: new Date("5/5/2010 12:00:00 AM") });
			* &lt;/script&gt;
			* @memberof ejDateTimePicker
			* @instance
			*/
            minDateTime: new Date("1/1/1900 12:00:00 AM"),

            /**		
			* Sets the maximum value to the DateTimePicker. Beyond the maximum value an error class is added to the wrapper element.
			* @default new Date("12/31/2099 11:59:59 PM")
			* @type {String | DateObject}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set maxDateTime API during initialization  
			* 	$("#datetime").ejDateTimePicker({  maxDateTime: new Date("12/10/2050 8:00:00 PM") });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            maxDateTime: new Date("12/31/2099 11:59:59 PM"),

            /**		
			* Defines the height of the DateTimePicker textbox.
			* @default 30
			* @type {String | Number}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set height API during initialization  
			* 	$("#datetime").ejDateTimePicker({  height: 40 });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            height: "",

            /**		
			* Defines the width of the DateTimePicker textbox.
			* @default 143
			* @type {String | Number}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set width API during initialization  
			* 	$("#datetime").ejDateTimePicker({  width: 210 });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            width: "",

            /**		
			* Defines the datetime format displayed in the DateTimePicker. The value should be a combination of date format and time format. 
			* @default "M/d/yyyy h:mm tt"
			* @type { String }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set dateTimeFormat API during initialization  
			* 	$("#datetime").ejDateTimePicker({  dateTimeFormat: "d/M/yyyy tt h:mm" });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            dateTimeFormat: "",

            /**		
			* Shows or hides the arrow button from the DateTimePicker textbox. 
              When the button disabled, the DateTimePicker popup opens while focus in the textbox and hides while focusout from the textbox.
			* @default true
			* @type { Boolean }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set showPopupButton API during initialization  
			* 	$("#datetime").ejDateTimePicker({  showPopupButton: false });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            showPopupButton: true,
			
			/**		
			* When enableStrictMode true it allows the value outside of the range also, otherwise it internally changed to the correct value.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
	        * &lt;script&gt;
			* //To set enableStrictMode API during initialization  
			* 	$("#datetime").ejDateTimePicker({  enableStrictMode: true });
		    * &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            enableStrictMode: false,

            /**		
			* Displays the custom text for the buttons inside the DateTimePicker popup.
              when the culture value changed, we can change the buttons text based on the culture. 
			* @default { today: "Today", now: "Now", done: "Done", timeTitle: "Time" }
			* @type { JSONObject }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set buttonText API during initialization  
			* 	$("#datetime").ejDateTimePicker({  buttonText: { done: "做过" } });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            buttonText: /** @lends ejDateTimePicker# */ {
                /**		
                 * Sets the text for the Today button inside the datetime popup.
				 * @alias ejDateTimePicker#buttonText->today
				 * @type String
				 * @example 
				 * &lt;input type="text" id="datetime" /&gt;
				 * &lt;script&gt;
				 * //To set buttonText API during initialization  
			     * 	$("#datetime").ejDateTimePicker({ buttonText: { today: "Today" }});
			     * &lt;/script&gt;
			     * @memberof ejDateTimePicker#buttonText
			     * @instance
                 */
                today: "Today",

                /**		
                 * Sets the text for the Now button inside the datetime popup.
				 * @alias ejDateTimePicker#buttonText->now
				 * @type String
				 * @example 
				 * &lt;input type="text" id="datetime" /&gt;
				 * &lt;script&gt;
				 * //To set buttonText API during initialization  
			     * 	$("#datetime").ejDateTimePicker({ buttonText: { now: "Now" }});
			     * &lt;/script&gt;
			     * @memberof ejDateTimePicker#buttonText
			     * @instance
                 
                 */
                now: "Now",

                /**		
                 * Sets the text for the Done button inside the datetime popup.
				 * @alias ejDateTimePicker#buttonText->done
				 * @type String
				 * @example 
				 * &lt;input type="text" id="datetime" /&gt;
				 * &lt;script&gt;
				 * //To set buttonText API during initialization  
			     * 	$("#datetime").ejDateTimePicker({ buttonText: { done: "Done" }});
			     * &lt;/script&gt;
			     * @memberof ejDateTimePicker#buttonText
			     * @instance
                 */
                done: "Done",

                /**		
                 * Sets the header text for the Time dropdown.
				 * @alias ejDateTimePicker#buttonText->timeTitle
				 * @type String
				 * @example 
				 * &lt;input type="text" id="datetime" /&gt;
				 * &lt;script&gt;
				 * //To set buttonText API during initialization  
			     * 	$("#datetime").ejDateTimePicker({ buttonText: { timeTitle: "Time" }});
			     * &lt;/script&gt;
			     * @memberof ejDateTimePicker#buttonText
			     * @instance
                 */
                timeTitle: "Time"
            },

            /**		
			* Enables or disables the state maintenance of DateTimePicker. 
			* @default false
			* @type { Boolean }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set enablePersistence API during initialization  
			* 	$("#datetime").ejDateTimePicker({  enablePersistence: true });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            enablePersistence: false,

            /**		
			* Sets the time interval between the two adjacent time values in the time popup. 
			* @default 30
			* @type { Number }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set interval API during initialization  
			* 	$("#datetime").ejDateTimePicker({  interval: 60 });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            interval: 30,

            /**		
			* Defines the time format displayed in the time dropdown inside the DateTimePicker popup. 
			* @default "h:mm tt"
			* @type { String }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set timeDisplayFormat API during initialization  
			* 	$("#datetime").ejDateTimePicker({  timeDisplayFormat: "HH:mm" });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            timeDisplayFormat: "",

            /**		
			* Defines the width of the time dropdown inside the DateTimePicker popup.
			* @default 100
			* @type { String | Number }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set timePopupWidth API during initialization  
			* 	$("#datetime").ejDateTimePicker({  timePopupWidth: 150 });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            timePopupWidth: 100,

            /**		
			* Specifies the header format of the datepicker inside the DateTimePicker popup. See {@link DatePicker.Level}
			* @default ej.DatePicker.Header.ShowHeaderMin
			* @type { String | Enum }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set dayHeaderFormat API during initialization  
			* 	$("#datetime").ejDateTimePicker({  dayHeaderFormat: "showheadershort" });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            dayHeaderFormat: "showheadershort",

            /**		
			* Specifies the start level view in datepicker inside the DateTimePicker popup. See {@link DatePicker.Level}
			* @default ej.DatePicker.Level.Month or "month"
			* @type { String | Enum }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set startLevel API during initialization  
			* 	$("#datetime").ejDateTimePicker({  startLevel:ej.DatePicker.Level.Year });
		    * &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            startLevel: "month",

            /**		
			* Specifies the drill down level in datepicker inside the DateTimePicker popup.		See {@link ej.DatePicker.Level} 
			* @default ""
			* @type { enum }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set depthLevel API during initialization  
			* 	$("#datetime").ejDateTimePicker({  depthLevel: "decade" });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            depthLevel: "",

            /**		
			* Specifies the start day of the week in datepicker inside the DateTimePicker popup. 
			* @default 1
			* @type { Number }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set startDay API during initialization  
			* 	$("#datetime").ejDateTimePicker({  startDay: 2 });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            startDay: 0,

            /**		
			* Specifies the number of months to navigate at one click of next and previous button in datepicker inside the DateTimePicker popup. 
			* @default 1
			* @type { Number }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set stepMonths API during initialization  
			* 	$("#datetime").ejDateTimePicker({  stepMonths: 2 });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            stepMonths: 1,

            /**		
			* It allows showing days in other months of DatePicker calendar inside the DateTimePicker popup.
			* @default true
			* @type { Boolean }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set showOtherMonths API during initialization  
			* 	$("#datetime").ejDateTimePicker({  showOtherMonths: false });
			* &lt;/script&gt; 
			 * @memberof ejDateTimePicker
			* @instance
			*/
            showOtherMonths: true,
			/**		
			* Enable or disable the animation effect in DateTimePicker.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;input type="text" id="datetime" /&gt;<br/>
			* &lt;script&gt;
			* // Set the enableAnimation value during initialization. 			
			* 	$("#datetime").ejDateTimePicker({  enableAnimation : false });
			* &lt;/script&gt; <br>
			 * @memberof ejDateTimePicker
			* @instance
			*/
			enableAnimation: true,
            /**		
			* Specifies the header format to be displayed in the DatePicker calendar inside the DateTimePicker popup. 
			* @default "MMMM yyyy"
			* @type { String }
			* @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
			* //To set headerFormat API during initialization  
			* 	$("#datetime").ejDateTimePicker({  headerFormat: "MM - yyyy" });
			* &lt;/script&gt;
			 * @memberof ejDateTimePicker
			* @instance
			*/
            headerFormat: 'MMMM yyyy',

            /**     
            * Fires when DateTimePicker popup opens.
            * @event
            * @name ejDateTimePicker#open 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the timepicker model
            * @param {string}  argument.type returns the name of the event
			* @param {string}  argument.value returns the modified datetime value
			* @param {string}  argument.prevDateTime returns the previously selected date time value
            * @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
            * //open event for datetimepicker
            * $("#datetime").ejDateTimePicker({
            *    open: function (args) {}
            * });      
			* &lt;/script&gt;
            * @memberof ejDateTimePicker
            * @instance
            */
            open: null,

            /**     
            * Fires when DateTimePicker popup closes.
            * @event
            * @name ejDateTimePicker#close 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the timepicker model
            * @param {string}  argument.type returns the name of the event
			* @param {string}  argument.value returns the modified datetime value
			* @param {string}  argument.prevDateTime returns the previously selected date time value
            * @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
            * //close event for datetimepicker
            * $("#datetime").ejDateTimePicker({
            *    close: function (args) {}
            * }); 
			* &lt;/script&gt;			
            * @memberof ejDateTimePicker
            * @instance
            */
            close: null,
            /**     
            * Fires when the datetime value changed in the DateTimePicker textbox.
            * @event
            * @name ejDateTimePicker#change 	
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the timepicker model
            * @param {string}  argument.type returns the name of the event
            * @param {boolean}  argument.isValidState returns the current value is valid or not
            * @param {string}  argument.value returns the modified datetime value			
			* @param {string}  argument.prevDateTime returns the previously selected date time value
            * @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
            * //change event for datetimepicker
            * $("#datetime").ejDateTimePicker({
            *    change: function (args) {}
            * }); 
			* &lt;/script&gt;			
            * @memberof ejDateTimePicker
            * @instance
            */
            change: null,
			/**     
          * Fires after DateTimePicker control is created.
          * @event
          * @name ejDateTimePicker#create 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DateTimePicker model
          * @param {string}  argument.type returns the name of the event
          * @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
            * //create event for datetimepicker
            * $("#datetime").ejDateTimePicker({
            *    create: function (args) {}
            * }); 
			* &lt;/script&gt;				
          * @memberof ejDateTimePicker
          * @instance
          */
            create: null,
			/**     
          * Fires when the DateTimePicker is destroyed successfully
          * @event
          * @name ejDateTimePicker#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DateTimePicker model
          * @param {string}  argument.type returns the name of the event
          * @example 
			* &lt;input type="text" id="datetime" /&gt;
			* &lt;script&gt;
            * //destroy event for datetimepicker
            * $("#datetime").ejDateTimePicker({
            *    destroy: function (args) {}
            * }); 
			* &lt;/script&gt;				
          * @memberof ejDateTimePicker
          * @instance
          */
            destroy: null,
            /**     
           * Fires when the focus-in happens in the DateTimePicker textbox.
           * @event
           * @name ejDateTimePicker#focusIn
           * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
           * @param {object}  argument.model returns the timepicker model
           * @param {string}  argument.type returns the name of the event           
           * @param {string}  argument.value returns the datetime value, which is in text box
           * @example 
           * &lt;input type="text" id="datetime" /&gt;
           * &lt;script&gt;
           * //focusIn event for datetimepicker
           * $("#datetime").ejDateTimePicker({
           *    focusIn: function (args) {}
           * }); 
           * &lt;/script&gt;			
           * @memberof ejDateTimePicker
           * @instance
           */
            focusIn: null,
            /**     
         * Fires when the focus-out happens in the DateTimePicker textbox.
         * @event
         * @name ejDateTimePicker#focusOut
         * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
         * @param {object}  argument.model returns the timepicker model
         * @param {string}  argument.type returns the name of the event           
         * @param {string}  argument.value returns the datetime value, which is in text box
         * @example 
         * &lt;input type="text" id="datetime" /&gt;
         * &lt;script&gt;
         * //focusOut event for datetimepicker
         * $("#datetime").ejDateTimePicker({
         *    focusOut: function (args) {}
         * }); 
         * &lt;/script&gt;			
         * @memberof ejDateTimePicker
         * @instance
         */
            focusOut: null

        },

        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            cssClass: "string",
            locale: "string",
            readOnly: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            enabled: "boolean",
			enableAnimation: "boolean",
            dateTimeFormat: "string",
            showPopupButton: "boolean",
            buttonText: "data",
            enablePersistence: "boolean",
			enableStrictMode: "boolean",
            interval: "number",
            timeDisplayFormat: "string",

            dayHeaderFormat: "string",
            startLevel: "string",
            depthLevel: "string",
            startDay: "number",
            stepMonths: "number",
            showOtherMonths: "boolean",
            headerFormat: "string"
        },

        _setModel: function (options) {
            if (!this.model.enabled && ej.isNullOrUndefined(options["enabled"])) return false;
            var option, validate = false;
            for (option in options) {
                switch (option) {
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "locale": this._localize(options[option]); break;
                    case "readOnly": this._readOnly(options[option]); break;
                    case "showRoundedCorner": this._setRoundedCorner(options[option]); break;
                    case "enableRTL": this._setRtl(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;

                    case "value":
                        options[option] = this._setValue(options[option]);
                        validate = true; break;
					case "enableAnimation":{
							this.model.enableAnimation=options[option];
							break;
					}
					case "enableStrictMode":
                        this.model.enableStrictMode = options[option];
                        validate = true;
                        break;
                    case "minDateTime":
                    case "maxDateTime":
                        var temp = this._stringToObject(options[option]);
                        if (this._isValidDate(temp)) {
                            this.datePicker.option(option + "Date", temp);
                            options[option] = temp;
                        }
                        else options[option] = this.model[option];
                        validate = true; break;
                    case "height": this.wrapper.height(options[option]); break;
                    case "width": this.wrapper.width(options[option]); break;                    
                    case "dateTimeFormat":
                        this.model.dateTimeFormat = options[option];
                        if (this.isValidState) this._setValue(this.model.value);
                        break;
                    case "showPopupButton": this._showButton(options[option]); break;
                    case "buttonText": this._buttonText(options[option]); break;

                    case "interval": this.timePicker.option("interval", options[option]); break;
                    case "timeDisplayFormat": this.timePicker.option("timeFormat", options[option]); break;
                    case "timePopupWidth": this.timePicker.option("popupWidth", options[option]); break;

                    case "dayHeaderFormat": this.datePicker.option("dayHeaderFormat", options[option]); break;
                    case "startLevel": this.datePicker.option("startLevel", options[option]); break;
                    case "depthLevel": this.datePicker.option("depthLevel", options[option]); break;
                    case "startDay": this.datePicker.option("startDay", options[option]); break;
                    case "stepMonths": this.datePicker.option("stepMonths", options[option]); break;
                    case "showOtherMonths": this.datePicker.option("showOtherMonths", options[option]); break;
                    case "headerFormat": this.datePicker.option("headerFormat", options[option]); break;
                }
            }
            if (validate) this._validateMinMax();
            this._valueChange();
            this._checkErrorClass();
        },
        observables: ["value"],
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            if (this.isPopupOpen)
                this._hideResult();
            this.element.insertAfter(this.wrapper);
            this.element.removeClass("e-input").val("");
            this.wrapper.remove();
            this.popup.remove();
        },

        // constructor function
        _init: function () {
            if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
            this._initialize();
            this._render();
            this._wireEvents();
        },

        _initialize: function () {
            this.popup = null;
            this.isPopupOpen = false;
            this.isValidState = true;
            this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
            if (!this.model.dateTimeFormat || !this.model.timeDisplayFormat) this._getDateTimeFormat();
            if (typeof this.model.value == "string" && typeof this.model.value != "") {
                var val = this._stringToObject(this.model.value);
                if (val) this.model.value = val;
            }
            var min = this.model.minDateTime = this._stringToObject(this.model.minDateTime);
            if (!min || !this._isValidDate(min)) this.model.minDateTime = this.defaults.minDateTime;
            var max = this.model.maxDateTime = this._stringToObject(this.model.maxDateTime);
            if (!max || !this._isValidDate(max)) this.model.maxDateTime = this.defaults.maxDateTime;
        },

        _render: function () {
            this._renderWrapper();
            this._renderIcon();
            this._setDimentions();
            this._renderDropdown();
            this._checkProperties();
        },

        _renderWrapper: function () {
            this.element.addClass("e-input").attr({ 'aria-atomic': 'true', 'aria-live': 'assertive', "tabindex": "0", "value": this.model.value });
            this.wrapper = ej.buildTag("span.e-datetime-wrap e-widget " + this.model.cssClass + "#" + this.element[0].id + "_wrapper").insertAfter(this.element);
            this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
            this.wrapper.append(this.container);
        },
        _renderIcon: function () {
            if (!this.model.showPopupButton) return false;
            this.datetimeIcon = ej.buildTag("span.e-select", "", {}).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            var icon = ej.buildTag("span.e-icon e-datetime", "", {}, { "aria-label": "select" }).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            this.datetimeIcon.append(icon);
            this.container.append(this.datetimeIcon).addClass("e-padding");
            this._on(this.datetimeIcon, "click", this._iconClick);
            this._on(this.datetimeIcon, "mousedown", function (e) { e.preventDefault(); });
        },
        _setDimentions: function () {
            if (this.model.height) this.wrapper.height(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
        },

        _renderDropdown: function () {
			var oldWrapper = $("#" + this.element.context.id + "_popup").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popup = ej.buildTag("div.e-datetime-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.element[0].id + "_popup").css("visibility", "hidden");
            $('body').append(this.popup);
            this._renderControls();
            var _timeTitle, _dateContainer, _timeContainer, popupContainer, _today, _now, _done, buttonContainer;

            _timeTitle = ej.buildTag("div.e-header", this.model.buttonText.timeTitle).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _dateContainer = ej.buildTag("div.e-datecontainer").append(this.datePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _timeContainer = ej.buildTag("div.e-timecontainer").append(_timeTitle, this.timePicker.popup).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            popupContainer = ej.buildTag("div.e-popup-container").append(_dateContainer, _timeContainer).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            _today = ej.buildTag("div.e-dt-button e-dt-today", this.model.buttonText.today).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _now = ej.buildTag("div.e-dt-button e-dt-now", this.model.buttonText.now).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            _done = ej.buildTag("div.e-dt-button e-dt-done", this.model.buttonText.done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});
            buttonContainer = ej.buildTag("div.e-button-container").append(_today, _now, _done).attr((this._isIE8) ? { 'unselectable': 'on' } : {});

            this.popup.append(popupContainer, buttonContainer);
            this._updateTimeHeight();

            this._bindOperations();
            this._updateValues();
            this.popup.css({ "visibility": "visible", "display": "none" });

            this._on(_today, "click", this._todayClick);
            this._on(_now, "click", this._nowClick);
            this._on(_done, "click", this._doneClick);
        },
        _renderControls: function () {
            this._renderDateControl();
            this._renderTimeControl();

            var tempContainer = ej.buildTag("span").append(this.datePicker.wrapper, this.timePicker.wrapper);
            tempContainer.find("span").css("display", "none");
            this.popup.append(tempContainer);
        },
        _renderDateControl: function () {
            var dateInput = ej.buildTag("input#" + this.element[0].id + "_date", "", {}, { "type": "text" });
            this.popup.append(dateInput);

            dateInput.ejDatePicker({
                // static values //
                height: "0px", width: "0px",
                displayInline: true,
                showDateIcon: false,
                showFooter: false,
                enableStrictMode: true,

                // default values //
                minDate: this._stringToObject(this.model.minDateTime),
                maxDate: this._stringToObject(this.model.maxDateTime),
                //value: this.model.value,
                dayHeaderFormat: this.model.dayHeaderFormat,
                startLevel: this.model.startLevel,
                depthLevel: this.model.depthLevel,
                startDay: this.model.startDay,
                stepMonths: this.model.stepMonths,
                showOtherMonths: this.model.showOtherMonths,
                headerFormat: this.model.headerFormat,
                buttonText: this.model.buttonText.today,

                // common values //
                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale
            });
            this.datePicker = dateInput.data("ejDatePicker");
            this.datePicker._getInternalEvents = true;
            this.datePicker.popup.css({ "position": "static", "display": "block" });
        },
        _renderTimeControl: function () {
            var timeInput = ej.buildTag("input#" + this.element[0].id + "_time", "", {}, { "type": "text" });
            this.popup.append(timeInput);

            timeInput.ejTimePicker({
                // static values //
                height: "0px", width: "0px",

                // default values //
                interval: this.model.interval,
                //value: this.model.value,
                timeFormat: this.model.timeDisplayFormat,
                popupWidth: this.model.timePopupWidth,

                // common values //
                enabled: this.model.enabled,
                enableRTL: this.model.enableRTL,
                showRoundedCorner: this.model.showRoundedCorner,
                readOnly: this.model.readOnly,
                cssClass: this.model.cssClass,
                locale: this.model.locale
            });
            this.timePicker = timeInput.data("ejTimePicker");
            this.timePicker._getInternalEvents = true;
            this.timePicker.showDropdown = true;
            this.timePicker.popup.css({ "position": "static", "display": "block" });
        },
        _updateTimeHeight: function () {
            var height = this.datePicker.popup.outerHeight() - this.popup.find(".e-header").outerHeight() - 2;
            this.timePicker.option("popupHeight", height);
        },

        _bindOperations: function () {
            var proxy = this;
            this.datePicker.option("layoutChange", function () { proxy._updateTimeHeight(); });
            this.datePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.timePicker.option("outOfRange", function () { proxy.isValidState = false; });
            this.datePicker.option("change", function (a) { proxy._refreshTimes(a); });
            this.datePicker.option("select", function (e) { proxy._updateInput(e); });
            this.timePicker.option("select", function () { proxy._updateInput(); });
        },
        _updateInput: function ( e) {
            var date = this._getDate() || new Date(), time = this._getTime() || new Date();
			this.model.value = new Date(date.getFullYear(), date.getMonth(), date.getDate(),
                time.getHours(), time.getMinutes(), time.getSeconds());
            this._preVal = this._objectToString(this.model.value);
			this._updateDateTime();
            this._raiseChangeEvent();
            if(e)
            e.cancel = true;
        },
        _updateDateTime: function () {
            this.isValidState = true;
            var datetime = this._objectToString(this.model.value);
            this.element.val(datetime);
        },
        _refreshTimes: function (args) {
            var value = this._getDateObj(args.value, this.datePicker.model.dateFormat);
            if (!value) return false;
            this.isValidState = true;

            if (this._compare(value, this._setEmptyTime(this.model.minDateTime))) {
                var mintime = this._getFormat(this.model.minDateTime, "HH:mm:ss");
                var preTime = this._getTime();
                this.timePicker.option("minTime", mintime);
                if (!this._compare(preTime, this._getTime())) {
                    this.timePicker.model.value = this._getFormat(preTime, this.timePicker.model.timeFormat);
                    this.isValidState = false;
                }
            }
            else this.timePicker.option("minTime", "12:00:00 AM");

            if (this._compare(value, this._setEmptyTime(this.model.maxDateTime))) {
                var maxtime = this._getFormat(this.model.maxDateTime, "HH:mm:ss");
                var preTime = this._getTime();
                this.timePicker.option("maxTime", maxtime);
                if (!this._compare(preTime, this._getTime())) {
                    this.timePicker.model.value = this._getFormat(preTime, this.timePicker.model.timeFormat);
                    this.isValidState = false;
                }
            }
            else this.timePicker.option("maxTime", "11:59:59 PM");
        },

        _updateValues: function () {
            this._setValue(this.model.value);

            this.datePicker.option("value", this.model.value);
            this.timePicker.option("value", this.model.value);
            this._validateMinMax();
            this._preVal = this.element.val();
            this._checkErrorClass();
        },
        _setValue: function (value) {
            if (value == null || (typeof JSON === "object" && JSON.stringify(value) === "{}")) {
                this.element.val("");
                this.model.value = null;
                this.isValidState = true;
            }
            else if (typeof value === "string") {
                this.element.val(value);
                this._updateModel();
				this._validateMinMax();
				this._checkStrictMode();
            }
            else if (value instanceof Date && this._isValidDate(value)) {
                this.model.value = value;
                this._updateDateTime();
				this._validateMinMax();
				this._checkStrictMode();
            }

            this._checkErrorClass();
            return this.model.value;
        },
        _validateValue: function (value) {
            var dateObj = this._stringToObject(value);
            if (!dateObj) {
                this.model.value = value;
                this.isValidState = false;
            }
            else {
                this.isValidState = true;
                this.model.value = dateObj;
            }
        },
        _validateMinMax: function () {
            var value, min, max;
            value = (this.model.value) ? this._stringToObject(this.model.value) : null;
            min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
            max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
            if (!value || !min || !max) return false;

            if (min > max) this.model.minDateTime = this.model.maxDateTime;
            if (value < min || value > max) this.isValidState = false;
            else this.isValidState = true;
        },

        _checkProperties: function () {
            this.model.readOnly && this._readOnly(true);
            this.model.showRoundedCorner && this._setRoundedCorner(true);
            this.model.enableRTL && this._setRtl(true);
            this.model.enabled && this._enabled(true);
            if (!this.model.enabled) this._enabled(false);
            else if (this.model.enabled && this.element.hasClass("e-disable")) this._enabled(true);
            if (!this.element.attr("name")) this.element.attr({ "name": this.element[0].id });
			this._checkStrictMode();
            this._checkErrorClass();
        },
        
		_checkStrictMode: function () {
			if(!this.model.enableStrictMode){
				if(!this.isValidState){
					if(this.model.value < this.model.minDateTime){
						this.element.val(this._objectToString(this.model.minDateTime));
						this.model.value = this.model.minDateTime;
						this.isValidState = true;
					}
					else if(this.model.value > this.model.maxDateTime){
						this.element.val(this._objectToString(this.model.maxDateTime));
						this.model.value = this.model.maxDateTime;
						this.isValidState = true;
					}
					else {
						this.model.value = "";
						this.element.val("");
						this.isValidState = true;
					}
				}
			}
		},
		
        _targetFocus: function (e) {
            e.preventDefault();
            this.isFocused = true;
            this.wrapper.addClass("e-focus");
            this.wrapper.removeClass("e-error");
			this._prevDateTimeVal = this.element.val();
            if (!this.model.showPopupButton && !this.model.readOnly) this._showResult();
            this._trigger("focusIn", { value: this.model.value });
        },
        _targetBlur: function () {
            this.isFocused = false;
            this.wrapper.removeClass("e-focus");
            if (!this.model.showPopupButton) this._hideResult();
			if(!this.model.enableStrictMode){
				if(!this.isValidState){
					this.element.val(this._prevDateTimeVal);
					this._preVal = this._prevDateTimeVal;
					this.model.value = this._stringToObject(this._prevDateTimeVal);
					this.isValidState = true;
				}
				else
					this._prevDateTimeVal = this.element.val();
			}
			this._checkErrorClass();
            this._trigger("focusOut", { value: this.model.value });
        },

        _keyDownOnInput: function (e) {
            switch (e.keyCode) {
                case 40:        // Down Key
                    if (e.altKey) this._showhidePopup();
                    break;
                case 37:        // Left Key
                case 39:         // Right Key
                    if (e.altKey && this.isPopupOpen) {
                        e.preventDefault();
                        this._addPrevNextFocus(e.keyCode == 37);
                    }
                    break;
                case 27:        // Esc Key
                    e.preventDefault();
                case 9:         // Tab Key
                    this._hideResult();
                    break;
            }
        },
        _addFocus: function (target) {
            if (!target.hasClass("e-focus")) {
                this._removeFocus();
                target.addClass("e-focus");
                if (target.hasClass("e-datecontainer"))
                    $(document).bind("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).bind("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-dt-button"))
                    $(document).bind("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _removeFocus: function () {
            var target = this._getFocusedElement();
            if (target.length > 0) {
                target.removeClass("e-focus");
                if (target.hasClass("e-datecontainer"))
                    $(document).unbind("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
                else if (target.hasClass("e-timecontainer"))
                    $(document).unbind("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
                else if (target.hasClass("e-dt-button"))
                    $(document).unbind("keydown", $.proxy(this._buttonClick, this));
            }
        },
        _addPrevNextFocus: function (flag) {
            // flag true means previous focus, false means next focus
            var target = this._getFocusedElement(), next;
            if (target.length > 0) {
                if (target.hasClass("e-datecontainer"))
                    next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-timecontainer");
                else if (target.hasClass("e-timecontainer"))
                    next = flag ? this.popup.find(".e-datecontainer") : this.popup.find(".e-dt-today");
                else if (target.hasClass("e-dt-today"))
                    next = flag ? this.popup.find(".e-timecontainer") : this.popup.find(".e-dt-now");
                else if (target.hasClass("e-dt-now"))
                    next = flag ? this.popup.find(".e-dt-today") : this.popup.find(".e-dt-done");
                else if (target.hasClass("e-dt-done"))
                    next = flag ? this.popup.find(".e-dt-now") : this.popup.find(".e-datecontainer");
            }
            else next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-datecontainer");
            this._addFocus(next);
        },
        _getFocusedElement: function () {
            return this.popup.children("div").children("div.e-focus");
        },

        _valueChange: function () {
            if (this._preVal != this.element.val()) {
                this._preVal = this.element.val();
                this._updateModel();
                this._validateMinMax();
                this._raiseChangeEvent();
            }
        },
        _updateModel: function () {
            var value = this.element.val();
            if (value == "") {
                this.model.value = null;
                this.isValidState = true;
            }
            else {
                var dateObj = this._stringToObject(value);
                if (dateObj) {
                    this.model.value = dateObj;
                    this.isValidState = true;
                    this._refreshPopup();
                }
                else {
                    this.model.value = value;
                    this.isValidState = false;
                }
            }
        },
        _refreshPopup: function () {
            if (this.isValidState && this.isPopupOpen) {
                var date = this._setEmptyTime(this.model.value), time = this._setEmptyDate(this.model.value);
                var getDate = this._getDate(), getTime = this._getTime();
                if (!getDate || !this._compare(getDate, date)) this.datePicker.option("value", date);
                if (!getTime || !this._compare(getTime, time)) this.timePicker.option("value", time);
            }
        },

        _buttonClick: function (e) {
            if (e.keyCode == 13) {
                var target = this._getFocusedElement();
                if (target.hasClass("e-dt-today"))
                    this._todayClick();
                else if (target.hasClass("e-dt-now"))
                    this._nowClick();
                else if (target.hasClass("e-dt-done"))
                    this._doneClick();
            }
        },
        _todayClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            if (!this.datePicker.popup.find(".today").hasClass("e-active") ||
                !this.datePicker.popup.children("table").hasClass("e-dp-viewdays")||
                this.element.val() == "" || !this.isValidState)
            {
                this.datePicker._setCurrDate();
                this._updateInput();
            }
        },
        _nowClick: function () {
            if (!this.model.enabled || this.model.readOnly) return false;
            this.timePicker.setCurrentTime();
            this._updateInput();
        },
        _doneClick: function () {
            this._hideResult();
        },

        _iconClick: function (e) {
            e.preventDefault();
            if (!this.isFocused) this.element.focus();
            this._showhidePopup();
        },
        _showhidePopup: function () {
            if (this.model.readOnly) return false;
            if (!this.isPopupOpen)
                this._showResult();
            else
                this._hideResult();
        },
        _showResult: function () {
            if (this.isPopupOpen || !this.model.enabled) return false;
            if (this._raiseEvent("open")) return false;
            this.isPopupOpen = true;
            this._setListPosition();
            var proxy = this;
            this.popup.slideDown(this.model.enableAnimation?200:0, "easeOutQuad", function () {
                proxy._on($(document), "mousedown", proxy._OnDocumentClick);
            });
            this._updateModel();
            this._updateTimeHeight();
            this._validateMinMax();
            this._on($(window), "resize", this._OnWindowResize);
        },
        _hideResult: function () {
            if (!this.isPopupOpen) return false;
            if (this._raiseEvent("close")) return false;
            this.isPopupOpen = false;
            this._removeFocus();
            this.popup.slideUp(this.model.enableAnimation?100:0, "easeOutQuad");
            this._off($(document), "mousedown", this._OnDocumentClick);
            this._off($(window), "resize", this._OnWindowResize);
        },
        _setListPosition: function () {
            var pos = this._getOffset(this.wrapper),
            left = pos.left,
            top = pos.top + this.wrapper.outerHeight() + 3 + "px",
            maxZ = this._getZindexPartial();
            if (this.model.enableRTL) left -= this.popup.outerWidth() - this.wrapper.outerWidth();

            this.popup.css({ "left": left + "px", "top": top, "z-index": maxZ });
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },
       
        _OnDocumentClick: function (e) {
            if (this.model) {
                if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-datetime-popup").is(this.popup) &&
                    !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datetime-wrap").is(this.wrapper)) {
                    this._hideResult();
                }
                else if ($(e.target).is(this.popup) || $(e.target).parents(".e-datetime-popup").is(this.popup)) {
                    e.preventDefault();
                    if ($(e.target).parents(".e-datecontainer").length > 0) this._addFocus($(e.target).parents(".e-datecontainer"));
                    else if ($(e.target).parents(".e-timecontainer").length > 0) this._addFocus($(e.target).parents(".e-timecontainer"));
                    else if ($(e.target).hasClass("e-dt-button")) this._addFocus($(e.target));
                    else this._removeFocus();
                }
            }
        },
        _OnWindowResize: function (e) {
            this._setListPosition();
        },

        _raiseChangeEvent: function () {
            if (this.element != null && this.model.change)
                this._trigger("change", {
                    prevDateTime: this._preVal,
                    value: this.element.val(),
                    isValidState: this.isValidState
                });
        },
        _raiseEvent: function (name) {
            if (this.element != null && this.model[name]) return this._trigger(name, { prevDateTime: this._preVal, value:this.element.val() });
            return false;
        },
        _getDateTimeFormat: function () {
            var pattern = Globalize.culture(this.model.locale).calendar.patterns;

            if (!this.model.dateTimeFormat) this.model.dateTimeFormat = pattern.d + " " + pattern.t;
            if (!this.model.timeDisplayFormat) this.model.timeDisplayFormat = pattern.t;
        },
        _getZindexPartial: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },
        _checkErrorClass: function () {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
        _getDate: function () {
            return this.datePicker.model.value;
        },
        _getTime: function () {
            return this._getDateObj(this.timePicker.model.value, this.timePicker.model.timeFormat);
        },
        _setEmptyTime: function (date) {
            var newDate = new Date(date);
            newDate.setMilliseconds(0);
            newDate.setSeconds(0);
            newDate.setMinutes(0);
            newDate.setHours(0);
            return newDate;
        },
        _setEmptyDate: function (date) {
            var newDate = new Date(date);
            newDate.setDate(1);
            newDate.setMonth(0);
            newDate.setFullYear(2000);
            return newDate;
        },
        _objectToString: function (obj) {
            return this._getFormat(obj, this.model.dateTimeFormat);
        },
        _stringToObject: function (value) {
            return this._getDateObj(value, this.model.dateTimeFormat);
        },
        _getFormat: function (value, format) {
            if (value instanceof Date)
                return Globalize.format(value, format, this.model.locale);
            else return value;
        },
        _getDateObj: function (value, format) {
            if (typeof value === "string")
            {
                var temp = Globalize.parseDate(value, format);
                if(temp != null)
                	return temp;
                else
                {
                	var validDateObj = new Date(value);
                	if(this._isValidDate(validDateObj))
	                	return validDateObj; 
	                else return null;
                }
            }
            else return value;
        },
        _compare: function (obj1, obj2) {
            return obj1 && obj2 && obj1.getTime() == obj2.getTime();
        },
        _isValidDate: function (dateObj) {
            return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
        },

        //-------------------- Private Methods for setModel -------------------------//
        _change: function (property, value) {
            this.datePicker.option(property, value);
            this.timePicker.option(property, value);
        },
        _changeSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass).addClass(skin);
            this.popup.removeClass(this.model.cssClass).addClass(skin);

            this._change("cssClass", skin);
        },
        _localize: function (culture) {
            this.model.locale = culture;
            this.model.dateTimeFormat = this.model.timeDisplayFormat = "";
            this._getDateTimeFormat();
            if (this.isValidState || (this.model.value instanceof Date && this._isValidDate(this.model.value)))
                this.element.val(this._objectToString(this.model.value));
            this._preVal = this.element.val();
            this._change("locale", culture);
        },
        _readOnly: function (boolean) {
            if (boolean) this.element.attr("readonly", "readonly");
            else this.element.removeAttr("readonly");

            this._change("readOnly", boolean);
        },
        _setRoundedCorner: function (boolean) {
            if (boolean) {
                this.container.addClass("e-corner-all");
                this.popup.addClass("e-corner-all");
                this.popup.find(".e-dt-button").addClass("e-corner-all");
            }
            else {
                this.container.removeClass("e-corner-all");
                this.popup.removeClass("e-corner-all");
                this.popup.find(".e-dt-button").removeClass("e-corner-all");
            }
            this.datePicker.option("showRoundedCorner", boolean);
        },
        _setRtl: function (boolean) {
            if (boolean) {
                this.wrapper.addClass("e-rtl");
                this.popup.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.popup.removeClass("e-rtl");
            }

            this._change("enableRTL", boolean);
        },
        _enabled: function (boolean) {
            if (boolean) {
                this.model.enabled = false;
                this.enable();
            }
            else {
                this.model.enabled = true; // for initial rendering
                this.disable();
            }
        },
        _showButton: function (show) {
            this.model.showPopupButton = show;
            if (show) {
                this.container.addClass("e-padding");
                this._renderIcon();
            }
            else {
                this.container.removeClass("e-padding");
                this.datetimeIcon.remove();
                this.datetimeIcon = null;
            }
        },
        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this.popup.find(".e-dt-today").html(this.model.buttonText.today);
            this.popup.find(".e-dt-now").html(this.model.buttonText.now);
            this.popup.find(".e-dt-done").html(this.model.buttonText.done);
            this.popup.find(".e-timecontainer").find(".e-header").html(this.model.buttonText.timeTitle);
        },

        //-------------------- Public Methods -------------------------//

        /**
        * Enables the DateTimePicker control.
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datetime" /&gt;
		* &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
		* // Create DateTimePicker instance
		* var datetimeObj = $("#datetime").data("ejDateTimePicker");
		* datetimeObj.enable(); // enables the datetimepicker
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datetime" /&gt;
	    * &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
	    * // enables the datetimepicker
        * $("#datetime").ejDateTimePicker("enable");
	    * &lt;/script&gt;
		*@memberof ejDateTimePicker
		* @instance
        */
        enable: function () {
            if (!this.model.enabled) {
                this.element[0].disabled = false;
                this.model.enabled = true;
                this.element.removeClass("e-disable").attr("aria-disabled", false);
                if (this.datetimeIcon) this.datetimeIcon.removeClass("e-disable").attr("aria-disabled", false);
                this.popup.children("div").removeClass("e-disable").attr("aria-disabled", false);
                this._change("enabled", true);
            }
        },

        /**
        * Disables the DateTimePicker control.
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datetime" /&gt;
		* &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
		* // Create DateTimePicker instance
		* var datetimeObj = $("#datetime").data("ejDateTimePicker");
		* datetimeObj.disable(); // disables the datetimepicker
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datetime" /&gt;
	    * &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
	    * // disables the datetimepicker
        * $("#datetime").ejDateTimePicker("disable");
	    * &lt;/script&gt;
		*@memberof ejDateTimePicker
		* @instance
        */
        disable: function () {
            if (this.model.enabled) {
                this.element[0].disabled = true;
                this.model.enabled = false;
                this.element.addClass("e-disable").attr("aria-disabled", true);
                if (this.datetimeIcon) this.datetimeIcon.addClass("e-disable").attr("aria-disabled", true);
                this.popup.children("div").addClass("e-disable").attr("aria-disabled", true);
                this._hideResult();

                this._change("enabled", false);
                this.datePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
                this.timePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
            }
        },

        /**
        * Returns the current datetime value in the DateTimePicker.
		* @return datetime value
		* @example 
		* &lt;input type="text" id="datetime" /&gt;
		* &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
		* // Create DateTimePicker instance
		* var datetimeObj = $("#datetime").data("ejDateTimePicker");
		* datetimeObj.getValue(); // returns the datetime value
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datetime" /&gt;
	    * &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
	    * // returns the datetime value
        * $("#datetime").ejDateTimePicker("getValue");
	    * &lt;/script&gt;
		*@memberof ejDateTimePicker
		* @instance
        */
        getValue: function () {
            return this._objectToString(this.model.value);
        },

        /**
        * Updates the current system date value and time value to the DateTimePicker.
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datetime" /&gt;
		* &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
		* // Create DateTimePicker instance
		* var datetimeObj = $("#datetime").data("ejDateTimePicker");
		* datetimeObj.setCurrentDateTime(); // updates the current datetime value
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datetime" /&gt;
	    * &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
	    * // updates the current datetime value
        * $("#datetime").ejDateTimePicker("setCurrentDateTime");
	    * &lt;/script&gt;
		*@memberof ejDateTimePicker
		* @instance
        */
        setCurrentDateTime: function () {
            if (this.model.enabled && !this.model.readOnly)
                this._setValue(new Date());
        },

        /**
        * Shows or opens the DateTimePicker popup.
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datetime" /&gt;
		* &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
		* // Create DateTimePicker instance
		* var datetimeObj = $("#datetime").data("ejDateTimePicker");
		* datetimeObj.show(); // opens the datetime popup
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datetime" /&gt;
	    * &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
	    * // opens the datetime popup
        * $("#datetime").ejDateTimePicker("show");
	    * &lt;/script&gt;
		*@memberof ejDateTimePicker
		* @instance
        */
        show: function () {
            this._showResult();
        },

        /**
        * Hides or closes the DateTimePicker popup.
		* @return jQuery
		* @example 
		* &lt;input type="text" id="datetime" /&gt;
		* &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
		* // Create DateTimePicker instance
		* var datetimeObj = $("#datetime").data("ejDateTimePicker");
		* datetimeObj.hide(); // hides the datetime popup
		* &lt;/script&gt;
		* @example 
	    * &lt;input type="text" id="datetime" /&gt;
	    * &lt;script&gt;
		* $("#datetime").ejDateTimePicker();
	    * // hides the datetime popup
        * $("#datetime").ejDateTimePicker("hide");
	    * &lt;/script&gt;
		*@memberof ejDateTimePicker
		* @instance
        */
        hide: function () {
            this._hideResult();
        },

        //-------------------- Event Wire-up -------------------------//
        _wireEvents: function () {
            this._on(this.element, "focus", this._targetFocus);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.element, "keydown", this._keyDownOnInput);
            this._on(this.element, "keyup", this._valueChange);
        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Dialog control
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
       * @namespace ej
       * @class ejDialog
       * @param {object} options - settings for Dialog.
       * @requires jQuery
       * @requires jquery.easing.1.3.js
       * @requires ej.core.js
       * @requires ej.dialog.js
       * @requires ej.scroller.js
       * @requires ej.draggable.js
       * @classdesc Custom Design for Html Dialog control.
       *@example
       * &lt;div id="dialog" title="WPF"&gt;
       *Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
       * &lt;/div&gt;
       * &lt;script&gt;
       * // Create Dialog control
       *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 	
       * &lt;/script&gt;
       */
    ej.widget("ejDialog", "ej.Dialog", {
        _rootCSS: "e-dialog",
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span"],
        _setFirst: false,

        // default model
        defaults: {
            /// <summary>This Contains default property of Sycnfusion Dialog </summary>
            
			/**
			* Enables the Dialog window to open automatically.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* // Enables the Dialog window to open automatically during initialization  
			* 	 $("#dialog").ejDialog({  position: { X: 500, Y: 26 },showOnInit:true});				
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/	
           
			showOnInit: true,
			/**		
			* Allows the Dialog window to be closed by pressing the Esc key.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* // Enable closeOnEscape during initialization  
			* 	 $("#dialog").ejDialog({position: { X: 300, Y: 10 }, closeOnEscape: false});				 
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/	
            closeOnEscape: true,
			/**		
			* Customizes the close button tooltip text.
			* @default close
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //To set closeText API value during initialization  
			* 	$("#dialog").ejDialog({position: { X: 300, Y: 10 },closeIconTooltip: "hide" });				
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/	
           closeIconTooltip: "close",
		   /**		
			* Specifies the animation behaviour of the Dialog.	
			* @default true
			* @type {boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
			*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
			* &lt;/div&gt;
            * &lt;script&gt;
			* //To set enableAnimation API value during initialization  
			* 	$("#dialog").ejDialog({ enableAnimation: false});
            * &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
			enableAnimation: true,
				/**		
			* To enable the dialog window to dragged within the page.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable draggable during initialization  
			* 	$("#dialog").ejDialog({position: { X: 300, Y: 10 }, allowDraggable: false});					
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            allowDraggable: true,
					/**		
			* Set the height for the dialog control.
			* @default auto
			* @type {String | integer}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Set Height during initialization  
			* 	$("#dialog").ejDialog({position: { X: 300, Y: 10 }, height: 400 });				
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            height: "auto",
			/**		
			* Set the minimum height for the dialog control.
			* @default 150
			* @type {Integer}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Set minimum Height during initialization  
			* 	$("#dialog").ejDialog({position: { X: 300, Y: 10 }, minHeight: 400 });				
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            minHeight: 0,
			/**		
			* Set the minimum width for the dialog control.
			* @default 150
			* @type {Integer}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Set minimum Width during initialization  
			* 	 $("#dialog").ejDialog({position: { X: 300, Y: 10 }, minWidth: 400 });			
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            minWidth: 0,
			/**		
			* Set the maximum height for the dialog control.
			* @default null
			* @type {Integer}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Set maximum height during initialization  
			* 	  $("#dialog").ejDialog({position: { X: 300, Y: 10 }, maxHeight: 600 });		
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            maxHeight: null,
			/**		
			* Set the maximum width for the dialog control.
			* @default null
			* @type {Integer}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Set maximum width during initialization  
			* 	   $("#dialog").ejDialog({ position: { X: 300, Y: 10 },maxWidth: 600 });
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            maxWidth: null,
			/**		
			* Allows the dialog window to be used as a modal form.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable modal during initialization  
			* 	    $("#dialog").ejDialog({position: { X: 300, Y: 10 }, enableModal: true});
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            enableModal: false,
			/**		
			* Displays the dialog window at the given X and Y position.
			* X: Dialog set the left position value.
			* Y: Dialog set the top position value.
			* @default Null
			* @type {JSONobject}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable position during initialization  
			* 	    $("#dialog").ejDialog({position: { X: 300, Y: 10 }});
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            position: { X: "", Y: ""},
			/**		
			* Allows the dialog to be resized above the minimum height and minimum width values.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Allows the dialog to be resized during initialization  
			* 	    $("#dialog").ejDialog({ position: { X: 300, Y: 10 },enableResize: false});
			* &lt;/script&gt;
			 * @memberof ejDialog
			* @instance
			*/
            enableResize: true,
			/**		
			* Shows or hides the dialog header element.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* // Enable showHeader on initialization.  
			* 	   $("#dialog").ejDialog({ position: { X: 300, Y: 10 },showHeader: false});
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            showHeader: true,
			/**		
			* To load the dialog content at run time, such as ajax, images, and iframe.
			* @default null
			* @type {String}
			* @example
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt; 
	*  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
			* //Enable content on initialization.  
			* 	   $("#dialog").ejDialog({ position: { X: 300, Y: 10 },contentType: "ajax" });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            contentType: null, //'ajax', 'iframe','image'
			/**		
			* Loads AJAX, image, and iframe content from a given location (URL).
			* @default null
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;	
	* &lt;/div&gt;
	* &lt;script&gt;
			* //loadUrl on initialization.  
			* 	   $("#dialog").ejDialog({ position: { X: 300, Y: 10 },contentType: "ajax",contentUrl: "http://js.syncfusion.com/demos/web/dialog/ajaxcontent.html" });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            contentUrl: null,
			
            ajaxSettings: { type: 'GET', cache: false, url: "", data: {}, dataType: "html", contentType: "html", async: true },
 /**		
			*Provides title text for the Dialog control.
			* @default ""
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Title on initialization.  
			* 	    $("#dialog").ejDialog({position: { X: 300, Y: 10 }, title: "Custom title" });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            title: "",
			/**		
			*Sets the width of the Dialog control.
			* @default ""
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Width on initialization.  
			* 	 $("#dialog").ejDialog({ position: { X: 300, Y: 10 },width: 500 });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            width: 400,
			/**		
			*Sets the z-index value of the control for the Dialog control.
			* @default 1000
			* @type {Integer}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //zIndex on initialization.  
			* 	 $("#dialog").ejDialog({position: { X: 300, Y: 10 }, zIndex: 500 });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            zIndex: 1000,
			/**		
			*Set the root class for the Dialog control theme.
			* @default ""
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //cssClass on initialization.  
			* 	$("#dialog").ejDialog({position: { X: 300, Y: 10 }, cssClass: "gradient-lime" });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            cssClass: "",
			/**		
			*Displays dialog content from right to left when enabled
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable rtl on initialization.  
			* 	 $("#dialog").ejDialog({position: { X: 300, Y: 10 }, enableRTL: true});
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            enableRTL: false,
			/**		
			*Enables users to navigate right, left, up, and down in the control with keyboard action
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable  allowKeyboardNavigation on initialization.  
			* 	 $("#dialog").ejDialog({ position: { X: 300, Y: 10 },allowKeyboardNavigation: true});
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            allowKeyboardNavigation: true,
			/**		
			*Gives dialog window rounded corners.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable roundedCorner on initialization.  
			* 	 $("#dialog").ejDialog({position: { X: 300, Y: 10 }, showRoundedCorner: true});
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            showRoundedCorner : false,
			/**		
			*Gives dialog window rounded corners.
			* @default [“close”]
			* @type {StringArray}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //iconAction on initialization.  
			* 	 $("#dialog").ejDialog({ position: { X: 300, Y: 10 },actionButtons: ["close","collapsible","pin"]});
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            actionButtons: ["close"], // ["close","collapsible","maximize","minimize","custom","pin"]
 /**		
			*Custom icons for custom actions can be provided by using a CSS class.
			* @default null
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
	*  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
			* //customIconCss on initialization.  
			* 	 ("#dialog").ejDialog({ position: { X: 300, Y: 10 }, faviconCSS  : "custom-icon" });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            faviconCSS  : null,
			   /**		
			*Places the dialog in the given container.
			* @default null
			* @type {String}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
	*  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
			* // Enable contentContainer on initialization.  
			* 	$("#dialog").ejDialog({ position: { X: 300, Y: 10 },content: "#samplearea" });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            content: null,
			/**		
			*Saves the current model value to browser cookies for maintaining state.
			* @default False
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable persist on initialization.  
			* $("#dialog").ejDialog({position: { X: 300, Y: 10 }, enablePersistence: true});
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            enablePersistence: false,
			/**		
			*Enables or disables the Dialog control.
			* @default true
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Set enabled on initialization.  
			*  $("#dialog").ejDialog({position: { X: 300, Y: 10 }, enabled: true });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            enabled: true,
			/**		
			*Enables  the window resizing.
			* @default false
			* @type {Boolean}
			* @example 
			* &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			* //Enable windowResizing on initialization.  
			*  $("#dialog").ejDialog({position: { X: 300, Y: 10 }, enableAutoResize: true });
			* &lt;/script&gt;
			* @memberof ejDialog
			* @instance
			*/
            enableAutoResize: false,
            //Events
			 /**     
			 * Fires before dialog control is closed.
			 * @event
			 * @name ejDialog#beforeClose		
			 * @param {Object} argument.event returns the close icon click event args    
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //beforeClose event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *  beforeClose: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            beforeClose: null,
			/**     
			 * Fires  after dialog control is closed.
			 * @event
			 * @name ejDialog#Close		
			 * @param {Object} argument.event returns the close icon click event args    
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //beforeClose event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *  Close: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            close: null,
			/**     
			 * Fires  before dialog control is opened.
			 * @event
			 * @name ejDialog# beforeOpen		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * // beforeOpen event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *   beforeOpen: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            beforeOpen: null,
				/**     
			 * Fires  after dialog control is opened.
			 * @event
			 * @name ejDialog#open		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //  open event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *    open: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            open: null,
			 /**     
			 * Fires  when dialog control is dragged.
			 * @event
			 * @name ejDialog#drag		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {Object} argument.event  returns the mouse move event args
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //   drag event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *     drag: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            drag: null,
			/**     
			 * Fires when the dialog is starting to be dragged
			 * @event
			 * @name ejDialog#dragStart		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {Object} argument.event  returns the mouse down event args
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //    dragStart event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *      dragStart: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            dragStart: null,
				/**     
			 * Fires after the dialog dragging stops
			 * @event
			 * @name ejDialog#dragStop		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {Object} argument.event  returns the mouse down event args
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //     dragStop event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *       dragStop: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            dragStop: null,
	         /**    
			 * Fires on dialog resize action
			 * @event
			 * @name ejDialog#resize		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {Object} argument.event  returns the mouse move event args
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //      resize event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *        resize: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            resize: null,
			 /**    
			 * Fires on dialog resize start action
			 * @event
			 * @name ejDialog#resizeStart		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {Object} argument.event  returns the mouse down event args
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //       resizeStart event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *         resizeStart: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            resizeStart: null,
			 /**    
			 * Fires on dialog resize stop action
			 * @event
			 * @name ejDialog#resizeStop		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {Object} argument.event  returns the mouse leave event args
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //        resizeStop event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *          resizeStop: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            resizeStop: null,
				 /**    
			 * Fires on AJAX content, iframe, or image load actions
			 * @event
			 * @name ejDialog#contentLoad		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.url  returns the content location
			 * @param {Object} argument.contentType  returns the content type
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //         load event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *           contentLoad: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            contentLoad: null,
			/**    
			 * Fires when AJAX content is loaded successfully
			 * @event
			 * @name ejDialog#ajaxSuccess		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.url  returns the content location
			 * @param {string} argument.data  returns the content text
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //          ajaxSuccess event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *            ajaxSuccess: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            ajaxSuccess: null,
			/**    
			 * Fires after an AJAX content loading error
			 * @event
			 * @name ejDialog#ajaxError		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.url  returns the content location
			 * @param {string} argument.data  returns the content text
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //           ajaxError event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *             ajaxError: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            ajaxError: null,
            /**    
			 * Fires after Create dialog successfully
			 * @event
			 * @name ejDialog#create		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //           Create event for dialog
             *  $("#dialog").ejDialog({
             *	position: { X: 300, Y: 10 },
			 *             create: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            create: null,
            /**    
			 * Fires after Destroy event successfully
			 * @event
			 * @name ejDialog#destroy		
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the dialog model
			 * @param {string}  argument.type returns the name of the event			
			 * @example 
			 * &lt;div id="dialog" title="WPF"&gt;
	*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	* &lt;/div&gt;
	* &lt;script&gt;
			 * //           destroy event for dialog
             *  $("#dialog").ejDialog({
            
			 *             destroy: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejDialog
			 * @instance
			 */	
            destroy: null

        },

        dataTypes: {
            showOnInit: "boolean",
            closeOnEscape: "boolean",
			enableAnimation: "boolean",
            closeIconTooltip: "string",
            allowDraggable: "boolean",
            enableModal: "boolean",
            enableResize: "boolean",
            enableAutoResize: "boolean",
            showHeader: "boolean",
            title: "string",
            zIndex: "number",
            cssClass: "string",
            contentUrl: "string",
            contentType: "string",
            ajaxSettings: "data",
            actionButtons: "array"
        },
		/**
         * To configure the properties at runtime using SetModel		
		 * @private
         */	 
        _setModel: function (options) {
            if (!this.model.enabled && ej.isNullOrUndefined(options["enabled"])) return false;
            for (var key in options) {
                switch (key) {
                    case "closeIconTooltip": this._ejDialog.find("div.e-dialog-icon").attr("title", options[key]); break;
                    case "title":
                        this.model.title = options[key];
                        if (this._ejDialog.find("span.e-title").length <= 0) {
                            this._addTitleText();
                        }
                        else
                            this._ejDialog.find("span.e-title").html(options[key]);
                        break;
                    case "width": this.model.width = options[key]; this._setSize(); this._setContainerSize(); this._resetScroller(); break;
                    case "height": this.model.height = options[key]; this._setSize(); this._setContainerSize(); this._resetScroller(); break;
                    case "position": this.model.position = options[key]; this._dialogPosition(); break;
                    case "cssClass": this._changeSkin(options[key]); break;
                    case "showRoundedCorner ": this._roundedCorner(options[key]); break;
                    case "contentType": { this._appendContent(options[key]); break; }
                    case "enabled": { this.model.enabled = options[key]; this._enabledAction(options[key]); break; }
                    case "contentUrl": { this.model.contentUrl = options[key]; this._appendContent(this.model.contentType); break; }
                    case "content": { this._ejDialog.appendTo($(options[key])); break; }
                    case "minHeight": { this._ejDialog.css("minHeight", options[key]); break; }
                    case "minWidth": { this._ejDialog.css("minWidth", options[key]); break; }
					case "maxHeight": { this._ejDialog.css("maxHeight", options[key]); break; }
                    case "maxWidth": { this._ejDialog.css("maxWidth", options[key]); break; }
                    case "zIndex": { this._ejDialog.css('z-index', options[key]); break; }
                    case "faviconCSS  ": { this._dialogCustom.find("span").removeClass().addClass(options[key]); break; }
                    case "enableAutoResize": {
                        this.model.enableAutoResize = options[key];
                        this._ejDialog.addClass("e-dialog-resize");
                        this._wireResizing();
                        break;
                    }
					case "enableAnimation":{
							this.model.enableAnimation=options[key];
                        break;
                    }
					
                    case "allowDraggable": {
                        this.model.allowDraggable = options[key];
                        if (options[key])
                            this._enableDrag();
                        else {
                            this._dialogTitlebar.removeClass("e-draggable");
                        }
                        break;
                    }
                    case "enableResize": {
                        this.model.enableResize = options[key];
                        if (options[key])
                            this._enableResize();
                        else {
                            this._ejDialog.removeClass("e-resizable");
                            this._ejDialog.find(".e-resize-handle").remove();
                        }
                        break;
                    }
                    case "showHeader": {
                        this.model.showHeader = options[key];
                        if (options[key]) {
                            this._renderTitleBar();
                            this._iconsRender(this.model.actionButtons);
                            this._enableDrag();
                        }
                        else
                            this._ejDialog.find(".e-titlebar").remove();
                        break;
                    }
                    case "enableRTL":
                        {
                            if (options[key])
                                this._ejDialog.addClass("e-rtl");
                            else
                                this._ejDialog.removeClass("e-rtl");
                            break;
                        }
                    case "actionButtons":
                        {
                            if (!ej.isNullOrUndefined(this._dialogTitlebar)) {
                                this._removeAllIcons();
                                this._iconsRender(options[key]);
                            }
                        }
                    case "enableModal": this._enableModal(options[key]); break;
                }
            }
        },

         // all events bound using this._on will be unbind automatically
		/**
        * destroy the dialog widget
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
		* &lt;div id="dialog" title="WPF"&gt;
		*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
		* &lt;/div&gt;
		* &lt;script&gt;
		 *  $("#dialog").ejDialog(); 
		* // Create Dialog control
		*  var dialogObj = $("#dialog").data("ejDialog");	//Initialize the Dialog object.
		*  dialogObj.destroy(); //Calls the destroy method of Dialog to destroy
		* &lt;/script&gt;
		* @example 
		* &lt;div id="dialog" title="WPF"&gt;
		*Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
		* &lt;/div&gt;
		* &lt;script&gt;
		*  //call destroy method
		*  $("#dialog").ejDialog("destroy"); 
		* &lt;/script&gt;
		* @memberof ejDialog
		* @instance
         */
        _destroy: function () {
            if (this._overLay) this._overLay.remove();
            this._cloneElement.appendTo(this._ejDialog.parent());
            this._ejDialog.remove();
            this._cloneElement.removeClass("e-dialog");
            this.element = this._cloneElement;
            this._isOpen = false;
        },

        keyConfigs: [37, 38, 39, 40], //keyConfigs for up,down,left and right keys

        // constructor function
		/**
         * Create the dialog widget
		 * @private
         */	
        _init: function () {
            this._widthPercent = null;
            this._heightPercent = null;
            this._renderControl();
            this._wireEvents();
        },
		/**
         * Render Section For Dialog	
		 * @private
         */	
        // render dialog control
        _renderControl: function () {
            //Clone element     
            this._cloneElement = this.element.clone();
            this.element.attr("tabindex", 0).attr("role", "dialog").attr("aria-labelledby", this.element.prop("id") + "_title");
            this._ejDialog = ej.buildTag("div.e-dialog e-widget e-box " + this.model.cssClass + " e-dialog-wrap e-shadow#" + this.element.prop("id") + "_wrapper", "", { display: "none", zIndex: this.model.zIndex }, { tabidex: 0 });
            this.model.enableAutoResize ? this._ejDialog.addClass("e-dialog-resize") : "";
            this.wrapper = this._ejDialog;
            if (!ej.isNullOrUndefined(this.model.content))
                this._ejDialog.appendTo($(this.model.content));
            else
                this._ejDialog.appendTo(document.body);
            if (this.model.enableRTL)
                this._ejDialog.addClass("e-rtl");
            //Render the Title Bar
            if (this.model.showHeader)
                this._renderTitleBar();
            //Icons Rendering
            if (this.model.showHeader)
                this._iconsRender(this.model.actionButtons);
            //Append Content
            this._appendContent(this.model.contentType);
            this._enabledAction(this.model.enabled);
            this._enableDrag();
            this._setSize();
            this._sizeInPercent();
            if (this.model.showOnInit && this.model.contentType != "ajax")
                this.open();
            if (this.model.contentType != "ajax") {
                this._setContainerSize();
                this._renderScroller();
            }
            this._roundedCorner(this.model.showRoundedCorner);
            this.scroller = this.contentDiv.data("ejScroller");
         },
		 /**
         * To set Container Size for the Dialog control		
		 * @private
         */	
        _setContainerSize: function () {
            if (this.model.height != "auto") {
                this.contentDiv.height(this._ejDialog.height() - $(this._ejDialog.find("div.e-titlebar")).outerHeight());
                this.element.outerHeight(this._ejDialog.height() - $(this._ejDialog.find("div.e-titlebar")).outerHeight());
            }
        },
		 /**
         * To enable drag for the Dialog control		
		 * @private
         */	
        //Enable Drag
        _enableDrag: function () {
            if (this.model.allowDraggable && this.model.showHeader) {
                this._dialogTitlebar.addClass("e-draggable");
                this._dragDialog();
            }
        },
		/**
         * To add resize icon for the Dialog control		
		 * @private
         */	
        //Add resize icon
        _enableResize: function () {
            if (this.model.enableResize && this.model.enabled) {
                this._ejDialog.addClass("e-resizable");
                var resizeDiv = ej.buildTag("div.e-icon e-resize-handle");
                resizeDiv.appendTo(this._ejDialog);
                this._resizeDialog();
            }
        },
		/**
         * To change skin for the Dialog control		
		 * @private
         */	
        //Skin Change at run time
        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this._ejDialog.removeClass(this.model.cssClass).addClass(skin);
            }
        },
        _enableModal: function (value) {
            if (value) this._isOpen && this._createOverlay();
            else if (this._overLay) this._overLay.remove();
        },
		/**
         * To enabledAction  for the Dialog control		
		 * @private
         */	
        _enabledAction: function (flag) {
            if (flag) {
                this._ejDialog.removeClass("e-disable");
                this._enableResize();
            }
            else {
                this._ejDialog.addClass("e-disable");
                this._ejDialog.removeClass("e-resizable");
                this._ejDialog.find(".e-resize-handle").remove();
            }
        },
		/**
         * To render title bar  for the Dialog control		
		 * @private
         */
        _renderTitleBar: function () {
            this._elementTitle = this.element.attr("title");
            if (typeof this._elementTitle !== "string") {
                this._elementTitle = "";
            }
            this.model.title = this.model.title || this._elementTitle;
            this._dialogTitlebar = ej.buildTag("div#" + this.element.prop("id") + "_title.e-titlebar e-header").prependTo(this._ejDialog);
            this._addTitleText();
        },
        _addTitleText: function () {
            if (this.model.title) {
                //Add Title 
                ej.buildTag("span.e-title", this.model.title).prependTo(this._dialogTitlebar);
            }
        },
		/**
         * To render icons  for the Dialog control		
		 * @private
         */
        _iconsRender: function (iconArray) {
            for (var icon = 0; icon < iconArray.length; icon++) {
                switch (iconArray[icon]) {
                    case "close": {
                        this._closeIcon();
                        break;
                    }
                    case "collapsible": {
                        this._collapsibleIcon();
                        break;
                    }
                    case "maximize": {
                        this._maximizeIcon();
                        break;
                    }
                    case "minimize": {
                        this._minimizeIcon();
                        break;
                    }
                    case "pin": {
                        this._pinIcon();
                        break;
                    }
                    case "custom": {
                        this._customIcon();
                        break;
                    }
                }
            }
        },
		/**
         * To remove all the icons for the Dialog control		
		 * @private
         */
        _removeAllIcons: function () {
            this._dialogTitlebar.find("div.e-dialog-icon").remove();
        },
		/**
         * To append content  for the Dialog control		
		 * @private
         */
        _appendContent: function (contentType) {
            this.contentDiv = ej.isNullOrUndefined(this.contentDiv) ? ej.buildTag("div.e-dialog-scroller") : this.contentDiv;
            this.element.removeAttr("title").addClass("e-widget-content");
            if (!ej.isNullOrUndefined(this.model.contentUrl) && !ej.isNullOrUndefined(contentType)) {
                if (contentType == "ajax") {
                    this.model.ajaxSettings.url = this.model.contentUrl;
                    this._sendAjaxOptions(this.element, this.model.ajaxSettings.url);
                }
                else if (contentType == "iframe") {
                    if (this.element.children('.e-iframe').length > 0) {
                        var iframe = this.element.find('iframe.e-iframe');
                        iframe.attr('src', this.model.contentUrl);
                    }
                    else {
                        var iframe = ej.buildTag("iframe.e-iframe", "", { width: "100%" }, { scrolling: "no", frameborder: 0, src: this.model.contentUrl });
                        this.element.append(iframe).show().appendTo(this.contentDiv);
                    }
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
                else if (contentType == "image") {
                    var img = ej.buildTag("img.e-images", "", "", { src: this.model.contentUrl });
                    this.element.append(img).show().appendTo(this.contentDiv);
                    this._trigger("contentLoad", { contentType: contentType, url: this.model.contentUrl });
                }
            }
            else {
                this.element.show()
                .appendTo(this.contentDiv);
            }
            this.contentDiv.appendTo(this._ejDialog);
        },
		/**
         * To set showRoundedCorner   for the Dialog control		
		 * @private
         */
        _roundedCorner: function (value) {
            if (value) {
                this._ejDialog.addClass('e-corner-all');
                this._dialogTitlebar.addClass('e-corner-top');
                this._dialogClose.addClass('e-corner-all');
            }
            else if (this._ejDialog.hasClass('e-corner-all')) {
                this._ejDialog.removeClass('e-corner-all');
                this._dialogTitlebar.removeClass('e-corner-top');
                this._dialogClose.removeClass('e-corner-all');
            }
        },
		/**
         * To reRender scroller for the Dialog control		
		 * @private
         */
        _reRenderScroller: function () {
            if( this.scroller!=undefined) {
	            this.scroller.refresh();
	            if(!this.model.enableRTL) {
	            	if(this.scroller._v && this.model.enableResize) {
	            		var height = this.scroller.element.find('> div.e-vscroll').height(), padngSpace = 6, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerHeight();
	            		this.scroller._v.handle -= resizeHandleSize + padngSpace;
	            		this.scroller._v.handleSpace -= resizeHandleSize + padngSpace;
	            		this.scroller._updateLayout(this.scroller._v);
	            		this.scroller.element.find('> div.e-vscroll').height(height - resizeHandleSize );
	            	}
	            	if(!this.scroller._v && this.scroller._h && this.model.enableResize) {
	            		var width = this.scroller.element.find('> div.e-hscroll').width(), padngSpace = 6, resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerWidth();
	            		this.scroller._h.handle -= resizeHandleSize + padngSpace;
	            		this.scroller._h.handleSpace -= resizeHandleSize + padngSpace;
	            		this.scroller._updateLayout(this.scroller._h);
	            		this.scroller.element.find('> div.e-hscroll').width(width - resizeHandleSize );
	            	}
	            }
            }
        },
		/**
         * To Render scroller  for the Dialog control		
		 * @private
         */
        _renderScroller: function () {
            var scrollerWidth = this.model.width;
            if ((this.model.maxHeight !== null && this.model.maxHeight < this.element.outerHeight()) || !(this.model.height === "auto" || this.model.height === "100%")) {
                if (!(this.model.width === "auto" || this.model.width === "100%"))
                    scrollerWidth = this.element.outerWidth();
				var scrHeight = (this.model.maxHeight !== null) ? this.model.maxHeight - $("#"+this.element.prop("id") + "_title").outerHeight() : this.element.outerHeight();
                this.contentDiv.ejScroller({ width: scrollerWidth, height: scrHeight, enableRTL: this.model.enableRTL });
                this.scroller = this.contentDiv.data("ejScroller");
                this._reRenderScroller();
                this.contentDiv.width("100%");
            }
        },
        //Gets the maximum z-index in the document
         _dialogMaxZindex: function () {
             var parents = this.element.parents(), bodyEle, contEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            contEle = $(this.model.content).children(), cindex = contEle.index(this.popup);
            contEle.splice(cindex, 1);
            $(contEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },
        //Set the Zindex for dialog
		/**
         * To set the maximum z-index  for the Dialog control		
		 * @private
         */
        _setZindex: function () {
            var zindex = this._dialogMaxZindex();
            if (this.model.zIndex <= zindex) {
                this._ejDialog.css({ zIndex: zindex + 1 });
            }
        },
        //Create the modal overlay div
		/**
         * To Create the modal overlay div for the Dialog control		
		 * @private
         */
        _createOverlay: function () {
            var zindex = this._ejDialog.css('zIndex');//this._dialogMaxZindex() < this.model.zIndex ? this.model.zIndex : this._dialogMaxZindex();
            this._overLay = ej.buildTag("div#" + this.element.attr("id") + "_overLay.e-overlay", "", { zIndex: zindex - 1 });
            this._overLay.appendTo(this.model.content != null ? this.model.content : document.body);
        },

        //handling the ajax request
		/**
         * To handle ajax request for the Dialog control		
		 * @private
         */
        _sendAjaxOptions: function (content, link) {
            //load waiting popup
            content.addClass("e-load");
            var proxy = this;
            var curTitle = this.model.title;
            var hrefLink = link;
            var ajaxOptions = {

                "success": function (data) {
                    try {
                        proxy._ajaxSuccessHandler(data, content, link, curTitle);
                    } catch (e) {

                    }
                }, "error": function (e) {
                    try {
                        proxy._ajaxErrorHandler(e.statusText, content, link, curTitle);
                    } catch (e) {

                    }
                }, "complete": function () {
                    try {
                        proxy._setContainerSize();
                        proxy._renderScroller();
                    } catch (e) {

                    }
                }
            };
            $.extend(true, ajaxOptions, this.model.ajaxSettings);
            this._sendAjaxRequest(ajaxOptions);
        },
		/**
         * To send ajax request for the Dialog control		
		 * @private
         */
        _sendAjaxRequest: function (ajaxOptions) {
            $.ajax({
                type: ajaxOptions.type,
                cache: ajaxOptions.cache,
                url: ajaxOptions.url,
                dataType: ajaxOptions.dataType,
                data: ajaxOptions.data,
                contentType: ajaxOptions.contentType,
                async: ajaxOptions.async,
                success: ajaxOptions.success,
                error: ajaxOptions.error,
                beforeSend: ajaxOptions.beforeSend,
                complete: ajaxOptions.complete
            });
        },
/**
         * Section For handle the ajaxSuccess event
		 * @private
         */	
        _ajaxSuccessHandler: function (data, content, link, curTitle) {
            content.removeClass("e-load");
            content.html(data).addClass("e-dialog-loaded").appendTo(this._ejDialog);
            content.appendTo(this.contentDiv);
            this._dialogPosition();
            if (this.model.showOnInit)
            this.open();
            this._trigger("ajaxSuccess", { data: data, url: link });
        },
		/**
         * Section For handle the ajaxSuccess event
		 * @private
         */	
        _ajaxErrorHandler: function (data, content, link, curTitle) {
            content.addClass("e-dialog-loaded");
            content.appendTo(this.contentDiv);
            this._dialogPosition();
            this.open();
            this._trigger("ajaxError", { data: data, url: link });
        },
		/**
         * To set close icon for the dialog control
		 * @private
         */	
        _closeIcon: function () {
            this._dialogClose = ej.util.buildTag("div.e-dialog-icon");
            var span = ej.util.buildTag("span.e-icon e-close", "", {}, { role: "presentation" });
            span.appendTo(this._dialogClose);
            this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.closeIconTooltip);
            this._on(this._dialogClose, "touchstart click", this._closeClick);
        },
		/**
         * To set collapsible icon for the dialog control.
		 * @private
         */	
        _collapsibleIcon: function () {
            this._dialogCollapsible = ej.util.buildTag("div.e-dialog-icon")
            var span = ej.util.buildTag("span.e-icon e-collapse-arrow", "", {}, { role: "presentation" });
            span.appendTo(this._dialogCollapsible);
            this._dialogCollapsible.appendTo(this._dialogTitlebar);
            this._on(this._dialogCollapsible, "mousedown", this._collapsibleClick);
        },
		/**
         * To set maximize icon for the dialog control.
		 * @private
         */	
        _maximizeIcon: function () {
            this._dialogMaximize = ej.util.buildTag("div.e-dialog-icon")
            var span = ej.util.buildTag("span.e-icon e-maximize", "", {}, { role: "presentation" });
            span.appendTo(this._dialogMaximize);
            this._dialogMaximize.appendTo(this._dialogTitlebar);
            this._on(this._dialogMaximize, "mousedown", this._maximizeClick);
        },
		/**
         * To set minimize icon for the dialog control.
		 * @private
         */	
        _minimizeIcon: function () {
            this._dialogMinimize = ej.util.buildTag("div.e-dialog-icon")
            var span = ej.util.buildTag("span.e-icon e-minimize", "", {}, { role: "presentation" });
            span.appendTo(this._dialogMinimize);
            this._dialogMinimize.appendTo(this._dialogTitlebar);
            this._on(this._dialogMinimize, "mousedown", this._minimizeClick);
        },
		/**
         * To set pin icon for the dialog control.
		 * @private
         */	
        _pinIcon: function () {
            this._dialogPin = ej.util.buildTag("div.e-dialog-icon")
            var span = ej.util.buildTag("span.e-icon e-unpin", "", {}, { role: "presentation" });
            span.appendTo(this._dialogPin);
            this._dialogPin.appendTo(this._dialogTitlebar);
            this._on(this._dialogPin, "mousedown", this._pinClick);
        },
		/**
         * To set custom icon for the dialog control.
		 * @private
         */	
        _customIcon: function () {
            this._dialogCustom = ej.util.buildTag("div.e-dialog-icon","", {},{ style: "float:left" });
            var span = ej.util.buildTag("span.e-dialog-custom", "", {}, { role: "presentation" });
            span.appendTo(this._dialogCustom);
            this._dialogCustom.appendTo(this._dialogTitlebar);
            if (!ej.isNullOrUndefined(this.model.faviconCSS  ))
                span.addClass(this.model.faviconCSS  );
        },
		/**
         * To set size for the dialog control.
		 * @private
         */	
        _setSize: function () {
            var mdl = this.model;
            this._ejDialog.css({ width: mdl.width, minWidth: mdl.minWidth, maxWidth: mdl.maxWidth });
            this._ejDialog.css({ height: mdl.height, minHeight: mdl.minHeight, maxHeight: mdl.maxHeight });
        },
		/**
         * To reset Scroller for the dialog control.
		 * @private
         */	
        _resetScroller: function () {
            var scrHeight = parseInt(this.model.height) - $(this._ejDialog.find("div.e-titlebar")).outerHeight();
            this.scroller = this.contentDiv.data("ejScroller");
            this.contentDiv.ejScroller({ "width": this.model.width, "height": scrHeight });
            this.element.width("auto");
        	this._reRenderScroller();
            this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
            if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0)
            this.element.css({ "height": this.contentDiv.height() - this._padding });
        },
		/**
         * To drag dialog control.
		 * @private
         */	
        _dragDialog: function () {
            var proxy = this;
            var pos = this._ejDialog.parents(".e-dialog-scroller");
            this._dialogTitlebar.ejDraggable({
                handle: ".e-titlebar",
                cursorAt: !pos.offset() ? { top: 0, left: 0 } : pos.offset(),
                dragStart: function (event) {
                    proxy._clickHandler();
                    if (proxy.dialogPin || !proxy.model.allowDraggable || !proxy.model.enabled)
                        event.cancel = true;
                    if (proxy._trigger("dragStart", { event: event })) {
                        event.cancel = true;
                        return false;
                    }
                },
                drag: function (event) {
                    proxy._trigger("drag", { event: event });
                },
                dragStop: function (event) {
                    proxy._ejDialog.focus();
                    if (proxy.element.find(".e-draggable.e-titlebar")) {
                        dragobject = $("#" + proxy.element.find(".e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                        if (dragobject)
                            dragobject.option("cursorAt",  proxy.element.offset());
                    }
                    proxy._trigger("dragStop", { event: event });
                },
                helper: function (event) {
                    return $(proxy._ejDialog).addClass("dragClone");
                }
            });
        },
		/**
         * To resize dialog control.
		 * @private
         */	
        _resizeDialog: function () {
            var proxy = this, started = false;
            this._ejDialog.find("div.e-resize-handle").ejResizable(
                {
                    minHeight: parseInt(proxy.model.minHeight),
                    minWidth: parseInt(proxy.model.minWidth),
                    maxHeight: parseInt(proxy.model.maxHeight),
                    maxWidth: parseInt(proxy.model.maxWidth),
                    handle: "e-widget-content",
                    resizeStart: function (event) {
                        !started && proxy._trigger("resizeStart", { event: event });
                        started = true;
                    },
                    resize: function (event) {
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).height();
                        proxy.model.width = $(reElement).width();
                        proxy._setSize();
                        proxy._resetScroller();
                        proxy._trigger("resize", { event: event });
                    },
                    resizeStop: function (event) {
                        proxy._ejDialog.focus();
                        proxy._sizeInPercent();
                        started && proxy._trigger("resizeStop", { event: event });
                        started = false;
                    },
                    helper: function (event) {
                        var reElement = $(event.element).parents("div.e-dialog-wrap");
                        proxy.model.height = $(reElement).height();
                        proxy.model.width = $(reElement).width();
                        proxy._setSize();
                        proxy._resetScroller();
                        return $(proxy._ejDialog);
                    }
                });
        },
		/**
         * To set position for the dialog control.
		 * @private
         */	
        _dialogPosition: function () {
            if (this._ejDialog.parents("form").length > 0 && ej.isNullOrUndefined(this.model.content)) {
                this._ejDialog.appendTo(this._ejDialog.parents("form"));
            }
            if (this.model.position.X != "" || this.model.position.Y != "") {
                this._ejDialog.css("position", "absolute");
                this._ejDialog.css("left", this.model.position.X + "px");
                this._ejDialog.css("top", this.model.position.Y + "px");
            }
            else {
                var x, y;
                if (!ej.isNullOrUndefined(this.model.content)) {
                    var location = $(this.model.content).position();
                    x = ($(this.model.content).outerWidth() > this._ejDialog.width()) ? (($(this.model.content).outerWidth() - this._ejDialog.width()) / 2) + Math.ceil(location.left) : Math.ceil(location.left);
                    y = ($(this.model.content).outerHeight() > this._ejDialog.height()) ? (($(this.model.content).outerHeight() - this._ejDialog.height()) / 2) + Math.ceil(location.top) : Math.ceil(location.top);
                }
                else {
                    var doc = document.documentElement;
                    x = (($(window).outerWidth() > this._ejDialog.width()) ? ($(window).outerWidth() - this._ejDialog.outerWidth()) / 2 : 0) + (window.pageXOffset || doc.scrollLeft);
                    y = (($(window).outerHeight() > this._ejDialog.height()) ? ($(window).outerHeight() - this._ejDialog.outerHeight()) / 2 : 0) + (window.pageYOffset || doc.scrollTop);
                }
                this._ejDialog.css({ top: y, left: x });
                this._ejDialog.css("position", "absolute");
            }         
        },
		/**
         * Section handles when close icon is clicked
		 * @private
         */	
        _closeClick: function (event) {
            event.stopPropagation();
            this.close(event);
        },
			/**
         * Section handles when collapsible icon is clicked
		 * @private
         */	
        _collapsibleClick: function (e) {
            if ($(e.target).hasClass("e-collapse-arrow")) {
                this._dialogCollapsible.find("span.e-collapse-arrow").removeClass("e-collapse-arrow").addClass("e-expand-arrow");
                this._ejDialog.find("div.e-resize-handle").hide();
                this._ejDialog.find(".e-widget-content").parent().slideUp("fast");
                this._ejDialog.removeClass("e-shadow");
                this._ejDialog.css("minHeight", "0");
                this._ejDialog.height("auto");
            }
            else if ($(e.target).hasClass("e-expand-arrow")) {
                this._dialogCollapsible.find("span.e-expand-arrow").removeClass("e-expand-arrow").addClass("e-collapse-arrow");
                this._ejDialog.addClass("e-shadow");
                this._ejDialog.find(".e-widget-content").parent().slideDown("fast");
                this._ejDialog.find("div.e-resize-handle").show();
                this._ejDialog.height(this.model.height);
            }
        },
		/**
         * Section handles when maximize icon is clicked
		 * @private
         */	
        _maximizeClick: function (e) {
            var _target = $(e.target);
            if (_target.hasClass("e-maximize")) {
                this._ejDialog.css("top", "0px").css("left", "0px").css("position", "fixed");
                this._ejDialog.css({ width: "100%", height: "100%" });
                this.element.css({ width: "100%", height: "100%" });
                this.contentDiv.css({ width: "100%", height: "100%" });
                _target.removeClass("e-maximize").addClass("e-restore");
                this._maximize = true;
                this.dialogPin = true;
            }
            else if (_target.hasClass("e-restore")) {
                this.element.height("");
                this.element.width("");
                this._restoreDialog();
                _target.removeClass("e-restore").addClass("e-maximize");
            }
        },
		/**
         * Section handles when minimize icon is clicked
		 * @private
         */	
        _minimizeClick: function (e) {
            var _target = $(e.target);
            if (_target.hasClass("e-minimize")) {
                if (this._maximize)
                    this._setSize();
                var top = ($(window).height() - this._ejDialog.height()) + this.element.height() + 14;
                this._ejDialog.css("top", "").css("bottom", "0").css("left", "0").css("position", "fixed");
                this._ejDialog.css("minHeight", "0");
                this._ejDialog.css("height", (this._ejDialog.height() - this.contentDiv.height()));
                this.contentDiv.hide();
                _target.parent().hide();
                this._dialogTitlebar.find(".e-maximize").removeClass("e-maximize").addClass("e-restore");
                           
            }
        },
		/**
         * Section handles when pinicon is clicked
		 * @private
         */	
        _pinClick: function (e) {
            var _target = $(e.target);
            if (_target.hasClass("e-unpin")) {
                this.dialogPin = true;
                _target.removeClass("e-unpin").addClass("e-pin");
            }
            else if (_target.hasClass("e-pin")) {
                this.dialogPin = false;
                _target.removeClass("e-pin").addClass("e-unpin");
            }
        },
		/**
         * to restore dialog control
		 * @private
         */	
        _restoreDialog: function () {
            this.dialogPin = false;
            this.contentDiv.show();
            this._ejDialog.css("position", "absolute").css("bottom", "");
            this._setSize();
            this._dialogPosition();
            this._reRenderScroller();
            this._dialogTitlebar.find(".e-minimize").parent().show();
        },
		/**
         * Section handles  click event
		 * @private
         */	
        _clickHandler: function (e) {
            var zindex = this._dialogMaxZindex();
            if (parseInt(this._ejDialog.css("zIndex")) < zindex) {
                this._ejDialog.css({ zIndex: zindex + 1 });
            }
        },
		/**
         * Section handles keydown event
		 * @private
         */	
        _docKeyDown: function (e) {
            if (this.model.enabled) {
                if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
                else if (e.which) code = e.which; // ns4 and opera
                else code = e.charCode;
                if (this.model.closeOnEscape && code === 27) {
                    this.close(e);
                    e.preventDefault();
                }
            }
        },
		/**
         * Section handles keydown event
		 * @private
         */	
        _keyDown: function (e) {
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            if (this.model.allowKeyboardNavigation && this.model.enabled && $(e.target).hasClass("e-dialog")) {
                if ($.inArray(code, this.keyConfigs) > -1 && this.model.allowDraggable && !this.dialogPin) {
                    this._keyPressed(code, e.ctrlKey);
                    e.preventDefault();
                }
            }
        },
		/**
         * Section handles keypress event for the dialog control
		 * @private
         */	
        _keyPressed: function (code, ctrlKey) {
            switch (code) {
                case 40:    //Down arrow
                    ctrlKey ? this._resetWidthHeight(this.model.width, this._ejDialog.height() + 3) : this._ejDialog.css("top", this._ejDialog.position().top + 3 + "px");
                    break;
                case 39:    //Right arrow
                    ctrlKey ? this._resetWidthHeight(this._ejDialog.width() + 3, this._ejDialog.height()) : this._ejDialog.css("left", this._ejDialog.position().left + 3 + "px");
                    break;
                case 38:    //Up arrow
                    ctrlKey ? this._resetWidthHeight(this._ejDialog.width() - 3, this._ejDialog.height()) : this._ejDialog.css("top", this._ejDialog.position().top - 3 + "px");
                    break;
                case 37:    //Left arrow
                    ctrlKey ? this._ejDialog.width(this._ejDialog.width() - 3) : this._ejDialog.css("left", this._ejDialog.position().left - 3 + "px");
                    break;
            }
        },
		/**
         * to set for the dialog control in percent
		 * @private
         */	
        _sizeInPercent: function () {
            if (!this._enableWindowResize()) return false;
            var parentObj = this._getParentObj();
            this._widthPercent = this._convertPixelToPercentage(parentObj.outerWidth(), this._ejDialog.outerWidth());
            this._heightPercent = this._convertPixelToPercentage(parentObj.outerHeight(), this._ejDialog.outerHeight());
            if (this._widthPercent > 100) {
                this._widthPercent = 100;
                this._ejDialog.outerWidth(parentObj.outerWidth());
                this.model.width = this._ejDialog.width();
            }
            if (this._heightPercent > 100) {
                this._heightPercent = 100;
                this._ejDialog.outerHeight(parentObj.outerHeight());
                this.model.height = this._ejDialog.height();
            }
        },
		/**
         * to get the parent of the dialog control
		 * @private
         */	
        _getParentObj: function () {
            if (!ej.isNullOrUndefined(this.model.content))
                return $(this.model.content);
            else
                return (this._ejDialog.parent()[0].nodeName == "BODY" ? $(window) : "");
        },
		/**
         * to convert the percentage value to pixels
		 * @private
         */	
        _convertPercentageToPixel: function (parent, child) {
            return Math.round((child * parent) / 100);  //round       
        },
		/**
         * to convert the pixel value to percentage
		 * @private
         */		
        _convertPixelToPercentage: function (parent, child) {
            return Math.round((child / parent) * 100); //round
        },
        //_setPosition: function () {
        //    if ((this.model.allowWindowResizing) || ((isNaN(this.model.width)&&(this.model.width.indexOf("%") > 0))||(isNaN(this.model.height)&&(this.model.height.indexOf("%") > 0)))) this._dialogPosition();
        //},
		/**
         * section handles when window is resized
		 * @private
         */
        _reSizeHandler: function () {
            var parentObj;
            this._dialogPosition();
            parentObj = this._getParentObj();
            this._ejDialog.outerWidth(this._convertPercentageToPixel(parentObj.outerWidth(), this._widthPercent));
            this._ejDialog.outerHeight(this._convertPercentageToPixel(parentObj.outerHeight(), this._heightPercent));
            this.contentDiv.width(this._ejDialog.width());
            this.element.outerWidth( this.contentDiv.width());
			this.contentDiv.height(this._ejDialog.height() - $(this._ejDialog.find("div.e-titlebar")).outerHeight());
			this.element.outerHeight(this._ejDialog.height() - $(this._ejDialog.find("div.e-titlebar")).outerHeight());
			this.scroller = this.contentDiv.ejScroller({ width: this._ejDialog.width(), height: this.element.outerHeight(), rtl: this.model.rtl });
            this.scroller = this.contentDiv.data("ejScroller");
            this._reRenderScroller();
            this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
            if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0)
            this.element.css({ "height": this.contentDiv.height() - this._padding });
            this._dialogPosition();
        },
		/**
         * to enable window resize
		 * @private
         */
        _enableWindowResize:function()
        {
            if (this.model.enableAutoResize || ((isNaN(this.model.width) && (this.model.width.indexOf("%") > 0)) && (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0)&&(this.model.height!="auto"))))
                return true;
            else 
                return false;
        },
        _wireResizing: function () {         
            this._enableWindowResize() ? $(window).bind('resize', $.proxy(this._reSizeHandler, this)) : $(window).unbind('resize', $.proxy(this._reSizeHandler, this))
        },
        
        //-------------------- Event Wire-up -------------------------//
		/**
         * Wiring the events to dialog control		
		 * @private
         */	
        _wireEvents: function () {
            //tabs Click evnts
            this._on($(document), "keydown", this._docKeyDown);
            this._on(this._ejDialog, "keydown", this._keyDown);
            this._wireResizing();
        },

        // ------------------Client side methods-------------------------//
		/**
         * To open the dialog 
		 * @return jQuery
		 * @example 
		 * &lt;div id="dialog" title="WPF"&gt;
	     * Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	     * &lt;/div&gt;
	     * &lt;script&gt;
	* // Create Dialog control
    *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
         * //initialize the dialog object
         *	var dialogObj = $("#dialog").data("ejDialog");
         *	//To open the dialog 
         *	dialogObj.open();
         * &lt;/script&gt;
         * @example 
         &lt;div id="dialog" title="WPF"&gt;
	     * Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	     * &lt;/div&gt;
	     * &lt;script&gt;
	* // Create Dialog control
   *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
         * //To open the dialog 
         * $("#dialog").ejDialog("open");
         * &lt;/script&gt;
		 * @memberof ejDialog
		 * @instance
        */  
        open: function () {
            if (!this.model.enabled) return false;
            if (this._isOpen) {
                return true;
            }
            if (true == this._trigger("beforeOpen")) {
                return false;
            }
            this.element.css("display", "block");
            this._setZindex();
            this._dialogPosition();
            var proxy = this;
            this._ejDialog.fadeIn(this.model.enableAnimation?400:0, "easeOutQuad", function () {
                // Animation complete
                proxy._trigger("open");
            });
            if (this.model.enableModal == true)
                this._createOverlay();
            this._ejDialog.eq(0).focus();
            this._isOpen = true;
            if (this.element.find(".e-draggable.e-titlebar")) {
                dragobject = $("#" + this.element.find(".e-draggable.e-titlebar").attr("id")).data("ejDraggable");
                if (dragobject)
                    dragobject.option("cursorAt", this.element.offset());
            }
            return this;
        },
		/**
         * To close the dialog
		 * @return jQuery
		 * @example 
		 * &lt;div id="dialog" title="WPF"&gt;
	     * Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	     * &lt;/div&gt;
	     * &lt;script&gt; 
	     *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }});
         * //initialize the dialog object
         *	var dialogObj = $("#dialog").data("ejDialog");
         *	//To close the dialog 
         *	dialogObj.close();
          * &lt;/script&gt; 
         * @example 
         * &lt;div id="dialog" title="WPF"&gt;
	     * Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	     * &lt;/div&gt;
	     * &lt;script&gt; 
	    *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
         * //To close the dialog 
         * $("#dialog").ejDialog("close");
         * &lt;/script&gt; 
		 * @memberof ejDialog
		 * @instance
        */   
        close: function (event) {
            if (!this._isOpen || !this.model.enabled) {
                return true;
            }
            if (true == this._trigger("beforeClose", { event: event })) {
                return false;
            }
            this._isOpen = false;
            this.element.css("display", "none");
            var proxy = this;
            this._ejDialog.fadeOut(this.model.enableAnimation?300:0, "easeOutQuad", function () {
                // Animation complete
                proxy._trigger("close", { event: event });
            });
            if (this.model.enableModal) {
                if (this._overLay) this._overLay.remove();
            }
            return this;
        },
		/**
         * To get dialog control is opened or not
		 * @return boolean
		 * @example 
		 * &lt;div id="dialog" title="WPF"&gt;
	     * Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	     * &lt;/div&gt;
	      * &lt;script&gt;
	      *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
         * //initialize the dialog object
         *	var dialogObj = $("#dialog").data("ejDialog");
         * //To get the dialog status
         *	dialogObj.isOpened();
          * &lt;/script&gt;
         * @example 
         * &lt;div id="dialog" title="WPF"&gt;
	     * Developed by Microsoft, the Windows Presentation Foundation (or WPF) is a computer-software graphical subsystem for rendering user interfaces in Windows-based applications. WPF, previously known as "Avalon", was initially released as part of .NET Framework 3.0. Rather than relying on the older GDI subsystem, WPF uses DirectX. WPF attempts to provide a consistent programming model for building applications and separates the user interface from business logic. It resembles similar XML-oriented object models, such as those implemented in XUL and SVG.
	     * &lt;/div&gt;
          * &lt;script&gt;
          *  $("#dialog").ejDialog({position: { X: 300, Y: 10 }}); 
         * //To get the dialog status
         * $("#dialog").ejDialog("isOpened");
          * &lt;/script&gt;
		 * @memberof ejDialog
		 * @instance
        */   
        isOpened: function () {
            return this._isOpen;
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html input elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    /**
   * @namespace ej
   * @classdesc The DropDownList control provides a list options to make user to choose an item from the list. It is capable of including other html elements such as images, textboxes, check box, radio buttons and so on.
   * @class ejDropDownList
   * @requires jQuery
   * @requires jquery.easing.1.3.js
   * @requires ej.core.js
   * @requires ej.data.js
   * @requires ej.dropdownlist.js
   * @requires ej.checkbox.js
   * @requires ej.scroller.js
   * @example 
   * &lt;input type="text" id="drpdwn" /&gt; <br> 
   *  &lt;div id="carsList"&gt;
   *    &lt;ul&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *    &lt;/ul&gt;
   *  &lt;/div&gt;
   * &lt;script&gt;
   * // Create DropDownList
   * $('#drpdwn').ejDropDownList({targetID: "carsList"}); 	
   * &lt;/script&gt; 
   *@example
    * // Another way to render DropDownList control.
	*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;ComputerIT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;
    * // Create DropDownList
    * $('#drpdwn').ejDropDownList(); 	
    * &lt;/script&gt; 
    */
    // ejDropdownlist is the plugin name 
    // "ej.Dropdownlist" is "namespace.className" will hold functions and properties

    ej.widget("ejDropDownList", "ej.DropDownList", {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        validTags: ["select", "input"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "create", "popupHide", "popupShown", "beforePopupShown", "beforePopupHide", "change", "select", "checkChange", "destroy"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-dropdownlist",

        // default model
        defaults: {
            /**		
            * Sets the root class for DropDownList theme. This cssClass API helps to use custom skinning option for DropDownList control. By defining the root class using this API, we need to include this root class in CSS.
            * @default "gradient-lime"
            * @type {string}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/>
			* &lt;script&gt;
            * //Initialize the DropDownList with the cssClass value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",cssClass: 'gradient-lime'});
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            cssClass: "",
            /**
            * Defines the default value to be display in the DropDownList textbox.
            * @default Null
            * @type {string}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;
            * //Initialize the DropDownList value property with the  value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",value:"Audi A7" });
             * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            value: "",
           
            text: "",
           
            itemValue: "",
            /**		
            * Specifies the itemsCount   for DropDownList.
            * @default 0
            * @type {number}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // To set itemsCount   API value during initialization  . 	
            * 	$("#drpdwn").ejDropDownList({  targetID: "carsList",itemsCount  : 2 });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            itemsCount: 0,
            /**		
            * Specifies the data source of the DropDownList. The data source contains the list of data for generating the DropDownList items.	
            * @default null
            * @type {data}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			* &lt;script&gt;		
            * //To set dataSource API value during initialization  
            * 	$("#drpdwn").ejDropDownList({ dataSource: window.countries });			 
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            dataSource: null,
            /**		
            * Sets the separator to allow multiple word searches.if we enter the delimiter value, the texts after the delimiter are considered as a separate word or query. The delimiter string should have a single character and must be a symbol. Mostly the delimiter symbol is used as (comma ,) or (semi-colon ;) or any other special character.
            * @default ';'
            * @type {string}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			* &lt;script&gt;		
            * //To set dataSource API value during initialization  
            * 	$("#drpdwn").ejDropDownList({ delimiterChar:";" });			 
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            delimiterChar: ',',
            /**		
            * Specifies the query to retrieve the data from online server.	
            * @default null
            * @type {object}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			* &lt;script&gt;		
            * //To set query API value during initialization  
            * var dataManger = ej.DataManager({       url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"});
            * var queryString = ej.Query().from("Suppliers").select("ContactName");
            * 	$("#drpdwn").ejDropDownList({ dataSource: dataManger, query: queryString, fields: { text: "ContactName" }});
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            query: null,
            /**		
            * Specifies mapping fields for the data items of the DropDownList textbox.	
            * @default null
            * @type {object}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			* &lt;script&gt;		
            * //To set fields API value during initialization  
            * 	$("#drpdwn").ejDropDownList({ dataSource: window.countriesField,   fields: { text: "name", value: "key" }});
             * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            fields:/** @lends ejDropDownList# */ { 
				/**		
                 * Defines id for the tag.
				 * @alias ejDropDownList#fields->id
				 * @type String
                 */
			id: null, 
				/**		
                 * Defines the text content for the tag.
				 * @alias ejDropDownList#fields->text
				 * @type String
                 */
			text: null, 
				/**		
                 * Defines the tag value or display text..
				 * @alias ejDropDownList#fields->value
				 * @type String
                 */
			value: null, 
                /**
                 * Used to categorize the items. It is used when the grouping is enabled.
                 * @alias ejDropDownList#fields->category
                 * @type String
                 */
            category: null,
				/**		
                 * Defines the imageURL for the image location. 
				 * @alias ejDropDownList#fields->imageUrl
				 * @type String
                 */
			imageUrl: null,
                 /**		
                 * Defines the image attributes such as height, width, styles and so on.
				 * @alias ejDropDownList#fields->imageAttributes
				 * @type String
                 */			
			imageAttributes: null, 
				/**		
                 * Defines the sprite css for the image tag.
				 * @alias ejDropDownList#fields->spriteCssClass
				 * @type String
                 */
			spriteCssClass: null, 
				/**		
                 * Defines the html attributes such as id, class, styles for the item.
				 * @alias ejDropDownList#fields->htmlAttributes
				 * @type Object
                 */
			htmlAttributes: null, 
				/**		
                 * Defines the tag value to be selected initially
				 * @alias ejDropDownList#fields->selected
				 * @type Boolean
                 */
			selected: null, 
				/**		
                 * Defines the table name for tag value or display text while render with remote data.
				 * @alias ejDropDownList#fields->tableName
				 * @type String
                 */
			tableName: null
			},
            /**		
            * Sets the watermark text. When the textbox is empty the watermark text is visible like a shaded text. 
            * @default Null
            * @type {string}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * //Initialize the DropDownList with the watermarkText value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",watermarkText: 'Enter text' });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            watermarkText: null,
            /**		
            * Defines the height of the DropDownList textbox.
            * @default Null
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * //Initialize the DropDownList height property with the  value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",height: 30 });
          * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            height: "",
            /**		
            * Defines the width of the DropDownList textbox.
            * @default Null
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * //Initialize the DropDownList width property with the width value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",width: 250 });
           * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            width: "",
            /**		
            * Defines the popupHeight of the suggestion box.
            * @default "152px"
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * //Initialize the DropDownList popupHeight property with the  value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",popupHeight: '152px' });
             * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            popupHeight: "152px",
            /**		
            * Defines the popupWidth of the suggestion box.
            * @default "auto"
            * @type {string | number}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * //Initialize the DropDownList popupWidth property with the  value specified
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList",popupWidth: '152px' });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            popupWidth: "auto",
            /**		
            * Specifies the targetID for DropDownList.
            * @default null
            * @type {string}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // To set targetID API value during initialization  . 	
            * 	$("#drpdwn").ejDropDownList({ targetID: "carsList" });
           * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            targetID: null,
            /**		
            * Specifies the template for DropDownList.
            * @default null
            * @type {string}
            * @example <br/> 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			* &lt;script&gt;		
            * // To set template API value during initialization  . 	
            * $("#drpdwn").ejDropDownList({ dataSource: window.drpdwnempList, template: '&lt;img class="eimg" src="styles/images/Employee/${eimg}.png" alt="employee" height="50px" width="50px"/&gt;' +
            *   '&lt;div class="ename"&gt; ${text} &lt;/div&gt;&lt;div class="desig"&gt; ${desig} &lt;/div&gt;&lt;div class="cont"&gt; ${country} &lt;/div&gt;',width: "200px"});
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            template: null,
            /**		
            * Specifies the selectedItemIndex   for DropDownList.
            * @default null
            * @type {number}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // To set selectedItemIndex   API value during initialization  . 	
            * 	$("#drpdwn").ejDropDownList({  targetID: "carsList",selectedItemIndex  : 2 });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            selectedItemIndex: null,
            /**		
            * Specifies the selectedItems  for DropDownList.
			* @remarks
            * If We would use the selectedItems option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true} See {@link ejDropDownList#showCheckbox}
            * @default []
            * @type {integerarray}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // To set selectedItems   API value during initialization  . 	
            * 	$("#drpdwn").ejDropDownList({  targetID: "carsList",showCheckbox: true, selectedItems  : [1,2] });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            selectedItems: [],
            /**		
            * cascadeTois used in cascading Dropdown list scenario, to map the child Dropdown list widget in the parent Dropdown list widget. By selecting an option in the parent dropdown, the child DropDownList has to load the corresponding value regarding the parent Dropdown. 
            * @default null
            * @type {string}
            * @example 
			* &lt;div style="float: left;"&gt;
			*       &lt;span class="txt"&gt;Select Group&lt;/span&gt;
			*       &lt;input id="groupsList" type="text" /&gt;
			* &lt;/div&gt;
			*
			* &lt;div style="float: right;"&gt;
			*        &lt;span class="txt"&gt;Select Country&lt;/span&gt;
			*        &lt;input id="countryList" type="text"/&gt;
			* &lt;/div&gt;
			* &lt;script&gt;
			*  var groups = [
			*          { parentId: 'a', text: "Group A" },
			*          { parentId: 'b', text: "Group B" },
			*          { parentId: 'c', text: "Group C" },
			*          { parentId: 'd', text: "Group D" },
			*          { parentId: 'e', text: "Group E" }]
			*            //first level child
			*            var countries = [{ value: 11, parentId: 'a', text: "Algeria", sprite: "flag-dz" },
			*           { value: 12, parentId: 'a', text: "Armenia", sprite: "flag-am" },
			*           { value: 13, parentId: 'a', text: "Bangladesh", sprite: "flag-bd" },
			*           { value: 14, parentId: 'a', text: "Cuba", sprite: "flag-cu" },
			*           { value: 15, parentId: 'b', text: "Denmark", sprite: "flag-dk" },
			*           { value: 16, parentId: 'b', text: "Egypt", sprite: "flag-eg" },
			*           { value: 17, parentId: 'c', text: "Finland", sprite: "flag-fi" },
			*           { value: 18, parentId: 'c', text: "India", sprite: "flag-in" },
			*           { value: 19, parentId: 'c', text: "Malaysia", sprite: "flag-my" },
			*           { value: 20, parentId: 'd', text: "New Zealand", sprite: "flag-nz" },
			*           { value: 21, parentId: 'd', text: "Norway", sprite: "flag-no" },
			*           { value: 22, parentId: 'd', text: "Poland", sprite: "flag-pl" },
			*           { value: 23, parentId: 'e', text: "Romania", sprite: "flag-ro" },
			*           { value: 24, parentId: 'e', text: "Singapore", sprite: "flag-sg" },
			*           { value: 25, parentId: 'e', text: "Thailand", sprite: "flag-th" },
			*           { value: 26, parentId: 'e', text: "Ukraine", sprite: "flag-ua" }]
			* // To set cascadeTo API value during initialization  . 
			*            $('#groupsList').ejDropDownList({
			*                dataSource: groups,
			*                fields: { value: "parentId" },
			*                cascadeTo: 'countryList'
			*            });
			*            $('#countryList').ejDropDownList({
			*                dataSource: countries,
			*                enabled:false
			*            });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            cascadeTo: null,
            /**		
            * DropDownList textbox to be displayed with rounded corner style.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the showRoundedCorner value specified.
            * $("#drpdwn").ejDropDownList({targetID: "carsList",showRoundedCorner: true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            showRoundedCorner: false,
            /**		
            * DropDownList textbox to be displayed with Popup shown.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;			
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the showPopupOnLoad value specified.
            * $("#drpdwn").ejDropDownList({targetID: "carsList",showPopupOnLoad: true });
           * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            showPopupOnLoad: false,
            /**		
            * Sets the DropDownList textbox direction as right to left alignment.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the enableRTL  value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",enableRTL : true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            enableRTL: false,
            /**		
            * When this property sets to false, it disables the DropDownList control.
            * @default true
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the enabled  value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",enabled : false });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            enabled: true,
            /**		
            * Sets the case sensitivity of the search operation..
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the caseSensitiveSearch value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",caseSensitiveSearch: true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            caseSensitiveSearch: false,
            /**		
            * Specifies the multi selection option in DropDownList with the help of checkbox control. For this we have to enable it by showCheckbox option true.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the showCheckbox value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",showCheckbox: true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            showCheckbox: false,
            /**		
            * Specifies to select all the items of DropDownList can be done with the help of this checkAll property, it supports only when the showCheckbox property true.
			* @remarks
			* If We would use the checkAll option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true}See {@link ejDropDownList#showCheckbox}
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the checkAll value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",showCheckbox: true, checkAll: true });
           * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            checkAll: false,
            /**		
            * Specifies to unselect all the items of DropDownList can be done with the help of this checkAll property, it supports only when the showCheckbox property true.
			* @remarks
			* If We would use the uncheckAll option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true}See {@link ejDropDownList#showCheckbox}
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the uncheckAll value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",showCheckbox: true, uncheckAll: true });
           * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            uncheckAll: false,
            /**		
            * Save current model value to browser cookies for state maintains. While refresh the DropDownList control page retains the model value apply from browser cookies.  
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the enablePersistence  value specified.
            * $("#drpdwn").ejDropDownList({ targetID: "carsList",enablePersistence : false });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            enablePersistence: false,
            /**		
            * Specifies to perform incremental search for selection of items from DropDownList can be done with the help of this property, this will helpful in selecting the item using the typed character.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the enableIncrementalSearch with the value specified.
            * $("#drpdwn").ejDropDownList({targetID: "carsList",enableIncrementalSearch: true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            enableIncrementalSearch: false,
            /**		
            * Indicates that the DropDownList textbox values can only be read.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
            * // Initialize the DropDownList with the readOnly value specified.
            * $("#drpdwn").ejDropDownList({targetID: "carsList",readOnly: true });
           * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            readOnly: false,
            /**		
            * The enableAnimation property is used to set the milliseconds time between suggestion popup open and close.
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/>
			* &lt;script&gt;
            * // Initialize the enableAnimation with the value specified.
            * $("#drpdwn").ejDropDownList({targetID: "carsList", enableAnimation: true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
			enableAnimation: false,
			 /**		
            * Indicates that the multiSelectMode values can only be read.
			* @remarks
			* If We would use the uncheckAll option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true}See {@link ejDropDownList#showCheckbox}
            * @default false
            * @type {boolean}
            * @example 
			* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/>
			* &lt;script&gt;
            * // Initialize the allowMultiSelection with the value specified.
            * $("#drpdwn").ejDropDownList({targetID: "carsList",showCheckbox: true,allowMultiSelection: true });
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            allowMultiSelection: false,
            /**
            * Groups the search result based on the category value.
            * @default false
            * @type {boolean}
            * @example 
            * &lt;input type="text" id="drpdwn" /&gt; <br> 
            * &lt;script&gt;
            * // Initialize the DropDownList with the grouping value specified.
            * $("#drpdwn").ejDropDownList({ dataSource: window.countriesField, fields: { text: "name", value: "key" }, allowGrouping: true});
            * &lt;/script&gt;
            * @memberof ejDropDownList
            * @instance
            */
            allowGrouping: false,
            /**     
           * Fires when create successfully.
           * @event
           * @name ejDropDownList#create 	
           * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
           * @param {object}  argument.model returns the DropDownList model
           * @param {string}  argument.type returns the name of the event
           * @example 
		   * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
           * //change event for DropDownList
           * $("#drpdwn").ejDropDownList({ 
		   *    targetID: "carsList",
           *   	create: function(args) {}
           * });
          * &lt;/script&gt;		   
           * @memberof ejDropDownList
           * @instance
           */
            create: null,
            /**     
          * Fires when popupHide successfully.
          * @event
          * @name ejDropDownList#popupHide 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DropDownList model
          * @param {string}  argument.type returns the name of the event
          * @param {string}  argument.text returns the selected text
          * @param {string}  argument.value returns the selected value
          * @example 
		  * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
          * //popupHide event for DropDownList
          * $("#drpdwn").ejDropDownList({ 
		  *		targetID: "carsList",
          *   	popupHide: function(args) {}
          * });
          * &lt;/script&gt;		  
          * @memberof ejDropDownList
          * @instance
          */
            popupHide: null,
            /**     
         * Fires when popupShown successfully.
         * @event
         * @name ejDropDownList#popupShown 	
         * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
         * @param {object}  argument.model returns the DropDownList model
         * @param {string}  argument.type returns the name of the event
         * @param {string}  argument.text returns the selected text
          * @param {string}  argument.value returns the selected value
         * @example 
		 * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
         * //popupShown event for DropDownList
         * $("#drpdwn").ejDropDownList({ 
		 *		targetID: "carsList",
         *   	popupShown: function(args) {}
         * });
          * &lt;/script&gt;		 
         * @memberof ejDropDownList
         * @instance
         */
            popupShown: null,
            /**     
         * Fires beore the popup going to display.
         * @event
         * @name ejDropDownList#beforePopupShown 	
         * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
         * @param {object}  argument.model returns the DropDownList model
         * @param {string}  argument.type returns the name of the event
         * @param {string}  argument.text returns the selected text
          * @param {string}  argument.value returns the selected value
         * @example 
		 * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
         * //beforePopupShown event for DropDownList
         * $("#drpdwn").ejDropDownList({ 
		 *		targetID: "carsList",
         *   	beforePopupShown: function(args) {}
         * });
          * &lt;/script&gt;		 
         * @memberof ejDropDownList
         * @instance
         */
            beforePopupShown: null,
            /**
            * Fires beore the popup going to hide.
         * @event
         * @name ejDropDownList#beforePopupHide 	
         * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
         * @param {object}  argument.model returns the DropDownList model
         * @param {string}  argument.type returns the name of the event
         * @param {string}  argument.text returns the selected text
          * @param {string}  argument.value returns the selected value
         * @example 
		 * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
         * //beforePopupHide event for DropDownList
         * $("#drpdwn").ejDropDownList({ 
		 *		targetID: "carsList",
         *   	beforePopupHide: function(args) {}
         * });
          * &lt;/script&gt;		 
         * @memberof ejDropDownList
         * @instance
         */
            beforePopupHide: null,
            /**     
           * Fires when change successfully.
           * @event
           * @name ejDropDownList#change 	
           * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
           * @param {object}  argument.model returns the DropDownList model
           * @param {string}  argument.type returns the name of the event
           * @example 
		   * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
           * //change event for DropDownList
           * $("#drpdwn").ejDropDownList({ 
		   *		targetID: "carsList",
           *   	change: function(args) {}
           * }); 
          * &lt;/script&gt;		   
           * @memberof ejDropDownList
           * @instance
           */
            change: null,
            /**     
          * Fires when select successfully.
          * @event
          * @name ejDropDownList#select 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DropDownList model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
          * //select event for DropDownList
          * $("#drpdwn").ejDropDownList({ 
		  *		targetID: "carsList",
          *   	select: function(args) {}
          * });      
		  * &lt;/script&gt;
          * @memberof ejDropDownList
          * @instance
          */
            select: null,
            /**     
          * Fires when checkChange successfully.
          * @event
          * @name ejDropDownList#checkChange 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DropDownList model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
          * //checkChange event for DropDownList
          * $("#drpdwn").ejDropDownList({ 
		  *		targetID: "carsList",
          *   	checkChange: function(args) {}
          * }); 
          * &lt;/script&gt;		  
          * @memberof ejDropDownList
          * @instance
          */
            checkChange: null,
            /**     
          * Fires when destroy successfully.
          * @event
          * @name ejDropDownList#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the DropDownList model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;		
          * //destroy event for DropDownList
          * $("#drpdwn").ejDropDownList({ 
		  *		targetID: "carsList",
          *   	destroy: function(args) {}
          * });
          * &lt;/script&gt;		  
          * @memberof ejDropDownList
          * @instance
          */
            destroy: null

        },
        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            watermarkText: "string",
            popupHeight: "string",
            popupWidth: "string",
            template: "string",
            selectedItemIndex: "number",
            cascadeTo: "string",
            delimiterChar: "string",
            showRoundedCorner: "boolean",
            showPopupOnLoad: "boolean",
            enableRTL: "boolean",
            enablePersistence: "boolean",
            enabled: "boolean",
            readOnly: "boolean",
            allowMultiSelection: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            selectedItems: "array",
            enableAnimation: "boolean",
            allowGrouping: "boolean"
        },

        observables: ["value"],
        value: ej.util.valueFunction("value"),
        /**
      * To enable the DropDownList  
      * @return jQuery
      * @example 
       * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
			* &lt;script&gt;
      * // Create DropDownList
	  * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
      * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
      * DropDownListObj.enable(); // enable the DropDownList
      * &lt;/script&gt;
      * @example 
      * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	  * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
      * $('#drpdwn').ejDropDownList("enable"); 	
      * &lt;/script&gt;
      *@memberof ejDropDownList
      * @instance
      */
        //public methods
        enable: function () {
            if (this.element.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = true;
                this.element.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
                this.element.bind("mousedown", $.proxy(this._OnDropdownClick, this));
                this.dropdownbutton.bind("mousedown", $.proxy(this._OnDropdownClick, this));
                if (this.model.allowMultiSelection) this._ulBox.removeClass("e-disable");
            }
        },
        /**
     * To disable the DropDownList  
     * @return jQuery
     * @example 
     * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
     * // Create DropDownList
	 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
     * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
     * DropDownListObj.disable(); // disable the DropDownList
     * &lt;/script&gt;
     * @example 
    * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
     * // Create DropDownList
	 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
     * $('#drpdwn').ejDropDownList("disable"); 	
     * &lt;/script&gt;
     *@memberof ejDropDownList
     * @instance
     */
        disable: function () {
            if (!this.element.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = false;
                this.element.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
                if (this.model.allowMultiSelection) this._ulBox.addClass("e-disable");
                this.element.unbind("mousedown", $.proxy(this._OnDropdownClick, this));
                this.dropdownbutton.unbind("mousedown", $.proxy(this._OnDropdownClick, this));
            }
        },
        /**
      * Returns the current value selected in the DropDownList textbox.
      * @return jQuery
      * @example 
      * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
      * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
      * DropDownListObj.getValue(); // getValue of the DropDownList text
      * &lt;/script&gt;
      * @example 
      * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
      * $('#drpdwn').ejDropDownList("getValue"); 	
      * &lt;/script&gt;
      *@memberof ejDropDownList
      * @instance
      */
        getValue: function () {
            if (this.element.hasClass("e-watermark"))
                return "";
            return this.target.value;
        },
        _setValue: function (value) {
            if (!this.model.enabled) return false;
            if (value) {
                if (this.model.showCheckbox) {
                    var textes = this.model.text.split(this.model.delimiterChar);
                    for (var i = 0; i < textes.length; i++)
                        this.unselectItemByText(textes[i]);
                    var values = value.split(this.model.delimiterChar);
                    for (var i = 0; i < values.length; i++)
                        this.setSelectedValue(values[i]);
                }
                else
                    this.setSelectedValue(value);
            }
        },
        _setText: function (text) {
            if (!this.model.enabled) return false;
            if (text) {
                if (this.model.showCheckbox) {
                    var textes = this.model.text.split(this.model.delimiterChar);
                    for (var i = 0; i < textes.length; i++)
                        this.unselectItemByText(textes[i]);
                    var values = text.split(this.model.delimiterChar);
                    for (var i = 0; i < values.length; i++)
                        this.setSelectedText(values[i]);
                }
                else
                    this.setSelectedText(text);
            }
        },
        _setItemValue: function (itemValue) {
            this.model.itemValue = itemValue;
        },
        _changeWatermark: function (text) {
            if (!this.model.enabled) return false;
            if (this.element.hasClass("e-watermark"))
                this.element.val(text);
        },
        /**
     * popup list hide in the DropDownList textbox.
     * @return jQuery
     * @example 
     * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
     * // Create DropDownList
	* $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
     * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
     * DropDownListObj.hidePopup(); // hidePopup of the DropDownList 
     * &lt;/script&gt;
     * @example 
    * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
     * // Create DropDownList
	* $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
     * $('#drpdwn').ejDropDownList("hidePopup"); 	
     * &lt;/script&gt;
     *@memberof ejDropDownList
     * @instance
     */
        hidePopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._hideResult();
        },
        /**
   * popup list show in the DropDownList textbox.
   * @return jQuery
   * @example 
  * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
   * // Create DropDownList
   * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
   * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
   * DropDownListObj.showPopup(); // 
   * &lt;/script&gt;
   * @example 
  * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
   * // Create DropDownList
   * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
   * $('#drpdwn').ejDropDownList("showPopup"); 	
   * &lt;/script&gt;
   *@memberof ejDropDownList
   * @instance
   */
        showPopup: function () {
            if (!this.model.enabled) return false;
            if (this.ultag.find('li').length > 0)
                this._showResult();
        },
        /**
     * Clears the text in the DropDownList textbox.
     * @return jQuery
     * @example 
     * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
     * // Create DropDownList
	 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
     * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
     * DropDownListObj.clearText(); // clear the DropDownList text
     * &lt;/script&gt;
     * @example 
    * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
     * // Create DropDownList
     * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
     * $('#drpdwn').ejDropDownList("clearText"); 	
     * &lt;/script&gt;
     *@memberof ejDropDownList
     * @instance
     */
        clearText: function () {
            if (this.model.enabled) {
                this.element.val("");
                this.value("");
                this.model.text = "";
                if (this.model.watermarkText != null) {
                    if ($.trim(this.element.val()) === '') {
                        this.element.val(this.model.watermarkText);
                        this.element.addClass("e-watermark");
                    }
                }
            }
        },
      
        _selectItemByIndex: function (index) {
            if (!this.model.enabled) return false;
            if (index != null) {
                var i;
                this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
                for (i = 0; i < this.listitems.length; i++) {
                    if (i == index) {
                        this.selectedIndexValue = i;
                        this._activeItem = index;
                        if (this.model.template)
                            this._templateValue();
                        else
                            this._enterTextBoxValue();
                    }
                }
            }
        },
		
   /**
   * This method is used to unselect a list item in DropDownList using given index field.
   * @example 
   *   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	  * &lt;script&gt;
   * // Create DropDownList
   *$('#drpdwn').ejDropDownList();
   *var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
   *DropDownListObj.setSelectedValue("Art"); // setSelectedValue for the DropDownList text
   *DropDownListObj.unselectItemByIndex(0); // unselectItemByIndex for the DropDownList text
   * &lt;/script&gt;
   * @example 
    *&lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	  * &lt;script&gt;
      * // Create DropDownList
    * $('#drpdwn').ejDropDownList();
    * $('#drpdwn').ejDropDownList("setSelectedValue","Art");  // setSelectedValue for the DropDownList text	
    *$('#drpdwn').ejDropDownList("unselectItemByIndex",0); // unselectItemByIndex for the DropDownList text      
   * &lt;/script&gt;
   *@memberof ejDropDownList
   * @instance
   */
        unselectItemByIndex: function (index) {
            if (!this.model.enabled) return false;
            var i;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (i = 0; i < this.listitems.length; i++) {
                if (i == index) {
                    this.selectedIndexValue = i;
                    this._activeItem = index;
                    this._removeTextBoxValue();
                }
            }
        },
        /**
* This method is used to select a list item in DropDownList using given value field.
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;
* // Create DropDownList
 * $('#drpdwn').ejDropDownList();
* var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
* DropDownListObj.setSelectedValue("ComputerIT"); // setSelectedValue for the DropDownList text
* &lt;/script&gt;
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* $('#drpdwn').ejDropDownList("setSelectedValue","ComputerIT"); 	
* &lt;/script&gt;
*@memberof ejDropDownList
* @instance
*/
        setSelectedValue: function (idvalue) {
            if (!this.model.enabled) return false;
            var i, hidelement;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (i = 0; i < this.listitems.length; i++) {
                if (this.listitems[i].getAttribute("value") != null) {
                    this._selectedValue = this.listitems[i].getAttribute("value");
                    if (this._selectedValue == idvalue) {
                        this._activeItem = i;
                        this._enterTextBoxValue();
                        return false;
                    }
                }
            }
        },
		
		        /**
* This method is used to unselect a list item in DropDownList using given value field.
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;<br/> 
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
*DropDownListObj.setSelectedValue("ComputerIT"); // setSelectedValue for the DropDownList text
* DropDownListObj.unselectItemByValue("ComputerIT"); // unselectItemByValue for the DropDownList text
* &lt;/script&gt;
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;<br/> 
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* $('#drpdwn').ejDropDownList("setSelectedValue","ComputerIT");  // setSelectedValue for the DropDownList text	
* $('#drpdwn').ejDropDownList("unselectItemByValue","ComputerIT"); 	
* &lt;/script&gt;
*@memberof ejDropDownList
* @instance
*/
		
        unselectItemByValue: function (idvalue) {
            if (!this.model.enabled) return false;
            var i, hidelement;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (i = 0; i < this.listitems.length; i++) {
                if (this.listitems[i].getAttribute("value") != null) {
                    this._selectedValue = this.listitems[i].getAttribute("value");
                    if (this._selectedValue == idvalue) {
                        this._activeItem = i;
                        this._removeTextBoxValue();
                        return false;
                    }
                }
            }
        },
        /**
* This method is used to select a list item in DropDownList using given text field.
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;<br/>
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
* DropDownListObj.setSelectedText("Computer IT"); // setSelectedText for the DropDownList text
* &lt;/script&gt;
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;<br/>
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* $('#drpdwn').ejDropDownList("setSelectedText","Computer IT"); 	
* &lt;/script&gt;
*@memberof ejDropDownList
* @instance
*/
        setSelectedText: function (idvalue) {
            if (!this.model.enabled) return false;
            var i, hidelement;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (i = 0; i < this.listitems.length; i++) {
                this.selectedTextValue = this.model.template ? this._getField(this.popupListItems[i], this.mapFld._text) : $(this.listitems[i]).text();
                if (this.selectedTextValue == idvalue) {
                    this._activeItem = i;
                    this._enterTextBoxValue();
                    return false;
                }
            }
        },

		   /**
* This method is used to unselect a list item in DropDownList using given text field.
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;<br/>
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
*DropDownListObj.setSelectedValue("ComputerIT"); // setSelectedValue for the DropDownList text
* DropDownListObj.unselectItemByText("Computer IT"); // unselectItemByText for the DropDownList text
* &lt;/script&gt;
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	* &lt;script&gt;<br/>
* // Create DropDownList
* $('#drpdwn').ejDropDownList();
* $('#drpdwn').ejDropDownList("setSelectedValue","ComputerIT");  // setSelectedValue for the DropDownList text	
* $('#drpdwn').ejDropDownList("unselectItemByText","Computer IT"); 	
* &lt;/script&gt;
*@memberof ejDropDownList
* @instance
*/
        unselectItemByText: function (idvalue) {
            if (!this.model.enabled) return false;
            var i, hidelement;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            for (i = 0; i < this.listitems.length; i++) {
                this.unselectedTextValue = this.model.template ? this._getField(this.popupListItems[i], this.mapFld._text) : $(this.listitems[i]).text();
                if (this.unselectedTextValue == idvalue) {
                    this._activeItem = i;
                    this._removeTextBoxValue();
                    return false;
                }
            }
        },

		   /**
* This method is used to get the selected items in DropDownList.
* @return string
* @example 
* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
* // Create DropDownList
* $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A8"});
* var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
* DropDownListObj.getSelectedItem(); 
* &lt;/script&gt;
* @example 
* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
* // Create DropDownList
* $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A8"});
* $('#drpdwn').ejDropDownList("getSelectedItem"); 	
* &lt;/script&gt;
*@memberof ejDropDownList
* @instance
*/
        getSelectedItem: function () {
            return this.selectedTextValue;
        },
		
      
		 /**
* This method is used to get the selected items value in DropDownList.
* @return string
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt;
	  * &lt;script&gt;
* // Create DropDownList
* $('#drpdwn').ejDropDownList({value:"Computer IT"});
* var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
* DropDownListObj.getSelectedValue(); 
* &lt;/script&gt;
* @example 
*   &lt;select name="selectIndex" id="drpdwn"&gt;
	*        &lt;option value="Art"&gt;Art&lt;/option&gt;
	*        &lt;option value="Architecture"&gt;Architecture&lt;/option&gt;
	*        &lt;option value="Biographies"&gt;Biographies&lt;/option&gt;
	*        &lt;option value="Business"&gt;Business&lt;/option&gt;
	*        &lt;option value="ComputerIT"&gt;Computer IT&lt;/option&gt;
	*        &lt;option value="Comics"&gt;Comics&lt;/option&gt;
	*        &lt;option value="Cookery"&gt;Cookery&lt;/option&gt;
	*        &lt;option value="Environment"&gt;Environment&lt;/option&gt;
	*        &lt;option value="Fiction"&gt;Fiction&lt;/option&gt;
	*        &lt;option value="Health"&gt;Health&lt;/option&gt;
	*        &lt;option value="Humanities"&gt;Humanities&lt;/option&gt;
	*        &lt;option value="Language"&gt;Language&lt;/option&gt;
	*    &lt;/select&gt; 
	  * &lt;script&gt;
* // Create DropDownList
* $('#drpdwn').ejDropDownList({value:"Computer IT"});
* $('#drpdwn').ejDropDownList("getSelectedValue");
* &lt;/script&gt;
*@memberof ejDropDownList
* @instance
*/
        getSelectedValue: function () {
            if (this.element[0].value != "")
                return this._selectedValue;
            else return "";
        },
        _validateDelimiter: function (deli) {
            if (deli.length == 1) {
                var RegEx = /^[a-zA-Z0-9]+$/;
                if (!RegEx.test(deli)) return deli;
            }
            return ",";
        },
        getSelectedItemsID: function () {
            return this._selectedItemsID;
        },
        _removeText: function (currentValue) {
            var res, index, removeHidden, hiddenIndex, checkSplit, checkCurrent;
			res = this.element[0].value;
			removeHidden = this._hiddenInput[0].value;
			checkSplit = res.indexOf(currentValue + this.model.delimiterChar);
			checkCurrent=res.indexOf(currentValue);
			if(checkSplit >= 0){
			    res = res.replace(currentValue + this.model.delimiterChar, "");
			    removeHidden = removeHidden.replace(this._hiddenValue + this.model.delimiterChar, "");
			}
			else if(res.length == checkCurrent+currentValue.length && checkCurrent == 0){
				res = res.replace(currentValue, "");
				removeHidden = removeHidden.replace(this._hiddenValue, "");
			}
			else{
			    res = res.replace(this.model.delimiterChar + currentValue, "");
			    removeHidden = removeHidden.replace(this.model.delimiterChar + this._hiddenValue, "");
			}
			this.element[0].value = res;
			this._hiddenInput[0].value = removeHidden;
        },
        _addText: function (currentValue) {
            if ((this.model.watermarkText) && (this.element.hasClass("e-watermark"))) {
                this.element.val(this.element[0].value.replace(this.model.watermarkText, ""));
                this._hiddenInput.val("");
            }
            this._delimiterIndex = (this.element[0].value).lastIndexOf(this.model.delimiterChar);
            this._hiddenDelimiterIndex = (this._hiddenInput[0].value).lastIndexOf(this.model.delimiterChar);
            if (((this._delimiterIndex == -1) || (this._delimiterIndex != this.element[0].value.length - 1)) && (this.element[0].value != "")) {
                this.element.val(this.element[0].value + this.model.delimiterChar);
                this._hiddenInput.val(this._hiddenInput[0].value + this.model.delimiterChar);
                this._delimiterIndex = (this.element[0].value).lastIndexOf(this.model.delimiterChar);
                this._hiddenDelimiterIndex = (this._hiddenInput[0].value).lastIndexOf(this.model.delimiterChar);
            }
            if (!this._checkContains(currentValue)) {
                this.element.val(this.element[0].value.substr(0, this._delimiterIndex + 1) + currentValue);
                this._hiddenInput.val(this._hiddenInput[0].value.substr(0, this._hiddenDelimiterIndex + 1) + this._hiddenValue);
            }
        },
        _checkContains: function (Value) {
            var chkValue = Value;
            var values = this.element[0].value.split(this.model.delimiterChar);
            this.contains = false;
            for (var i = 0; i < values.length; i++) {
                if (values[i] == chkValue)
                    this.contains = true;
            }
            return this.contains;
        },
        _init: function () {
            if ((this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) || this.element.is("select")) {
				this._id=this.element[0].id;
                this._initialize();
                this._render();
                this._enabled(this.model.enabled);
                this._wireEvents();
                this._initValue = false;
            }
        },
        _setInitialPopup: function (value) {
            value == false ? this._hideResult() : this._showResult();
        },
        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.wrapper.removeClass(this.model.cssClass).addClass(skin);
                this.popupList.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setRTL: function (boolean) {
            if (this.model.enableRTL != boolean) {
                this.model.enableRTL = boolean;
                this._RightToLeft();
                this._dropbtnRTL();
            }
        },
        //height width
        _changeHeight: function (height) {
            this.wrapper.height(height);
            this._setListHeight();
        },
        _changeWidth: function (width) {
            this.wrapper.width(width);
            this._setListWidth();
        },
        /**
       * To configure the properties at runtime using SetModel		
       * @private
       */
        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {
                    case "dataSource": this._checkModelDataBinding(options[option]); break;
                    case "query": this._queryCheck(options[option]); break;
                    case "fields": this.model.fields = options[option]; this._checkModelDataBinding(this.model.dataSource); break;
                    case "template": this.model.template = options[option]; this._checkModelDataBinding(this.model.dataSource); break;
                    case "value": this._setValue(ej.util.getVal(options[option])); options[option] = this.value(); break;
                    case "delimiterChar": options[option] = this._validateDelimiter(options[option]); break;
                    case "text": this._setText(options[option]); options[option] = this.model.text; break;
                    case "itemValue": this._setItemValue(options[option]); break;
                    case "enableRTL": this._setRTL(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "height": this._changeHeight(options[option]); break;
                    case "width": this._changeWidth(options[option]); break;
                    case "popupHeight": this.model.popupHeight = options[option]; this._setListHeight(options[option]); break;
                    case "popupWidth": this.model.popupWidth = options[option]; this._setListWidth(); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showCheckbox": this._checkboxHideShow(options[option]); break;
                    case "checkAll": this._setCheckAll(options[option]); break;
                    case "uncheckAll": this._setUncheckAll(options[option]); break;
                    case "watermarkText": this._changeWatermark(options[option]); break;
                    case "showRoundedCorner": this._roundedCorner(options[option]); this.model.showRoundedCorner = options[option]; break;
                    case "showPopupOnLoad": this._setInitialPopup(options[option]); break;
                    case "targetID": this.model.targetID = options[option]; this._showFullList(); break;
                    case "selectedItemIndex": this._selectItemByIndex(options[option]); break;
                    case "selectedItems": this._selectCheckedItem(options[option]); this.model.selectedItems = options[option]; break;
                    case "allowMultiSelection": this.model.allowMultiSelection = options[option];
                        options[option] ? this._renderBoxModel() : this._destroyBoxModel();
                        break;
                    case "allowGrouping": this.model.allowGrouping = options[option];
                        this._setGrouping();
                        break;
					case "enableAnimation":{
							this.model.enableAnimation=options[key];
							break;
					}
                }
            }
        },
        /**
 * destroy in the DropDownList textbox.
 * @alias destroy
 * @return jQuery
 * @example 
 * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
 * // Create DropDownList
 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
 * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
 * DropDownListObj.destroy(); // hide the DropDownList text
 * &lt;/script&gt;
 * @example 
* &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
 * // Create DropDownList
 * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5"});
 * $('#drpdwn').ejDropDownList("destroy"); 	
 * &lt;/script&gt;
 *@memberof ejDropDownList
 * @instance
 */
        _destroy: function () {
            this._destroyDropdown();
            this.element.removeClass("e-input " + this.model.cssClass + " e-watermark");
            this.element.attr('accesskey', this.wrapper.attr('accesskey'));
            this.element[0].value = "";
            if (this.model.dataSource != null)
                this.popupPanelWrapper.remove();
            else {
                this.docbdy.append(this.ultag.html());
                this.popupPanelWrapper.remove();
            }
        },
        /* cookie */

        _finalize: function () {
            if (this.model.selectedItemIndex != null) {
                this._selectItemByIndex(this.model.selectedItemIndex);
            } else if ((this.model.showCheckbox == true) && (this.model.selectedItems.length > 0)) {
                this._selectCheckedItem(this.model.selectedItems);
            }
        },

        /**/
        _initialize: function () {
            if (this.element.is("select")) {
                this.selectelement = true;
                this._renderSelectToDropdown();
            }
            this._selectedItemsID = [];
            this.target = this.element[0];
            this.showPopupBox = false;
            this._queryString = null;
            this.suggLen = 0;
            this._itemId = null;
            this.checkedStatus = false;
            this._incqueryString = "";
            this._activeItem = null;
            this.ddWidth = 0;
            this._initValue = true;
        },
        _renderSelectToDropdown: function () {
            var i, optionLength;
            this.inputElement = ej.buildTag("input.e-dropdownlist#" + this._id + "_input", "", {}, { "type": "text","data-role":"none"});
            this.inputElement.insertAfter(this.element);
            this.optionDiv = ej.buildTag("div#" + this._id + "_list");
            this.optionDiv.insertAfter(this.inputElement);
            this.optionUl = ej.buildTag("ul");
            this.optionDiv.append(this.optionUl);
            this.selectOptions = this.element;
            this.selectOptions.attr('id', this._id);
            this.selectOptionItems = this.element.children("option");
            optionLength = this.selectOptionItems.length;
            this.optionDummyUl = $();

            for (i = 0; i < optionLength; i++) {
                if ((this.selectOptionItems[i].text != null) && ((this.selectOptionItems[i].text != ""))) {
                    this.optionLi = ej.buildTag("li", this.selectOptionItems[i].text, {}, { value: this.selectOptionItems[i].value });
                    this.optionDummyUl.push(this.optionLi[0]);
                }
            }
            this.optionUl.append(this.optionDummyUl);

            this.element.css('display', 'none');
            this.element = this.inputElement;
        },


        _render: function () {
            this._renderDropdown();
            this._setWatermark();
            this._renderPopupPanelWrapper();
            this._initDataSource(this.model.dataSource);
            this._showFullList();
            if(this.model.text)
                this.setSelectedText(this.model.text);
            if (this.value())
                this.setSelectedValue(this.value());
            this._finalize();
        },

        _queryCheck: function (value) {
            this.model.query = value;
            this._checkModelDataBinding(this.model.dataSource);
        },

        _checkModelDataBinding: function (source) {
            this.model.dataSource = source;
            if (source != null) {
                if (ej.DataManager && source instanceof ej.DataManager) {
                    this._initDataSource(source);
                } else {
                    this._showFullList();
                }
            }
            else {
                this.ultag.empty();
            }
        },
        _initDataSource: function (source) {
            var proxy = this;
            if (ej.DataManager && source instanceof ej.DataManager) {
                proxy.popupListItems = proxy.model.dataSource;
                proxy._addLoadingClass();
                var queryPromise = source.executeQuery(this._getQuery());
                queryPromise.done(function (e) {
                    proxy.popupListItems = e.result;
                    proxy._removeLoadingClass();
                    proxy._showFullList();

                }).fail(function (e) {
                    proxy.model.dataSource = null;
                    proxy._addLoadingClass();
                });
            }
        },
        _getQuery: function () {
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = ej.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query;
            return queryManager;
        },

        _addLoadingClass: function () {
            this.dropdownbutton.addClass("e-load");
            this.drpbtnspan.removeClass("e-icon e-down-arrow");
            this.model.readOnly = true;
        },
        _removeLoadingClass: function () {
            this.dropdownbutton.removeClass("e-load");
            this.drpbtnspan.addClass("e-icon e-down-arrow");
            this.model.readOnly = false;
        },
        //render drop button text box
        _renderDropdown: function () {
            this.element.addClass("e-input " + this.model.cssClass);
            this.wrapper = ej.buildTag("span.e-ddl e-widget " + this.model.cssClass + "#" + this._id + "_wrapper", "", {}, { "tabindex": "0", "accesskey": this.element.attr("accesskey") });//
            this.container = ej.buildTag("span.e-in-wrap e-box " + this.model.cssClass + "#" + this._id + "_container");
            this.element.removeAttr('accesskey');
            this.element.attr({ "readonly": true, "tabindex": -1, "role": "combobox", "aria-expanded": false, "aria-autocomplete": "list", "aria-haspopup": true, "aria-owns": this._id + "_popup" });
            this.drpbtnspan = ej.buildTag("span.e-icon e-down-arrow", "", {}, { "aria-label": "select" });
            this.dropdownbutton = ej.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, { "role": "button" }).append(this.drpbtnspan);
            this.container.insertAfter(this.element);
            this.container.append(this.element);
            this.container.append(this.dropdownbutton);
            this.wrapper.insertBefore(this.container);
            this.wrapper.append(this.container);
            if (this.selectelement) {
                this.selectOptions.insertBefore(this.element);
            }
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this._checkNameAttr();
            this._setDimentions();
            this._RightToLeft();
            this.ddWidth = (this.dropdownbutton.outerWidth() > 0) ? this.dropdownbutton.outerWidth() : 24;
            this.element.bind("mousedown", $.proxy(this._OnDropdownClick, this));
            this.dropdownbutton.bind("mousedown", $.proxy(this._OnDropdownClick, this));
            this._roundedCorner(this.model.showRoundedCorner);
            this._renderBoxModel();
        },
        /*name attribute for input box*/
        _checkNameAttr: function () {
			if (this.element.attr("name"))
                this._hiddenInput.attr("name", this.element.attr("name"));
            else {
                this._hiddenInput.attr("name", this._id);
				this.element.attr("name", this._id);
			}
        },
        _renderBoxModel: function () {
            if (!this.model.allowMultiSelection) return false;
            this.element.css('display', 'none');
            this._ulBox = ej.buildTag("ul.e-ul e-boxes");
            this.container.prepend(this._ulBox);
            this._ulBox.css('min-height', '30px');
            this.wrapper.css({ 'height': 'auto' });

            this._on(this.container, "mousedown", function (e) {
                if (!this.model.enabled) return false;
                var $target = $(e.target);
                if ($target.hasClass("e-options")) {
                    if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
                    if ($target.hasClass("e-active")) $target.removeClass("e-active");
                    else $target.addClass("e-active");
                }
                if (!e.ctrlKey && ($target.hasClass("e-boxes"))) this._removeActive();
            });
        },
        //render popup pannel wrapper
        _renderPopupPanelWrapper: function () {
			var oldWrapper = $("#" + this.element.context.id + "_popup_wrapper").get(0);
            if (oldWrapper)
                $(oldWrapper).remove();
            this.popupPanelWrapper = ej.buildTag("div#" + this._id + "_popup_wrapper");
            $('body').append(this.popupPanelWrapper);
            //render popup list 
            this.popupList = ej.buildTag("div.e-ddl-popup e-box e-popup e-widget " + this.model.cssClass + "#" + this._id + "_popup", "", { "visibility": "hidden" }, { "tabIndex": 0 });
            this.popup = this.popupList;
            this.popupScroller = ej.buildTag("div"); this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
            this.popupScroller.append(this.ultag);
            this.popupList.append(this.popupScroller);
            this.popupPanelWrapper.append(this.popupList);
        },
        //set grouping via model
        _setGrouping: function () {
            var oldValue = this.model.text;
            this._destroy();
            this.value("");
            this.model.selectedItems = [];
            this._init();
            if (this.model.showCheckbox) {
                var values = oldValue.split(this.model.delimiterChar);
                for (i = 0; i < values.length; i++)
                    this.setSelectedText(values[i]);
            }
            else
                this.setSelectedText(oldValue);
        },
        //render popup list items
        _renderPopupList: function () {
            var list = this.popupListItems, i, j, ulempty, ulno, litag, _id, _txt, mapper = this.model.fields, predecessor;
            this.ultag.empty();
            this.dummyUl = $();
            if (this.model.enableRTL)
                this.popupList.addClass("e-rtl");
            if (this.model.dataSource == null || this.model.dataSource.length < 1) {
                predecessor = this.element.parents().last();
                if (this.model.targetID)
                    this.docbdy = predecessor.find("#" + this.model.targetID);
                else if (this.optionDiv)
                    this.docbdy = this.optionDiv;
                else return false;
                this.itemsContainer = this.docbdy.children("ol,ul");
                this.itemsContainer.children("ol,ul").remove();
                this.items = this.itemsContainer.children('li');
                this.items.children("img").addClass("e-align");
                this.items.children("div").addClass("e-align");
                this.itemsContainer.children("span").addClass("e-ghead");
                //This will append the list with the popup wrapper
                this.ultag.append(this.itemsContainer.children());
                this.itemsContainer.empty();
                this.docbdy.css({ 'display': 'none' }); this.itemsContainer.css({ 'display': 'none' });
            }
            else if (this.model.dataSource != null && typeof list[0] != "object") {
                if (list.length > 0) {
                    for (i = 0; i < list.length; i++) {
                        litag = ej.buildTag("li", list[i]);
                        this.dummyUl.push(litag[0]);
                    }
                    this.ultag.append(this.dummyUl);
                }
            }
            else {
                this.mapFld = { _id: null, _imageUrl: null, _imageAttributes: null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null };
                this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
                this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
                this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
                this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
                this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
                this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
                if (this.model.allowGrouping) {
                    this.popupList.addClass("e-atc-popup");
                    var mapCateg = (mapper && mapper.category) ? mapper["category"] : "category", groupedList, _query;
                    _query = ej.Query().group(mapCateg);
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._swapUnCategorized(groupedList);
                    this.popupListItems = [];
                    for (i = 0; i < groupedList.length; i++) {
                        if (groupedList[i].key)
                            this.dummyUl.push(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option")[0]);
                        this._generateLi(groupedList[i].items, this.mapFld);
                        for (j = 0; j < groupedList[i].items.length; j++) {
                            this.popupListItems.push(groupedList[i].items[j]);
                        }
                    }
                }
                else this._generateLi(list, this.mapFld);
                this.ultag.append(this.dummyUl);//ko binding
            }
            this.ultag.children('li').attr({ "role": "option" });
            this._setListWidth();
            this._setListHeight();
            this._setListPosition();
            this.popupList.css("height", ""); this.popupScroller.css({ "height": "", "width": "" });
            this.popupList.ejScroller({ height: this.popupList.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.popupList.ejScroller("instance");
            this.popupList.css({ 'display': 'none', 'visibility': 'visible' });
            this._checkboxHideShow(this.model.showCheckbox);
            this._setCheckAll(this.model.checkAll);
            this._setUncheckAll(this.model.uncheckAll);
            this.model.showPopupOnLoad && this._showResult();
        },
        //generate li tag with the given data source
        _generateLi: function (list, mapFld) {
            this.mapFld = mapFld;
            var litag;
            if (list.length > 0) {
                if (this.model.template != null) {
                    for (i = 0; i < list.length; i++) {
                        litag = ej.buildTag("li", list[i]);
                        if (this.model.template) litag.append(this._getTemplatedString(list[i]));
                        this.dummyUl.push(litag[0]);
                    }
                    this.ultag.append(this.dummyUl);
                } else {
                    for (i = 0; i < list.length; i++) {
                        var _did = this._getField(list[i], this.mapFld._id);
                        var _dimageUrl = this._getField(list[i], this.mapFld._imageUrl);
                        var _dimageAttributes = this._getField(list[i], this.mapFld._imageAttributes);
                        var _dspriteCss = this._getField(list[i], this.mapFld._spriteCSS);
                        var _dtext = this._getField(list[i], this.mapFld._text);
                        var _dvalue = this._getField(list[i], this.mapFld._value);
                        var _dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes);
                        var _dselected = this._getField(list[i], this.mapFld._selected);
                        if ((_dvalue) && (_dvalue != ""))
                            litag = ej.buildTag('li', "", {}, { value: _dvalue });
                        else
                            litag = ej.buildTag('li');
                        if (_did)
                            litag.attr('id', _did);
                        if ((_dimageUrl) && (_dimageUrl != "")) {
                            //Creating the image tag
                            imgtag = ej.buildTag('img.e-align', '', {}, { 'src': _dimageUrl, 'alt': _dtext });
                            if ((_dimageAttributes) && (_dimageAttributes != "")) 
                                imgtag.attr(_dimageAttributes);
                            litag.append(imgtag);
                        }
                        if ((_dspriteCss) && (_dspriteCss != "")) {
                            //Creating the Sprite image tag
                            divtag = ej.buildTag('div.e-align ' + _dspriteCss + ' sprite-image');
                            litag.append(divtag);
                        }
                        if ((_dtext) && (_dtext != "")) {
                            //Creating text Content inside the  tag
                            litag.append(_dtext);
                        }
                        if ((_dhtmlAttributes) && (_dhtmlAttributes != ""))
                            litag.attr(_dhtmlAttributes);
                        if (_dselected) {
                            litag.addClass("chkselect");
                        }
                        this.dummyUl.push(litag[0]);
                    }
                }
            }
        },
        //grouped uncategorized li with the given data source
        _swapUnCategorized: function (list) {
            $(list).each(function (i, obj) {
                if (!obj.key) {
                    for (var j = i; j > 0; j--) {
                        list[j] = list[j - 1];
                    }
                    list[j] = obj;
                    return false;
                }
            });
        },
        //get object
        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },
        //template
        _getTemplatedString: function (list) {

            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },
        //water mark
        _setWatermark: function () {
            if ((this.model.watermarkText != null) && (this.element.val() == "")) {
                this.element.addClass("e-watermark");
                this.element.val(this.model.watermarkText);
            }
        },
        //checkbox properties
        _checkboxHideShow: function (value) {
            if (value) {
                this._createCheckbox();
            } else {
                this._removeCheckbox();
            }
            this.model.showCheckbox = value;
        },
        _createCheckbox: function () {
            var i, _extchk, chklist, me = this;
            this.listitems = this.popupList.find("ol,ul").children("li:not('.e-category')");
            chklist = this.listitems.find('input[type=checkbox]');
            if (chklist.length == 0) {
                for (i = 0; i < this.listitems.length; i++) {
                    $checkbox = ej.buildTag("input.listcheckbox e-align#popuplist" + i + "_" + this._id, "", {}, { type: "checkbox", name: "list" + i,"data-role":"none" });
                    $(this.listitems[i]).prepend($checkbox);
                }
                this.popupList.find(".listcheckbox").ejCheckBox({ cssClass: this.model.cssClass, change: $.proxy(this._OnClickCheckList, this) });
                this.element.val("");
                this._setWatermark();
                for (i = 0; i < this.listitems.length; i++) {
                    if ($(this.listitems[i]).hasClass('chkselect')) {
                        $(this.listitems[i]).find(".listcheckbox").ejCheckBox({ "checked": true });
                        this._activeItem = i;
                        this.checkedStatus = true;
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        this._enterTextBoxValue();
                        $(this.listitems[i]).removeClass('chkselect');
                    }
                }
            }
        },

        _removeCheckbox: function () {
            var i, checkbox;
            this.listitems = this.popupList.find("ol,ul").children("li");
            checkbox = this.listitems.find('.listcheckbox');
            if (checkbox.length > 0) {
                this.listitems.find('.listcheckbox').ejCheckBox('destroy');
                this.listitems.find('input[type=checkbox]').remove();
            }
        },
        _setCheckAll: function (value) {
            //Check all the nodes on CheckAll = true
            if ((this.model.showCheckbox) && (value))
                this.checkAll();
        },
        _setUncheckAll: function (value) {
            //UnCheck all the nodes on UnCheckAll = true
            if ((this.model.showCheckbox) && (value))
                this.unCheckAll();
        },
        /**
      * This method is used to set all the  items to checked.
      * @return jQuery
      * @example 
      * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	  * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5",showCheckbox:true});
      * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
      * DropDownListObj.checkAll(); // checkAll values the DropDownList
      * &lt;/script&gt;
      * @example 
      * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	  * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5",showCheckbox:true});
      * $('#drpdwn').ejDropDownList("checkAll"); 	
      * &lt;/script&gt;
      *@memberof ejDropDownList
      * @instance
      */
        checkAll: function () {
            if (!this.model.enabled) return false;
            var _nodes = this.model.selectedItems;
            for (i = 0; i < this.listitems.length; i++) {
                if ($(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked') == false) {
                    $(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                    if ((this.model.watermarkText) && (this.element.hasClass("e-watermark"))) {
                        this.element.val(this.element[0].value.replace(this.model.watermarkText, ""));
                        this._hiddenInput.val("");
                    }
                    this.currentValue = this.model.template ? this._getField(this.popupListItems[i], this.mapFld._text) : $.trim($(this.listitems[i]).text());
                    this._itemID = $(this.listitems[i]).attr("id");
                    if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
                        this._selectedItemsID.push(this._itemID);
                    if (this.listitems[i].getAttribute("value")) {
                        this._hiddenValue = this.listitems[i].getAttribute("value");
                    }
                    else {
                        this._hiddenValue = this.currentValue;
                    }
                    this.checkedStatus = true;
                    if (this.model.allowMultiSelection) {
                        this._ulBox.append(this._createBox(this.currentValue));
                        if (this.showPopupBox)
                            this._setListPosition();
                    }
                    this._delimiterIndex = (this.element[0].value).lastIndexOf(this.model.delimiterChar);
                    this._hiddenDelimiterIndex = (this._hiddenInput[0].value).lastIndexOf(this.model.delimiterChar);
                    if ((this._delimiterIndex >= -1) && (this.element[0].value != "") && (this._delimiterIndex != this.element[0].value.length-1)) {
                        this.element.val(this.element[0].value + this.model.delimiterChar);
                        this._hiddenInput.val(this._hiddenInput[0].value + this.model.delimiterChar);
                        this._delimiterIndex = (this.element[0].value).lastIndexOf(this.model.delimiterChar);
                        this._hiddenDelimiterIndex = (this._hiddenInput[0].value).lastIndexOf(this.model.delimiterChar);
						this.element.val(this.element[0].value.substr(0, this._delimiterIndex + 1) + this.currentValue);
                    	this._hiddenInput.val(this._hiddenInput[0].value.substr(0, this._hiddenDelimiterIndex + 1) + this._hiddenValue);
                    }
                    else{
                        this.element.val(this.element[0].value.substr(0, this._delimiterIndex + 1) + this.currentValue + this.model.delimiterChar);
                        this._hiddenInput.val(this._hiddenInput[0].value.substr(0, this._hiddenDelimiterIndex + 1) + this._hiddenValue + this.model.delimiterChar);
					}
                    //
                    var _nodes = this.model.selectedItems;
                    if ($.inArray(i, _nodes) == -1) {
                        this.model.selectedItems.push(i);
                    }
                    if (this.listitems[i].getAttribute("value") != null)
                        this._selectedValue = this.listitems[i].getAttribute("value");
                    else
                        this._selectedValue = "";
                    if (!this._initValue)
                        this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                    args = { text: this.element[0].value, selectedText: this.currentValue, itemId: i, value: this._selectedValue, isChecked: this.checkedStatus };
                    if (!this._initValue)
                        this._trigger("change", args);
                    this._cascadeAction();
                }
            }
            this.value(this._hiddenInput.val());
            this.model.text = this.element.val();
            this.model.itemValue = this._selectedValue;
            /*Watermark*/
            if (this.model.watermarkText != null) {
                if (($.trim(this.element.val()) === '') || ($.trim(this.element.val()) === this.model.watermarkText)) {
                    this.element.val(this.model.watermarkText);
                    this.element.addClass("e-watermark");
                } else {
                    this.element.removeClass("e-watermark");
                }
            }
        },
        _selectCheckedItem: function (chkitems) {
            if (chkitems.length > 0) {
                for (i = 0; i < chkitems.length; i++) {
                    if ($(this.listitems[chkitems[i]].firstChild).find('.listcheckbox').ejCheckBox('isChecked') == false) {
                        $(this.listitems[chkitems[i]].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                        this.checkedStatus = true;
                        this.currentValue = $.trim($(this.listitems[chkitems[i]]).text());
                        if (this.model.allowMultiSelection)
                            this._ulBox.append(this._createBox(this.currentValue));
                        if (this.listitems[chkitems[i]].getAttribute("value")) {
                            this._hiddenValue = this.listitems[chkitems[i]].getAttribute("value");
                        }
                        else {
                            this._hiddenValue = this.currentValue;
                        }
                        this._addText(this.currentValue);
                        if (this.listitems[chkitems[i]].getAttribute("value") != null)
                            this._selectedValue = this.listitems[chkitems[i]].getAttribute("value");
                        else
                            this._selectedValue = "";
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                        args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
                        if (!this._initValue)
                            this._trigger("change", args);
                        this._cascadeAction();
                    }
                }
                /*Watermark*/
                if (this.model.watermarkText != null) {
                    if (($.trim(this.element.val()) === '') || ($.trim(this.element.val()) === this.model.watermarkText)) {
                        this.element.val(this.model.watermarkText);
                        this.element.addClass("e-watermark");
                    } else {
                        this.element.removeClass("e-watermark");
                    }
                }
            }
        },
        /**
      * This method is used to set all the  items to uncheck.
      * @return jQuery
      * @example 
      * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	  * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5",showCheckbox:true});
      * var DropDownListObj  = $("#drpdwn").data("ejDropDownList");
      * DropDownListObj.unCheckAll(); // UncheckAll values the DropDownList
      * &lt;/script&gt;
      * @example 
     * &lt;input type="text" id="drpdwn" /&gt; <br> 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/> 
	  * &lt;script&gt;
      * // Create DropDownList
	  * $('#drpdwn').ejDropDownList({targetID: "carsList",value:"Audi A5",showCheckbox:true});
      * $('#drpdwn').ejDropDownList("unCheckAll"); 	
      * &lt;/script&gt;
      *@memberof ejDropDownList
      * @instance
      */
        unCheckAll: function () {
            if (!this.model.enabled) return false;
            for (i = 0; i < this.listitems.length; i++) {
                if ($(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
					$(this.listitems[i]).removeClass('e-active');
                    $(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                    this.currentValue = this.model.template ? this._getField(this.popupListItems[i], this.mapFld._text) : $.trim($(this.listitems[i]).text());
                    if (this.listitems[i].getAttribute("value")) {
                        this._hiddenValue = this.listitems[i].getAttribute("value");
                    }
                    else {
                        this._hiddenValue = this.currentValue;
                    }
                    if (this.model.allowMultiSelection) {
                        this._deleteBoxCheck(this.currentValue);
                        if (this.showPopupBox)
                            this._setListPosition();
                    }
                    this._txtpos = (this.element[0].value).lastIndexOf(this.currentValue);
                    this._delimiterIndex = (this.element[0].value).lastIndexOf(this.model.delimiterChar);
                    if ((this._txtpos == 0) && (this._delimiterIndex <= -1)) {
                        this.element.val(this.element[0].value.replace(this.currentValue, ""));
                        this._hiddenInput.val(this._hiddenInput[0].value.replace(this._hiddenValue, ""));
                    } else if (((this._txtpos == 0) && (this._delimiterIndex > -1)) || ((this._txtpos > -1) && (this._delimiterIndex > this._txtpos))) {
                        if(this.element[0].value == this.currentValue || this.element[0].value.length == this._txtpos+this.currentValue.length){
							this.element.val(this.element[0].value.replace(this.currentValue, ""));
                        	this._hiddenInput.val(this._hiddenInput[0].value.replace(this._hiddenValue, ""));
						}
						else{
                            this.element.val(this.element[0].value.replace(this.currentValue + this.model.delimiterChar, ""));
                            this._hiddenInput.val(this._hiddenInput[0].value.replace(this._hiddenValue + this.model.delimiterChar, ""));
						}
                    } else if ((this._txtpos > -1) && (this._delimiterIndex < this._txtpos)) {
                        this.element.val(this.element[0].value.replace(this.model.delimiterChar + this.currentValue, ""));
                        this._hiddenInput.val(this._hiddenInput[0].value.replace(this.model.delimiterChar + this._hiddenValue, ""));
                    } else if ((this._txtpos > -1) && (this._delimiterIndex < this._txtpos)) {
                        this.element.val(this.element[0].value.replace(this.currentValue, ""));
                        this._hiddenInput.val(this._hiddenInput[0].value.replace(this._hiddenValue, ""));
                    }
                }
                this.checkedStatus = false;
                var _nodes = this.model.selectedItems;
                if ($.inArray(i, _nodes) > -1) {
                    this.model.selectedItems.splice($.inArray(i, _nodes), 1);
                }
                if (this.listitems[i].getAttribute("value") != null)
                    this._selectedValue = this.listitems[i].getAttribute("value");
                else
                    this._selectedValue = "";
                this._itemID = $(this.listitems[i]).attr("id");
                if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
                    this._removeSelectedItemsID();
                if (!this._initValue)
                    this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                args = { text: this.element[0].value, selectedText: this.currentValue, itemId: i, value: this._selectedValue, isChecked: this.checkedStatus };
                if (!this._initValue)
                    this._trigger("change", args);
                this._cascadeAction();
            }
            this.value(this._hiddenInput.val());
            this.model.text = this.element.val();
            this.model.itemValue = this._selectedValue;
            /*watermarkText*/
            if (this.model.watermarkText != null) {
                if (($.trim(this.element.val()) === '') || ($.trim(this.element.val()) === this.model.watermarkText)) {
                    this.element.val(this.model.watermarkText);
                    this.element.addClass("e-watermark");
                } else {
                    this.element.removeClass("e-watermark");
                }
            }
        },
        _removeSelectedItemsID: function () {
            var itemToRemove;
            itemToRemove = this._selectedItemsID.indexOf(this._itemID);
            this._selectedItemsID.splice(itemToRemove, 1);
            this._itemID = "";
        },
        //List Properties
        _refreshScroller: function () {
            this.popupList.css("height", "auto");
            this.popupList.find(".e-content, .e-vhandle").removeAttr("style");
            this.popupList.find(".e-vhandle div").removeAttr("style");

            this.popupList.css({ "display": "block" });  // For get the height of the popup
            this.scrollerObj.model.height = this.popupList.outerHeight();
            this.scrollerObj.refresh();
            this.scrollerObj.option("scrollTop", 0);
            this.popupList.css({ "height": "auto" });
        },
        _setListWidth: function () {
            var width = this.model.popupWidth;
            if (width != "auto") this.popupList.css({ "width": width });
            else this.popupList.css({ "min-width": this.wrapper.width() });
        },

        _setListHeight: function () {
            if (this.model.itemsCount > 0) { this.popupList.css({ "max-height": this.model.itemsCount * 30 }); }
            else this.popupList.css({ "max-height": this.model.popupHeight });
			
        },
        _refreshPopup: function () {
            if (this.model.popupWidth == "auto") this.popupList.css({ "min-width": this.wrapper.width() });
            this._setListPosition();
            this._refreshScroller();
        },
        _setListPosition: function () {
            var elementObj = this.wrapper;
            var pos = this._getOffset(elementObj),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial();
            if (this.model.enableRTL) left -= this.popupList.outerWidth() - elementObj.outerWidth();
            this.popupList.css({
                "left": left + "px",
                "top": pos.top + totalHeight - border + 3 + "px",
                "z-index": maxZ
            });
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },
        _getZindexPartial: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static')
                    return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },
        //Popup status
        _showResult: function () {
            var proxy = this;
            if (this._trigger("beforePopupShown", { text: this.element[0].value, value: this._selectedValue })) return;
            this._refreshPopup();
            $(this.popupList).slideDown(this.model.enableAnimation ?200:1, "easeOutQuad", function () {
                proxy.popupList.focus();
                $(document).bind("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
            });
            this.showPopupBox = true;
            this.element.attr({ "aria-expanded": true }); var _popupListItems = this.ultag.children("li:not('.e-category')");
            this._listSize = _popupListItems.size();

            _popupListItems.bind("mouseenter", $.proxy(this._OnMouseEnter, this));
            _popupListItems.bind("mouseleave", $.proxy(this._OnMouseLeave, this));
            _popupListItems.bind("click", $.proxy(this._OnMouseClick, this));
            $(window).bind("resize", $.proxy(this._OnWindowResize, this));
            
            this._trigger("popupShown", { text:this.element[0].value, value:this._selectedValue });
        },

        _OnWindowResize: function (e) {
            if (!ej.isNullOrUndefined(this.model)) {
                this._refreshPopup();
                this.popupList.css("display", "block");
            }
        },
        _hideResult: function () {
            if (this.model && this.showPopupBox) {
                if (this._trigger("beforePopupHide", { text: this.element[0].value, value: this._selectedValue })) return;
                this.showPopupBox = false;
                var proxy = this;
				$(this.popupList).slideUp(this.model.enableAnimation ? 100 : 1, "easeOutQuad", function () {
                    proxy.wrapper.focus();
					$(document).unbind("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
                });
				if (this.element != null)
                this.element.attr({ "aria-expanded": false }); var _popupListItems = this.ultag.children("li:not('.e-category')");
                $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
                _popupListItems.unbind("mouseenter", $.proxy(this._OnMouseEnter, this));
                _popupListItems.unbind("mouseleave", $.proxy(this._OnMouseLeave, this));
                _popupListItems.unbind("click", $.proxy(this._OnMouseClick, this));
                if (this.element != null)
                    this._trigger("popupHide", {  text:this.element[0].value, value:this._selectedValue });
            }
        },
        // selecting text box value
        _enterTextBoxValue: function () {
            var args;
            this.removeID = false;
            this._chooseSelectionType();
            args = { text: this.currentValue, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue) this._trigger("select", args);
            if (this.element[0].value != this.currentValue) {
                if (this.model.showCheckbox) {
                    if (this.model.allowMultiSelection) {
                        if (this.activeItem.find('.listcheckbox').ejCheckBox('isChecked') == false) {
                            this.activeItem.find('.listcheckbox').ejCheckBox('option', 'checked', true)
                            this.checkedStatus = true;
                        }
                        this._ulBox.append(this._createBox(this.currentValue));
                        if (this.showPopupBox)
                            this._setListPosition();
                    }
					else{
						if (this.activeItem.find('.listcheckbox').ejCheckBox('isChecked') == false) {
                            this.activeItem.find('.listcheckbox').ejCheckBox('option', 'checked', true)
                            this.checkedStatus = true;
                        }
					}
                    this._maintainHiddenValue();
                    this._addText(this.currentValue);
                    var _nodes = this.model.selectedItems;
                    if ($.inArray(this.selectedIndexValue, _nodes) == -1) {
                        this.model.selectedItems.push(this.selectedIndexValue);
                    }
                } else {
                    this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                    this.activeItem.addClass('e-active');
                    this.element.val(this.currentValue);
                    this._maintainHiddenValue();
                    this._hiddenInput.val(this._hiddenValue);
                    this.model.selectedItemIndex = this.selectedIndexValue;
                }

                args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };

                if (!this._initValue)
                    this._trigger("change", args);
                this._cascadeAction();
                this.value(this._hiddenInput.val());
                this.model.itemValue = this._selectedValue;
                this.model.text = this.element.val();
                /*Watermark*/
                if (this.model.watermarkText != null) {
                    if (($.trim(this.element.val()) === '') || ($.trim(this.element.val()) === this.model.watermarkText)) {
                        this.element.val(this.model.watermarkText);
                        this.element.addClass("e-watermark");
                    } else {
                        this.element.removeClass("e-watermark");
                    }
                }
            }
        },
        _chooseSelectionType: function () {
            this.activeItem = this._getActiveItem();
            this.selectedIndexValue = this._activeItem;
            if (this.model.dataSource != null && typeof this.model.dataSource[0] == "object") {
                this.currentValue = $.trim(this._getField(this.popupListItems[this._activeItem], this.mapFld._text));
                this.hidelement = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
                this._selectedValue = this.hidelement;
                this._itemID = this._getField(this.popupListItems[this._activeItem], this.mapFld._id);
            } else {
                this.currentValue = $.trim(this.activeItem.text());
				if (this.activeItem[0].getAttribute("value") != null)
                    this._selectedValue = this.activeItem[0].getAttribute("value");
                else {
					if(this.currentValue!=null) {
						this.activeItem[0].setAttribute("value",this.currentValue);
						this._selectedValue=this.currentValue;
						}
					else
                       this._selectedValue = "";
                   }
                this._itemID = $(this.activeItem).attr("id");
            }
            if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "") {
                if (!this.model.showCheckbox) {
                    this._selectedItemsID = [];
                    !this.removeID && this._selectedItemsID.push(this._itemID);
                }
                else
                    !this.removeID ? this._selectedItemsID.push(this._itemID) : this._removeSelectedItemsID();
            }
            this.selectedTextValue = this.currentValue;
        },
        _maintainHiddenValue:function(){
            if (this.activeItem[0].getAttribute("value")) {
                this._hiddenValue = this.activeItem[0].getAttribute("value");
            }
            else {
                this._hiddenValue = this.currentValue;
            }
        },
        _removeTextBoxValue: function () {
            this.removeID = true;
            this._chooseSelectionType();
            if (this.model.showCheckbox) {
                this._maintainHiddenValue();
                this._removeText(this.currentValue);
                var _nodes = this.model.selectedItems;
                if ($.inArray(this.selectedIndexValue, _nodes) > -1) {
                    this.model.selectedItems.splice($.inArray(this.selectedIndexValue, _nodes), 1);
                }
                if (this.model.allowMultiSelection) {
                    this._deleteBoxCheck(this.currentValue);
                    if (this.showPopupBox)
                        this._setListPosition();
                }
                if (this.activeItem.find('.listcheckbox').ejCheckBox('isChecked') == true) {
                    this.activeItem.find('.listcheckbox').ejCheckBox('option', 'checked', false);
                    this.checkedStatus = false;
                }
            } else {
                this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                this._maintainHiddenValue();
                this._removeText(this.currentValue);
            }
            args = { text: this.currentValue, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue)
                this._trigger("select", args);
            args = { text: this.element[0].value, selectedText: this.currentValue, itemId: this.selectedIndexValue, value: this._selectedValue, isChecked: this.checkedStatus };
            if (!this._initValue)
                this._trigger("change", args);
            this.value(this._hiddenInput.val());
            this.model.itemValue = this._selectedValue;
            this.model.text = this.element.val();
            /*Watermark*/
            if (this.model.watermarkText != null) {
                if (($.trim(this.element.val()) === '') || ($.trim(this.element.val()) === this.model.watermarkText)) {
                    this.element.val(this.model.watermarkText);
                    this.element.addClass("e-watermark");
                } else {
                    this.element.removeClass("e-watermark");
                }
            }
        },
        /* box */

        _createBox: function (value) {
            if (!this._checkContains(value) && this.checkedStatus) {
                var span = ej.buildTag("span.e-icon e-close");
                var li = ej.buildTag("li.e-options", value).append(span);
                this._on(span, "click", function (e) {
                    if (!this.model.enabled) return false;
                    this._deleteBox($(e.target).parent());
                });
                return li;
            }
        },
        _deleteBoxCheck: function (val) {
            var items = this._ulBox.children('li');
            for (var i = 0; i < items.length; i++) {
                if ($(items[i]).text() == val) {
                    $(items[i]).remove();
                }
            }
        },
        _deleteLastBox: function () {
            var items = this._ulBox.children("li:not(.e-search-box)");
            var item = items.last();
            if (item.hasClass("e-active")) this._deleteBox(item);
            else {
                this._removeActive();
                item.addClass("e-active");
            }
        },
        _deleteBox: function (items) {
            for (var i = 0; i < items.length; i++) {
                var cobj = $(items[i]);
                deltext = cobj.text();
                var listItems = this.ultag.children("li:not('.e-category')");
                for (var j = 0; j < listItems.length; j++) {
                    if ($(listItems[j]).text() == deltext) {
                        this._activeItem = j;
                        this._uncheckboxModel(this._activeItem);
                    }
                }
                cobj.remove();
            }
        },
        _removeActive: function () {
            this._ulBox.children("li").removeClass("e-active");
        },
        _adjustWidth: function () {
            var tempSpan = ej.buildTag("span", this.element.val());
            this.container.append(tempSpan);
            this.element.width(tempSpan.width() + 30);
            tempSpan.remove();
        },
        _uncheckboxModel: function (val) {
            var listItems = this.ultag.children("li:not('.e-category')");
            if ($(listItems[val].firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                $(listItems[val].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                this._removeTextBoxValue();
                if (!this._initValue)
                    this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
            }
        },
        _destroyBoxModel: function () {
            this.container.prepend(this.element);
            this.element.css('display', 'block');
            this.wrapper.height(this.model.height);
            this._ulBox.remove();
            this._off(this.container, "mousedown");
        },
        //
        _removeListHover: function () {
            this.ultag.children("li").removeClass("e-hover");
        },

        _addListHover: function () {
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
        },
        _calcScrollTop: function () {
            var ulH = this.ultag.outerHeight(), li = this.ultag.find("li"), liH = 0, index, top, i;
            index = this.ultag.find("li.e-hover").index();
            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(); }
            top = liH - ((this.popupList.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },
        _getActiveItem: function () {
            return $(this.ultag.children("li:not('.e-category')")[this._activeItem]);
        },
        _setDimentions: function () {
            if (this.model.height)
                this.wrapper.height(this.model.height);
            if (this.model.width)
                this.wrapper.width(this.model.width);
        },


        _roundedCorner: function (val) {
            if (val) {
                this.container.addClass("e-corner-all");
            }
            else {
                this.container.removeClass("e-corner-all");
            }

        },

        _enabled: function (boolean) {
            if (boolean) this.enable();
            else this.disable();
        },

        _destroyDropdown: function () {
            this.element.insertAfter(this.wrapper);
            this.element.width(this.element.width() + this.dropdownbutton.outerWidth());
            this.wrapper.remove();
            this.container.remove();
            this.element.unbind("mousedown", $.proxy(this._OnDropdownClick, this));//need to write for removing the list 
            this.dropdownbutton.unbind("mousedown", $.proxy(this._OnDropdownClick, this));//need to write for removing the list 
        },


        _RightToLeft: function () {
            if (this.model.enableRTL) {
                this.wrapper.addClass("e-rtl");
            }
            else {
                this.wrapper.removeClass("e-rtl");
            }

        },
        _dropbtnRTL: function () {
            if (this.model.enableRTL) {
                this.popupList.addClass("e-rtl");
            }
            else {
                this.popupList.removeClass("e-rtl");
            }
        },
        _OnDropdownClick: function (e) {
            e.preventDefault();
            if (this.model.readOnly) return false;
            if (this.ultag.find('li').length > 0) {
                if (this.showPopupBox) {
                    this._hideResult();
                }
                else {
                    this._showResult();
                    this.wrapper.focus();
                }
            }
        },

        _showFullList: function () {
            if (this.model.dataSource != null) {
                if (!(ej.DataManager && this.model.dataSource instanceof ej.DataManager)) {
                    this.popupListItems = this.model.dataSource;
                }
            }
            this._renderPopupList();
        },

        // cascade options
        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                this._currentValue = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
                this.selectDropObj = $('#' + this.model.cascadeTo).ejDropDownList('instance');
                if (ej.isNullOrUndefined(this._dSource))
                    this._dSource = this.selectDropObj.model.dataSource;
                if (ej.DataManager && this._dSource instanceof ej.DataManager) {
                    this._performOdataInit();
                } else {
                    this._performJsonDataInit();
                }
            }
        },
        _performOdataInit: function () {
            var proxy = this, queryPromise, tempQuery;
            if (ej.isNullOrUndefined(this._dQuery)) {
                this._dQuery = this.selectDropObj.model.query.clone();
            }
            tempQuery = this._dQuery.clone();
            proxy.selectDropObj._addLoadingClass();
            queryPromise = this._dSource.executeQuery(tempQuery.where(this.mapFld._value, "equal", this._currentValue));
            queryPromise.fail(function (e) {
                proxy._changedSource = null;
                proxy.selectDropObj.setModel({ dataSource: proxy._changedSource, enabled: false });
            }).done(function (e) {
                proxy._changedSource = e.result;
                proxy.selectDropObj.setModel({ dataSource: proxy._changedSource, enabled: true });
                proxy.selectDropObj._removeLoadingClass();
            });
        },
        _performJsonDataInit: function () {
            this._changedSource = ej.DataManager(this._dSource).executeLocal(ej.Query().where(this.mapFld._value, "==", this._currentValue));
            this.selectDropObj.setModel({ dataSource: this._changedSource, enabled: true, value:"" });
        },
        //
        _OnMouseEnter: function (e) {
            var targetEle;
            this.ultag.children("li").removeClass("e-hover");
            if ($(e.target).is("li:not('.e-category')")) { $(e.target).addClass("e-hover"); }
            else if (e.target.tagName != "li") {
                targetEle = $(e.target).parents("li:not('.e-category')");
                $(targetEle).addClass("e-hover");
            }
            var activeItem = 0;
            this.ultag.children("li:not('.e-category')").each(function (index) {
                if ($(this).hasClass("e-hover")) {
                    activeItem = index;
                    return false;
                }
            });
            this._activeItem = activeItem;
        },
        _OnMouseLeave: function (e) {
            this.ultag.children("li").removeClass("e-hover");
        },
        _OnMouseClick: function (e) {
            if (!this.model.showCheckbox) {
                if (this.model.template) {
                    this._templateValue();
                } else {
                    this._enterTextBoxValue();
                }
                this._hideResult();
            } else {
                if (($(e.currentTarget).is("li")) && ($(e.target).is("li"))) {
                    if ($(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                        $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                        this.checkedStatus = false;
                        this._removeTextBoxValue();
                    } else {
                        $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                        this.checkedStatus = true;
                        this._enterTextBoxValue();
                    }
                }
                if (!this._initValue)
                    this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
            }
        },
        _OnClickCheckList: function (e) {
            if (e.isChecked) {
                this.checkedStatus = true;
                this._enterTextBoxValue();
            } else {
                this.checkedStatus = false;
                this._removeTextBoxValue();
            }
           
        },
        _OnListSelect: function (e) {
            e.preventDefault();
            activeItem = this._getActiveItem();
            if ($(activeItem).find('.listcheckbox').ejCheckBox('isChecked')) {
                $(activeItem).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                this.checkedStatus = false;
                this._removeTextBoxValue();
            } else {
                $(activeItem).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                this.checkedStatus = true;
                this._enterTextBoxValue();
            }

            if (!this._initValue)
                this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
        },
        _OnDocumentClick: function (e) {
            if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-ddl-popup").is(this.popupList) &&
                !$(e.target).is(this.element) && !$(e.target).parents(".e-ddl").is(this.wrapper)) {
                this._hideResult();
            }
            else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-ddl-popup").is(this.popupList))
                e.preventDefault();
        },

        //keyboard events
        _OnKeyDown: function (e) {
            if ((!this.model.enabled) || (this.model.readOnly)) return false;
            this._itemId = null;
            var _popupListItems = this.ultag.children("li:not('.e-category')");
            this._listSize = this.ultag.children("li:not('.e-category')").size();
			var liH, popupH, activeitem,flag;
            popupH = this.popupList.height();
            liH = this.ultag.children("li").outerHeight();
            activeitem = Math.round(popupH / liH);
			
            switch (e.keyCode) {
                case 38://Up arrow
                    if (e.altKey) {
                        if (this.ultag.find('li').length > 0)
                            this._hideResult();
					break;
                    }
                case 33:// pageup key
                    var flag = ((e.keyCode == 38) ? 1 : activeitem);
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                            this._activeItem = this._listSize - 1;
                        else
                            this._activeItem -= flag;
                        this._addListHover();
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    } else {
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                            this._activeItem = this._listSize - 1;
                        else
                            this._activeItem -= flag;
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    e.preventDefault();
                    return false;
					break;
                case 40: //Down arrow
                    if (e.altKey) {
                        if (this.ultag.find('li').length > 0)
                            this._showResult();
					break;
                    }
                case 34://pagedown key  
                    var flag = ((e.keyCode == 40) ? 1 : activeitem);
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                            this._activeItem = 0;
                        else
                            this._activeItem += flag;
                        this._addListHover();
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    } else {
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                            this._activeItem = 0;
                        else
                            this._activeItem += flag;
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    e.preventDefault();
                    return false;  
                    break;
                case 37:// Left Key equals up
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                            this._activeItem = this._listSize - 1;
                        else
                            this._activeItem -= 1;
                        this._addListHover();
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    } else {
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem <= 0) || (this._activeItem == null) || (this._activeItem > this._listSize - 1))
                            this._activeItem = this._listSize - 1;
                        else
                            this._activeItem -= 1;
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    e.preventDefault();
                    return false;
                    break;  // Left Key
                case 39:// Right Key equals down
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                            this._activeItem = 0;
                        else
                            this._activeItem += 1;
                        this._addListHover();
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    } else {
                        this.ultag.children("li").removeClass('e-active');
                        if ((this._activeItem >= this._listSize - 1) || (this._activeItem == null) || (this._activeItem < 0))
                            this._activeItem = 0;
                        else
                            this._activeItem += 1;
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    e.preventDefault();
                    return false;
                    break;  // Right Key
                case 8:    // Backspace key
                    if ((this.model.allowMultiSelection == true) && (this.model.showCheckbox)) {
                        this._deleteLastBox();
                    }
                    e.preventDefault();
                    return false;
                    break;
                case 9:    // Tab key
                    this._hideResult();
                    break;
                case 35:
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this.ultag.children("li").removeClass('e-active');
                        this._activeItem = this._listSize - 1;
                        this._addListHover();
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    else {
                        this.ultag.children("li").removeClass('e-active');
                        this._activeItem = this._listSize - 1;
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    e.preventDefault();
                    return false;
                    break;  // End Key
                case 36:
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this.ultag.children("li").removeClass('e-active');
                        this._activeItem = 0;
                        this._addListHover();
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    else {
                        this.ultag.children("li").removeClass('e-active');
                        this._activeItem = 0;
                        if ((!this.model.showCheckbox) && (this.model.template == null))
                            this._enterTextBoxValue();
                    }
                    e.preventDefault();
                    return false;
                    break;  // Home Key
                case 17:    // Ctrl key
                    break;
                case 18:    // Alt key
                    break;
                case 27:    // Esc key
                    this._hideResult();
					e.stopPropagation();
                    break;
                case 32:    // space Key
                    e.preventDefault();
                    return false;
                    break;
            }
        },

        _OnKeyUp: function (e) {
            if ((!this.model.enabled) || (this.model.readOnly)) return false;
            e.preventDefault();
            var target = e.target;
            if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
                this._hideResult();
                return false;
            }

            switch (e.keyCode) {
                //Restricts the keyup event for other functional keys
                case 38: break;  // Up Key
                case 40: break;  // Down Key
                case 37: break;  // Left Key
                case 39: break;  // Right Key

                case 20: break;  // CapsLk
                case 16: break;  // Shift Key
                case 17: break;  // Ctrl Key
                case 18: break;  // Alt Key
                case 35: break;  // End Key
                case 36: break;  // Home Key
                case 144: break;  // Num Lock
                case 27: break;  // Esc Key
                case 9: break;  // Tab Key

                case 13:    // Enter Key
                    e.preventDefault();
                    if (this.model.showCheckbox) {
                        this._OnListSelect(e);
                    } else if (this.model.template) {
                        this._templateValue();
                        this._hideResult();
                    }
                    else {
                        this._enterTextBoxValue();
                        this._hideResult();
                    }

                    return false;
                    break;
                case 32:    // space Key
                    e.preventDefault();
                    if (this.model.showCheckbox) {
                        this._OnListSelect(e);
                    } else if (this.model.template) {
                        this._templateValue();
                        this._hideResult();
                    }
                    else {
                        this._enterTextBoxValue();
                        this._hideResult();
                    }
                    return false;
                    break;
                case 8:     // Backspace Key
                    // this._OnTextEnter("backspace");
                    this._hideResult();
                    break;
                case 46:    // Delete Key
                    if ((this.model.allowMultiSelection == true) && (this.model.showCheckbox)) {
                        this._deleteBox(this._ulBox.children("li.e-active"));
                        break;
                    }

                //default:
                //    if  (this.model.enableIncrementalSearch) {
                //        this._OnTextEnter(e.keyCode);
                //    }
                //    break;
            }
        },
        _OnKeyPress: function (e) {
            if (this.model.enableIncrementalSearch) {
                this._OnTextEnter(e.charCode);
            }
        },
        //
        //template type
        _templateValue: function () {
            var activeitem = $(this.ultag.children("li")[this._activeItem]);
            currentText = this._getField(this.popupListItems[this._activeItem], this.mapFld._text);
            currentValue = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
            if (this.ultag.children("li")[this._activeItem].getAttribute("value")) 
                this._hiddenValue = currentValue;
            else 
                this._hiddenValue = currentText;
            args = { text: currentText, selectedText: currentText, itemId: this._activeItem, value: currentValue };
            if (!this._initValue)
                this._trigger("select", args);
            if (this._activeItem != this._aselectedItem) {
                this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
                activeitem.addClass('e-active');
                this._aselectedItem = this._activeItem;
                this.element.val(currentText);
                this._hiddenInput.val(this._hiddenValue);
                args = { text: this.element[0].value, selectedText: currentText, itemId: this._activeItem, value: currentValue };
                if (!this._initValue)
                    this._trigger("change", args);
                this.value(this._hiddenInput.val());
                this.model.itemValue = currentValue;
                this.model.text = currentText;
            }
            /*Watermark*/
            if (this.model.watermarkText != null) {
                if (($.trim(this.element.val()) === '') || ($.trim(this.element.val()) === this.model.watermarkText)) {
                    this.element.val(this.model.watermarkText);
                    this.element.addClass("e-watermark");
                } else {
                    this.element.removeClass("e-watermark");
                }
            }
        },
        //
        //On Text type
        _OnTextEnter: function (from) {
            // this._hideResult();
            _proxy = this;
            this._incqueryString += String.fromCharCode(from);
            if (this._incqueryString.length > 0) {
                setTimeout(function () { _proxy._incqueryString = ""; }, 1000);
            }
            var list = this.listitems, i, strlen,
            caseSence = this.model.caseSensitiveSearch, mapper = this.model.fields,
            tempSuggestion = [],
            str, queryStr = this._incqueryString,
            querylength = this._incqueryString.length, searchflag = false;

            if (!caseSence) queryStr = queryStr.toLowerCase();

            for (i = 0; i < list.length; i++) {
                str = list[i].textContent.trim();
                str = caseSence ? str : str.toLowerCase();
                if (str.substr(0, querylength) == queryStr) {
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this._activeItem = i;
                        if(!this.model.showCheckbox)
                        this._enterTextBoxValue();
                        this._addListHover();
                    } else {
                        this._activeItem = i;
                        if (!this.model.showCheckbox)
                        this._enterTextBoxValue();
                    }
                    searchflag = true;
                } else if ((i == list.length - 1) && (searchflag == false)) {
                    if (this.showPopupBox) {
                        this._removeListHover();
                        this._activeItem = i;
                        if (!this.model.showCheckbox)
                        this._enterTextBoxValue();
                        this._addListHover();
                    } else {
                        this._activeItem = i;
                        if (!this.model.showCheckbox)
                        this._enterTextBoxValue();
                    }
                    searchflag = true;
                }
                if (searchflag) break;
            }

        },

        //foucus in and out
        _targetFocus: function () {
            if (this.model.enabled) {
                if (this.element.hasClass("e-watermark")) {
                    this.element.removeClass("e-watermark");
                    this.element.val(null);
                }
                this.wrapper.addClass("e-focus");
                this._isFocused = true;
                /* Raise focusIn Event*/
                this._trigger("focusIn");
            }
        },

        _targetBlur: function () {
            if (this.model.enabled) {
                this._isFocused = false;
                this.wrapper.removeClass("e-focus");
                if (this.model.watermarkText != null) {
                    if ($.trim(this.element.val()) === '') {
                        this.element.val(this.model.watermarkText);
                        this.element.addClass("e-watermark");
                    }
                }
                /* Raise focusOut Event*/
                this._trigger("focusOut");
            }
        },

        //-------------------- Event Wire-up -------------------------//
        _wireEvents: function () {
            this._on(this.wrapper, "focus", this._targetFocus);
            this._on(this.wrapper, "blur", this._targetBlur);
            // this._on(this.element, "input", this._valueChange);
            //this._on(this.element, "keydown", this._OnKeyDown);
            //this._on(this.element, "keyup", this._OnKeyUp);


            this._on(this.wrapper, "keydown", this._OnKeyDown);
            this._on(this.popupList, "keydown", this._OnKeyDown);
            this._on(this.popupList, "keyup", this._OnKeyUp);
            this._on(this.wrapper, "keyup", this._OnKeyUp);
            this._on(this.popupList, "keypress", this._OnKeyPress);
            this._on(this.wrapper, "keypress", this._OnKeyPress);

        }
    });
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html List elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/


(function ($, ej, undefined) {
    /**
   * @namespace ej
   * @classdesc The Listbox control provides a list options to make user to choose an item from the list. It is capable of including other html elements such as images, textboxes, check box, radio buttons and so on.
   * @class ejListBox
   * @requires jQuery
   * @requires jquery.easing.1.3.js
   * @requires ej.core.js
   * @requires ej.data.js
   * @requires ej.listbox.js
   * @requires ej.checkbox.js
   * @requires ej.scroller.js
   * @example 
  
   * 
   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
   * // Create ListBox
   * $('#carsList').ejListBox(); 	
   * &lt;/script&gt; 
   *@example
   * // Another way to render ListBox control, using its targetID.
   *	&lt;ul id="listboxsample"&gt;
   *    &lt;/ul&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   
   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   * &lt;script&gt;
    * // Create ListBox
    * $('#listboxsample').ejListBox({targetID: "carlist"}); 	
    * &lt;/script&gt; 
    */
    // ejlistBox is the plugin name 
    // "ej.ListBox" is "namespace.className" will hold functions and properties

	
    ej.widget("ejListBox", "ej.ListBox", {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
		itemRequest:null,
     	 validTags: ["ul"],
        _setFirst: false,
		//Root Css Class
         _rootCSS: "e-listbox",
        // default model
        defaults: {
	
            itemsCount: 0,
			 /**		
            * Specifies the data source of the ListBox. The data source contains the list of data for generating the List items.	
            * @default null
            * @type {data}
            * @example 
			*  &lt;ul id="countrylist"&gt;  &lt;/ul&gt;
			* &lt;script&gt;		
            * //To set dataSource API value during initialization  
            * 	$("#countrylist").ejListBox({ dataSource: window.countries });			 
            * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
            dataSource: null,
			  /**		
            * Specifies the query to retrieve the data from online server.	
            * @default null
            * @type {object}
            * @example 
			*  &lt;ul id="customerlist"&gt;  &lt;/ul&gt;
			* &lt;script&gt;		
            * //To set query API value during initialization  
            * var dataManger = ej.DataManager({       url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"});
            * var queryString = ej.Query().from("Suppliers").select("Customers");
            * 	$("#customerlist").ejListBox({ dataSource: dataManger, query: queryString, fields: { text: "CustomerID" }});
            * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
            query: null,
			itemRequest:null,
			 /**		
            * Specifies mapping fields for the data items of the ListBox.	
            * @default null
            * @type {object}
            * @example 
			*  &lt;ul id="countrylist"&gt;  &lt;/ul&gt;
			* &lt;script&gt;		
            * //To set fields API value during initialization  
            * 	$("#countrylist").ejListBox({ dataSource: window.countriesField,   fields: { text: "name", value: "key" }});
             * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
            fields: { 
				/**		
                 * Defines id for the tag.
				 * @alias ejListBox#fields->id
				 * @type String
                 */
			id: null, 
				/**		
                 * Defines the text content for the tag.
				 * @alias ejListBox#fields->text
				 * @type String
                 */
			text: null,  
			/**		
                 * Defines the imageURL for the image location. 
				 * @alias ejListBox#fields->imageUrl
				 * @type String
                 */
			imageUrl: null,
			 /**		
                 * Defines the image attributes such as height, width, styles and so on.
				 * @alias ejListBox#fields->imageAttributes
				 * @type String
                 */	
			imageAttributes: null, 
			/**		
                 * Defines the sprite css for the image tag.
				 * @alias ejListBox#fields->spriteCssClass
				 * @type String
                 */
			spriteCssClass: null, 
			/**		
                 * Defines the html attributes such as id, class, styles for the item.
				 * @alias ejListBox#fields->htmlAttributes
				 * @type Object
                 */
			htmlAttributes: null, 
				/**		
                 * Defines the tooltip text to be displayed for the data list item.
				 * @alias ejListBox#fields->toolTipText
				 * @type Object
                 */
			toolTipText:null,
				/**		
                 * Defines the tag value to be selected initially
				 * @alias ejListBox#fields->selected
				 * @type String
                 */
			selected: null,
			/**		
                 * Defines the category for data item.
				 * @alias ejListBox#fields->category
				 * @type String
                 */
			category: null,
			/**		
                 * Defines the table name for tag value or display text while render with remote data.
				 * @alias ejListBox#fields->tableName
				 * @type String
                 */
			tableName: null
			},
                  /**		
            * Defines the height of the ListBox.
            * @default Null
            * @type {string | number}
            * @example 
			   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
     * //Initialize the ListBox height property with the  value specified
   * $('#carsList').ejListBox({ height: "300"}); 	
   * &lt;/script&gt; 
		  
            * @memberof ejListBox
            * @instance
            */      
                 
            height: "272",  
            /**		
            * Defines the width of the ListBox.
            * @default Null
            * @type {string | number}
            * @example 
			   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
     * //Initialize the ListBox width property with the  value specified
   * $('#carsList').ejListBox({ width: "220"}); 	
   * &lt;/script&gt; 
		  
            * @memberof ejListBox
            * @instance
            */   			
            width: "200",   
 /**		
            * Specifies the template for ListBox.
            * @default null
            * @type {string}
            * @example <br/> 
			* &lt;ul id="carsList" /&gt; &lt;/ul&gt; <br> 
			* &lt;script&gt;		
            * // To set template API value during initialization  . 	
            * $("#carsList").ejListBox({ dataSource: window.carsListempList, template: '&lt;img class="eimg" src="styles/images/Employee/${eimg}.png" alt="employee" height="50px" width="50px"/&gt;' +
            *   '&lt;div class="ename"&gt; ${text} &lt;/div&gt;&lt;div class="desig"&gt; ${desig} &lt;/div&gt;&lt;div class="cont"&gt; ${country} &lt;/div&gt;'});
            * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */			
            template: null,  
			text:"",
			            /**		
            * Specifies the selectedItemIndex   for ListBox.
            * @default null
            * @type {number}
            * @example 
		  *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // To set selectedItemIndex   API value during initialization  . 	
   * $('#carsList').ejListBox({selectedItemIndex  : 2}); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            selectedItemIndex:null,
			
            selectedItems: [],
		
            checkedItems:[],
				            /**		
            * Specifies the checkedItemlist for ListBox.
	
            * @default []
            * @type {integerarray}
            * @example 
		 *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // To sets the checked item  API value during initialization  . 	
   * $('#carsList').ejListBox({ showCheckbox:true,checkedItemlist  : [1,2] }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            checkedItemlist: [],
					            /**		
            * Specifies the selectedItems  for ListBox.
	
            * @default []
            * @type {integerarray}
            * @example 
		 *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // To set selectedItemlist   API value during initialization  . 	
   * $('#carsList').ejListBox({ allowMultiSelection:true,selectedItemlist  : [1,2] }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            selectedItemlist: [],
			 /**		
            * cascadeTo is used in cascading ListBox scenario, to map the child ListBox list widget in the parent ListBox list widget. By selecting an option in the parent ListBox, the child ListBox has to load the corresponding value regarding the parent ListBox. 
            * @default null
            * @type {string}
            * @example 
			* &lt;div style="float: left;"&gt;
			*       &lt;span class="txt"&gt;Select Group&lt;/span&gt;
			*   &lt;ul id="groupsList" /&gt; &lt;/ul&gt;
			* &lt;/div&gt;
			*
			* &lt;div style="float: right;"&gt;
			*        &lt;span class="txt"&gt;Select Country&lt;/span&gt;
			*        &lt;ul id="countryList" /&gt; &lt;/ul&gt;
			* &lt;/div&gt;
			* &lt;script&gt;
			*  var groups = [
			*          { parentId: 'a', text: "Group A" },
			*          { parentId: 'b', text: "Group B" },
			*          { parentId: 'c', text: "Group C" },
			*          { parentId: 'd', text: "Group D" },
			*          { parentId: 'e', text: "Group E" }]
			*            //first level child
			*            var countries = [{ value: 11, parentId: 'a', text: "Algeria", sprite: "flag-dz" },
			*           { value: 12, parentId: 'a', text: "Armenia", sprite: "flag-am" },
			*           { value: 13, parentId: 'a', text: "Bangladesh", sprite: "flag-bd" },
			*           { value: 14, parentId: 'a', text: "Cuba", sprite: "flag-cu" },
			*           { value: 15, parentId: 'b', text: "Denmark", sprite: "flag-dk" },
			*           { value: 16, parentId: 'b', text: "Egypt", sprite: "flag-eg" },
			*           { value: 17, parentId: 'c', text: "Finland", sprite: "flag-fi" },
			*           { value: 18, parentId: 'c', text: "India", sprite: "flag-in" },
			*           { value: 19, parentId: 'c', text: "Malaysia", sprite: "flag-my" },
			*           { value: 20, parentId: 'd', text: "New Zealand", sprite: "flag-nz" },
			*           { value: 21, parentId: 'd', text: "Norway", sprite: "flag-no" },
			*           { value: 22, parentId: 'd', text: "Poland", sprite: "flag-pl" },
			*           { value: 23, parentId: 'e', text: "Romania", sprite: "flag-ro" },
			*           { value: 24, parentId: 'e', text: "Singapore", sprite: "flag-sg" },
			*           { value: 25, parentId: 'e', text: "Thailand", sprite: "flag-th" },
			*           { value: 26, parentId: 'e', text: "Ukraine", sprite: "flag-ua" }]
			* // To set cascadeTo API value during initialization  . 
			*            $('#groupsList').ejListBox({
			*                dataSource: groups,
			*                fields: { value: "parentId" },
			*                cascadeTo: 'countryList'
			*            });
			*            $('#countryList').ejListBox({
			*                dataSource: countries,
			*                enabled:false
			*            });
            * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
            cascadeTo: null,
			
			value: "",
			  /**		
            * Sets the root class for ListBox theme. This cssClass API helps to use custom skinning option for ListBox control. By defining the root class using this API, we need to include this root class in CSS.
            * @default "gradient-lime"
            * @type {string}
            * @example 
			* 
			*  &lt;div id="carsList"&gt;
			*    &lt;ul&gt;
			*       &lt;li&gt;Audi A4&lt;/li&gt;
			*       &lt;li&gt;Audi A5&lt;/li&gt;
			*       &lt;li&gt;Audi A6&lt;/li&gt;
			*       &lt;li&gt;Audi A7&lt;/li&gt;
			*       &lt;li&gt;Audi A8&lt;/li&gt;
			*    &lt;/ul&gt;
			*  &lt;/div&gt;<br/>
			* &lt;script&gt;
            * //Initialize the ListBox with the cssClass value specified
            * 	$("#carsList").ejListBox({ targetID: "carsList",cssClass: 'gradient-lime'});
            * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
			cssClass:"",
			     /**		
            * ListBox textbox to be displayed with rounded corner style.
            * @default true
            * @type {boolean}
            * @example 
			   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
* // Initialize the ListBox with the showRoundedCorner value specified.
   * $('#carsList').ejListBox({ showRoundedCorner: true }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            showRoundedCorner: false,
			     /**		
            * Sets the ListBox textbox direction as right to left alignment.
            * @default false
            * @type {boolean}
            * @example 
			  *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // Initialize the ListBox with the enableRTL  value specified.
   * $('#carsList').ejListBox({enableRTL : true  }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            enableRTL: false,
				     /**		
            * Sets to enable tooltip text for ListBox.
            * @default false
            * @type {boolean}
            * @example 
			  *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // Initialize the ListBox with the enableRTL  value specified.
   * $('#carsList').ejListBox({enableTooltip : true  }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
			enableTooltip: false,
			      /**		
            * When this property sets to false, it disables the ListBox control.
            * @default true
            * @type {boolean}
            * @example 
		 * 
   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // Initialize the ListBox with the enabled  value specified.
   * $('#carsList').ejListBox({enabled : false  }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            enabled: true,
			    /**		
            * Specifies the multi selection option in ListBox with the help of checkbox control. For this we have to set showCheckbox option true.
            * @default false
            * @type {boolean}
            * @example 
			   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // Initialize the ListBox with the showCheckbox value specified.
   * $('#carsList').ejListBox({showCheckbox: true }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            showCheckbox: false,
					    /**		
            * Specifies the grouping option in ListBox. 
            * @default false
            * @type {boolean}
            * @example 
			   *    &lt;ul id="select1"&gt;    &lt;/ul&gt;
		*
		* &lt;script&gt;
		*  	    var skillset = [
		*           { skill: "Bahrain", category: "B" }, { skill: "Brazil", category: "B" }, { skill: "Argentina", category: "A" },
        *        { skill: "Bangladesh", category: "B" }, { skill: "Burma", category: "B" }, { skill: "Afghanistan", category: "A" }, { skill: "Antigua and Barbuda", category: "A" },
        *        { skill: "Barbados", category: "B" }, { skill: "Botswana", category: "B" }, { skill: "Albania", category: "A" }, { skill: "Andorra", category: "A" },
        *        { skill: "Belarus", category: "B" }, { skill: "Bolivia", category: "B" }, { skill: "Algeria", category: "A" }, { skill: "Angola", category: "A" }
        *        ];
	
		* // Initialize the ListBox with the allowGrouping value specified.
		*  	  $("#select1").ejListBox({
        *        dataSource: skillset,
        *          fields: { text: "skill", category: "category" },allowGrouping:true
             });
		* &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            allowGrouping:false,
			     /**		
            * Specifies to select all the items of ListBox can be done with the help of this checkAll property, it supports only when the showCheckbox property true.
			* @remarks
			* If We would use the checkAll option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true}See {@link ejListBox#showCheckbox}
            * @default false
            * @type {boolean}
            * @example 
			  *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
// Initialize the ListBox with the checkAll value specified.
   * $('#carsList').ejListBox({showCheckbox: true, checkAll: true  }); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
            checkAll: false,
			  /**		
            * Specifies to uncheck all the items of ListBox can be done with the help of this unCheckAll property, it supports only when the showCheckbox property true.
			* @remarks
			* If We would use the uncheckAll option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true}See {@link ejListBox#showCheckbox}
            * @default false
            * @type {boolean}
            * @example 
			*    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
   * // Initialize the ListBox with the uncheckAll value specified.
   * $('#carsList').ejListBox({showCheckbox: true,  uncheckAll: true  }); 	
   * &lt;/script&gt; 

            * @memberof ejListBox
            * @instance
            */
            unCheckAll: false,
				 /**		
            * Specifies to enable Load data items onDemand for the ListBox.	
             * @default false
            * @type {boolean}
            * @example 
			*  &lt;ul id="countrylist"&gt;  &lt;/ul&gt;
			* &lt;script&gt;		
            * //To set fields API value during initialization  
            * 	$("#countrylist").ejListBox({ dataSource: window.countriesField, enableLoadOnDemand:true,  fields: { text: "name", value: "key" }});
             * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
		
				
            enableLoadOnDemand:false,
				 /**		
            * Specifies to enable virtual scrolling behavior along with Load data items onDemand for the ListBox.	
             * @default false
            * @type {boolean}
            * @example 
			*  &lt;ul id="countrylist"&gt;  &lt;/ul&gt;
			* &lt;script&gt;		
            * //To set fields API value during initialization  
            * 	$("#countrylist").ejListBox({ dataSource: window.countriesField, enableLoadOnDemand:true,enableVirtualScrolling:true,  fields: { text: "name", value: "key" }});
             * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
			enableVirtualScrolling:false,
			/**		
            * Save current model value to browser cookies for state maintains. While refresh the ListBox control page retains the model value apply from browser cookies.  
            * @default false
            * @type {boolean}
            * @example 
			  *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
* // Initialize the ListBox with the enablePersistence  value specified.
   * $('#carsList').ejListBox({enablePersistence : false}); 	
   * &lt;/script&gt;
            * @memberof ejListBox
            * @instance
            */
            enablePersistence: false,
 /**		
            * To allow multiple selection of list items
			* @remarks
			* If We would use the uncheckAll option,we will follow this:
            *  1.To enable the checkbox option as true{showCheckbox:true}See {@link ejListBox#showCheckbox}
            * @default true
            * @type {boolean}
            * @example 
		  *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // Initialize the allowMultiSelection with the value specified.
   * $('#carsList').ejListBox({allowMultiSelection: true}); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */			
            allowMultiSelection: false,
			/**		
            * To enable the drag and drop nodes. 
			* @remarks
	
            * @default true
            * @type {boolean}
            * @example 
		   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * // Initialize the with the allowDragAndDrop value specified.
   * $('#carsList').ejListBox({allowDragAndDrop: true}); 	
   * &lt;/script&gt; 
            * @memberof ejListBox
            * @instance
            */
				
            allowDragAndDrop: false,
			   /**     
           * Fires when create successfully.
           * @event
           * @name ejListBox#create 	
           * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
           * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event
           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //create event for ListBox
   * $('#carsList').ejListBox({	create: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            create: null,  
			   /**     
           * Fires when selected list item Index Changed successfully.
           * @event
           * @name ejListBox#selectIndexChanged 	
           * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event
           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //selectIndexChanged event for ListBox
   * $('#carsList').ejListBox({	selectIndexChanged: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            selectIndexChanged: null,
			   /**     
           * Fires when list item gets selected successfully.
           * @event
           * @name ejListBox#selected 	
		   * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event

           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //selected event for ListBox
   * $('#carsList').ejListBox({	selected: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            selected: null,
			   /**     
           * Fires when  list item started to drag successfully.
           * @event
           * @name ejListBox#itemDragStart 	
		   * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event

           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //itemDragStart event for ListBox
   * $('#carsList').ejListBox({	itemDragStart: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            itemDragStart: null,
			 /**     
           * Fires when  list item is being dragged successfully.
           * @event
           * @name ejListBox#itemDrag 	
		   * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event

           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //itemDrag event for ListBox
   * $('#carsList').ejListBox({	itemDrag: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            itemDrag: null,
			 /**     
           * Fires when  list item stopped dragging successfully.
           * @event
           * @name ejListBox#itemDragStop 	
		   * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event

           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //itemDragStop event for ListBox
   * $('#carsList').ejListBox({	itemDragStop: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            itemDragStop: null,
			 /**     
           * Fires when  list item stopped dropping successfully.
           * @event
           * @name ejListBox#itemDropped 
		   * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event		   

           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //itemDropped event for ListBox
   * $('#carsList').ejListBox({	itemDropped: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            itemDropped:null,
			/**     
           * Fires when check state of an list item changed successfully.
           * @event
           * @name ejListBox#checkChange 
		   * @param {object}  argument.model returns the ListBox model
           * @param {string}  argument.type returns the name of the event		   

           * @example 
		    *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //checkChange event for ListBox
   * $('#carsList').ejListBox({	showCheckbox:true,checkChange: function(args) {}}); 	
   * &lt;/script&gt; 	   
           * @memberof ejListBox
           * @instance
           */
            checkChange: null,
			/**     
          * Fires when destroy successfully.
          * @event
          * @name ejListBox#destroy 	

          * @example 
		   *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
   *
   * &lt;script&gt;
 * //create event for ListBox
   * $('#carsList').ejListBox({	destroy: function(args) {}}); 	
   * &lt;/script&gt; 	  
          * @memberof ejListBox
          * @instance
          */
            destroy: null
        },
        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            cssClass: "string",
            itemsCount: "number",
            allowDragAndDrop: "boolean",
            height: "string",
            width: "string",
            template: "string",
            selectedItemIndex: "number",
            cascadeTo: "string",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
			enableTooltip:"boolean",
            enablePersistence: "boolean",
            enabled: "boolean",
            allowMultiSelection: "boolean",
            dataSource: "data",
            selectedItems: "data",
            checkedItems: "data",
            checkedItemlist: "data",
            selectedItemlist: "data"
        },

        observables: ["value"],
        value: ej.util.valueFunction("value"),
       
        //public methods
		
		  /**
      * To enable the ListBox  
      * @return jQuery
      * @example 
         *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
      * // Create ListBox
	   * $('#carsList').ejListBox(); 	
      * var ListBoxObj  = $("#carsList").data("ejListBox");
      * ListBoxObj.enable(); // enable the ListBox
      * &lt;/script&gt;
      * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
      * // Create ListBox
	  * $('#carsList').ejListBox();
      * $('#carsList').ejListBox("enable"); 	
      * &lt;/script&gt;
      *@memberof ejListBox
      * @instance
      */
        enable: function () {
            if (this.listContainer.hasClass("e-disable")) {
                this.target.disabled = false;
                this.model.enabled = true;
                this.listContainer.removeClass('e-disable');
                if (this.model.allowMultiSelection) this.listContainer.removeClass("e-disable");
				 this.scrollerObj.enable();
            }
        },
          /**
      * To disable the ListBox  
      * @return jQuery
      * @example 
         *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
      * // Create ListBox
	   * $('#carsList').ejListBox(); 	
      * var ListBoxObj  = $("#carsList").data("ejListBox");
      * ListBoxObj.disable(); // disable the ListBox
      * &lt;/script&gt;
      * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
      * // Create ListBox
	  * $('#carsList').ejListBox();
      * $('#carsList').ejListBox("disable"); 	
      * &lt;/script&gt;
      *@memberof ejListBox
      * @instance
      */
        disable: function () {
            if (!this.listContainer.hasClass("e-disable")) {
                this.target.disabled = true;
                this.model.enabled = false;
                this.listContainer.addClass('e-disable');
                if (this.model.allowMultiSelection) this.listContainer.addClass("e-disable");
				this.scrollerObj.disable();
            }
        },
   
        /**
     * To select an Item using its index in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.selectItemByIndex(2); //selects the item in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("selectItemByIndex" ,"2"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        selectItemByIndex: function (index) {
		index=parseInt(index);
            if (!this.model.enabled) return false;
            if (index != null) {
                this._activeItem = index;
                if (this._activeItem <= 0) {
                    this._activeItem = 0;
                }
                else if (this._activeItem == this._listSize - 1) {
                    this._activeItem = this._listSize - 1;
                }
                    var activeitem = $(this.element.children("li")[this._activeItem]);
                    if (this._activeItem != this._aselectedItem) {
                        this.element.children("li").removeClass('e-hover');
                        activeitem.addClass('e-select');
                } 
            }
        },
		   /**
     * To select all the list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.selectAll(); // selects all the list items in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("selectAll"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		selectAll: function(){
		this.element.children("li").addClass("e-hover");
		this.element.children("li").addClass("e-select");
		},
			   /**
     * To unselect all the list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.unSelectAll(); // unselect all the items in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("unSelectAll"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		unSelectAll: function(){
		this._removeListHover();
		},
			   /**
     * To select a list items through index in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.selectItemsByIndex(2,3); // selects the specified items the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("selectItemsByIndex","2,3"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
	    selectItemsByIndex: function (value) {
            if (!this.model.enabled) return false;
			var selectitems = value.split(',');
			for(var i=0;i<selectitems.length; i++){
            if (selectitems[i] != null) {
				 var index=parseInt(selectitems[i]);
                this._activeItem = index;
                if (this._activeItem < 0) {
                    this._activeItem = 0;
                }
                else if (this._activeItem == this._listSize - 1) {
                    this._activeItem = this._listSize - 1;
                }
                    var activeitem = $(this.element.children("li")[this._activeItem]);
                    if (this._activeItem != this._aselectedItem) {
                        this.element.children("li").removeClass('e-hover');
                        activeitem.addClass('e-select');
                } 
            }
			}
        },
			   /**
     * To unselect set of list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.unselectItemsByIndex(2,3); // unselectItems specified the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("unselectItemsByIndex","2,3"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		unselectItemsByIndex: function (value) {
            if (!this.model.enabled) return false;
			var selectitems = value.split(',');
			for(var i=0;i<selectitems.length; i++){
            if (selectitems[i] != null) {
			 var index=parseInt(selectitems[i]);
				var activeitem = $(this.element.children("li")[index]);
                this._activeItem = index;
				activeitem.removeClass('e-active');
				activeitem.removeClass('e-select');
            }
			}
        },
			   /**
     * To unselect a list item in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.unselectItemByIndex(2); // unselects the list item specified in the index  in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("unselectItemByIndex","2"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        unselectItemByIndex: function (index) {
		index=parseInt(index);
            if (!this.model.enabled) return false;
			var unselectitem = $(this.element.children("li")[index]);
            if(unselectitem.hasClass('e-select')){
				unselectitem.removeClass('e-active');
				unselectitem.removeClass('e-select');
            }
        },
		   /**
     * To get the selected list item in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.getSelectedItem(); // gets the selected item from the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("getSelectedItem"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        getSelectedItem: function () {
            return this.model._aselectedItem;
        },
			   /**
     * To get the list of selected list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.getSelectedItems(); // gets the list of selected list items from the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("getSelectedItems"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        getSelectedItems: function () {
            return this.model.selectedItems;
        },
			   /**
     * To get the list of checked list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.getCheckedItems(); // get the list of checked items the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("getCheckedItems"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        getCheckedItems: function () {
            return this.model.checkedItems;
        },
				   /**
     * To remove an list item in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.removeItem(); // removes the selected item from the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("removeItem"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		 removeItem: function () {
		 if(this.model.enabled){
			this._getItem(this._selectedItemindex()).remove();
            this._refreshItems();
			}
        },
				   /**
     * To disable an list item in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.disableItem(); // disable selected item in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("disableItem"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        disableItem: function () {
            this._getItem(this._selectedItemindex()).addClass("e-disable");
        },
		   /**
     * To move the selected list item one step Up in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.moveUp(); // moves up selected item in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("moveUp"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        moveUp: function () {
            var PreviousItem = this._getItem(this._selectedItemindex()).prev();
            var selectedItem = this._getItem(this._selectedItemindex());
            var previndex = this._selectedItemindex()-1;
            var selectedindex = this._selectedItemindex();
			this._addListHover();
            PreviousItem.insertAfter(selectedItem);
			//this._refreshContainer();
			this._trigger('indexchange', {  data: this.model });
        },
		/**
     * To move the selected list item one step Down in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.moveDown(); //moves down the selected item in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("moveDown"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        moveDown: function () {
            var nextItem = this._getItem(this._selectedItemindex()).next();
            var selectedItem = this._getItem(this._selectedItemindex());
            var nextindex = this._selectedItemindex() + 1;
            var selectedindex = this._selectedItemindex();
			this._addListHover();
            nextItem.insertBefore(selectedItem);
           // this._refreshContainer();
			this._trigger('indexchange', {  data: this.model });
        },
		/**
     * To check all the list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox({showCheckbox:true}); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.checkAll(); // checks all the list items in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox({showCheckbox:true}); 	
     * $('#carsList').ejListBox("checkAll"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		checkAll: function () {
            if (!this.model.enabled) return false;
            for (i = 0; i < this.listitems.length; i++) {
			 if (!($(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked'))) {
                    $(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                    this.model.checkedItems.push(this.listitems[i]);
				   }
                }
        },
		/**
     * To check items in the checkitemslist in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox({showCheckbox:true}); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.checkitems(); // checks all the list items in the checkedItemlist
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox({showCheckbox:true}); 	
     * $('#carsList').ejListBox("checkitems"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		checkitems: function () {
		    if (!this.model.enabled) return false;
		    if (this.model.showCheckbox) {
		         for (i = 0; i < this.model.checkedItemlist.length; i++) {
			var item =this.model.checkedItemlist[i];
			 if (!($(this.listitems[item].firstChild).find('.listcheckbox').ejCheckBox('isChecked'))) {
                    $(this.listitems[item].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                    this.model.checkedItems.push(this.listitems[item]);
				   }
                }
		    }
		    else {
		        if(this.model.allowMultiSelection){
		        for (i = 0; i < this.model.selectedItemlist.length; i++) {
		            var item = this.model.selectedItemlist[i];
		            if (!($(this.listitem[item]).hasClass("e-select"))) {
		                $(this.listitem[item]).addClass("e-select")
		                this.model.selectedItems.push($(this.listitem[item]));
		            }
		            else {
		                $(this.listitem[item]).removeClass("e-select")
		                this.model.selectedItems.pop($(this.listitem[item]));
		            }
		        }
		    }
		        else {
		            this.unSelectAll();
		            if (!($(this.listitem[this.model.selectedItemIndex]).hasClass("e-select")))
		            $(this.listitem[this.model.selectedItemIndex]).addClass("e-select");
		            this.model.selectedItems.push($(this.listitem[this.model.selectedItemIndex]));
		         }
		    }
		    //this._refreshContainer();
        },
	/**
     * To uncheck all the list items in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox({showCheckbox:true}); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.unCheckAll(); // Unchecks all the list items in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox({showCheckbox:true}); 	
     * $('#carsList').ejListBox("unCheckAll"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
        unCheckAll: function () {
            if (!this.model.enabled) return false;
            for (i = 0; i < this.listitems.length; i++) {
                if ($(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                    $(this.listitems[i].firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                }
                this.model.checkedItems.pop(this.listitems[i]);
            }
        },
		   /**
     * To add an list item in the ListBox  
     * @return jQuery
     * @example 
           *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
	   * $('#carsList').ejListBox(); 	
     * var ListBoxObj  = $("#carsList").data("ejListBox");
     * ListBoxObj.addItem("Java"); // add an new item in the ListBox
     * &lt;/script&gt;
     * @example 
       *    &lt;ul id="carsList"&gt;
   *       &lt;li&gt;Audi A4&lt;/li&gt;
   *       &lt;li&gt;Audi A5&lt;/li&gt;
   *       &lt;li&gt;Audi A6&lt;/li&gt;
   *       &lt;li&gt;Audi A7&lt;/li&gt;
   *       &lt;li&gt;Audi A8&lt;/li&gt;
   *	   &lt;li&gt;BMW 501&lt;/li&gt;
   *       &lt;li&gt;BMW 502&lt;/li&gt;
   *       &lt;li&gt;BMW 503&lt;/li&gt;
   *       &lt;li&gt;BMW 507&lt;/li&gt;
   *       &lt;li&gt;BMW 3200&lt;/li&gt;
   *    &lt;/ul&gt;
			* &lt;script&gt;
     * // Create ListBox
   * $('#carsList').ejListBox(); 	
     * $('#carsList').ejListBox("addItem","Java"); 	
     * &lt;/script&gt;
     *@memberof ejListBox
     * @instance
     */
		addItem:function(val){
		if(this.model.enabled){
            this.listitem=  this.listContainer.find('ul').append('<li role="option">'+val+'</li>');
            this._refreshItems();
			}
        },
        _checkContains: function (Value) {
            var chkValue = Value;
            var values = this.element[0].value.split(",");
            this.contains = false;
            for (var i = 0; i < values.length; i++) {
                if (values[i] == chkValue)
                    this.contains = true;
            }
            return this.contains;
        },
        _init: function () {
            	this._id=this.element[0].id;
                this._initialize();
                this._render();
                this._enabled(this.model.enabled);
                this._wireEvents();
                this._initValue = false;
        },
       
        _changeSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.listContainer.removeClass(this.model.cssClass).addClass(skin);
            }
        },

        _setRTL: function (boolean) {
            this.listContainer.addClass("e-rtl");
        },
     	_setText: function (text) {
		var len=this.listitems.length;
		for(i=0;i<len;i++){
		if($(this.element.children("li")[i]).text() == text){
		this.unSelectAll();
		this.selectItemByIndex(i);
		}
		}
        },
        /**
       * To configure the properties at runtime using SetModel		
       * @private
       */
        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {

                    case "dataSource": this._checkModelDataBinding(options[option]); break;
                    case "query": this._queryCheck(options[option]); break;
                    case "fields": this.model.fields = options[option]; this._checkModelDataBinding(this.model.dataSource); break;
                    case "template": this.model.template = options[option]; this._checkModelDataBinding(this.model.dataSource); break;
                    case "value": this._setText(ej.util.getVal(options[option])); break;
                    case "enableRTL": this._setRTL(options[option]); break;
                    case "enabled": this._enabled(options[option]); break;
                    case "height": this.model.Height = options[option]; this._setListHeight(options[option]); break;
                    case "width": this.model.Width = options[option]; this._setListWidth(); break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showCheckbox": this.checkboxHideShow(options[option]); break;
                    case "checkAll": this._setCheckAll(options[option]); break;
                    case "uncheckAll": this._setUncheckAll(options[option]); break;
                    case "showRoundedCorner": this._roundedCorner(options[option]); this.model.showRoundedCorner = options[option]; break;
                    case "selectedItemIndex": this.selectItemByIndex(options[option]); break;
                    case "selectedItems": this._selectCheckedItem(options[option]); this.model.selectedItems = options[option]; break;
                    case "checkedItems": this._selectCheckedItem(options[option]); this.model.checkedItems = options[option]; break;
                    case "checkedItemlist": this.model.checkedItemlist = options[option]; break;
                    case "selectedItemlist": this.model.selectedItemlist = options[option]; break;
                    case "allowMultiSelection": this.model.allowMultiSelection = options[option];
                        options[option] ? this._renderBoxModel() : this._destroyBoxModel();
                        break;
                    case "allowDragAndDrop":
                        {
                            if (options[key])
                                this._enableDargDrop();
                            break;
                        }
		
                }
            }
        },
        
        _destroy: function () {
            this.element[0].value = "";
			var predecessor =$(this.element.parents()[2]);
             this.element.removeClass("e-listbox e-js e-ul");
            if (this.model.dataSource != null){
			
			this.element.children().remove();
			predecessor.append(this.element.parents().first().html());
                this.listContainer.remove();
				}
            else {
			predecessor.append(this.element.parents().first().html());
                this.listContainer.remove();
            }
			$(window).unbind("resize", $.proxy(this._OnWindowResize, this));
        },
        /* cookie */

        _finalize: function () {
            if (this.model.selectedItemIndex != null) {
                this.selectItemByIndex(this.model.selectedItemIndex);
            } else if ((this.model.showCheckbox == true) && (this.model.selectedItems.length > 0)) {
                this._selectCheckedItem(this.model.selectedItems);
            }
        },

        /**/
        _initialize: function () {
            this.target = this.element[0];
            this._queryString = null;
            this._itemId = null;
            this.checkedStatus = false;
            this._incqueryString = "";
            this._activeItem = null;
            this._initValue = true;
        },
      


        _render: function () {
            this._renderContainer();
            this._initDataSource(this.model.dataSource);
            this._showFullList();
            this._addDragableClass();
            this._finalize();
        },

        _queryCheck: function (value) {
            this.model.query = value;
            this._checkModelDataBinding(this.model.dataSource);
        },

        _checkModelDataBinding: function (source) {
            this.model.dataSource = source;
            if (source != null) {
                if (ej.DataManager && source instanceof ej.DataManager) {
                    this._initDataSource(source);
                } else {
                    this._showFullList();
                }
            }
            else {
                this.element.empty();
            }
        },
        _initDataSource: function (source) {
            var proxy = this;
            if (ej.DataManager && source instanceof ej.DataManager) {
			query = this.model.query.take(11);
                proxy.listitems = proxy.model.dataSource;
                proxy._addLoadingClass();
                var queryPromise = source.executeQuery(query);
                queryPromise.done(function (e) {
                    proxy.listitems = e.result;
                    proxy._removeLoadingClass();
                    proxy._showFullList();

                }).fail(function (e) {
                    proxy.model.dataSource = null;
                    proxy._addLoadingClass();
                });
            }
        },


     
        _getQuery: function () {
            if (ej.isNullOrUndefined(this.model.query)) {
                var column = [], queryManager = ej.Query(), mapper = this.model.fields;
                for (var col in mapper) {
                    if (col !== "tableName")
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else queryManager = this.model.query;
            return queryManager;
        },
        _addDragableClass: function () {
            if (this.model.allowDragAndDrop) {
			this.element.css("cursor","pointer");
			this.listContainer.addClass("e-droppable");
			this.listBoxScroller.addClass("e-droppable");
                this.element.children("li").each(function (index) {
                    ($(this).addClass("e-draggable e-droppable"));
                });
            }
        },
     
        _enableDargDrop: function () {
            if (this.model.allowDragAndDrop) {
                this._drag();
            }
        },
        _addLoadingClass: function () {
            this.listContainer.addClass("e-load");
            //this.drpbtnspan.removeClass("e-icon e-down-arrow");
            //this.model.readOnly = true;
        },

        _removeLoadingClass: function () {
            this.listContainer.removeClass("e-load");
        },

        _checkNameAttr: function () {
			if (this.element.attr("name"))
                this._hiddenInput.attr("name", this.element.attr("name"));
            else {
                this._hiddenInput.attr("name", this._id);
				this.element.attr("name", this._id);
			}
        },
     
        //render listBox pannel wrapper
        _renderContainer: function () {
            //render listBox 
			 this.listContainer = ej.buildTag("div.e-ddl-popup e-box e-popup e-widget " + this.model.cssClass + "#" + this._id + "_container", "", { "visibility": "hidden" }, { "tabIndex": 0 });
            this.listBoxScroller = ej.buildTag("div"); this.ultag = ej.buildTag("ul.e-ul", "", {}, { "role": "listbox" });
			this.element= this.element.addClass("e-ul");
			this.listContainer.append(this.listBoxScroller);
			this.listContainer.insertAfter(this.element);
			this.listBoxScroller.append(this.element);
			 this.element.attr('unselectable', 'on')
             this.element.css('user-select', 'none')
             this.element.on('selectstart', false);
        },
        //render listContainer
        _renderlistContainer: function () {
		this.hold=false;
		this.item="";
		this.touchhold=false;
		this.startime=0;
            var list = this.listitems, i, ulempty, ulno, litag, _id, _txt, mapper = this.model.fields, predecessor;
			this.lastScrollTop = 0;
            this.dummyUl = $();
            if (this.model.enableRTL)
                this.listContainer.addClass("e-rtl");
            if (this.model.dataSource == null || this.model.dataSource.length < 1) {
                predecessor = this.element.parents().last();
				 if (this.model.targetID)
				   this.docbdy = predecessor.find("#" + this.model.targetID);
                else
				this.docbdy = predecessor.find("#" + this._id);
				this.itemsContainer = this.docbdy;
                this.itemsContainer.children("ol,ul").remove();
                this.items = this.itemsContainer.children('li');
                this.items.children("img").addClass("e-align");
                this.items.children("div").addClass("e-align");
                //this.itemsContainer.children("span").addClass("e-ghead");
                //This will append the list with the listContainerwrapper
                this.element.append(this.itemsContainer.children());
            }
            else if (this.model.dataSource != null && typeof list[0] != "object") {
                //if (list.length > 0) {
                
               // }
            }
            else {
                this.mapFld = { _id: null, _imageUrl: null, _imageAttributes: null,_toolTipText:null, _spriteCSS: null, _text: null, _value: null, _htmlAttributes: null, _selected: null };
                this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
                this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
				this.mapFld._toolTipText = (mapper && mapper.toolTipText) ? mapper["toolTipText"] : "toolTipText";
                this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
                this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
                this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
                this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
                this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
                this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
                var mapCateg = (mapper && mapper.category) ? mapper["category"] : "category", groupedList, _query;
                _query = ej.Query();
                 if (this.model.enableLoadOnDemand) {
				if(!this.model.enableVirtualScrolling){
					_query = ej.Query().take(11); 
                	this.realUllength=0;
				   	query = this.model.query.take(11);
					var proxy=this;
					if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
					proxy.listitems = proxy.model.dataSource;
					var queryPromise = this.model.dataSource.executeQuery(query);
					queryPromise.done(function (e) {
                    proxy.listitems = e.result;
                });
				}
				 for (i = 0; i < this.model.itemsCount; i++) {
                        litag = ej.buildTag("li", list[i]);
						litag.css("height", "20px");
                        this.dummyUl.push(litag[0]);
                    }
                    this.displayeditem = 2;
					 this.element.append(this.dummyUl);
					   for (var i = 0; i < this.listitems.length; i++) {
                        var litag = ej.buildTag('li');
                        litag.css("height", "20px");
                        this.dummyUl.push(litag[0]);
                    }
                    this.element.append(this.dummyUl);
					}
					this.realUllength=0;
                    _query = _query.range(0, 11);
                    this.displayeditem = 2;
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._loadlist(groupedList);
                }
				else if(this.model.enableVirtualScrolling){
				this.realUllength=0;
                    _query = _query.range(0, 11);
                    this.displayeditem = 2;
                    groupedList = ej.DataManager(list).executeLocal(_query);
                    this._loadlist(groupedList);
					}
                else {
                groupedList = ej.DataManager(list).executeLocal(_query);
                  if (groupedList.length > 0) {
                    if (this.model.template != null) {  //Template binding
                        for (i = 0; i < list.length; i++) {
                           litag = ej.buildTag("li", list[i]);
                           if (this.model.template) litag.append(this._getTemplatedString(list[i]));
                           this.dummyUl.push(litag[0]);
                       }
                       this.element.append(this.dummyUl);
                    } else {
                        _query = ej.Query().group(mapCateg); // Grouping with Category
                        groupedList = ej.DataManager(list).executeLocal(_query);
                        if (this.model.allowGrouping) {
                            for (i = 0; i < groupedList.length; i++) {
                                var spantag = ej.buildTag('span');
                                spantag.append(groupedList[i].key);
                                spantag.addClass("e-ghead");
                                this.dummyUl.push(spantag[0]);
                                this._loadlist(groupedList[i].items);
                            }
                        }
                        else {
						this.realUllength =0;
                            this._loadlist(groupedList[0].items);
							}
						} 
				  }
				}

            }
	
			
            this.element.children('li').attr({ "role": "option" }).css("list-style","none");
            this._setListWidth();
            this._setListHeight();
            this._setListPosition();
            this.listContainer.css("height", ""); this.listBoxScroller.css({ "height": "", "width": "" });
            this.listContainer.ejScroller({ height: this.listContainer.height(), width: 0, scrollerSize: 20 });
            this.scrollerObj = this.listContainer.ejScroller("instance");
			this._setListHeight();
            this.listContainer.css({ 'display': 'none', 'visibility': 'visible' });
            this.checkboxHideShow(this.model.showCheckbox);
            this._setCheckAll(this.model.checkAll);
            this._setUncheckAll(this.model.uncheckAll);
			this.checkitems();
            this._showResult();
        },
        _loadlist: function (sublist) {
		if(this.element !=null){
                for (var j = 0; j < sublist.length; j++) {
                    var _did = this._getField(sublist[j], this.mapFld._id);
                    var _dimageUrl = this._getField(sublist[j], this.mapFld._imageUrl);
                    var _dimageAttributes = this._getField(sublist[j], this.mapFld._imageAttributes);
                    var _dspriteCss = this._getField(sublist[j], this.mapFld._spriteCSS);
                    var _dtext = this._getField(sublist[j], this.mapFld._text);
                    var _dvalue = this._getField(sublist[j], this.mapFld._value);
                    var _dhtmlAttributes = this._getField(sublist[j], this.mapFld._htmlAttributes);
                    var _dselected = this._getField(sublist[j], this.mapFld._selected);
					var _dtoolTipText = this._getField(sublist[j], this.mapFld._toolTipText);
					var k =this.realUllength;                   
					 if ((_dvalue) && (_dvalue != ""))
                        litag = ej.buildTag('li', "", {}, { value: _dvalue });
                    else
                        litag = ej.buildTag('li');
                    if (_did)
                        litag.attr('id', _did);
                    if ((_dimageUrl) && (_dimageUrl != "")) {
                        //Creating the image tag
                        imgtag = ej.buildTag('img.e-align', '', {}, { 'src': _dimageUrl, 'alt': _dtext });
                        if ((_dimageAttributes) && (_dimageAttributes != ""))
                            imgtag.attr(_dimageAttributes);
                        litag.append(imgtag);
                    }
                    if ((_dspriteCss) && (_dspriteCss != "")) {
                        //Creating the Sprite image tag
                        divtag = ej.buildTag('div.e-align ' + _dspriteCss + ' sprite-image');
                        litag.append(divtag);
                    }
                    if ((_dtext) && (_dtext != "")) {
                        //Creating text Content inside the  tag
                        litag.append(_dtext);
                    }
                    if ((_dhtmlAttributes) && (_dhtmlAttributes != ""))
                        litag.attr(_dhtmlAttributes);
					if ((_dtoolTipText) && (_dtoolTipText != "")  && this.model.enableTooltip)
                        litag.attr('title',_dtoolTipText);
                    if (_dselected) {
                        litag.addClass("chkselect");
                    }
					if(this.element.children()[k] !=null && this.model.enableLoadOnDemand && $(this.element.children()[k]).text()== "" ){
					$(this.element.children()[k]).replaceWith(litag[0]);
					}
					else
					this.dummyUl.push(litag[0]);
					this.realUllength +=1;
                }
		   if(!this.model.enableLoadOnDemand)
				 this.element.children().remove();
           if(this.element.children()[k] ==null && (!this.model.enableLoadOnDemand ||this.model.enableVirtualScrolling))
           this.element.append(this.dummyUl);
            }  
        },
        //get object
        _getField: function (obj, fieldName) {
            return ej.pvt.getObject(fieldName, obj);
        },
        //template
        _getTemplatedString: function (list) {
            var str = this.model.template, start = str.indexOf("${"), end = str.indexOf("}");
            while (start != -1 && end != -1) {
                var content = str.substring(start, end + 1);
                var field = content.replace("${", "").replace("}", "");
                str = str.replace(content, this._getField(list, field));
                start = str.indexOf("${"), end = str.indexOf("}");
            }
            return str;
        },
   
        //checkbox properties
        checkboxHideShow: function (value) {
            if (value) {
                this._createCheckbox();
            } else {
                this._removeCheckbox();
            }
            this.model.showCheckbox = value;
        },
        _createCheckbox: function () {
            var i, _extchk, chklist, me = this;
            this.listitems = this.listContainer.find("ol,ul").children("li");
            chklist = this.listitems.find('input[type=checkbox]');
            if (chklist.length == 0) {
                for (i = 0; i < this.listitems.length; i++) {
                    $checkbox = ej.buildTag("input.listcheckbox e-align#popuplist" + i + "_" + this._id, "", {}, { type: "checkbox", name: "list" + i });
                    $(this.listitems[i]).prepend($checkbox);
                }
                this.listContainer.find(".listcheckbox").ejCheckBox({ cssClass: this.model.cssClass, change: $.proxy(this._OnClickCheckList, this) });
                for (i = 0; i < this.listitems.length; i++) {
                    if ($(this.listitems[i]).hasClass('chkselect')) {
                        $(this.listitems[i]).find(".listcheckbox").ejCheckBox({ "checked": true });
                        this._activeItem = i;
                        this.checkedStatus = true;
                        if (!this._initValue)
                            this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });
                           $(this.listitems[i]).removeClass('chkselect');
                    }
                }
            }
        },

        _removeCheckbox: function () {
            var i, checkbox;
            this.listitem = this.listContainer.find("ol,ul").children("li");
            checkbox = this.listitem.find('.listcheckbox');
            if (checkbox.length > 0) {
                this.listitem.find('.listcheckbox').ejCheckBox('destroy');
                this.listitem.find('input[type=checkbox]').remove();
				this.model.checkedItems =[];
            }
        },
        _setCheckAll: function (value) {
            //Check all the nodes on CheckAll = true
            if ((this.model.showCheckbox) && (value))
                this.checkAll();
        },
        _setUncheckAll: function (value) {
            //UnCheck all the nodes on UnCheckAll = true
            if ((this.model.showCheckbox) && (value))
                this.unCheckAll();
        },
 
        _selectCheckedItem: function (chkitems) {
            if (chkitems.length > 0) {
                for (i = 0; i < chkitems.length; i++) {
              this.model.selectedItems.push(chkitems[i]);
                }
            }
        },
        
     
        //List Properties
        _refreshScroller: function () {
		if(this.model.enableVirtualScrolling){
		  this.listContainer.find(".e-content, .e-vhandle").removeAttr("style");
            this.listContainer.find(".e-vhandle div").removeAttr("style");
            this.listContainer.css({ "display": "block" });  // For get the height of the popup
            this.scrollerObj.model.height = this.listContainer.height();
            this.scrollerObj.refresh();
            this.scrollerObj.option("scrollTop", 0);
		}
		else{
            this.listContainer.find(".e-vhandle div").removeAttr("style");
			var listboxcontent = this.listBoxScroller.height();
            this.listContainer.css({ "display": "block" });
				// For get the height of the listBox
            this.scrollerObj.model.height = this.listContainer.height();
            this.scrollerObj.refresh();
			this.listBoxScroller.css("height","");	
		 this.listBoxScroller.css("height","100%");		
		 //this.element.css("height","");	
		 
			}
        },
         _setListWidth: function () {
            var width = this.model.width;
            this.listContainer.css({ "width": width });
        },

        _setListHeight: function () {
		 var height = this.model.height;
		 this.listContainer.css({ "height": height });
        },
        _refreshContainer: function () {           
            this.listContainer.css({ "width": this.model.width });
            this._setListPosition();
			this._setListHeight();
			this._roundedCorner();
            this._refreshScroller();
        },
        _setListPosition: function () {
            this.listContainer.css({
                "position":"relative"
            });
        },

        //dragEventHandler()
        _drag: function () {
            var proxy = this;
            var pre = false;
            var _clonedElement = null;
            var dragContainment = null;
            this._listitem = this.element.parent();
            $(this._listitem).find("li").not(".e-js").ejDraggable({
                dragArea: dragContainment,
                clone: true,
                dragStart: function (args) {
				var targetid = this.element.parent()[0].id; // to get id of the dragged control
            var draggedobj = $("#" + targetid).data("ejListBox");
			draggedobj ._refreshItems();
                    var data = { target: args.target, event: args.event };
                    if (proxy._onDragStarts(data)) {
                        args.cancel = true;
                        _clonedElement && _clonedElement.remove();
                        return false;
                    }
                },
                drag: function (args) {
                    var target = args.target;
                    var data = { target: target, event: args.event };
                    if (proxy._onDrag(data))
                        return false;
                    if ($(target).hasClass('e-droppable') || $(target).parent().hasClass('e-droppable')) {
                        document.body.style.cursor = '';
                        $(target).addClass("allowDrop");
                    }
                },
                dragStop: function (args) {
                    if (!args.element.dropped) {
                        _clonedElement && _clonedElement.remove();
                        document.body.style.cursor = '';
                    }
                    var target = args.target;
                    var targetObj = proxy;
                    var position = pre ? "Before" : "After";
                    var data = { target: target, position: position, event: args.event };
                    if (proxy._onDragStop(data))
                        return false;
                    $(args.element).removeClass("e-active");
                 
                        if (target.nodeName == 'UL')
                            target = $(target).children()[0];
                        if (target.nodeName != 'LI')
                            target = $(target).parent('.e-droppable')[0] || $(target).parent();
                        if (target.nodeName == 'LI' && $(target).hasClass('e-droppable')) 
                               proxy._dropItem(target, args.element, pre, args.event);
						else if ($(target).hasClass('e-droppable')) 
                               proxy._dropItemContainer(target, args.element, pre, args.event);
           
                    $(".allowDrop").removeClass("allowDrop");
                    var data = { target: target, event: args.event, dropedElement: args.element };
                    if (proxy._onDropped(data))
                        return false;
                    document.body.style.cursor = '';
				
                },
                helper: function (event, ui) {
                    _clonedElement = $(event.sender.target).clone().addClass("dragClone dragClonelist");
                    return _clonedElement.appendTo($("body"));
                }
            });
        },

        //Drop list Item
        _dropItem: function (target, element, pre, event) {
            var li = $(element);
            pre ? $(li).insertBefore(target) : $(li).insertAfter(target);
            this._refreshItems();
            var targetid = $(target).parents('div')[1].id.replace('_container', ''); // to get id of the dropped control
            var droppedobj = $("#" + targetid).data("ejListBox");
			droppedobj._refreshItems();
        },
		
		_dropItemContainer: function (target, element, pre, event) { // when dropped into listcontainer
            var li = $(element);
			$(li).insertAfter($($(target).find('li')).last());
			$(target).find('ul').append($(li))
            this._refreshItems();
            var targetid = $(target)[0].id.replace('_container', ''); // to get id of the dropped control
            var droppedobj = $("#" + targetid).data("ejListBox");
			droppedobj._refreshItems();
        },
        //listContainerstatus
        _showResult: function () {
            var proxy = this;
            this._refreshContainer();
            this.element.attr({ "aria-expanded": true }); var _ListItemsContainer = this.element.children("li");
            this._listSize = _ListItemsContainer.size();
			_ListItemsContainer.unbind("contextmenu", $.proxy(this._OnMouseContext, this));
			_ListItemsContainer.unbind("mouseup", $.proxy(this._OnMouseClick, this));
			_ListItemsContainer.unbind("touchstart mouseenter", $.proxy(this._OnMouseEnter, this));
            _ListItemsContainer.unbind("touchend mouseleave", $.proxy(this._OnMouseLeave, this));
			 $(window).unbind("resize", $.proxy(this._OnWindowResize, this));
				this._off($(this.listContainer), "DOMMouseScroll", this._onScroll);
				this._on($(this.listContainer), "DOMMouseScroll", this._onScroll);
			_ListItemsContainer.bind("touchstart mouseenter", $.proxy(this._OnMouseEnter, this));
			_ListItemsContainer.bind("touchend mouseleave", $.proxy(this._OnMouseLeave, this));
			_ListItemsContainer.bind("mouseup", $.proxy(this._OnMouseClick, this));
		    _ListItemsContainer.bind("contextmenu", $.proxy(this._OnMouseContext, this));
          
			 $(window).bind("resize", $.proxy(this._OnWindowResize, this));
			 	 
        },

        _OnWindowResize: function (e) {
            this._refreshContainer();
            this.listContainer.css("display", "block");
        },
        _removeActive: function () {
            this._ulBox.children("li").removeClass("e-active");
        },
      
        _removeListHover: function () {
		this.model.selectedItems =[];
            this.element.children("li").removeClass("e-hover");
			 this.element.children("li").removeClass("e-select");
        },

        _addListHover: function () {
            var activeItem = this._getItem(this._selectedItem);
            activeItem.addClass("e-select");
			activeItem.addClass("e-hover");
            this.scrollerObj.setModel({ "scrollTop": this._calcScrollTop() });
            activeItem.focus();
			this._OnListSelect(this.prevselectedItem, this._selectedItem);
        },
 
        _calcScrollTop: function () {
            var ulH = this.element.outerHeight(), li = this.element.find("li"), liH = 0, index, top, i;
            index = this.element.find("li.e-select").index();
			if(this.model.enableVirtualScrolling)
			index =  this.displayeditem;
            for (i = 0; i < index; i++) { liH += li.eq(i).outerHeight(); }
            top = liH - ((this.listContainer.outerHeight() - li.eq(index).outerHeight()) / 2);
            return top;
        },
     
        _refreshItems: function () {
            this.listBoxScroller.append(this.element);
            this.listContainer.append(this.listBoxScroller);
            this._refreshContainer();
            this._showResult();
        },
       
        _selectedItemindex: function () {
            var selectItem;
            this.element.children("li").each(function (index) {
              if ($(this).hasClass("e-select")) {
                    selectItem = index;
                    return false;
                }
            });
            this._selectedItem = selectItem;
            return selectItem;
        },
        _getActiveItem: function () {		
		   return $(this.element.children("li")[this._activeItem]);          
        },
        _getItem: function (val) {
            return $(this.element.children("li")[val]);
        },
        _roundedCorner: function (val) {
            if (this.model.showRoundedCorner) {
               this.listContainer.addClass("e-corner-all");
            }
        },

        _enabled: function (boolean) {
            if (boolean) this.enable();
            else this.disable();
        },

        _showFullList: function () {
            if (this.model.dataSource != null) {
                if (!(ej.DataManager && this.model.dataSource instanceof ej.DataManager)) {
                    this.listitems = this.model.dataSource;
                }
            }
            this._renderlistContainer();
			this._addDragableClass();
			this._enableDargDrop();
        },

        // cascade options
        _cascadeAction: function () {
            if (this.model.cascadeTo) {
                this._currentValue = this._getField(this.listitems[this._activeItem], this.mapFld._value);
                this.selectDropObj = $('#' + this.model.cascadeTo).ejListBox('instance');
                if (ej.isNullOrUndefined(this._dSource))
                    this._dSource = this.selectDropObj.model.dataSource;
                    this._performJsonDataInit();
              
            }
        },
        _performJsonDataInit: function () {
            this._changedSource = ej.DataManager(this._dSource).executeLocal(ej.Query().where(this.mapFld._value, "==", this._currentValue));
            this.selectDropObj.setModel({ dataSource: this._changedSource, enabled: true, value:"" });
        },
        //Events
		_OnMouseContext:function (e){
		this.touchhold=true;
		e.preventDefault();
		return false;
		},
        _OnMouseEnter: function (e) {	
		this.startime = 0;
		this.item="";
		if(e.type =="touchstart"){
		this.item = $(e.target).text() ;
		this.startime = new Date().getTime();
		}
		if(this.model.enabled){
            var targetEle;
            this.element.children("li").removeClass("e-hover");
            if ($(e.target).is("li")) { $(e.target).addClass("e-hover"); }
            else if (e.target.tagName != "li") {
                targetEle = $(e.target).parents("li");
                $(targetEle).addClass("e-hover");
            }
            var activeItem = 0, selectItem=0;
            this.element.children("li").each(function (index) {
                if ($(this).hasClass("e-hover")) {
                    activeItem = index;
                    return false;
                }
            });
            this._activeItem = activeItem;
			}
        },
    
        _OnMouseLeave: function (e) {
		  this.element.children("li").removeClass("e-hover");
			this.endtime = new Date().getTime();
	  if((((this.endtime-this.startime)/200)>2)){
		  if((this.item ==$(e.target).text()))
		  	 this.hold=(((this.endtime-this.startime)/200)>2);
		}
        },
        _OnMouseClick: function (e) {
		if(e.which ==3)
		{
		this.hold=true;
		}
	this.endtime = new Date().getTime();
	
		if((((this.endtime-this.startime)/200)>2)){
		 if((this.item ==$(e.target).text())  &&(!this.hold))
		 {
	 this.hold=(((this.endtime-this.startime)/200)>2);
	
	 }
	 }
		if(this.model.enabled){
            if (!this.model.showCheckbox) {
                this.prevselectedItem = this._selectedItemindex();
                var activeitem = $(this.element.children("li")[this._activeItem]);
			  if (!this.model.allowMultiSelection || (!(e.ctrlKey||this.touchhold ||this.hold) && !e.shiftKey)) {
                    this._removeListHover();
                }
              
                this.element.children("li").removeClass('e-hover');
                if (!activeitem.hasClass('e-select')) {
                    activeitem.addClass('e-select');
					this.model.selectedItems.push(activeitem);
					this.model.selectedItemlist.push(this._activeItem);
                    if(e.shiftKey &&(this.model.allowMultiSelection)){var initial,last;
                        if( this.prevselectedItem<this._activeItem){
                            initial=this.prevselectedItem;
                            last=this._activeItem
                        }
                        else{
                            initial=this._activeItem
                            last=this.prevselectedItem;
                        }
                        for(var i=initial;i<=last;i++){
                            activeitem = $(this.element.children("li")[i])
                            if (!activeitem.hasClass('e-select')) 
                                activeitem.addClass('e-select');
                            this.model.selectedItems.push(activeitem);
							this.model.selectedItemlist.push(this._activeItem);
                        }
                    }
                }
                else {
                    activeitem.removeClass('e-select');
                    this.model.selectedItems.pop(activeitem);
					this.model.selectedItemlist.pop(this._activeItem);
                }

                this._selectedItem = this._selectedItemindex();
                this._cascadeAction();
				var selecteditem =$(this.element.children("li")[this._selectedItem]);
			if($(selecteditem).text() != ""){
			this.element.val($(selecteditem).text());
			this.value($(selecteditem).text());
			this.element.attr({ "value": "this.element.val()" });
			}
				this.model.selectedText=activeitem.text();
				var data = { selectedText: this.model.selectedText, args: (this.model.selectedItemIndex, this.model.selectedItems, this.model.selectedItemlist, this.model.checkedItemlist) };
				 this.model.selectedItemIndex = this._selectedItem;
                this._trigger("selected", data);
               
              } else {
                if (($(e.currentTarget).is("li")) && ($(e.target).is("li"))) {
                    if ($(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('isChecked')) {
                        $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', false);
                        var index=this.model.checkedItems.indexOf(e.currentTarget);
						this.model.checkedItems.splice( index, 1); 
						this.model.checkedItemlist.pop(this._selectedItem);
                    
                    } else {
                        $(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('option', 'checked', true);
                        this.model.checkedItems.push(e.currentTarget);
						this.model.checkedItemlist.push(this._activeItem);
                    }
                }
				else if($(e.currentTarget).is("li")){
				if (!($(e.currentTarget.firstChild).find('.listcheckbox').ejCheckBox('isChecked'))) {
				    	this.model.checkedItems.push(e.currentTarget);
						this.model.checkedItemlist.push(this._activeItem);
						}
				else{
					var index=this.model.checkedItems.indexOf(e.currentTarget);
					this.model.checkedItems.splice( index, 1);
					this.model.checkedItemlist.pop(this._activeItem);
					}
				}
				else{
				return false;
				}
                if (!this.element.hasClass("e-disable")) {
                    var args = { status: this.model.enabled };
                    this._trigger("checkChange", args);
                }
                 }
            this._OnListSelect(this.prevselectedItem,this._activeItem);
			}
	
        },
        _OnClickCheckList: function (e) {
            if (e.isChecked) {
                this.checkedStatus = true;
               
            } else {
                this.checkedStatus = false;
       
            }
            if (!this._initValue)
                this._trigger('checkChange', { isChecked: this.checkedStatus, data: this.model });

        },
        _OnListSelect: function (previtem, selecteditem) {
            if (previtem != selecteditem)
                this._trigger('selectIndexChanged', { data: this.model });
        },
        //keyboard events
    
        _OnKeyDown: function (e) {
		if(this.model.enabled){
            if ((!this.model.enabled)) return false;
            this._itemId = null;
            var _ListItemsContainer = this.element.children("li");
            this._listSize = this.element.children("li").size();

            switch (e.keyCode) {
                case 38:    //Up arrow 
                    this.prevselectedItem = this._selectedItemindex();
                    if ((!e.ctrlKey && !e.shiftKey) || !this.model.allowMultiSelection) {
                            this._removeListHover();
                    } 
                            this.element.children("li").removeClass('e-active');
                            if ((this._selectedItem <= 0) || (this._selectedItem == null) || (this._selectedItem > this._listSize - 1))
                                this._selectedItem = this._listSize - 1;
                            else
                                this._selectedItem -= 1;
                            this._addListHover();
                            e.preventDefault();
                            return false;
                   
                    break;

                case 40:    //Down arrow
				
                    this.prevselectedItem = this._selectedItemindex();
					 var selecteditem =0; 
					this.element.children("li").each(function (index) {
					if ($(this).hasClass("e-select"))
                     selecteditem = index;
					});
                    if ((!e.ctrlKey && !e.shiftKey) || !this.model.allowMultiSelection) {
                            this._removeListHover();
                    }                   
					
					this.element.children("li").removeClass('e-active');
					this._selectedItem=selecteditem;
                            if ((this._selectedItem >= this._listSize - 1) || (this._selectedItem == null) || (this._selectedItem < 0))
                                this._selectedItem = 0;
                            else
                                this._selectedItem += 1;
                            this._addListHover();
							e.preventDefault();
							 if (this.model.enableLoadOnDemand){
							this._onScroll();
							this.element.focus();
							}
							return false;
                                   break;
                case 37:// Left Key equals up
                    this.prevselectedItem = this._selectedItemindex();
                    if ((!e.ctrlKey && !e.shiftKey) || !this.model.allowMultiSelection) {
                        this._removeListHover();
                    } 
                        this.element.children("li").removeClass('e-active');
                        if ((this._selectedItem <= 0) || (this._selectedItem == null) || (this._selectedItem > this._listSize - 1))
                            this._selectedItem = this._listSize - 1;
                        else
                            this._selectedItem -= 1;
                        this._addListHover();
                 
                    e.preventDefault();
                    return false;
                    break;  // Left Key

                case 39:// Right Key equals down
                    this.prevselectedItem = this._selectedItemindex();
					 var selecteditem =0; 
					this.element.children("li").each(function (index) {
					if ($(this).hasClass("e-select"))
                     selecteditem = index;
					});
					
                    if ((!e.ctrlKey && !e.shiftKey) || !this.model.allowMultiSelection) {
                        this._removeListHover();
                    }
					this.element.children("li").removeClass('e-active');
					this._selectedItem=selecteditem;
                        this.element.children("li").removeClass('e-active');
                        if ((this._selectedItem >= this._listSize - 1) || (this._selectedItem == null) || (this._selectedItem < 0))
                            this._selectedItem = 0;
                        else
                            this._selectedItem += 1;
                        this._addListHover();
                    e.preventDefault();
					 if (this.model.enableLoadOnDemand){
							this._onScroll();
							this.element.focus();
							}
                    return false;
                    break;  // Right Key

                case 8:    // Backspace key
                    if ((this.model.allowMultiSelection == true) && (this.model.showCheckbox)) {
                        this._deleteLastBox();
                    }
                    e.preventDefault();
                    return false;
                    break;
                case 9:    // Tab key
                    break;
                case 33:
                    break;//up key
                case 34:
                    break;//down key

                case 35:
                    this.prevselectedItem = this._selectedItemindex();
                    this._removeListHover();
                        this.element.children("li").removeClass('e-active');
                        this._selectedItem = this._listSize - 1;
                        this._addListHover();
                   
                    e.preventDefault();
                    return false;
                    break;  // End Key
				case 13:    // Enter Key
                    
				e.preventDefault();
                this._OnMouseClick(e);
				break;
				
                case 36:
                    this.prevselectedItem = this._selectedItemindex();
                    this._removeListHover();
                        this.element.children("li").removeClass('e-active');
                        this._selectedItem = 0;
                        this._addListHover();
                    e.preventDefault();
                    return false;
                    break;  // Home Key
                case 18:    // Alt key
                    break;
                case 32:    // space Key
                    e.preventDefault();
                    return false;
                    break;
            }
            }
        },
		_onmousedown:function (){
		this._on($(document), "mouseup", this._onScroll);
		},
        //scroll event
        _onScroll: function () {
		if(this.model.enableLoadOnDemand && !this.model.enableVirtualScrolling){
		if(this.scrollerObj.scrollTop() >0){
		var listitemheight = $(this.element.find('li')[0]).outerHeight();
					var end =parseInt((this.scrollerObj.scrollTop()/listitemheight) +20);
		    var start = parseInt((this.scrollerObj.scrollTop()/listitemheight) );
			this.realUllength=start;
			this.realUllength=start;

      
			var args = { start: start };
			 this._trigger('itemRequest',args);
			if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
				 var proxy = this;
				 proxy._addLoadingClass();
                var queryPromise = this.model.dataSource.executeQuery(this.model.query);
                queryPromise.done(function (e) {
				proxy.realUllength=start;
					proxy._loadlist(e.result);
					 proxy._removeLoadingClass();
                });
            } 
		}
		}
			else if(this.model.enableVirtualScrolling)	{
			if(this.scrollerObj.model.height + this.scrollerObj.scrollTop() == this.scrollerObj._v.sScrollDim){
			   var st = this.scrollerObj.scrollTop();
			if(st > this.lastScrollTop){
				    var _query = this.model.query;
			
            var end = this.element.children().length + 10;
            var start = this.element.children().length;
           	var args = { start: start };
			
			 this._trigger('itemRequest',args);
			 			if (arguments[0].originalEvent.detail < 0) {
                    this.displayeditem -= (this.model.itemsCount -1);
                }
                else{
                    this.displayeditem += (this.model.itemsCount -1);
                }
			if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
				 var proxy = this;
				  proxy._addLoadingClass();
                var queryPromise = this.model.dataSource.executeQuery(this.model.query);
                queryPromise.done(function (e) {
				proxy.realUllength=start;
					proxy._loadlist(e.result);
					proxy._removeLoadingClass();
				 proxy.scrollerObj.option("scrollTop", proxy._calcScrollTop());
               proxy.scrollerObj.refresh();
                });
			
            } 
              
				
			}
			 this.lastScrollTop = this.scrollerObj.scrollTop();
			 }
			 this._refreshItems();
                 this.listContainer.css("height", "auto");
                this.listContainer.css({ "display": "block" });  // For get the height of the popup
                this.scrollerObj.model.height = this.listContainer.height();
                this.scrollerObj.refresh();
             this.scrollerObj.option("scrollTop", this._calcScrollTop());

 this.listContainer.css("height", "auto");
                this.listContainer.css({ "display": "block" });  // For get the height of the popup
                this.scrollerObj.model.height = this.listContainer.height();
                this.scrollerObj.refresh();
			}
			this._off($(document), "mouseup", this._onScroll);
			
 	
        },
       
        //trigger client side events
      
        _onDragStarts: function (data) {
            return this._trigger("itemDragStart", data);
        },
        _onDrag: function (data) {
            return this._trigger("itemDrag", data);
        },
        _onDragStop: function (data) {
            return this._trigger("itemDragStop", data);
        },
        _onDropped: function (data) {
            return this._trigger("itemDropped", data);
        },


        //-------------------- Event Wire-up -------------------------//
        _wireEvents: function () {
            this._on(this.listContainer, "keydown", this._OnKeyDown);
	
	  this._on(this.listContainer, "DOMMouseScroll",this._onScroll);
         	this._on(this.listContainer, "mousedown", this._onmousedown);
			this._on($(".e-vhandle"), "mousedown", this._onmousedown);
			this._on($(".e-vhandlespace"), "mousedown", this._onmousedown);
			this._on(this.listContainer, "mousewheel", this._onScroll);
            this._enableDargDrop();
        }
    });
})(jQuery, Syncfusion);
;
/**
* @fileOverview Plugin to style the Html ListView elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    //ListView is the plugin name 
    //"ListView" is "namespace.className" will hold functions and properties
    /**
    * @namespace ej
    * @class ejListView
    * @requires jQuery
    * @requires ej.core
    * @requires ej.unobtrusive
    * @requires ej.data
    * @requires ej.touch
    * @requires ej.checkbox
    * @requires ej.listviewbase
    * @classdesc Custom Design for Html ListView control.
    * @example 
    * //Set listview in unobtrusive way.
    * &lt;div id="lb" data-role="ejlistview"&gt;
    *	 &lt;ul&gt;
    *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
    * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
    * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
    * 	&lt;/ul&gt;
    * &lt;/div&gt;
    * @example 
    * //Set listview in obtrusive way.
    * &lt;div id="lb"&gt;
    *	 &lt;ul&gt;
    *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
    * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
    * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
    *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
    * 	&lt;/ul&gt;
    * &lt;/div&gt;
    * &lt;script&gt; 
    * // Create ListView
    * $("#lb").ejListView(); 
    * &lt;/script&gt;
    */

    ej.widget("ejListView", "ej.ListView", {
        _rootCSS: "e-lv",
        //Default model values
        _prefixClass: "e-",
        defaults: {

            /**    
            * Event triggers when mouse down happens on the item.
            * @event
            * @name ejListView#mouseDown
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {boolean} argument.hasChild If the child element exist return true; otherwise, false.
            * @param {string} argument.item  returns the current list item.
            * @param {string} argument.text returns the current text of item.
            * @param {number} argument.index returns the current Index of the item.
            * @param {boolean} argument.isChecked If checked return true; otherwise, false.
            * @param {number} argument.checkedItems returns the list of checked items.
            * @param {string} argument.checkedItemsText returns the current checked item text.
            * @example 
            * //Set the mouseDown property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-mouseDown="mouseDown"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //mouseDown event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	mouseDown: function (args) { //handle the event 
            * }
            *	});         
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            mouseDown: null,
            /**    
            * Event triggers when mouse up happens on the item.
            * @event
            * @name ejListView#mouseUP	
            * @param {Object} argument Event parameters from listview.
            * @param {boolean} argument.cancel returns true if the event should be cancelled; otherwise, false.
            * @param {string} argument.type returns the name of the event.
            * @param {Object} argument.model returns the model value of the control.
            * @param {boolean} argument.hasChild If the child element exist return true; otherwise, false.
            * @param {string} argument.item  returns the current list item.
            * @param {string} argument.text returns the current text of item.
            * @param {number} argument.index returns the current Index of the item.
            * @param {boolean} argument.isChecked If checked return true; otherwise, false.
            * @param {number} argument.checkedItems returns the list of checked items.
            * @param {string} argument.checkedItemsText returns the current checked item text.
            * @example 
            * //Set the mouseUP property in unobtrusive way.
            * &lt;div id="lb" data-role="ejlistview" data-ej-mouseUP="mouseUP"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * @example 
            * //mouseUP event for ListView
            * &lt;div id="lb" data-role="ejlistview"&gt;
            * 	&lt;ul&gt;
            *		&lt;li data-ej-text="Artwork"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Abstract"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="2 Acrylic Mediums"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Creative Acrylic"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Modern Painting"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Canvas Art"&gt;&lt;/li&gt;
            * 		&lt;li data-ej-text="Black white"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Children"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="Preschool Crafts"&gt;&lt;/li&gt;
            *		&lt;li data-ej-text="School-age Crafts"&gt;&lt;/li&gt;
            *	&lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(document).ready(function(){
            * $("#lb").ejListView({
            *   	mouseUP: function (args) { //handle the event 
            * }
            *	});    
            * });
            * &lt;/script&gt;
            * @memberof ejListView
            * @instance
            */
            mouseUp: null

        },

        //Datatypes of model variables
        /**
        * Specify the data types for default properties 
        * @private
        */
        dataTypes: {
            dataSource: "data",
            fieldSettings: "data",
            renderMode: "enum",
            theme: "enum",
            enablePersistence: "boolean"
        },
        observables: ["selectedItemIndex", "dataSource"],
        selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
        dataSource: ej.util.valueFunction("dataSource"),
        //Constructor function
        /**
        * Create the ListView widget
        * @private
        */
        _init: function () {
            this._preventDefaultException = { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ };
            this._storedContent = [];
            this._storedTemplate = [];
            this._touchStart = this.model.mouseDown;
            this._touchEnd = this.model.mouseUp;
            this._load();
        },
        _updateContent: function (currentItem, backButton) {
            var proxy = this;
            var $curIte = $(currentItem), childid = $curIte.attr('data-childid'),
                 id = this.element.find($("#" + childid));
            if (id.length) {
                var hdr = this.element.find('#' + childid + '_header');
                if (this.model.enableFiltering)
                    this._initializeFiltering($(id));
                var title = $curIte.attr('data-childtitle') == undefined ? currentItem.text() : $curIte.attr('data-childtitle');
                if (hdr.hasClass('e-header')) {
                    this._setHeaderVal(childid, title, backButton);
                }
                id.attr("data-hdr-title", title).attr("data-hdr-bckbtn", backButton);
                $curIte.closest('.subpage').hide();
                this._initEJCheckBox(id);
                id.show();
                $(this.element.children()[0]).removeClass("e-slideright");
                id.addClass("e-slideleft");
            }
        },

        //To render header
        /**
        * Section for Render Header for Listbox control	
        * @private
        */
        _renderHeader: function (id, showbutton, title, backtext) {
            var header = ej.buildTag("div", "", {}, { "id": id + "_header", "class": "e-header" });
            if (showbutton) {
                header.append("<span class='e-hicon e-icon e-rarrowleft-2x'></span>");
                header.append("<div class='e-btn-text'>" + (backtext ? backtext : "Back") + "</div>");
            }
            else
                header.append("<div class='e-htitle'>" + title + "</div>");
            return header;
        },
        _setHeaderVal: function (id, title, backtext) {
            this._onBackButtonDelegate = $.proxy(this._onBackButtonClick, this);
            ej.listenTouchEvent($("#" + id + "_header"), ej.endEvent(), this._onBackButtonDelegate, false, this);
            $("#" + id + "_header").find(".e-btn-text").text(this.model.headerBackButtonText ? this.model.headerBackButtonText : "Back");
            $("#" + id + "_header").find(".e-htitle").text(title);
        },
        _onBackButtonClick: function (e) {
            this.element.find(".e-slideleft").removeClass("e-slideleft");
            this.element.children(":visible").hide();
            $(this.element.children()[0]).show();
            $(this.element.children()[0]).addClass("e-slideright");
        },
        //Return the data in event triggering to the user
        /**
        * Section for to return data in event triggering to the user.
        * @private
        */
        _returnData: function () {
            var checkedItem = this._currentItem.closest('ul.e-list-hdr').find('.e-chkbox-wrap[aria-checked="true"]').closest("li");
            return {
                hasChild: this._currentItem.attr("data-childid") && this._currentItem.attr('data-childid').length > 0 ? (this.element.find('#' + this._currentItem.attr('data-childid')).length ? true : false) : false,
                item: this._currentItem,
                text: this._currentItem.text(),
                index: this._currentItem.index(),
                isChecked: this._currentItem.find("input.e-lv-check").closest('.e-chkbox-wrap').attr('aria-checked') == "true" ? true : false,
                checkedItems: checkedItem.length ? checkedItem : null,
                checkedItemsText: $(checkedItem).map(function () { return $(this).text(); }).get()
            };
        },
        _initEJCheckBox: function (ul) {
            $(ul.find('.e-lv-check')).ejCheckBox();
            ul.find('.e-lv-checkdiv').removeClass("e-lv-checkdiv")
            ul.find('.e-lv-check').parent().addClass("e-lv-checkdiv")
        },
        _triggerStartEvent: function (data) {
            this.model.mouseDown = ej.getAttrVal(this._currentItem, 'data-mousedown', this._touchStart);
            if (this.model.mouseDown)
                this._trigger("mouseDown", data);
        },
        _triggerEndEvent: function (data) {
            this.model.mouseUp = ej.getAttrVal(this._currentItem, 'data-mouseup', this._touchEnd);
            this.selectedItemIndex(this._currentItem.index());
            if (this.model.mouseUp)
                this._trigger("mouseUp", data);
        },
        _createFilterDiv: function () {
            return ej.buildTag('div.e-lv-filter', ej.buildTag('input.e-lv-input', "", {}, { 'type': 'text', 'placeholder': 'search' }));
        },
        _emptyFilterTextValue: function (element) {
            element.find('.e-lv-input').val("");
        },
        _createListDiv: function () {
            this._div = ej.buildTag("div#" + childId + "." + this._rootCSS + " subpage e-childitem e-ajaxchild", this.model.showHeader ? this._renderHeader(childId, true, this._currentItem.text()) : "");
        },
        _createCheckBox: function () {
            return ej.buildTag("input.e-lv-check", "", {}, { "type": "checkbox" });
        },
        _toggleCheckboxValue: function (lbCheck) {
            lbCheck.ejCheckBox({ checked: $(lbCheck.closest('.e-chkbox-wrap')).attr('aria-checked') == "true" ? false : true });
        },
        _setCheckboxValue: function (element, val) {
            element.ejCheckBox({ checked: val });
        },
        _convertToRelativeUrl: function (url) {
            return url;
        }
    });
    $.extend(true, ej.ListView.prototype, ej.ListViewBase.prototype);
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
	/**
    * @namespace ej
	* @classdesc Custom Design for Html Textbox Control.
	* @class ejTextBoxes
	* @requires jQuery
	* @requires ej.core.js
    * @requires jquery.globalize.js
    * @requires globalize.cultures.min.js
	* @requires ej.editor.js
	* @example 
	* &lt;input id="numeric" type="text" /&gt; <br> 
	* &lt;input id="currency" type="text" /&gt; <br> 
	* &lt;input id="percentage" type="text" /&gt; <br> 
	* &lt;script&gt;<br>
	* // Create Textbox Editors <br>
    * $('#numeric').ejNumericTextbox({value:10}); <br>	
	* $('#currency').ejCurrencyTextbox({value:1000}); <br>
	* $('#percentage').ejPercentageTextbox({value:100}); <br>
	* &lt;/script&gt;
	*/

    ej.widget(
    {
        "ejNumericTextbox": ["ej.NumericTextbox", "e-numerictextbox"],
        "ejPercentageTextbox": ["ej.PercentageTextbox", "e-percentagetextbox"],
        "ejCurrencyTextbox": ["ej.CurrencyTextbox", "e-currencytextbox"]
    },
    {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _setFirst: false,
        type: "editor",

        // default model
        defaults: {
		/**		
			* Specifies the width of the editor.
			* @default 143pixel
			* @type {String}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set width API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ width: "143px", value:5 });	
			* 	$("#currency").ejCurrencyTextbox({ width: "143px", value:55 });
			* 	$("#percentage").ejPercentageTextbox({ width: "143px", value:555 });			
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
            width: "",
			
			/**		
			* Specifies the height of the editor.
			* @default 30pixel
			* @type {String}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set height API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ height: "30px", value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ height: "30px", value:55  });
			* 	$("#percentage").ejPercentageTextbox({ height: "30px", value:555  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            height: "",
			
			/**		
			* Specifies the value of the editor.
			* @default 0
			* @type {number}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set value API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ value: 10 });	
			* 	$("#currency").ejCurrencyTextbox({ value: 10 });
			* 	$("#percentage").ejPercentageTextbox({ value: 10 });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            value: null,
						
			/**		
			* Specifies the name of the editor.
			* @default Sets id as name if it is null.
			* @type {string}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set name API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ name: "numeric", value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ name: "currency", value:55  });
			* 	$("#percentage").ejPercentageTextbox({ name: "percentage", value:500  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            name: null,
			
			/**		
			* Specifies the minValue of the editor.
			* @default 0 for CurrencyTextbox
			* @default null for NumericTextbox
			* @default null for PercentageTextbox
			* @type {number}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set minValue API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ minValue: 50, value:55  });	
			* 	$("#currency").ejCurrencyTextbox({ minValue: 50, value:5  });
			* 	$("#percentage").ejPercentageTextbox({ minValue: 50, value:555  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            minValue: -(Number.MAX_VALUE),
			
			/**		
			* Specifies the maxValue of the editor.
			* @default null for CurrencyTextbox
			* @default null for NumericTextbox
			* @default 100 for PercentageTextbox
			* @type {number}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set maxValue API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ maxValue: 100, value:500  });	
			* 	$("#currency").ejCurrencyTextbox({ maxValue: 100, value:550  });
			* 	$("#percentage").ejPercentageTextbox({ maxValue: 100, value:50  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            maxValue: Number.MAX_VALUE,
			
			/**		
			* Specifies the incrementStep of the editor.
			* @default 1		
			* @type {number}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set incrementStep API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ incrementStep: 2, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ incrementStep: 2 , value:55 });
			* 	$("#percentage").ejPercentageTextbox({ incrementStep: 2, value:50  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            incrementStep: 1,
			
			/**		
			* Specifies the decimalPlaces of the editor.
			* @default 0		
			* @type {number}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set decimalPlaces API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ decimalPlaces: 2, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ decimalPlaces: 2 , value:5 });
			* 	$("#percentage").ejPercentageTextbox({ decimalPlaces: 2, value:5  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            decimalPlaces: 0,
			
			/**		
			* Specify the CSS class to editor to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set cssClass API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ cssClass: "gradient-lime" , value:5 });	
			* 	$("#currency").ejCurrencyTextbox({ cssClass: "gradient-lime", value:100  });
			* 	$("#percentage").ejPercentageTextbox({ cssClass: "gradient-lime", value:505  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
					
            cssClass: "",
			
			/**		
			* Specify the enablePersistence to editor to save current model value to browser cookies for state maintains
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set enablePersistence API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ enablePersistence: true, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ enablePersistence: true, value:5  });
			* 	$("#percentage").ejPercentageTextbox({ enablePersistence: true, value:5  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            enablePersistence: false,
			
			/**		
			* Specify the showSpinButton to editor 
			* @default true
			* @type {boolean}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set showSpinButton API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ showSpinButton: false, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ showSpinButton: false, value:55  });
			* 	$("#percentage").ejPercentageTextbox({ showSpinButton: false, value:580  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            showSpinButton: true,
			
			/**		
			* Specify the Localization to editor 
			* @default en-US
			* @type {string}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set culture API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ locale: "en-US", value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ locale: "en-US", value:5000  });
			* 	$("#percentage").ejPercentageTextbox({ locale: "en-US", value:455  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            locale: "en-US",
			
			/**		
			* Specify the strictMode to editor 
			* @default false
			* @type {booelan}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set enableStrictMode API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ enableStrictMode: true, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ enableStrictMode: true, value:55  });
			* 	$("#percentage").ejPercentageTextbox({ enableStrictMode: true, value:555  });			
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            enableStrictMode: false,
			
			/**		
			* Specify the rounded Corner to editor 
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set showRoundedCorner API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ showRoundedCorner: true, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ showRoundedCorner: true , value:5 });
			* 	$("#percentage").ejPercentageTextbox({ showRoundedCorner: true, value:5 });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            showRoundedCorner: false,
			
			/**		
			* Specify the readOnly to editor 
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set readOnly API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ readOnly: true , value:5 });	
			* 	$("#currency").ejCurrencyTextbox({ readOnly: true , value:5 });
			* 	$("#percentage").ejPercentageTextbox({ readOnly: true , value:5 });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            readOnly: false,
			
			/**		
			* Specify the editor control state.
			* @default true
			* @type {boolean}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set enabled API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ enabled: true, value:1200  });	
			* 	$("#currency").ejCurrencyTextbox({ enabled: true , value:50 });
			* 	$("#percentage").ejPercentageTextbox({ enabled: true, value:100  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            enabled: true,
			
			/**		
			* Specify the Right to Left Direction to editor.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set enableRTL API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ enableRTL: true, value:5  });	
			* 	$("#currency").ejCurrencyTextbox({ enableRTL: true , value:45 });
			* 	$("#percentage").ejPercentageTextbox({ enableRTL: true, value:567  });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            enableRTL: false,
			
			/**		
			* Specify the watermark text to editor.
			* @default ""
			* @type {string}
			* @example 
			* &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			* //To set enableRTL API value during initialization  
			* 	$("#numeric").ejNumericTextbox({ watermarkText: "Enter the value" });	
			* 	$("#currency").ejCurrencyTextbox({ watermarkText: "Enter the currency value" });
			* 	$("#percentage").ejPercentageTextbox({ watermarkText: "Enter the percentage" });			 
			* &lt;/script&gt;
			* @memberof ejTextBoxes
			* @instance
			*/
			
            watermarkText: "",
			
			 /**     
			 * Fires after editor control is value is changed.
			 * @event
			 * @name ejTextBoxes#change 
			 * @param {Object} argument Event parameters from editors.    			 
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {object}  argument.model returns the corresponding editor model.
			 * @param {string}  argument.type returns the name of the event.	
			 * @param {number}  argument.value returns the corresponding editor control value.			 
			 * @example 
			 * &lt;input id="numeric" type="text" /&gt; <br> 
			 * &lt;input id="currency" type="text" /&gt; <br> 
			 * &lt;input id="percentage" type="text" /&gt; <br> 
			 * &lt;script&gt;<br>
			 * //change event for editors
             * $("#numeric").ejNumericTextbox({
			 *	  value:10,	
             *    change: function (args) {}
             * });
			 * $("#currency").ejCurrencyTextbox({
			 *	  value:100,	
             *    change: function (args) {}
             * });
			 * $("#percentage").ejPercentageTextbox({
			 *	  value:1000,	
             *    change: function (args) {}
             * });
			 * &lt;/script&gt;
			 * @memberof ejTextBoxes
			 * @instance
			 */		
			
            change: null,			
			
			 /**     
			 * Fires after editor control is focused.
			 * @event
			 * @name ejTextBoxes#focusIn 
			 * @param {Object} argument Event parameters from editors.    			 
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {object}  argument.model returns the corresponding editor model.
			 * @param {string}  argument.type returns the name of the event.
             * @param {number}  argument.value returns the corresponding editor control value.
			 * @example 
			 * &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			 * //focusIn event for editors
             * $("#numeric").ejNumericTextbox({
			 *	  value:20,	
             *    focusIn: function (args) {}
             * });
			 * $("#currency").ejCurrencyTextbox({
			 *	  value:200,	
             *    focusIn: function (args) {}
             * });
			 * $("#percentage").ejPercentageTextbox({
			 *	  value:2000,	
             *    focusIn: function (args) {}
             * });
			 * &lt;/script&gt;
			 * @memberof ejTextBoxes
			 * @instance
			 */		
			
            focusIn: null,
			
			/**     
			 * Fires after editor control is loss the focus.
			 * @event
			 * @name ejTextBoxes#focusOut 
			 * @param {Object} argument Event parameters from editors.    			 
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {object}  argument.model returns the corresponding editor model.
			 * @param {string}  argument.type returns the name of the event.	
             * @param {number}  argument.value returns the corresponding editor control value.
			 * @example 
			 * &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			 * //focusOut event for editors
             * $("#numeric").ejNumericTextbox({
			 *	  value:50,	
             *    focusOut: function (args) {}
             * });
			 * $("#currency").ejCurrencyTextbox({
			 *	  value:505,	
             *    focusOut: function (args) {}
             * });
			 * $("#percentage").ejPercentageTextbox({
			 *	  value:1500,	
             *    focusOut: function (args) {}
             * });
			 * &lt;/script&gt;

			 * @memberof ejTextBoxes
			 * @instance
			 */					
            focusOut: null,
			  /**     
          * Fires after editor control is created.
          * @event
          * @name ejTextBoxes#create 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the editor model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			 * //create event for editors
             * $("#numeric").ejNumericTextbox({
			 *	  value:50,	
             *    create: function (args) {}
             * });
			 * $("#currency").ejCurrencyTextbox({
			 *	  value:505,	
             *    create: function (args) {}
             * });
			 * $("#percentage").ejPercentageTextbox({
			 *	  value:1500,	
             *    create: function (args) {}
             * });
			 * &lt;/script&gt;			 
          * @memberof ejTextBoxes
          * @instance
          */
            create: null,
			 /**     
          * Fires when the editor is destroyed successfully.
          * @event
          * @name ejTextBoxes#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the editor model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input id="numeric" type="text" /&gt; <br> 
			* &lt;input id="currency" type="text" /&gt; <br> 
			* &lt;input id="percentage" type="text" /&gt; <br> 
			* &lt;script&gt;<br>
			 * //destroy event for editors
             * $("#numeric").ejNumericTextbox({
			 *	  value:50,	
             *    destroy: function (args) {}
             * });
			 * $("#currency").ejCurrencyTextbox({
			 *	  value:505,	
             *    destroy: function (args) {}
             * });
			 * $("#percentage").ejPercentageTextbox({
			 *	  value:1500,	
             *    destroy: function (args) {}
             * });
			 * &lt;/script&gt;			 
          * @memberof ejTextBoxes
          * @instance
          */
            destroy: null
        },
		/**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            minValue: "number",
            maxValue: "number",
            incrementStep: "number",
            decimalPlaces: "number",
            showSpinButton: "boolean",
            enableStrictMode: "boolean",
            showRoundedCorner: "boolean",
            enableRTL: "boolean",
            locale: "string",
            watermarkText: "string",
            cssClass: "string",
            readOnly: "boolean",
            enabled: "boolean"
        },
        observables: ["value"],
		 /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */
        _setModel: function (jsondata) {
            var validate = false;
            if (!this.model.enabled && !jsondata["enabled"]) return;
            for (var key in jsondata) {
                switch (key) {
                    case "value":
                        if (ej.isNullOrUndefined(jsondata["minValue"]) && ej.isNullOrUndefined(jsondata["maxValue"])) {
                            this._setValue(jsondata[key]);
                            jsondata[key] = this.model.value;
                        }
                        else {
                            this.model.value = this._checkNumValue(jsondata[key]);
                            this._localizedFormat();
                            this._raiseChangeEvent();
                            validate = true;
                        }
                        break;
                    case "enableRTL": this._enableRTL(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "minValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.minValue = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        validate = true;
                        break;
                    case "maxValue":
                        if (isNaN(jsondata[key])) return;
                        this.model.maxValue = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        validate = true;
                        break;
                    case "incrementStep":
                        if (isNaN(jsondata[key])) return;
                        this.model.incrementStep = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
                        break;
                    case "showSpinButton": this._showSpin(jsondata[key]); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "locale": this._setLocalize(jsondata[key]); break;
                    case "decimalPlaces": this._setDecimal(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": if (jsondata[key]) this.enable(); else this.disable(); break;
                    case "watermarkText":
                        this.model.watermarkText = jsondata[key]; this._setWaterMark(); break;
                }
            }
            if (validate) {
                this._validateMinMaxValue(true);
                jsondata["value"] = this.model.value;
                jsondata["maxValue"] = this.model.maxValue;
                jsondata["minValue"] = this.model.minValue;
                if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
                this.element.attr({ 'aria-valuemin': this.model.minValue, 'aria-valuemax': this.model.maxValue, 'aria-valuenow': this.model.value });
            }
            this._checkErrorClass();
        },
		 /**
        * destroy the editor widgets
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:5});
		* $("#currency").ejCurrencyTextbox({value:55});
		* $("#percentage").ejPercentageTextbox({value:555});
		* // Create Editors
		* var numObj = $("#numeric").data("ejNumericTextbox");
		* var curObj = $("#currency").data("ejCurrencyTextbox");
		* var perObj = $("#percentage").data("ejPercentageTextbox");
		* numObj.destroy(); // destroy the numericTextbox
		* curObj.destroy(); // destroy the currencyTextbox
		* perObj.destroy(); // destroy the percentagTextbox
		* &lt;/script&gt;
		* @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:5});
		* $("#currency").ejCurrencyTextbox({value:55});
		* $("#percentage").ejPercentageTextbox({value:555});
		* // enable the editors
		* $("#numeric").ejNumericTextbox("destroy");
		* $("#currency").ejCurrencyTextbox("destroy");
		* $("#percentage").ejPercentageTextbox("destroy");		
		* &lt;/script&gt;
		* @memberof ejTextBoxes
		* @instance
         */	       
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            if (this.wrapper) {
                this.element.insertBefore(this.wrapper);
                this.wrapper.remove();
            }
            if (this.model.name) this.element.removeAttr("name");
            this.element.val("").removeClass('e-input e-watermark').empty();
        },
		
		 /**
         * Initialize the editors widget
		 * @private
         */		
        // constructor function
        _init: function () {
            if (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) {
                this._renderControl();
                this._setValues();
                this._wireEvents();
                this._initObjects();
            }
            else {
                this._destroy();
                return false;
            }
        },

        // -----------------------------------private function----------------------------------//
		
		/**
         * To configure the editors value		
		 * @private
         */	 		
        _setValues: function () {
            this._id = this.element[0].id;
            this._textBox = this.element[0];
            this._error = false;
            this._timeout = null;
            this.isValidState = true;
            this._allowkeyboard = true;
            this._validateOnType = false;
            this._focused = false;
            this._startValue = 0;
            if (this.sfType === "ej.CurrencyTextbox" && this.model.minValue == -(Number.MAX_VALUE))
                this.model.minValue = 0;
            this.model.minValue = parseFloat(this.model.minValue.toFixed(this.model.decimalPlaces));
            this.model.maxValue = parseFloat(this.model.maxValue.toFixed(this.model.decimalPlaces));
            if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
            this._localizedFormat();
            this._validateMinMaxValue(true);
            this.model.watermarkText = this._checkWaterMark(this.model.watermarkText);
            this._percentSymbol = Globalize.culture(this.model.locale).numberFormat.percent.symbol;
            this._currencySymbol = Globalize.culture(this.model.locale).numberFormat.currency.symbol;
        },
		
		 /**
         * Render Section For DifferentTypes		
		 * @private
         */	   
        _renderControl: function () {
            var editorwidget = $(document.createElement('span')).addClass('e-widget');
            var editorwidgetInner = $(document.createElement('span')).addClass('e-in-wrap e-box');
            if (this.sfType === "ej.NumericTextbox")
                editorwidget.addClass('e-numeric');
            else if (this.sfType === "ej.PercentageTextbox")
                editorwidget.addClass('e-percent');
            else if (this.sfType === "ej.CurrencyTextbox")
                editorwidget.addClass('e-currency');
            editorwidget.append(editorwidgetInner).insertAfter(this.element);
            editorwidgetInner.append(this.element);
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
            if(this.element.attr("name") == null)
                this.element.attr({'name': this.model.name});
            this.element.addClass('e-input');
			this.model.value = ej.isNullOrUndefined(this.model.value) ? this._checkNumValue(this.element[0].value) : this._checkNumValue(this.model.value);
            this._hiddenInput.attr({ 'name': this.model.name, 'value': this.model.value }).addClass('e-input');
            this.element.attr({ 'role': 'spinbutton', 'aria-valuemin': this.model.minValue, 'aria-valuemax': this.model.maxValue, 'aria-valuenow': this.model.value, 'tabindex': '0', 'aria-live': 'assertive', "value": this.model.value });
            var spinbutton = $('<span class="e-select"><span class="e-spin e-spin-up " role="button" "aria-label"="Increase Value" /><span class="e-spin e-spin-down" role="button" "aria-label"="Decrease Value" /></span>');
            var spinimg = ej.buildTag('span.e-icon e-arrow').attr('role','presentation');
            editorwidgetInner.append(spinbutton);
            spinbutton.find('.e-spin').append(spinimg);
            this.innerWrap = this.element.parent();
            this.wrapper = this.innerWrap.parent();
            this.spin = this.wrapper.find('.e-select');
            this.spinUp = this.wrapper.find('.e-spin-up');
            this.spinDown = this.wrapper.find('.e-spin-down');
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            if (this.model.cssClass != "") this._setSkin(this.model.cssClass);
            this._showSpin(this.model.showSpinButton);
            if (this.model.showRoundedCorner) this._roundedCorner(this.model.showRoundedCorner);
            if (this.model.enableRTL) this._enableRTL(this.model.enableRTL);
            if (this.model.readOnly) this._setReadOnly(this.model.readOnly);
            if (!this.model.enabled) this.disable();
            else if (this.model.enabled && this.element.hasClass("e-disable")) this.enable();
            this.wrapper = editorwidget;
        },
		
		/**
         * To initialize the editors		
		 * @private
         */	 
        _initObjects: function () {
            this._preVal = this._numberValue();
            if (this._textBox.value == "" && this.model.watermarkText != "")
                this._setWaterMark();
            if (this.sfType === "ej.PercentageTextbox" && this._textBox.value != "")
                this._appendPercentSymbol(this._textBox.value);
            else if (this.sfType === "ej.CurrencyTextbox" && this._textBox.value != "")
                this._appendCurrencySymbol(this._textBox.value);
            if (this.model.value == "") {
                this.isValidState = true;
                this._hiddenInput.val("");
            }
            else if ((this.model.value < this.model.minValue) || (this.model.value > this.model.maxValue))
                this.isValidState = false;
            this._checkErrorClass();
        },
		
		 /**
         * To enable or disable the show spin button in editors.
		 * @private
         */	
        _showSpin: function (value) {
            if (!value) {
                if (this.spin) {
                    this.spin.hide();
                    this.innerWrap.removeClass('e-padding');
                }
                this._unbindSpinEvents();
            }
            else {
                if (this.spin) {
                    this.spin.show();
                    this.innerWrap.addClass('e-padding');
                }
                this._bindSpinEvents();
            }
        },
		
		 /**
         * To enable or disable the rounded corner behaviour 		
		 * @private
         */	
        _roundedCorner: function (value) {
            if (value && !this.innerWrap.hasClass('e-corner-all'))
                this.innerWrap.addClass('e-corner-all');
            else if (this.innerWrap.hasClass('e-corner-all'))
                this.innerWrap.removeClass('e-corner-all');
        },
		
		 /**
         * To enable or disable the Right to Left Direction behaviour 		
		 * @private
         */	
        _enableRTL: function (enableRTL) {
            if (enableRTL) {
                if (this.spin) this.wrapper.addClass("e-rtl");
                else this.element.addClass("e-rtl");
            }
            else {
                if (this.spin) this.wrapper.removeClass("e-rtl");
                else this.element.removeClass("e-rtl");
            }
        },
		
		 /**
         * To configure editors width		
		 * @private
         */	
        _setWidth: function (value) {
            this.wrapper.width(value);
        },
		
		 /**
         * To configure editors height		
		 * @private
         */	
        _setHeight: function (value) {
            this.wrapper.height(value);
        },
		
		 /**
         * To configure the custom theme for editors using cssClass property		
		 * @private
         */	 
        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },
		
		 /**
         * To configure value to editors		
		 * @private
         */	 
        _setValue: function (value) {
            this.model.value = this._checkNumValue(value);
            this._validateMinMaxValue(false);
            if ((this.model.minValue <= this.model.value) && (this.model.value <= this.model.maxValue)) {
                this.isValidState=true;
            } else
                this.isValidState=false;
            this._checkErrorClass();
            this._localizedFormat();
            this._raiseChangeEvent();
        },
		
		 /**
         * To configure localization to editors		
		 * @private
         */	 
        _setLocalize: function (val) {
            this.model.locale = val;
            this._percentSymbol = Globalize.culture(this.model.locale).numberFormat.percent.symbol;
            this._currencySymbol = Globalize.culture(this.model.locale).numberFormat.currency.symbol;
            this._localizedFormat();
        },
		
		 /**
         * To configure decimal property to allow decimal values to editors		
		 * @private
         */	 
        _setDecimal: function (val) {
            this.model.decimalPlaces = val;
            this._localizedFormat();
        },
		
		/**
         * To check whether value within min max range.		
		 * @private
         */	
        _validateMinMaxValue: function (fromMinMax) {
            var valChange = false;
            if (this.model.minValue > this.model.maxValue) this.model.minValue = this.model.maxValue;
            if (this.model.value != "" && this.model.minValue > this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this._startValue = this.model.value = this.model.minValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else if (this.model.value != "" && this.model.maxValue < this.model.value) {
                if (this.model.enableStrictMode != true) {
                    this.isValidState = true;
                    this.model.value = this.model.maxValue;
                }
                else this.isValidState = false;
                valChange = true;
            }
            else this.isValidState = true;
            if (this.model.minValue == this.model.maxValue) this._startValue = this.model.minValue;
            if ((valChange && fromMinMax)) {
                this._hiddenInput.val(this.model.value);
                this._localizedFormat();
                this._raiseChangeEvent();
            }
        },

		/**
         * To configure localization format to editors		
		 * @private
         */	
        _localizedFormat: function () {
            this._wipeWaterMark();
            this._textBox.value = Globalize.format((this.model.value), "n" + this.model.decimalPlaces, this.model.locale);
            if (!this._focused && this._textBox.value != "") {
                if (this.sfType === "ej.PercentageTextbox") this._appendPercentSymbol(this._textBox.value);
                else if (this.sfType === "ej.CurrencyTextbox") this._appendCurrencySymbol(this._textBox.value);
            }
        },
		
		/**
         * To check whether value is proper format in editors		
		 * @private
         */	
        _checkNumValue: function (value) {
            if (typeof value == "string" && !isNaN(Globalize.parseFloat(value, this.model.locale))) {
                value = Globalize.parseFloat(value, this.model.locale);
                return parseFloat(value);
            }
            else if ((typeof value == "number") && !isNaN(value))
                return value;
            else return "";
        },
		
		/**
         * To check whether waterMark in editors		
		 * @private
         */	
        _checkWaterMark: function (val) {
            if (!val)
                return "";
            else return val;
        },
		
		 /**
         * To enable or disable the readOnly behaviour 		
		 * @private
         */	
        _setReadOnly: function (bool) {
            if (bool) this.element.attr("readonly", true);
            else this.element.removeAttr("readonly");
        },
		
		/**
         * To configure the editors waterMark text		
		 * @private
         */	
        /* Set Water Mark Text */
        _setWaterMark: function () {
            this.element.addClass("e-watermark");
            this._textBox.value = this.model.watermarkText;
        },
		
		/**
         * To remove the editors waterMark text		
		 * @private
         */	
        /* Clear Water Mark Text */
        _wipeWaterMark: function () {
            this.element.removeClass("e-watermark");
        },
		
		/**
         * To configure the editors value selection range. 		
		 * @private
         */	
        _setSelectionRange: function (selectionStart, selectionEnd) {
            var input = this._textBox;
            try {
                if (input.setSelectionRange) {
                    input.setSelectionRange(selectionStart, selectionEnd);
                    input.focus();
                }
                else if (input.createTextRange) {
                    var range = input.createTextRange();
                    _setselction(range);
                }
            }
            catch (e) {
                var control = this;
                window.setTimeout(function () {
                    document.body.focus();
                    control._textBox.select();
                    var range = document.selection.createRange();
                    _setselction(range);
                }, 1);
            }
            function _setselction(range) {
                range.collapse(true);
                range.moveEnd('character', selectionEnd);
                range.moveStart('character', selectionStart);
                range.select();
            }
        },
		
		/**
         * To obtain the editors value in selection range. 		
		 * @private
         */	
        _getSelection: function (value) {
            var oSel = null;
            if (document.selection) {
                oSel = document.selection.createRange();
                return (oSel.text == "" ? oSel.text : this._removeFormats(oSel.text));
            }
            else {
                if (value == null)
                    return this.model.value;
                else {
                    oSel = this._removeFormats(value.substring(this._textBox.selectionStart, this._textBox.selectionEnd));
                    return oSel;
                }
            }
        },
		
		/**
         * To calculate selection range position in editors value. 		
		 * @private
         */	
        _caretPosition: function () {
            var oField = this._textBox;
            // Initialize
            var iCaretPos = 0;
            // IE Support
            if (document.selection) {
                // Set focus on the element
                oField.focus();
                // To get cursor position, get empty selection range
                var oSel = document.selection.createRange();
                // Move selection start to 0 position
                oSel.moveStart('character', -oField.value.length);
                // The caret position is selection length
                iCaretPos = oSel.text.length;
            }
            // Firefox support
            else if (oField.selectionStart || oField.selectionStart == '0')
                iCaretPos = oField.selectionEnd;
            // Return results
            return (iCaretPos);
        },
		
		/**
         * To configure the percentage symbol in percentageTextbox value. 		
		 * @private
         */	
        _appendPercentSymbol: function (value) {
            if (this._percentSymbol) value = value.replace(this._percentSymbol, "");
            if (value.indexOf(Globalize.culture(this.model.locale).numberFormat.percent.symbol) < 0)
                this._textBox.value = value + Globalize.culture(this.model.locale).numberFormat.percent.symbol;
            this._percentSymbol = Globalize.culture(this.model.locale).numberFormat.percent.symbol;

        },
		
		/**
         * To configure the currency symbol in currencyTextbox value. 		
		 * @private
         */	
        _appendCurrencySymbol: function (value) {
            if (this._currencySymbol) value = value.replace(this._currencySymbol, "");
            if (value.indexOf(Globalize.culture(this.model.locale).numberFormat.currency.symbol) < 0)
                if (Number(value) < 0)
                    this._textBox.value = "(" + Globalize.culture(this.model.locale).numberFormat.currency.symbol + Math.abs(value) + ")";
                else
                    this._textBox.value = Globalize.culture(this.model.locale).numberFormat.currency.symbol + value;
            this._currencySymbol = Globalize.culture(this.model.locale).numberFormat.currency.symbol;

        },
		
		/**
         * To remove the localization format in editors. 		
		 * @private
         */	
        _removeFormats: function (val) {
            var grpSep = Globalize.culture(this.model.locale).numberFormat[","];
            if (val != null) {
                if (grpSep == ".")
                    return (val.toString().replace(/["."]/g, ""));
                else if (val.toString().match(new RegExp(grpSep, "g")))
                    return (val.toString().replace(new RegExp(grpSep, "g"), ""));
                else
                    return val;
            }
            else
                return null;
        },
		
		/**
         * To check whether error class added or not editors. 		
		 * @private
         */	
        _checkErrorClass: function (obj) {
            if (this.isValidState) this.wrapper.removeClass("e-error");
            else this.wrapper.addClass("e-error");
        },
        // -----------------------------------public function----------------------------------//
		/**
        * To enable the corresponding editors 		
		* @return jQuery
		* @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:10});
		* $("#currency").ejCurrencyTextbox({value:100});
		* $("#percentage").ejPercentageTextbox({value:1000});
		* // Create Editors
		* var numObj = $("#numeric").data("ejNumericTextbox");
		* var curObj = $("#currency").data("ejCurrencyTextbox");
		* var perObj = $("#percentage").data("ejPercentageTextbox");
		* numObj.enable(); // enable the numericTextbox
		* curObj.enable(); // enable the currencyTextbox
		* perObj.enable(); // enable the percentagTextbox
		* &lt;/script&gt;
		 @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:10});
		* $("#currency").ejCurrencyTextbox({value:100});
		* $("#percentage").ejPercentageTextbox({value:1000});
		* // enable the editors
		* $("#numeric").ejNumericTextbox("enable");
		* $("#currency").ejCurrencyTextbox("enable");
		* $("#percentage").ejPercentageTextbox("enable");		
		* &lt;/script&gt;
		* @memberof ejTextBoxes
		* @instance
         */	       		 
        enable: function () {
            this.model.enabled = true;
            this.element[0].disabled = false;
            this.element.removeAttr("disabled");
            this.element.removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select").removeClass('e-disable').attr({ "aria-disabled": false });
            this.wrapper.find(".e-select span.e-icon.e-arrow").removeClass('e-disable');
        },
		
		/**
        * To disable the corresponding editors 		
		* @return jQuery
		* @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:20});
		* $("#currency").ejCurrencyTextbox({value:400});
		* $("#percentage").ejPercentageTextbox({value:2000});
		* // Create Editors	
		* var numObj = $("#numeric").data("ejNumericTextbox");
		* var curObj = $("#currency").data("ejCurrencyTextbox");
		* var perObj = $("#percentage").data("ejPercentageTextbox");
		* numObj.disable(); // enable the numericTextbox
		* curObj.disable(); // enable the currencyTextbox
		* perObj.disable(); // enable the percentagTextbox
		* &lt;/script&gt;
		 @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:20});
		* $("#currency").ejCurrencyTextbox({value:400});
		* $("#percentage").ejPercentageTextbox({value:2000});
		* // enable the editors
		* $("#numeric").ejNumericTextbox("disable");
		* $("#currency").ejCurrencyTextbox("disable");
		* $("#percentage").ejPercentageTextbox("disable");		
		* &lt;/script&gt;
		* @memberof ejTextBoxes
		* @instance
         */	      
        disable: function () {
            this.model.enabled = false;
            this.element[0].disabled = true;
            this.element.attr("disabled", "disabled");
            this.element.addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select").addClass('e-disable').attr({ "aria-disabled": true });
            this.wrapper.find(".e-select span.e-icon.e-arrow").addClass('e-disable');
        },
		
		/**
        * To get value from corresponding editors 		
		* @return jQuery
		* @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:20});
		* $("#currency").ejCurrencyTextbox({value:500});
		* $("#percentage").ejPercentageTextbox({value:1000});
		* // Create Editors
		* var numObj = $("#numeric").data("ejNumericTextbox");
		* var curObj = $("#currency").data("ejCurrencyTextbox");
		* var perObj = $("#percentage").data("ejPercentageTextbox");
		* numObj.getValue(); // get value from numericTextbox
		* curObj.getValue(); // get value from currencyTextbox
		* perObj.getValue(); // get value from percentagTextbox
		* &lt;/script&gt;
		 @example 
		* &lt;input id="numeric" type="text" /&gt; <br> 
		* &lt;input id="currency" type="text" /&gt; <br> 
		* &lt;input id="percentage" type="text" /&gt; <br> 
		* &lt;script&gt;
		* $("#numeric").ejNumericTextbox({value:20});
		* $("#currency").ejCurrencyTextbox({value:500});
		* $("#percentage").ejPercentageTextbox({value:1000});
		* // get value from editors
		* $("#numeric").ejNumericTextbox("getValue");
		* $("#currency").ejCurrencyTextbox("getValue");
		* $("#percentage").ejPercentageTextbox("getValue");		
		* &lt;/script&gt;
		* @memberof ejTextBoxes
		* @instance
         */	      
        getValue: function () {
            return this.model.value == null ? "" : this.model.value;
        },
        // -----------------------------------wire and unwire events and handlers function----------------------------------//
		
		/**
         * Wiring the events to editors control		
		 * @private
         */	
        _wireEvents: function () {
            this._on(this.element, 'focus', this._focusIn);
            this._on(this.element, 'blur', this._focusOut);
            this._on(this.element, 'keydown', this._keyDown);
            this._on(this.element, "keyup", this._keyUp);
            this._on(this.element, 'mousewheel', this._mouseWheel);
            this._on(this.element, 'DOMMouseScroll', this._mouseWheel);
        },
		/**
         * Wiring the events to editors spinbutton		
		 * @private
         */	
        _bindSpinEvents: function () {
            this._on(this.spinUp, "mousedown", this._spinUpClick);
            this._on(this.spinDown, "mousedown", this._spinDownClick);
            this._on(this.spinUp, "mouseup", this._spinUpClick);
            this._on(this.spinDown, "mouseup", this._spinDownClick);
        },
		/**
         * unWiring the events from editors spinbutton		
		 * @private
         */	
        _unbindSpinEvents: function () {
            this._off(this.spinUp, "mousedown", this._spinUpClick);
            this._off(this.spinDown, "mousedown", this._spinDownClick);
            this._off(this.spinUp, "mouseup", this._spinUpClick);
            this._off(this.spinDown, "mouseup", this._spinDownClick);
        },
		 /**
         * Section For handle the spin button over mouse up click event
		 * @private
         */	
        _spinUpClick: function (event) {
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this._on(this.spinUp, 'mouseleave', this._mouseUpClick);
            this.spinUp.addClass("e-active");
            var self = this;
            if (event.type == "mouseup") {
                this._incrementValue(event);
                this.spinUp.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown") {
                if (!this._focused) this.element[0].focus();
                this._timeout = setInterval(function () { self._incrementValue(event); }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },
		 /**
         * Section For handle the spin button over mouse down click event
		 * @private
         */	
        _spinDownClick: function (event) {
            var self = this;
            event.preventDefault();
            clearTimeout(this._timeout);
            if (!this.model.enabled || this.model.readOnly) return;
            this._on(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.addClass("e-active");
            if (event.type == "mouseup") {
                this._decrementValue(event);
                this.spinDown.removeClass("e-active");
                this._off($(document), 'mouseup', this._mouseUpClick);
            }
            else if (event.type == "mousedown") {
                if (!this._focused) this.element[0].focus();
                this._timeout = setInterval(function () { self._decrementValue(event); }, 150);
                this._on($(document), 'mouseup', this._mouseUpClick);
            }
        },
		/**
         * Section For handle the mouse up click event
		 * @private
         */	
        _mouseUpClick: function (event) {
            event.stopPropagation();
            clearTimeout(this._timeout);
            this._off(this.spinUp, 'mouseleave', this._mouseUpClick);
            this._off(this.spinDown, 'mouseleave', this._mouseUpClick);
            this.spinDown.removeClass("e-active");
            this.spinUp.removeClass("e-active");
        },
		/**
         * Section For handle the mouse wheel event
		 * @private
         */	
        _mouseWheel: function (event) {
            event.preventDefault();
            if (!this._focused) this.element[0].focus();
			if (!this.model.enabled || this.model.readOnly) return;
            var delta;
            var rawEvent = event.originalEvent;
            if (rawEvent.wheelDelta) {
                // IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
                delta = rawEvent.wheelDelta / 120;
                // In Opera, value is negated.
                //if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
            }
            else if (rawEvent.detail) {
                // Firefox uses detail property, which is a multiple of 3.
                delta = -rawEvent.detail / 3;
            }
            if (delta > 0)
                this._incrementValue(event);
            else if (delta < 0)
                this._decrementValue(event);
            this._cancelEvent(event);
        },
		
		/**
         * Section For handle number value from editors
		 * @private
         */	
        _numberValue: function () {
            var value = this._textBox.value;
            if (this.sfType === "ej.PercentageTextbox") {
                value = value.split(this._percentSymbol)[0];
            }
            else if (this.sfType === "ej.CurrencyTextbox") {
                var temp = value.split(this._currencySymbol)[1];
                value = temp ? temp.replace(")", "") : value;
            }
            return value;
        },
		/**
         * Section For handle the focus in event
		 * @private
         */	
        _focusIn: function (event) {
            this._focused = true;
            this.wrapper.addClass("e-focus");
            // this.element.addClass("e-focus");
            if (this.model.readOnly)
                return;
            this.wrapper.removeClass('e-error');
            if (this._textBox.value == this.model.watermarkText) {
                this._textBox.value = "";
                if (this.element.hasClass("e-watermark")) this._wipeWaterMark();
            }
            if (!this._error) {
                if (this._textBox.value != "")
                    this._textBox.value = this._numberValue();
                this._setSelectionRange(0, this._textBox.value.length);
            }
            this._trigger("focusIn",{value: this.model.value });
        },
		/**
         * Section For handle the focus out event
		 * @private
         */	
        _focusOut: function (event) {
            this._focused = false;
            this.wrapper.removeClass("e-focus");
            if (!this._error) {
                if (this._textBox.value != "" && this._textBox.value != this.model.watermarkText) {
                    if (parseFloat(this._textBox.value) < this.model.minValue) {
                        if (this.model.enableStrictMode == false)
                            this._textBox.value = this.model.minValue.toFixed(this.model.decimalPlaces);
                        else
                            this.isValidState = false
                    }
                    else if (parseFloat(this._textBox.value) > this.model.maxValue) {
                        if (this.model.enableStrictMode == false)
                            this._textBox.value = this.model.maxValue.toFixed(this.model.decimalPlaces);
                        else
                            this.isValidState = false;
                    }
                    if (this.sfType === "ej.NumericTextbox")
                        this.model.value = Globalize.parseFloat(this._textBox.value, this.model.locale);
                    else if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
                        var editorvalue = this._textBox.value, value = editorvalue;
                        if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.percent.symbol) > -1)
                            value = editorvalue.substring(0, editorvalue.length - 1);
                        else if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.currency.symbol) > -1)
                            value = editorvalue.substring(1);
                        this.model.value = Globalize.parseFloat(value, this.model.locale);
                    }
                    if (isNaN(this.model.value) && !this.model.value) {
                        this.model.value = "";
                        this.isValidState = false;
                    }
                    this._localizedFormat();
                    this._checkErrorClass();
                }
                else {
                    if (this._textBox.value == "" && this.model.watermarkText == "")
                        this._textBox.value = "";
                    else if (this._textBox.value == "" && this.model.watermarkText != "")
                        this._setWaterMark();
                    if (this._textBox.value != "") {
                        if (this._textBox.value == this.model.watermarkText)
                            this.model.value = "";
                        else
                            this._setValue(this._textBox.value);
                    }
                }
                if (this.model.value == "" || this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) this.isValidState = true;
                else if (this.model.enableStrictMode) this.isValidState = false;
                this._keyUp();
                this._trigger("focusOut", { value: this.model.value });
            }
            this._checkErrorClass();
        },
		/**
         * Section For handle the cancel event
		 * @private
         */	
        _cancelEvent: function (e) {
            e.cancelBubble = true;
            e.returnValue = false;
            e.stopPropagation();
            e.preventDefault();
            return false;
        },
		/**
         * Section For handle the increment value in editors.
		 * @private
         */	
        /* Increment the Value */
        _incrementValue: function (e) {
            this.isValidState = true;
            if (this._textBox.value != this.model.watermarkText || this._textBox.value == "") {
                if (this._textBox.value == "")
                    this._textBox.value = this._startValue;
                if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
                    var editorvalue = this._textBox.value, value = editorvalue;
                    if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.percent.symbol) > -1)
                        value = editorvalue.substring(0, editorvalue.length - 1);
                    else if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.currency.symbol) > -1)
                        value = editorvalue.substring(1);
                    this.model.value = Globalize.parseFloat(value, this.model.locale);
                }
                else if (this.sfType == "ej.NumericTextbox")
                    this.model.value = Globalize.parseFloat(this._textBox.value, this.model.locale);

                if (isNaN(this.model.value) && !this.model.value) {
                    this.model.value = this._startValue;
                }
                if (this.model.enableStrictMode == true) {
                    if (this.model.value > this.model.minValue && this.model.value > this.model.maxValue) {
                        this.model.value = this.model.maxValue;
                        this._setValue(this.model.value);
                        this._wipeWaterMark();
                    }
                    else if (this.model.value < this.model.minValue && this.model.value < this.model.maxValue) {
                        this.model.value = this.model.minValue;
                        this._setValue(this.model.value);
                        this._wipeWaterMark();
                    }
                    else
                        if (this.model.value >= this.model.minValue && this.model.value < this.model.maxValue) {
                            this.model.value = this.model.value + this.model.incrementStep;
                            if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                                this._setValue(this.model.value);
                                this._wipeWaterMark();
                            }
                        };
                }
                else
                    if (this.model.value >= this.model.minValue && this.model.value < this.model.maxValue) {
                        this.model.value = this.model.value + this.model.incrementStep;
                        if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                            this._setValue(this.model.value);
                            this._wipeWaterMark();
                        }
                    }
            }
            this._checkErrorClass();
        },
		/**
         * Section For handle the decrement value in editors.
		 * @private
         */	
        /* Decrement the Value */
        _decrementValue: function (e) {
            this.isValidState = true;
            var itemValue = this.model.value;
            if (this._textBox.value != this.model.watermarkText || this._textBox.value == "") {
                if (this._textBox.value == "")
                    this._textBox.value = this._startValue;
                else
                    if (this._textBox.value.indexOf(" ") >= 0)
                        this._textBox.value = this._textBox.value.replace(" ", "");
                if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
                    var editorvalue = this._textBox.value, value = editorvalue;
                    if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.percent.symbol) > -1)
                        value = editorvalue.substring(0, editorvalue.length - 1);
                    else if (editorvalue.indexOf(Globalize.culture(this.model.locale).numberFormat.currency.symbol) > -1)
                        value = editorvalue.substring(1);
                    this.model.value = Globalize.parseFloat(value, this.model.locale);
                }
                else if (this.sfType == "ej.NumericTextbox")
                    this.model.value = Globalize.parseFloat(this._textBox.value, this.model.locale);

                if (isNaN(this.model.value) && !this.model.value) {
                    this.model.value = this._startValue;
                }
                if (this.model.enableStrictMode == true) {
                    if (this.model.value >= this.model.minValue && this.model.value > this.model.maxValue) {
                        this.model.value = this.model.maxValue;
                        this._setValue(this.model.value);
                        this._wipeWaterMark();
                    }
                    else if (this.model.value < this.model.minValue && this.model.value <= this.model.maxValue) {
                        this.model.value = this.model.minValue;
                        this._setValue(this.model.value);
                        this._wipeWaterMark();
                    }
                    else if (this.model.value > this.model.minValue && this.model.value <= this.model.maxValue) {
                        this.model.value = this.model.value - this.model.incrementStep;
                        if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                            this._setValue(this.model.value);
                            this._wipeWaterMark();
                        }
                    }
                }
                else
                    if (this.model.value > this.model.minValue && this.model.value <= this.model.maxValue) {
                        this.model.value = this.model.value - this.model.incrementStep;
                        if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
                            this._setValue(this.model.value);
                            this._wipeWaterMark();
                        }
                    }
            }
            this._checkErrorClass();
        },
		/**
         * Section For handle the validate decimal value
		 * @private
         */	
        _validateDecimal: function (e) {
            if (window.navigator.appName == "Microsoft Internet Explorer") {
                if (e.originalEvent.char == Globalize.culture(this.model.locale).numberFormat["."])
                    return true;
            }
            else {
                var char = String.fromCharCode(e.keyCode);
                if (e.keyCode == 188) char = ",";
                else if (e.keyCode == 190 || e.keyCode == 110) char = ".";
                if (Globalize.culture(this.model.locale).numberFormat["."].charCodeAt(0) == char.charCodeAt(0))
                    return true;
            }
            return false;
        },
		/**
         * Section For handle the keycodes
		 * @private
         */	
        _allowKeyCodes: function (e) {
            var keys = new Array(38, 40, 35, 36, 109, 189, 46, 8, 127, 37, 39, 190, 9, 13, 16, 17, 18, 20, 110, 173, 86, 88, 67);
            for (var i = 0; i < keys.length; i++) {
                if (e.keyCode == keys[i] || (this._validateDecimal(e) && this.model.decimalPlaces != 0))
                    return true;
            }
            return false;
        },
		/**
         * Section For raise the event.
		 * @private
         */	
        _raiseChangeEvent: function () {
            var currVal = this._numberValue();
            if (!ej.isNullOrUndefined(this._preVal) && (this._preVal.toString() != currVal)) {
                this._preVal = currVal;
                this.model.value = this._checkNumValue(this._preVal);
                this._hiddenInput.val(this.model.value);
                this.element.attr('aria-valuenow', this.model.value);
                this._trigger("change", { value: this.model.value });
            }
        },
		/**
         * Section For handle the key up event
		 * @private
         */	
        _keyUp: function () {
            this._raiseChangeEvent();
        },
		/**
         * Section For handle the key down event
		 * @private
         */	
        _keyDown: function (e) {
            if (this.model.readOnly) return;
		    this._CurrentCultureInfo = JSON.parse(JSON.stringify(Globalize.culture()));
            var cursor, cancelEvent, beforeCursor, afterCursor, sel;
            if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || this._allowKeyCodes(e)) {
                if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 118 || e.keyCode == 67 || e.keyCode == 88)))
                    return true;
				if ((((e.shiftKey == true || e.ctrlKey == true) && (e.keyCode != 9 && e.keyCode != 17 && e.keyCode != 86 && e.keyCode != 67)) && !(this._CurrentCultureInfo.language == "cs")) || (e.keyCode == 67 || e.keyCode == 86 || e.keyCode == 88) || ((this._CurrentCultureInfo.language == "cs") && (e.shiftKey == false))) {//Prevent Shift + Tab event                    
                    this._keypressFlag = false;
                    this._cancelEvent(e);
                    return false;
                }

                if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode == 110) {//Numbers from 0 to 9 in keyboard and numpad (110 for decimal)
                    this._wipeWaterMark();
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.toString().substring(0, cursor);
                    afterCursor = this._textBox.value.toString().substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    // For Numpad issue
                    if (e.keyCode >= 96 && e.keyCode <= 105)
                        e.keyCode -= 48;
                    if (sel.length == 0)
                    // if (beforeCursor.length != 0 && String.fromCharCode(e.keyCode) == 0)                           
                        this.model.value = Globalize.parseFloat((beforeCursor + String.fromCharCode(e.keyCode) + afterCursor), this.model.locale);
                    else
                        this.model.value = Globalize.parseFloat((beforeCursor.substring(0, beforeCursor.length - sel.length) + String.fromCharCode(e.keyCode) + afterCursor), this.model.locale);
                    if (this._validateOnType) {
                        var decSep = Globalize.culture(this.model.locale).numberFormat["."];
                        var temp = this.model.value.toString();
                        var tempIndex = temp.indexOf(decSep);
                        var value = this.model.value;
                        var replaceminVal = this.model.minValue.toFixed(this.model.decimalPlaces);
                        var replacemaxVal = this.model.maxValue.toFixed(this.model.decimalPlaces);
                        var exp = false;
                        if (replaceminVal.toString().indexOf("e") > 0 || replacemaxVal.toString().indexOf("e") > 0)
                            exp = true;
                        if (!exp) {
                            if (decSep != ".") {
                                temp = this._textBox.value.toString();
                                if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                    replaceminVal = this.model.minValue.toString().replace(/["."]/g, decSep);
                                if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                    replacemaxVal = this.model.maxValue.toString().replace(/["."]/g, decSep);
                            }
                            if (replaceminVal.toString().indexOf(decSep) > 0)
                                minVal = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                            else
                                minVal = this.model.minValue;
                            if (replacemaxVal.toString().indexOf(decSep) > 0)
                                maxVal = Number(replacemaxVal.toString().toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                            else
                                maxVal = this.model.maxValue;
                            if (tempIndex > 0) {
                                value = Number(temp.substring(temp.indexOf(decSep) + 1, temp.toString().length));
                                if (replaceminVal.toString().indexOf(decSep) > 0)
                                    minVal = Number(replaceminVal.toString().substring(replaceminVal.toString().indexOf(decSep) + 1, replaceminVal.toString().length));
                                else
                                    minVal = 0;
                                if (replacemaxVal.toString().indexOf(decSep) > 0)
                                    maxVal = Number(replacemaxVal.toString().substring(replacemaxVal.toString().indexOf(decSep) + 1, replacemaxVal.toString().length));
                                else
                                    maxVal = 0;
                                var valb4Dec = Number(temp.substring(0, temp.indexOf(decSep)));
                                var minValb4Dec = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
                                var maxValb4Dec = Number(replacemaxVal.toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
                                if (!this._validateValue(value, minVal, maxVal, true, valb4Dec, minValb4Dec, maxValb4Dec))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                            else {
                                if (!this._validateValue(value, minVal, maxVal, false))
                                    cancelEvent = true;
                                else
                                    cancelEvent = false;
                            }
                        }
                        else if (this.model.decimalPlaces != 0) {
                            var afterdeci = (this._textBox.value).split(".")[1];
                            if (temp.indexOf(decSep) > 0 || (Number(temp) < Number(replaceminVal) || Number(temp) > Number(replacemaxVal))) {
                                if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
                                    cancelEvent = true;
                                else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                                else cancelEvent = false;
                            }
                            else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
                            else
                                cancelEvent = false;
                        }
                        else
                            cancelEvent = false;
                        if (cancelEvent) {
                            if (sel.length == 0)
                                this.model.value = parseFloat(beforeCursor + afterCursor);
                            else
                                this.model.value = parseFloat(beforeCursor.substring(0, beforeCursor.length - sel.length) + afterCursor);
                            this._keypressFlag = false;
                            this._cancelEvent(e);
                            return false;
                        }
                    }
                    this._raiseChangeEvent();
                }
                if (e.keyCode == 38 && this._allowkeyboard)//Up Arrow  
                {
                    this._incrementValue(e);
                    this._cancelEvent(e);
                }

                if (e.keyCode == 40 && this._allowkeyboard)//Down Arrow 
                {
                    this._decrementValue(e);
                    this._cancelEvent(e);

                }
                if (e.keyCode == 8) {//BackSpace Key
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    if (sel.length == 0)
                        this.model.value = beforeCursor.substring(0, beforeCursor.length - 1) + afterCursor;
                    else
                        this.model.value = beforeCursor.substring(0, beforeCursor.length - sel.length) + afterCursor;

                    this._raiseChangeEvent();
                }

                if (e.keyCode == 46 || e.keyCode == 127) {//Delete key
                    cursor = this._caretPosition();
                    beforeCursor = this._textBox.value.substring(0, cursor);
                    afterCursor = this._textBox.value.substring(cursor);
                    sel = this._getSelection(this._textBox.value);
                    if (sel.length == 0)
                        this.model.value = beforeCursor + afterCursor.substring(1, afterCursor.length);
                    else
                        this.model.value = beforeCursor.substring(0, beforeCursor.length - sel.length) + afterCursor.substring(0, afterCursor.length);
                    this._raiseChangeEvent();
                }
                if (e.keyCode == 190 && this.model.decimalPlaces != 0 && e.keyCode != 46)//'.' char key press
                {
                    var decChar = Globalize.culture(this.model.locale).numberFormat["."];
                    var minVal, maxVal;
                    var dotSplit = this._textBox.value.split(decChar);
                    if (dotSplit[1] == undefined) {
                        var curPosition = this._caretPosition();
                        var strBeforeCursor = dotSplit[0].substring(0, curPosition);
                        var strAfterCursor = dotSplit[0].substring(curPosition);
                        if (this.model.minValue.toString().indexOf("e") > 0 || this.model.maxValue.toString().indexOf("e") > 0)
                            exp = true;
                        if (this._validateOnType && !exp) {
                            if (this.model.minValue.toString().match(new RegExp(".", "g")))
                                minVal = this.model.minValue.toString().replace(/["."]/g, decChar);
                            if (this.model.maxValue.toString().match(new RegExp(".", "g")))
                                maxVal = this.model.maxValue.toString().replace(/["."]/g, decChar);
                            if (minVal.indexOf(decChar) > 0)
                                minVal = Number(minVal.substring(0, minVal.indexOf(decChar)));
                            else
                                minVal = Number(minVal);
                            if (maxVal.indexOf(decChar) > 0)
                                maxVal = Number(maxVal.substring(0, maxVal.indexOf(decChar)));
                            else
                                maxVal = Number(maxVal);
                            if (this._validateValue(this.model.value, minVal, maxVal, "DecimalKeyPressed"))
                                this.model.value = strBeforeCursor + decChar + strAfterCursor;
                            else {
                                this._keypressFlag = false;
                                this._cancelEvent(e);
                                return false;
                            }
                        }
                        else
                            this.model.value = strBeforeCursor + decChar + strAfterCursor;
                        this._setSelectionRange(this.model.value.length, this.model.value.length);
                        this._textBox.value = this.model.value;
                    } else {
                        this.model.value = this._textBox.value;
                    }
                    this._cancelEvent(e);
                } else if (e.keyCode == 190 || e.keyCode == 110) {
                    this._cancelEvent(e);
                }
                if (e.keyCode == 109 || e.keyCode == 189 || e.keyCode == 173)//'-' char key press.
                {
                    if ((this._caretPosition() != 0 && this._getSelection(this._removeFormats(this._textBox.value)) != this.model.value) || this.model.minValue >= 0 || (this._textBox.value.toString().match(new RegExp("-", "g")) && this._getSelection(this._textBox.value) == ""))
                        this._cancelEvent(e);

                    else if (this._getSelection() == this.model.value)
                        this.model.value = null;
                }
            }
            //For watermark issue while press ctrl+z
            else if (e.keyCode != 27 && !e.ctrlKey || (e.ctrlKey && e.keyCode == 90 && $.trim(this._textBox.value) == "")) {
                this._keypressFlag = false;
                this._cancelEvent(e);
            }
        }
    });

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
	/**
    * @namespace ej
	* @classdesc Custom Design for Html ejMaskEdit Textbox control.
	* @class ejMaskEdit
	* @requires jQuery
	* @requires ej.core.js
	* @requires jquery.globalize.js
    * @requires globalize.cultures.min.js
	* @requires ej.maskedit.js
	* @example 	
	* &lt;input id="mask" type="text" /&gt; <br> 
	* &lt;script&gt; <br>
	* // Create Slider <br>
    * $('#mask').ejMaskEdit(); <br>	
	* &lt;/script&gt; <br>
	*/    
    ej.widget("ejMaskEdit", "ej.MaskEdit", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _setFirst: false,
        type: "editor",

        // default model
        defaults: {
			/**		
			* Specifies the maskFormat string for the maskedit textbox control.	
			* @default null
			* @type {string}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
	        * &lt;script&gt; 
			* //To set maskFormat API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999"});					 
			* &lt;/script&gt; 
			* @memberof ejMaskEdit
			* @instance
			*/		
            maskFormat: "",
			/**		
			* Specifies the value string for the maskedit textbox control.	
			* @default null
			* @type {string}
			* @example
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;			
			* //To set value API  during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",value: "459978"});					 
			* &lt;/script&gt; 
			* @memberof ejMaskEdit
			* @instance
			*/		
            value: "",
			/**		
			* Specifies the watermark text string for the maskedit textbox control.	
			* @default null
			* @type {string}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt; 
			* //To set watermarkText API value during initialization  
			* 	$("#mask").ejMaskEdit({ watermarkText: "Enter value"});					
		    * &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/		
            watermarkText: "",
			/**		
			* Specifies the height for the maskedit textbox control.	
			* @default 28pixel
			* @type {string}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt; 
			* //To set height API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",height: "28px"});					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/		
            height: "",
			/**		
			* Specifies the width for the maskedit textbox control.	
			* @default 143pixel
			* @type {string}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set width API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",width: 143});					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	
            width: "",
			/**		
			* Specifies the showError until correct value entered in the maskedit textbox control.	
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set showError API value during initialization  
			* 	$("#mask").ejMaskEdit({maskFormat: "99-9999", showError: true});					 
		    * &lt;/script&gt; 
			* @memberof ejMaskEdit
			* @instance
			*/	
            showError: false,
			/**		
			* Specify the cssClass to maskedit textbox control to achieve custom theme.
			* @default null
			* @type {string}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set cssClass API value during initialization  
			* 	$("#mask").ejMaskEdit({maskFormat: "99-9999",cssClass: "gradient-lime"});					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	
            cssClass: "",
			/**		
			* Specify the custom character allowed to entered in maskedit textbox control.
			* @default null
			* @type {string}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt; 
			* //To set customCharacter API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",customCharacter: "gradient-lime"});					
			* &lt;/script&gt; 
			* @memberof ejMaskEdit
			* @instance
			*/	
            customCharacter: null,
			/**		
			* Specify the inputMode for maskedit textbox control. See {@link InputMode}
			* @default ej.InputMode.Text 
			* @type {enum}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set inputMode API value during initialization  
			* 	$("#mask").ejMaskEdit({maskFormat: "99-9999",inputMode: ej.InputMode.Password });					 
			* &lt;/script&gt; 
			* @memberof ejMaskEdit
			* @instance
			*/	
            inputMode: "text",
			/**		
			* Specify the readOnly for maskedit textbox control.
			* @default false 
			* @type {boolean}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt; 
			* //To set readOnly API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",value:"456789",readOnly: true });					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/
            readOnly: false,
			/**		
			* Specify the text alignment for maskedit textbox control.
			* @default "left" 
			* @type {enum}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set textAlign API value during initialization  
			* 	$("#mask").ejMaskEdit({maskFormat: "99-9999",textAlign: "left" });					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	
            textAlign: ej.TextAlign.Left,			
			/**		
			* Specify the hidePromptOnLeave for maskedit textbox control to hide the mask on focus out.
			* @default false 
			* @type {boolean}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set hidePromptOnLeave API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",hidePromptOnLeave: true });					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	
            hidePromptOnLeave: false,
			/**		
			* Specify the rounded corner for maskedit textbox control.
			* @default false 
			* @type {boolean}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set showRoundedCorner API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",showRoundedCorner:true});					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	            
            showRoundedCorner: false,
			/**		
			* Specify the enablePersistence to mask edit textbox control to save current model value to browser cookies for state maintains.
			* @default false 
			* @type {boolean}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set enablePersistence API value during initialization  
			* 	$("#mask").ejMaskEdit({ enablePersistence: "left" });					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	  
            enablePersistence: false,
			/**		
			* Specify the state of the maskedit textbox control.
			* @default true 
			* @type {boolean}
			* @example 
			* &lt;input id="mask" type="text" /&gt; <br> 
			* &lt;script&gt;
			* //To set enabled API value during initialization  
			* 	$("#mask").ejMaskEdit({ maskFormat: "99-9999",enabled: true });					 
			* &lt;/script&gt;
			* @memberof ejMaskEdit
			* @instance
			*/	  
            enabled: true,
			/**     
			 * Fires when keydown in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#keydown 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt;
			 * //keydown event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "99-9999",
             *    keydown: function (args) {}
             * }); 
			 * &lt;/script&gt;			 
			 * @memberof ejMaskEdit
			 * @instance
			 */
			keydown: null,
			/**     
			 * Fires when keyup in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#keyup 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt;		 
			 * //keyup event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "99-99-9999",
             *    keyup: function (args) {}
             * });      
			 * &lt;/script&gt;
			 * @memberof ejMaskEdit
			 * @instance
			 */
            keyup: null,
			/**     
			 * Fires when keypress in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#keyPress 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt;
			 * //keyPress event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "99-99-9999",
             *    keyPress: function (args) {}
             * });      
			 * &lt;/script&gt;
			 * @memberof ejMaskEdit
			 * @instance
			 */
            keyPress: null,
			/**     
			 * Fires when value changed in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#change 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt;
			 * //change event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "99999 - 9999",
             *    change: function (args) {}
             * });    
			 * &lt;/script&gt;			 
			 * @memberof ejMaskEdit
			 * @instance
			 */
            change: null,
			/**     
			 * Fires when mouse over in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#mouseover 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt; 
			 * //mouseover event for toggle button
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "$99999",
             *    mouseover: function (args) {}
             * });   
			 * &lt;/script&gt;			 
			 * @memberof ejMaskEdit
			 * @instance
			 */
            mouseover: null,
			/**     
			 * Fires when mouse out in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#mouseout 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt; 
			 * //mouseout event for toggle button
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "***-**-****",
             *    mouseout: function (args) {}
             * });    
			 * &lt;/script&gt;			 
			 * @memberof ejMaskEdit
			 * @instance
			 */
            mouseout: null,
			/**     
			 * Fires when focused in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#focusIn 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt;
			 * //focusIn event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "aa-99-99-a",
             *    focusIn: function (args) {}
             * });
			 * &lt;/script&gt;			 
			 * @memberof ejMaskEdit
			 * @instance
			 */
            focusIn: null,
			/**     
			 * Fires when focused out in mask edit textbox control.
			 * @event
			 * @name ejMaskEdit#focusOut 	
			 * @param {Object} argument Event parameters from maskedit textbox control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.			 
			 * @param {object}  argument.model returns the maskedit model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the maskedit value
			 * @param {string}  argument.unmaskedValue  returns unstripped value in maskedit textbox control.
			 * @example 
			 * &lt;input id="mask" type="text" /&gt; <br> 
			 * &lt;script&gt;
			 * //focusOut event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "(999)999-9999",
             *    focusOut: function (args) {}
             * }); 
			 * &lt;/script&gt;			 
			 * @memberof ejMaskEdit
			 * @instance
			 */
            focusOut: null,
			  /**     
          * Fires after MaskEdit control is created.
          * @event
          * @name ejMaskEdit#create 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the MaskEdit model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input id="mask" type="text" /&gt; <br> 
		  * &lt;script&gt;
			 * //create event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "(999)999-9999",
             *    create: function (args) {}
             * }); 
		  * &lt;/script&gt;		 
          * @memberof ejMaskEdit
          * @instance
          */
            create: null,
			 /**     
          * Fires when the MaskEdit is destroyed successfully.
          * @event
          * @name ejMaskEdit#destroy 	
          * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
          * @param {object}  argument.model returns the MaskEdit model
          * @param {string}  argument.type returns the name of the event
          * @example 
		  * &lt;input id="mask" type="text" /&gt; <br> 
		  * &lt;script&gt;
			 * //destroy event for mask edit textbox control
             * $("#mask").ejMaskEdit({
			 *    maskFormat: "(999)999-9999",
             *    destroy: function (args) {}
             * }); 
		  * &lt;/script&gt;		 
          * @memberof ejMaskEdit
          * @instance
          */
            destroy: null
            
        },
		/**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            maskFormat: "string",
            showError: "boolean",
            enabled: "boolean",
            customCharacter: "string",
            cssClass: "string",
            watermarkText: "string",
            showRoundedCorner: "boolean",
            inputMode: "enum",
            textAlign: "enum",
            hidePromptOnLeave: "boolean",
            readOnly: "boolean"
        },
		/**
         * To configure the properties at runtime using SetModel		
		 * @private
         */
        _setModel: function (jsondata) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(jsondata["enabled"])) return false;
            for (var key in jsondata) {
                switch (key) {
                    case "value": this._setValue(jsondata[key]); jsondata[key] = this.get_UnstrippedValue(); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "watermarkText": this.model.watermarkText = jsondata[key]; this._setWaterMark(); break;
                    case "showRoundedCorner": this._roundedCorner(jsondata[key]); break;
                    case "textAlign": this._setTextAlign(jsondata[key]); break;
                    case "inputMode": this._setInputMode(jsondata[key]); break;
                    case "maskFormat": this._setMask(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "readOnly": this._setReadOnly(jsondata[key]); break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                }
            }
        },
        observables: ["value"],
        // all events bound using this._on will be unbind automatically
		/**
         * To configure destroy of the maskedit textbox control.		
		 * @private
         */	
        _destroy: function () {
            if (this.model.name) this.element.removeAttr("name");
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            if (this.model.textAlign) this.element.css("text-align", "");
            this.element.val("").removeClass(' e-mask e-input e-corner-all e-disable e-watermark').empty();
        },
		/**
         * To initialize the maskedit textbox control.		
		 * @private
         */
        // constructor function
        _init: function () {
            if (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) {
                this._setValues();
                this._renderControl();
                this._initObjects();
                this._wireEvents();
            } else {
                this._destroy();
                return false;
            }
        },
		/**
         * To enable or disable the state of the maskedit control.		
		 * @private
         */	
        _controlStatus: function (value) {
            //disable status
            value != true ? this.disable() : this.enable();
        },
		/**
         * To configure value for maskedit textbox control.		
		 * @private
         */	
        _setValues: function () {
            this._tempMask = null;
            this._unStrippedMask = null;
            //Predefined character definitions
            this._charMap = {
                '9': "[0-9]",
                'a': "[A-Za-z]",
                '*': "[A-Za-z0-9]",
                'A': "[A-Za-z]",
                'N': "[0-9]",
                '<': "",
                '>': "",
                'C': "",
                '?': "(.)",
                '$': "[A-Za-z ]"
            };
        },
		/**
         * Render Section For maskedit textbox control		
		 * @private
         */	
        _renderControl: function () {
            this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
			if(this.element.attr("name") == null)
                this.element.attr({'name': this.model.name});
            this.wrapper = ej.buildTag("span.e-mask e-widget " + this.model.cssClass);
            this.innerWrapper = ej.buildTag("span.e-in-wrap e-box");
            this.wrapper.append(this.innerWrapper).insertBefore(this.element);
            this.innerWrapper.append(this.element);
            this._hiddenInput = ej.buildTag("input#" + this._id + "_hidden", "", {}, { type: "hidden" }).insertBefore(this.element);
            this._hiddenInput.attr("name", this.model.name);
            this.model.value = this.model.value === "" ? this.element[0].value :this.model.value;
            this.element.attr({ 'aria-invalid': false, 'value': this.model.value }).addClass('e-input');
            this._setInputMode(this.model.inputMode);
            this._setWidth(this.model.width);
            this._setHeight(this.model.height);
            this._roundedCorner(this.model.showRoundedCorner);
            this._setTextAlign(this.model.textAlign);
            this._setReadOnly(this.model.readOnly);
            this._controlStatus(this.model.enabled);
            this.previousValue = this.model.value;
        },
		/**
         * To initialize the maskedit textbox control properties.		
		 * @private
         */
        _initObjects: function () {
            this._textbox = this.element[0];
            this._keypressFlag = 0;
            this._selectedTextKeyDown = 0;
            // KeyDown trace [ 0 - None, 1 - BackSpace, 2 - Delete]
            this._keydownFlag = 0;
            // Length of the Mask
            this._maskLength = this.model.maskFormat.length;
            //Replacing all [9?$CANa*] to '_'
            this._maskModel = this.model.maskFormat.replace(/[9?$CANa*]/g, '_');
            this._validatedValue = this._maskModel;
            if (this.model.inputMode != "password") {
				this._setValue(this.model.value);
                // Setting WaterMark Text        
                this._setWaterMark();
            }

            //Check If showError Flag is true add the css class
            if (this.model.showError) {
                this.element.addClass("e-error").attr('aria-invalid',"true");
            }
        },

        //----------------private function--------------------------------------//
		/**
		 * To configure width of the maskedit textbox control.
		 * @private
         */	
        _setWidth: function (value) {
            this.wrapper.width(value);
        },
		/**
		 * To configure height of the maskedit textbox control.
		 * @private
         */
        _setHeight: function (value) {
            this.wrapper.height(value);
        },
		/**
         * To enable or disable the rounded corner behaviour. 		
		 * @private
         */	
        _roundedCorner: function (value) {
            if (value) {
                this.wrapper.removeClass('e-corner-all').addClass('e-corner-all');
            }
            else if (this.wrapper.hasClass('e-corner-all')) {
                this.wrapper.removeClass('e-corner-all');
            }
        },
		/**
		 * To configure text alignment of the maskedit textbox control.
		 * @private
         */
        _setTextAlign: function (align) {
            if (align == "right") {                
                this.wrapper.addClass('e-rtl');
            }
            else {
                this.wrapper.removeClass('e-rtl');
            }
        },
		/**
		 * To configure input mode for maskedit textbox control.
		 * @private
         */
        _setInputMode: function (type) {
            this.element.attr('type', type);
        },
		/**
         * To enable or disable the readonly behaviour. 		
		 * @private
         */	
        _setReadOnly: function (bool) {
            if (bool) this.element.attr("readonly", true);
            else this.element.removeAttr("readonly");
        },
		/**
         * To configure the custom theme for maskedit textbox control using cssClass property		
		 * @private
         */
        _setSkin: function (skin) {
            this.wrapper.removeClass(this.model.cssClass);
            this.wrapper.addClass(skin);
        },
		/**
         * To configure the watermark text to the maskedit textbox control.
		 * @private
         */
        /* Setting the WaterMark text*/
        _setWaterMark: function () {
            this._maskModel = this.model.maskFormat.replace(/[9?$CANa*]/g, '_');
            if (this.model.watermarkText && (this.model.value == '' || this.model.value == this._maskModel)) {
                this._textbox.value = this.model.watermarkText;
                this.element.addClass("e-watermark");
            } else if (this.model.value == '' && this._maskModel != '') {
                this._textbox.value = this._maskModel;
            }
        },
		/**
         * To remove the watermark text from the maskedit textbox control.
		 * @private
         */
        /* Clearing the WaterMark Text*/
        _removeWaterMark: function () {
            if (this.element.hasClass("e-watermark")) {
                this._textbox.value = this._maskModel;
                this.element.removeClass("e-watermark");
            }
        },
		/**
         * To configure alert when user press wrong key in maskedit textbox control.
		 * @private
         */
        /* Show alert when user press Wrong key*/
        _showAlert: function () {
            var ptr = this;
            this.element.addClass("e-error").attr('aria-invalid',"true").animate({ Opacity: 1 }, 700, null, function () {
                $(ptr._textbox).removeClass("e-error").attr('aria-invalid',"false");
            });
        },
		/**
         * To check whether user entered value in maskedit textbox control.
		 * @private
         */
        /* Validating User's TextBox Value*/
        _validateValue: function () {
            var tempValue = this.model.value;
            var tempModel = this._maskModel;
            var valueIndex = -1;
            // Check if Mask is Empty display the text
            if (this._maskLength == 0) {
                if (this.element.hasClass("e-watermark")) {
                    this.element.removeClass("e-watermark");
                }
                this._textbox.value = tempValue;
                return true;
            }
            else {
                var replacestring = this.model.value.toString();
                tempValue = this.model.value = replacestring.replace(/[\(\)-]/g, "");
            }

            for (var maskIndex = 0; maskIndex < this._maskLength; maskIndex++) {
                if (this._charMap[this.model.maskFormat.charAt(maskIndex)]!=null) {
                    valueIndex++;
                    var charCode = tempValue.charCodeAt(valueIndex);
                    if (this._validateChars(charCode, maskIndex)) {
                        var strBefore = tempModel.substring(0, maskIndex);
                        var strAfter = tempModel.substring(maskIndex);
                        tempModel = strBefore + tempValue.charAt(valueIndex) + strAfter.substr(1, strAfter.length);
                    }
                }
            }
            if (this.element.hasClass("e-watermark")) {
                if (this.model.value) {
                    this.element.removeClass("e-watermark");
                    this._textbox.value = tempModel;
                }
                else
                    this._setWaterMark();
            }
            else {
                if (this.model.value) {
                    this._textbox.value = tempModel;
                }
                else
                    this._textbox.value = this.model.maskFormat.replace(/[9?$CANa*]/g, '_');
            }

        },
		/**
         * To clear selected text in maskedit textbox control.
		 * @private
         */
        /* If it is Selected Text opreation, This Function clears the Selected Text to MaskModel*/
        _selectionText: function (begin, end) {

            var replaceValue = this._maskModel.substring(begin, end);
            this._textbox.value = this._textbox.value.substring(0, begin) + replaceValue + this._textbox.value.substring(end);
            if (this._keydownFlag == 1) {
                this._setCaretPosition(begin);
                return begin;
            }
            else if (this._keydownFlag == 2) {
                this._setCaretPosition(end);
                return end;
            }
            return begin;
        },
		/**
         * To obtained CaretpPosition of the cursor in maskedit textbox control.
		 * @private
         */
        /* Get the CaretPsoition of the cursor, if it selected 1/more text call _selectionText*/
        _caretPosition: function (textbox) {
            //caretPos starts with 0
            var caretPos = 0;

            // Microsoft supports only IE for using document.selection
            if (document.selection) {
                //textbox.focus();
                // Create a Range of selected position
                var selectedRange = document.selection.createRange();
                var selectionLength = selectedRange.text.length;

                // Move selection start to 0 position
                selectedRange.moveStart('character', -textbox.value.length);

                // Get caret position by selection length, becoz now range is from Zero to current focus
                caretPos = selectedRange.text.length - selectionLength;

                if (selectionLength != 0) {
                    caretPos = this._selectionText(caretPos, selectedRange.text.length);
                    this._selectedTextKeyDown = 1;
                }
            }

            // For Firefox
            else if (textbox.selectionStart || textbox.selectionStart == '0') {
                caretPos = textbox.selectionStart;
                if (textbox.selectionStart != textbox.selectionEnd) {
                    if (this._keydownFlag)
                        caretPos = this._selectionText(textbox.selectionStart, textbox.selectionEnd);
                    this._selectedTextKeyDown = 1;
                }
            }

            // Return caret Position
            return (caretPos);
        },
		/**
         * To set the cursor in required position in maskedit textbox control.
		 * @private
         */
        /* Set the curosr at required position in textbox*/
        _setCaretPosition: function (caretPos) {

            //element will have MaskEdit Textbox
            var element = this._textbox;

            //For IE
            if (window.navigator.appName == "Microsoft Internet Explorer") {
                if (element.createTextRange) {
                    var range = element.createTextRange();
                    range.move('character', caretPos);
                    range.select();
                }
            }
            else
            /* For FireFox and Chrome */
                if (element.selectionStart || element.selectionStart == '0') {
                    element.focus();
                    element.setSelectionRange(caretPos, caretPos);
                }
                else
                    element.focus();

        },
		/**
         * To check whether user pressed character with mask format in maskedit textbox control.
		 * @private
         */
        /* Validate the User Pressed Char with the Mask Format*/
        _validateChars: function (keyChar, caretPos) {
            var charmap = this._charMap, match = false;
            var maskChar = this.model.maskFormat.substr(caretPos, 1);
            var customChar = this.model.customCharacter;
            var actualkey = String.fromCharCode(keyChar);
            $.each(charmap, function (key, value) {
                if (maskChar == key) {
                    if (customChar != null) {
                        if (key == "C")
                            value = "[" + customChar + "]";
                        else if (key == "A" || key == "N")
                            value = value.replace(("]"), "") + customChar + "]";
                    }
                    if (actualkey.match(new RegExp(value))) match = true;
                    else match = false;
                }
            });
            return match;
        },
		/**
         * To configure the next valid position on right in maskedit textbox control.
		 * @private
         */
        /* Seek to the next valid position on right*/
        _seekNext: function () {
            var currentPos = this._caretPosition(this._textbox);
            var tempPos = currentPos;
            var seekFlag = true;
            //seeking the focus to next valid position on right of MaskEdit TextBox
            while (seekFlag) {
                if (currentPos >= 0 && currentPos < this._maskLength) {
                    if (this.model.maskFormat.charAt(currentPos) != "C") {
                        if (!this._charMap[this.model.maskFormat.charAt(currentPos)]) {
                            this._setCaretPosition(currentPos);
                            currentPos++;
                        }
                    }
                    if (currentPos != tempPos) {
                        tempPos = currentPos;
                        continue;
                    }
                }
                seekFlag = false;
            }
            return currentPos;
        },
		/**
         * To configure the next valid position on left in maskedit textbox control.
		 * @private
         */
        /* Seek to the next valid position on left*/
        _seekBefore: function (caretPos) {
            var currentPos = this._caretPosition(this._textbox);
            var tempPos = --currentPos;
            var seekFlag = true;

            // Stop Seek when backspace of select more than a char
            if (this._selectedTextKeyDown == 1)
                seekFlag = false;

            //seeking the focus to next valid position on left of MaskEdit TextBox
            while (seekFlag) {
                if (currentPos >= 0 && currentPos < this._maskLength) {
                    if (!this._charMap[this.model.maskFormat.charAt(currentPos)]) {
                        this._setCaretPosition(--currentPos);
                    }
                    if (currentPos != tempPos) {
                        tempPos = currentPos;
                        continue;
                    }
                }
                seekFlag = false;
            }
            return currentPos;
        },
		/**
         * To write the user pressed character in maskedit textbox control.
		 * @private
         */
        /* Write the User Pressed Character*/
        _writeBuffer: function (key, cursorPos) {
            if (cursorPos <= this._maskLength) {
                var input = this._textbox.value;
                if (this._tempMask != null)
                    var tempkey = this._updateCasing(key, cursorPos);
                key = (tempkey == undefined) ? key : tempkey;
                var strBeforeCursor = input.substring(0, cursorPos);
                var strAfterCursor = input.substring(cursorPos);
                this._textbox.value = strBeforeCursor + key + strAfterCursor.substr(1, strAfterCursor.length);
                this._setCaretPosition(cursorPos + 1);
                //Raising ClientSide Event
                this._raiseEvents("change");
            }
        },
		/**
         * To configure the user entered character in lower or upper case character in maskedit textbox control.
		 * @private
         */
        _updateCasing: function (key, pos) {
            for (var i = 0; i < pos + 1; i++) {
                if (this._tempMask.substr(i, 1) == '<' || this._tempMask.substr(i, 1) == '>')
                    pos++;
            }
            // find case-modificator
            for (var j = pos; j > -1; j--) {
                if (this._tempMask.substr(j, 1) == '<') {
                    return key.toLowerCase();
                }
                else if (this._tempMask.substr(j, 1) == '>') {
                    return key.toUpperCase();
                }
            }
        },
		/**
         * To obtained the pure value of the textvalue, removes all the symbols in maskedit textbox control.
		 * @private
         */
        /* Return the pure value of the textvalue, removes all the symbols*/
        get_StrippedValue: function () {
            var i, value, mask = this.model.maskFormat, stripVal = "";
            value = (this.element.hasClass("e-watermark")) ? this._maskModel : this._textbox.value;
            if (mask.length == 0) return value;

            for (var i = 0; i < mask.length;i++) {
                var char = mask[i], exp = null;

                if ("9?$a*".indexOf(char) != -1)
                    exp = this._charMap[char];
                else if (char == "A" || char == "N")
                    exp = this._charMap[char].replace(("]"), "") + this.model.customCharacter + "]";
                else if (char == "C")
                    exp = "[" + this.model.customCharacter + "]";

                if (exp && value[i] && value[i].match(new RegExp(exp)))
                    stripVal += value[i];
            }
            return stripVal;
        },
		/**
         * To obtained the textbox value as such that, Just replace all '_' to ' '(space) in maskedit textbox control.
		 * @private
         */
        /* Return the textbox value as such that, Just replace all '_' to ' '(space)*/
        get_UnstrippedValue: function () {
            var value = (this.element.hasClass("e-watermark")) ? this._maskModel : this._textbox.value, unstripVal = "";
            if (this.model.maskFormat.length == 0) return value;

            if (value != undefined)
                unstripVal = value.replace(/[_]/g, " ");
            return unstripVal;
        },
		/**
         * To configure the model value in maskedit textbox control.
		 * @private
         */
        _setValue: function (value) {
            if (ej.isNullOrUndefined(value)) value = "";
            this.previousValue = this.model.value = value;
            if (!ej.isNullOrUndefined(this.model.maskFormat) && this.model.maskFormat != "")
                this._validateValue();
            else
                this._textbox.value = value;
            this._raiseEvents("change");
        },
		/**
         * To set the maskFormat value with it;s validation in maskedit textbox control.
		 * @private
         */
        _setMask: function (maskValue) {
            this._maskLength = maskValue.length;
            this.model.maskFormat = maskValue;
            this._maskModel = maskValue.replace(/[9?$CANa*]/g, '_');
            this._validateValue();
        },

        //----------------public function--------------------------------------//			 
		/**
        * To enable the maskedit textbox control.		
		* @return jQuery
		* @example 
		* &lt;input id="mask" type="text" /&gt; <br> 		
		* &lt;script&gt;
		* $("#mask").ejMaskEdit({maskFormat: "99-99-9999",value:"12345678"});
		* // Create MaskEdit control
		* var maskObj = $("#mask").data("ejMaskEdit");		
		* maskObj.enable(); // enable the maskedit control		
		* &lt;/script&gt;
		 @example 
		* &lt;input id="mask" type="text" /&gt; <br> 			
		* &lt;script&gt;
		* $("#mask").ejMaskEdit({maskFormat: "99-99-9999",value:"12345678"});
		* // enable the maskedit control
		* $("#mask").ejMaskEdit("enable");		
		* &lt;/script&gt;
		* @memberof ejMaskEdit
		* @instance
         */	    
        enable: function () {
            this.element.disabled = false;
            this.element.removeAttr("disabled").removeClass('e-disable').attr({ "aria-disabled": false });
            this.model.enabled = true;
        },
		/**
        * To disable the maskedit textbox control.		
		* @return jQuery
		* @example 
		* &lt;input id="mask" type="text" /&gt; <br> 		
		* &lt;script&gt;
		* $("#mask").ejMaskEdit({maskFormat: "99-99-9999",value:"45340078"});
		* // Create MaskEdit control
		* var maskObj = $("#mask").data("ejMaskEdit");		
		* maskObj.disable(); // disable the maskedit control		
		* &lt;/script&gt;
		 @example 
		* &lt;input id="mask" type="text" /&gt; <br> 			
		* &lt;script&gt;
		* $("#mask").ejMaskEdit({maskFormat: "99-99-9999",value:"45340078"});
		* // disable the maskedit control
		* $("#mask").ejMaskEdit("disable");		
		* &lt;/script&gt;
		* @memberof ejMaskEdit
		* @instance
         */	  
        disable: function () {
            this.element.disabled = true;
            this.element.attr("disabled", "disabled").addClass('e-disable').attr({ "aria-disabled": true });
            this.model.enabled = false;
        },
		/**
        * To clear the text in maskedit textbox control.		
		* @return jQuery
		* @example 
		* &lt;input id="mask" type="text" /&gt; <br> 		
		* &lt;script&gt;
		* $("#mask").ejMaskEdit({maskFormat: "99-9999",value:"345678"});
		* // Create MaskEdit control
		* var maskObj = $("#mask").data("ejMaskEdit");		
		* maskObj.clear(); // clear the maskedit control		
		* &lt;/script&gt;
		 @example 
		* &lt;input id="mask" type="text" /&gt; <br> 			
		* &lt;script&gt;
		* $("#mask").ejMaskEdit({maskFormat: "99-9999",value:"345678"});
		* // clear the maskedit control
		* $("#mask").ejMaskEdit("clear");		
		* &lt;/script&gt;
		* @memberof ejMaskEdit
		* @instance
         */	 
        clear: function () {
            if (this.model.enabled)
                this._textbox.value = this.model.maskFormat.replace(/[9?$aCAN*]/g, '_');
        },

        /*-------------------------- Register all the events at initialize and handlers-----------------------*/
		/**
         * Wiring the events to MaskEdit textbox control		
		 * @private
         */
        _wireEvents: function () {
            this._on(this.element, 'focus', this._OnFocusHandler);
            this._on(this.element, 'blur', this._OnBlurHandler);
            this._on(this.element, 'keydown', this._OnKeyDownHandler);
            this._on(this.element, 'keypress', this._OnKeyPressHandler);
            this._on(this.element, 'keyup', this._OnKeyUpHandler);
            this._on(this.element, 'mouseover', this._OnMouseOverHandler);
            this._on(this.element, 'mouseout', this._OnMouseOutHandler);
            this._on(this.element, 'paste', this._OnPasteHandler);
            this._on(this.element, 'cut', this._OnCutHandler);
        },
		 /**
         * Section For handle the selected text cut from maskedit textbox control.
		 * @private
         */	
        /* Cut Handler */
        _OnCutHandler: function (e) {
            var selectedValue = this._maskModel.substring(this._textbox.selectionStart, this._textbox.selectionEnd);
            var beforeSelection = this._textbox.value.substring(0, this._textbox.selectionStart);
            var afterSelection = this._textbox.value.substring(this._textbox.selectionEnd);
            var cursorPosition = this._textbox.selectionStart;
            var context = this;
            setTimeout(function () {
                context._textbox.value = beforeSelection + selectedValue + afterSelection;
                context._setCaretPosition(cursorPosition);
                context._raiseEvents("change");
            }, 0);
        },
		/**
         * Section For handle the paste text to maskedit textbox control.
		 * @private
         */
        /* Paste Handler */
        _OnPasteHandler: function (e) {
            var context = this;
            setTimeout(function () {
                var text = $(context._textbox).val();
                context._setValue(text);
                context._raiseEvents("change");
            }, 0);
            return true;
        },
		/**
         * Section For handle maskedit textbox control in focused in.
		 * @private
         */
        /* On Focus Handler */
        _OnFocusHandler: function (e) {
            this.wrapper.addClass("e-focus");
            this._removeWaterMark();
            if (this.model.readOnly)
                return;
            if (this._textbox.value.indexOf("<") >= 0 || this._textbox.value.indexOf(">") >= 0) {
                this._textbox.value = this._textbox.value.replace(/[<>]/g, '');
                this._maskModel = this._textbox.value;
                this._tempMask = this.model.maskFormat;
                this.model.maskFormat = this.model.maskFormat.replace(/[<>]/g, '');
            }

            if (this._textbox.value != this._maskModel && this._unStrippedMask != null && this.model.hidePromptOnLeave)
                this._textbox.value = this._unStrippedMask;
            $.fn.selectRange = function (start, end) {
                return this.each(function () {
                    if (this.setSelectionRange) {
                        this.focus();
                        this.setSelectionRange(start, end);
                    } else if (this.createTextRange) {
                        var range = this.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', end);
                        range.moveStart('character', start);
                        range.select();
                    }
                });
            };
            if (this.model.maskFormat) {
                this.element.selectRange(0, 0);
            }
            //Raising ClientSide Event
            this._raiseEvents("focusIn");
        },
		/**
         * Section For handle the maskedit textbox control is focused out.
		 * @private
         */
        _OnBlurHandler: function (e) {
            this.wrapper.removeClass("e-focus");
            this.model.value = this.get_StrippedValue();
            if (this._textbox.value != undefined && this.model.hidePromptOnLeave) {
                this._unStrippedMask = this._textbox.value;
                this._textbox.value = this.get_UnstrippedValue();
            }
            if (this.model.inputMode != "password")
                this._setWaterMark();

            //Raising ClientSide Event
            this._raiseEvents("focusOut");
        },
		/**
         * Section For handle the keypress down event in maskedit textbox control.
		 * @private
         */
        /* On Key Down Handler */
        _OnKeyDownHandler: function (e) {
            if (this.model.readOnly) return;
            this._keypressFlag = 0;
            this._raiseEvents("onKeyDown");
            // Remove the Error Flag
            this.element.removeClass("error");

            if (this._maskLength == 0)
                return true;

            var unicode = e.keyCode ? e.keyCode : e.charCode;
            var actualkey = String.fromCharCode(unicode);

            if (unicode >= 35 && unicode <= 41) {
                if (window.navigator.appCodeName == "Mozilla" || window.navigator.appCodeName == "opera") {
                    this._keypressFlag = 1;
                }
            }
            if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 88))) {
                this._keypressFlag = 1;
                return;
            }
            else if (unicode == 8) { // For Backspace Key Event

                if (this.model.inputMode != "password") {
                    this._keydownFlag = 1;
                    // Seek to next valid position
                    var currentPos = this._seekBefore();
                    this._raiseEvents("change");
                    if (!this._selectedTextKeyDown) {
                        if (currentPos >= 0 && currentPos < this._maskLength)
                            this._writeBuffer("_", currentPos);
                        this._setCaretPosition(currentPos);
                    }
                    this._keydownFlag = 0;
                    this._selectedTextKeyDown = 0;
                    e.preventDefault();
                    return false;
                }
                this._keypressFlag = 1;
                return true;
            }
            else if (e.keyCode == 46 || e.keyCode == 127) { //  For Delete Key Events
                if (this.model.inputMode != "password") {
                    this._keydownFlag = 2;
                    // Seek to next valid position
                    currentPos = this._seekNext();
                    this._raiseEvents("change");
                    if (!this._selectedTextKeyDown) {
                        if (currentPos >= 0 && currentPos < this._maskLength)
                            this._writeBuffer("_", currentPos);
                    }
                    this._keydownFlag = 0;
                    this._selectedTextKeyDown = 0;
                    e.preventDefault();
                    return false;
                }
                this._keypressFlag = 1;
                return true;
            }
        },
		/**
         * Section For handle the keypress up event in maskedit textbox control.
		 * @private
         */
        /* On Key Up Handler */
        _OnKeyPressHandler: function (e) {
            if (this.model.readOnly) return;
            this._raiseEvents("keyPress");
            if (this._maskLength == 0)
                return true;

            var unicode = e.keyCode ? e.keyCode : e.charCode;
            var actualkey = String.fromCharCode(unicode);
            var currentPos = this._seekNext();
            var val = ej.browserInfo().name;
            if (this._validateChars(unicode, currentPos)) {
                if (((val == "mozilla") || (val == "opera")) && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39)) {
                }
                else if (((val == "mozilla") || (val == "opera")) && (e.ctrlKey && (unicode == 97 || unicode == 99 || unicode == 118 || unicode == 120))) {
                }
                else
                    this._writeBuffer(actualkey, currentPos);
            }
            else
                if (((val == "mozilla") || (val == "opera")) && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39)) {
                }
                else if (((val == "mozilla") || (val == "opera")) && (e.ctrlKey && (unicode == 97 || unicode == 99 || unicode == 118 || unicode == 120))) {
                }
                else
                    this._showAlert();

            // To stop default press actions
            if (!this._keypressFlag && unicode != 9) {//Shift + Tab Navigation
                this._keypressFlag = 0;
                e.preventDefault();
                return false;
            }
            this._keypressFlag = 0;

        },
		/**
         * Section For raise the key up event in maskedit textbox control.
		 * @private
         */
        _OnKeyUpHandler: function (e) {
            if (this._maskLength == 0) this._raiseEvents("change");
            this._raiseEvents("keyUp");
        },
		/**
         * Section For raise the mouse over event in maskedit textbox control.
		 * @private
         */
        /* On Mouse Over Handler */
        _OnMouseOverHandler: function (e) {
            // Raising ClideSide Event
            this._raiseEvents("mouseOver");
        },
		/**
         * Section For raise the mouse out event in maskedit textbox control.
		 * @private
         */
        /* On Mouse Out Handler */
        _OnMouseOutHandler: function (e) {
            // Raising ClideSide Event
            this._raiseEvents("mouseOut");
        },
		/**
         * Section For raise the corresponding event in maskedit textbox control.
		 * @private
         */
        //To raise Corresponding Client Side Events
        _raiseEvents: function (eventName) {
            var eventArgs, strippedVal = this.get_StrippedValue(), unstrippedVal=this.get_UnstrippedValue();
            this.model.value = unstrippedVal;
            if (eventName == "change") {
                if (this.previousValue != this.model.value) {
                    this.previousValue = this.model.value;
                }
                else
                    return false;
            }


                eventArgs = { value: unstrippedVal, unmaskedValue: strippedVal };
                this._trigger(eventName, eventArgs);
            this._hiddenInput.val(strippedVal);
        },
		/**
         * Section For set the value can be set after changes happened in maskedit textbox control.
		 * @private
         */
        _OnValueChange: function () {
            if (this._textbox.value == "" && this._maskModel != "")
                this._textbox.value = this._maskModel;
            this._setValue(this._textbox.value);
        }

    });
	/**
	 * Enum for slider type.	 
	 * @enum {string}
	 * @global 
	 */
    ej.InputMode = { 	
			 /**  support for user enter character in password format. */
			Password: "password", 
			/**  support for user enter character in normal format. */
			Text: "text"			
			};  
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Menu control.
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {

    /**
	
       * @namespace ej
       * @class ejMenu
       * @requires jQuery
       * @requires jquery.easing.1.3.min.js
       * @requires ej.core.js
       * @requires ej.data.js
       * @requires ej.menu.js
       * @requires ej.checkbox.js
       * @classdesc Custom Design for Menu control.
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
       * // Create Menu
       * $("#menu").ejMenu({height: 22}); 	
       * &lt;/script&gt;
       */

    ej.widget("ejMenu", "ej.Menu", {
	
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["ul"],
        _ignoreOnPersist: ["fields", "create", "beforeOpen", "open", "close", "mouseover", "mouseout", "click", "keydown", "destroy"],
        _setFirst: false,
        _rootCss: "e-menu",

        // default model
        defaults: {
            /**		
                * Specifies the height of the root menu.
                * @default "auto"
                * @type {string | number}
                * @example 
                * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
                
               * //To set height API value during initialization  
                *   $("#menu").ejMenu({ height: 22 }); 
                * &lt;/script&gt; 
                 * @memberof ejMenu
                * @instance
                */
            height: "",
           /**		
			* Specifies the width of the main menu.
			* @default auto
			* @type {string | number}
			* @example 
			* &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;	
			* //To set width API value during initialization  
      *   //To set width API value 
      *   $("#menu").ejMenu({ width: "800px",height:"30px" });  
      * &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            width: "",
           /**		
			* To enable or disable the Animation while hover or click an menu items..See {@link AnimationType}
			* @default ej.animation.Default
			* @type {enum}
			* @example 
			* &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;	
		* //To set animationType API value during initialization  
      *   //To set animationType API value 
      *   $("#menu").ejMenu({ height:22,animationType: ej.AnimationType.Default }); 
      * &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            animationType: "default",
            /**		
			* Specifies the orientation of normal menu. Normal menu can rendered in horizontal or vertical direction by using this API. See {@link Direction}
			* @default ej.orientation.Horizontal
			* @type {string | enum}
			* @example 
			* &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;	
			* //To set orientation API value during initialization  
      *   //To set orientation API value 
      *   $("#menu").ejMenu({ height:22,orientation: ej.Orientation.Horizontal });
      * &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            orientation: ej.Orientation.Horizontal,
            /**		
			* Specifies the type of the menu. Essential JavaScript Menu consists of two type of menu, they are Normal Menu and Context Menu both Normal and Context Menu mode.See {@link MenuType}
			* @default ej.menuType.NormalMenu 
			* @type {string | enum}
			* @example 
			* &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;	
			* //To set menuType API value during initialization  
      *   //To set menuType API value 
      *   $("#menu").ejMenu({ height:22,menuType: "normalmenu" });
      * &lt;/script&gt; 
			 * @memberof ejMenu
			* @instance
			*/
            menuType: "normalmenu",
            /**		
			*Specifies the target id of context menu. On right clicking the specified contextTarget element, context menu gets shown.
			* @default null 
			* @type {string}
			* @example
			*	&lt;div id="target" class="textarea"&gt;
			*                            HTML is written in the form of HTML elements consisting of tags enclosed in angle
			*                            brackets (like
			*                            &lt;html&gt;
			*                            ),within the web page content. HTML tags most commonly come in pairs like and ,although
			*                            some tags, known as empty elements, are unpaired, for example
			*                            &lt;img&gt;. The purpose of a web browser is to read HTML documents and compose them into
			*                            visible or audible web pages. The browser does not display the HTML tags, but uses
			*                            the tags to interpret the content of the page.
			*                        &lt;/div&gt;
			*                        &lt;ul id="contextMenu"&gt;
			*                            &lt;li&gt;&lt;a&gt;Cut&lt;/a&gt;&lt;/li&gt; 
			*                            &lt;li&gt;&lt;a&gt;Copy&lt;/a&gt;&lt;/li&gt; 
			*                            &lt;li&gt;&lt;a&gt;Paste&lt;/a&gt;&lt;/li&gt; 
			*                       &lt;li class="separator"&gt;&lt;/li&gt; 
			*                            &lt;li&gt;&lt;a&gt;Comments&lt;/a&gt;&lt;/li&gt;
			*                            &lt;li&gt;&lt;a&gt;Links&lt;/a&gt;&lt;/li&gt;
			*                            &lt;li&gt;&lt;a&gt;Clear Formatting&lt;/a&gt;&lt;/li&gt;  
			*                        &lt;/ul&gt;           
			                
      * &lt;script&gt;
		
			* //To set contextMenuTarget API value during initialization  
			* 	//To set contextMenuTarget API value 
			* 	$("#contextMenu").ejMenu({menuType:ej.MenuType.ContextMenu, height:22,contextMenuTarget:"#target"});  
      * &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            contextMenuTarget: null,
            /**		
			* Specify the CSS class to Menu to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
        * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
	   * &lt;script&gt;
			* //To Set the CSS class during initialization. 			
			* 	$("#menu").ejMenu({ height:22, cssClass:'gradient-lime ' });		
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            cssClass: "",
            /**		
			* Specifies the sub menu items to be show or open only on click.
			* @default false
			* @type {boolean}
			* @example 
        * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set openOnClick API value during initialization  
			* 	//To set openOnClick API value 
			* 	$("#menu").ejMenu({ height:22,openOnClick: true });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            openOnClick: false,
            /**		
			* Specifies the sub menu popup direction.See {@link Direction}
			* @default ej.direction.Right
			* @type {string | enum}
			* @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set subMenuDirection API value during initialization  
			* 	//To set subMenuDirection API value 
			* 	$("#menu").ejMenu({ height:22,subMenuDirection: ej.Direction.Right });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            subMenuDirection: "right",
			/**		
			* Specifies the root menu items to be aligned center in horizontal menu.
			* @default false
			* @type {boolean}
			* @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set enableCenterAlign API value during initialization  
			* 	//To set enableCenterAlign API value 
			* 	$("#menu").ejMenu({ height:22,enableCenterAlign: true });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
			enableCenterAlign: false,
            /**		
			* Specifies the main menu items arrows only to be shown if it contains child items.
			* @default true
			* @type {boolean}
			* @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set showRooltLevelArrows API value during initialization  
			* 	//To set showRooltLevelArrows API value 
			* 	$("#menu").ejMenu({ height:22,showRooltLevelArrows: true });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            showRooltLevelArrows: true,
            /**		
			* Specifies the sub menu items arrows only to be shown if it contains child items.
			* @default true
			* @type {boolean}
			* @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set showSubLevelArrows API value during initialization  
			* 	//To set showSubLevelArrows API value 
			* 	$("#menu").ejMenu({ height:22,showSubLevelArrows: true });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
			
            showSubLevelArrows: true,
			enableAnimation: true,
             /**		
/**		
			* When this property sets to false, the menu list is displayed without any separators.
			* @default true
			* @type {boolean}
			* @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set enableSeparator API value during initialization  
			* 	//To set enableSeparator API value 
			* 	$("#menu").ejMenu({ height:22,enableSeparator: true });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            enableSeparator: true,
           /**		
			* Enable / Disable the Menu control.
			* @default true
			* @type {boolean}
			* @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set enabled API value during initialization  
			* 	//To set enabled API value 
			* 	$("#menu").ejMenu({ height:22,enabled: true });
			* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            enabled: true,
             /**		
			* Fields used to bind the data source and it includes following field members to make databind easier.
			* @default null
			* @type {Object}
			* @example
      *&lt;ul id="menu"&gt;
       * &lt;script&gt; 
			* //To set fields API value during initialization  
			* 	//To set fields API value 
			* 	      $("#menu").ejMenu({ height:22,
            *                fields: { dataSource: window.menu, id: "id", parentId: "parentId", text: "text", spriteCssClass: "sprite" }
            *           });
             * &lt;/script&gt; 
			 * @memberof ejMenu
			* @instance
			*/
            fields: /** @lends ejMenu# */{
                /**		
                * It receives the child data for the inner level. 
                * @alias ejMenu#fields->child
				* @type Object
                */
                child: null,
                 /**		
                * datasource receives  Essential DataManager object and JSON object. 
                * @alias ejMenu#fields->dataSource
				* @type Object
                */
                dataSource: null,
                /**		
				* It receives query to retrieve data from the table (query is same as SQL).  
				* @alias ejMenu#fields->query
				* @type Object
				*/
                query: null,
                /**	
                * It receives table name to execute query on the corresponding table  
				* @alias ejMenu#fields->tableName
				* @type string
				*/
                tableName: null,
                /**	
                * Specifies the id to menu items list
               	* @alias ejMenu#fields->id
				* @type string
				*/
                id:"id",
                /**	
                * Specifies the parent id of the table.
              	* @alias ejMenu#fields->parentId
				* @type string
                */
                parentId:"parentId",
                /**	
               * Specifies the text of menu items list.
             	* @alias ejMenu#fields->text
				* @type string
				*/
                text:"text",
                /**	
                * Specifies the sprite CSS class to “li” item list
              	* @alias ejMenu#fields->spriteCssClass
				* @type string
				*/
                spriteCssClass:"spriteCssClass",
                /**	
                * Specifies the url to the anchor tag in menu item list.
             	* @alias ejMenu#fields->url
				* @type string
				*/
                url: "url",
                /**	
                * Specifies the image attribute to “img” tag inside items list. 
             	* @alias ejMenu#fields->imageAttribute
				* @type string
				*/
                imageAttribute:"imageAttribute",
                /**	
                * Specifies the html attributes to “li” item list.
                * @alias ejMenu#fields->htmlAttribute
				* @type string
				*/
                htmlAttribute:"htmlAttribute",
                /**	
                * Adds custom attributes like "target" to the anchor tag of the menu items.
                * @alias ejMenu#fields->linkAttribute
                * @type string
                 */
                linkAttribute: "linkAttribute",
                /**	
                * Specifies the image URL to “img” tag inside item list.
              	* @alias ejMenu#fields->imageUrl
				* @type string
				*/
                imageUrl:"imageUrl",
            },
            /**		
			* Specifies the menu items to be displayed in right to left direction.
			* @default false
			* @type {boolean}
			* @example 
         * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set rtl API value during initialization  
			* 	//To set rtl API value 
			* 	$("#menu").ejMenu({ height:22,enableRTL: true });
		* &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            enableRTL: false,
            /**		
			* Specifies the title to responsive menu.
			* @default "Menu"
			* @type {string}
			* @example 
         * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			* //To set titleText API value during initialization  
			* 	//To set titleText API value 
			* 	$("#menu").ejMenu({ height:22,titleText: "Menu" });
			 * &lt;/script&gt;
			 * @memberof ejMenu
			* @instance
			*/
            titleText: "Menu",
            /**     
            * Fires before context menu gets open.
            * @event
            * @name ejMenu#beforeContextOpen 	
            * @param {Object} argument Event parameters from context menu     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event
            * @param {object}  argument.target returns the target element
            * @example 
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
            *  //before context menu open event for menu
            *  $("#menu").ejMenu({height:22,
            *  beforeOpen: function (args) {}
            *  });   
            * &lt;/script&gt;
            * @memberof ejMenu
            * @instance
            */
            beforeOpen: null,
            /**     
            * Fires when context menu on open.
            * @event
            * @name ejMenu#contextOpen 	
            * @param {Object} argument Event parameters from menu     
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event
            * @param {object}  argument.target returns the target element
            * @example 
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
            *  //context menu open event for menu
            *  $("#menu").ejMenu({height:22,
            *  open: function (args) {}
            *  });   
            * &lt;/script&gt;
            * @memberof ejMenu
            * @instance
            */
            open: null,
            /**     
			 * Fire when context menu on close.
			 * @event
			 * @name ejMenu#contextClose 	
			 * @param {Object} argument Event parameters from menu     
			 * @param {object}  argument.model returns the menu model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object}  argument.target returns the target element
			 * @example 
          * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			 *  //context menu close event for menu
			 *  $("#menu").ejMenu({height:22,
             *  close: function (args) {}
			 *  });   
       * &lt;/script&gt;
			 * @memberof ejMenu
			 * @instance
			 */
            close: null,
             /**     
			 * Fires when mouse over the Menu items.
			 * @event
			 * @name ejMenu#mouseover 	
			 * @param {Object}  argument Event parameters from menu     
			 * @param {object}  argument.model returns the menu model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.text returns clicked menu item text
             * @param {object}  argument.element returns clicked menu item element
			 * @param {object}  argument.event returns the event
			 * @example 
          * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
			 *   //mouse over event for menu
			 *  $("#menu").ejMenu({height:22,
             *  mouseover: function (args) {}
			 *  });   
       * &lt;/script&gt;
			 * @memberof ejMenu
			 * @instance
			 */
            mouseover: null,
            /**     
            * Fires when mouse out from menu items.
            * @event
            * @name ejMenu#mouseout 	
            * @param {Object}  argument Event parameters from menu     
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.text returns clicked menu item text
            * @param {object}  argument.element returns clicked menu item element
			* @param {object}  argument.event returns the event
            * @example
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;  
            *  //mouse out event for menu
            *  $("#menu").ejMenu({height:22,
            *  mouseout: function (args) {}
            *  });   
            * &lt;/script&gt;
            * @memberof ejMenu
            * @instance
            */
            mouseout: null,
            /**     
            * Fires when mouse click on menu items.
            * @event
            * @name ejMenu#click 	
            * @param {Object}  argument Event parameters from menu     
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.text returns clicked menu item text
            * @param {object}  argument.element returns clicked menu item element
			* @param {object}  argument.event returns the event
            * @param {number}  argument.selectedItem returns the selected item
            * @example 
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
            *  //click event for menu
            *  $("#menu").ejMenu({height:22,
            *  click: function (args){}
            *  });   
            * &lt;/script&gt;
            * @memberof ejMenu
            * @instance
            */
            click: null,
           /**     
            * Fires when key down on menu items.
            * @event
            * @name ejMenu#keydown 	
            * @param {Object}  argument Event parameters from menu     
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event
            * @param {string}  argument.menuText returns clicked menu item text
            * @param {object}  argument.element returns clicked menu item element
            * @param {object}  argument.event returns the event
            * @example 
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
            *  //keydown event for menu
            *  $("#menu").ejMenu({height:22,
            *  keydown: function (args){}
            *  });  
            * &lt;/script&gt; 
            * @memberof ejMenu
            * @instance
            */
            keydown: null,
			/**     
            * Fires to create menu items.
            * @event
            * @name ejMenu#create  
            * @param {Object}  argument Event parameters from menu     
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event           
            * @example 
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
            *  //Create event for menu
            *  $("#menu").ejMenu({height:22,
            *  create: function (args){}
            *  });   
            * &lt;/script&gt;
            * @memberof ejMenu
            * @instance
            */
            create: null,
			 /**     
            * Fires to destroy menu items.
            * @event
            * @name ejMenu#destroy 
            * @param {Object}  argument Event parameters from menu     
            * @param {object}  argument.model returns the menu model
            * @param {string}  argument.type returns the name of the event            
            * @example 
               * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt; 
            *  //Destroy event for menu
            *  $("#menu").ejMenu({height:22,
            *  destroy: function (args){}
            *  }); 
            * &lt;/script&gt;  
            * @memberof ejMenu
            * @instance
            */
            destroy: null
        },
        /**
        * Specify the data types for default properties 
        * @private
        */
        dataTypes: {
            animationType:"enum",
            cssClass: "string",
            titleText:"string",
            openOnClick: "boolean",
            enabled: "boolean",
            enableCenterAlign: "boolean",
            showArrow: "boolean",
            showRooltLevelArrows: "boolean",
            showSubLevelArrows: "boolean",
            enableSeparator: "boolean",
            enableRTL: "boolean",
            enableAnimation: "boolean",
            fields: {
                dataSource: "data",
                query: "data",
                child: "data"
            }
        },
        
        /**
        * To configure the properties at runtime using SetModel		
        * @private
        */
        _setModel: function (jsondata) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(jsondata["enabled"])) return false;
            for (var key in jsondata) {
                switch (key) {
                    case "menuType":
                        this.model.menuType = jsondata[key];
                        this.element.removeClass("e-menu " + this.model.cssClass);
                        this._renderControl();
                        if (jsondata[key] == "contextmenu") this._contextMenuEvents();
                        break;
                    case "fields":
                        this.element.empty().insertBefore(this.wrapper);
                        this.wrapper.remove();
                        $.extend(this.model.fields, jsondata[key]);
                        this._intializeData();
                        break;
                    case "orientation": this._setOrientation(jsondata[key]); break;
                    case "showTopLevelArrow": this._addArrow(jsondata[key], this.model.showBottomLevelArrow); break;
                    case "showBottomLevelArrow": this._addArrow(this.model.showRooltLevelArrows, jsondata[key]); break;
                    case "enableSeparator": this._setSeparator(jsondata[key]); break;
                    case "height": this._setHeight(jsondata[key]); break;
                    case "width": this._setWidth(jsondata[key]); break;
                    case "cssClass": this._setSkin(jsondata[key]); break;
                    case "enableRTL": this._setRTL(jsondata[key]); break;
                    case "enableCenterAlign": this._centerAlign(jsondata[key]); break;
                    case "enabled": this.model.enabled = jsondata[key]; this._controlStatus(jsondata[key]); break;
                    case "animationType":
                        this._setAnimation(jsondata[key]);
                        break;
					case "enableAnimation":
						this.model.enableAnimation=options[key];
						break;
						
					
                }
            }
        },      
        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            /// <summary>This function is  used to destroy the Menu Object</summary>
            this._cloneElement.insertBefore(this.wrapper);
            this._cloneElement.removeClass('e-menu e-js');
            this.wrapper.remove();
        },
        /**
       * Create the Menu widget
       * @private
       */
        // constructor function
        _init: function () {
            /// <summary>This function is  used to Initialize the Menu Object</summary>
            this._cloneElement = this.element.clone();
            this.element.css("visibility", "hidden");
            this._setValues();
            this._intializeData();
            this.element.css("visibility", "visible");
        },

        //-------------------------Private Methods---------------------------------------------    
        /**
       * To configure the property values
       * @private
       */
        _setValues: function () {
            this._mouseOver = true;
            this._hoverOpen = true;
            this._hoverClose = true;
            this._isMenuOpen = false;
            this._hideSpeed = 100;
            this._showSpeed = 100;
            this._isSubMenuOpen = false;
            this._isContextMenuOpen = false;
            this._disabledMenuItems = new Array();
            this._delayMenuHover = 0;
            this._delaySubMenuHover = 0;
            this._delaySubMenuShow = 0;
            this._preventContextOpen = true;
            this._setAnimation(this.model.animationType);
            this._isFocused = true;
        },
        _intializeData: function () {
            if (!ej.isNullOrUndefined(this.model.fields) && this.model.fields["dataSource"] != null) {
                this._generateTemplate(this.model.fields["dataSource"]);
                this._renderMenu();
            }
            else {
                this._renderMenu();
                this._wireEvents("_on");
            }
        },
        _renderMenu: function () {
            this._renderControl();
            this._addArrow(this.model.showRooltLevelArrows, this.model.showSubLevelArrows);
            this._intializeMenu();
        },
        /**
        * Render Section For Different Types Menu		
        * @private
        */
        _renderControl: function () {
            /// <summary>This function is  used to Render the Menu Object</summary>
            var label, checkBox, checkObj, list, spanlist, i;
            this.wrapper = ej.buildTag("div.e-menu-wrap");
            if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
                this.resWrap = ej.buildTag('span.e-menu-res-wrap');
                this.inResWrap = ej.buildTag('span.e-in-wrap e-box e-menu-res-in-wrap');
                this.label = ej.buildTag('span.e-res-title', this.model.titleText);
                this.check = ej.buildTag('span.e-check-wrap e-icon');
                this.checkBox = ej.buildTag('input#responsive.e-res-icon', '', {}, { type: 'checkbox' });
                this.wrapper.append(this.resWrap)
                this.resWrap.append(this.inResWrap);
                this.inResWrap.append(this.label).append(this.check);
                this.check.append(this.checkBox);
            }
            if (this.model.menuType != ej.MenuType.ContextMenu) {
                this.wrapper.insertBefore(this.element);
                this.wrapper.append(this.element);
                if (this.checkBox != null) {
                    this.checkBox.ejCheckBox({ size: "medium", change: this._oncheck });

                }
            }
            this.element.addClass("e-menu e-widget").attr({ "role": "menu","tabindex": 0});
            if (this.model.enableRTL) this._setRTL(this.model.enableRTL);
            if (this.model.menuType == "normalmenu") {
                this.model.orientation == "horizontal" ? this.element.addClass(this.model.cssClass + " e-horizontal") : this.element.addClass(this.model.cssClass + " e-vertical");
            }
            //For ContextMenu Mode
            else this._contextMenu_Template();
            //Adding arrows to items with sub items
            this.element.find('li:has("> ul")').find('> a,> span').addClass('aschild');
            this.element.find('>li').addClass('e-list').attr({ "role": "menuitem"});
            list = this.element.find('.e-list a.aschild');
            spanlist = this.element.find('.e-list span.aschild');
            for (i = 0; i < list.length; i++) {
                $(list[i]).siblings().attr({ "aria-hidden": true });
                $(list[i]).parent().attr({ "aria-haspopup": true, "role": "menu" });
                $(list[i]).parent().addClass("e-haschild");
                $(list[i]).siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            for (i = 0; i < spanlist.length; i++) {
                $(spanlist[i]).siblings().attr({ "aria-hidden": true });
                $(spanlist[i]).parent().attr({ "aria-haspopup": true, "role": "menu" });
                $(spanlist[i]).parent().addClass("e-haschild");
                $(spanlist[i]).siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
            }
            if (this.model.enableCenterAlign) this._centerAlign(this.model.enableCenterAlign);
            if (this.model.enableSeparator) this._setSeparator(true);
            this._controlStatus(this.model.enabled);
        },
        /**
        * Wiring the Events to Responsive Icon 	
        * @private
        */
        _oncheck: function (e) {
            var obj = this.element.parents('.e-menu-wrap').children('.e-menu');
            e.isChecked ? obj.removeClass('e-res-hide').addClass('e-res-show') : obj.removeClass('e-res-show').addClass('e-res-hide');
        },
        /**
        * Render Section For Menu through Remote Data and DataSource	
        * @private
        */
        _generateTemplate: function (data) {
            var proxy = this, queryPromise;
            if (data instanceof ej.DataManager) {
                queryPromise = data.executeQuery(this._columnToSelect(this.model.fields));
                queryPromise.done(function (e) {
					proxy._odataFlag = true;
                    proxy._generateItemTemplate(e.result);
                    proxy._wireEvents("_on");
                });
            } else {
				proxy._odataFlag = false;
                this._generateItemTemplate(proxy.model.fields['dataSource']);
                this._wireEvents("_on");
            }
        },
        /**
        * Render Section For Menu through DataSource		
        * @private
        */
        _generateItemTemplate: function (items) {
            for (var i = 0; i < items.length; i++) {
                if ((items[i][this.model.fields.parentId] == null) || (items[i][this.model.fields.parentId] == 0)) {
                    var subItem = this._menuTemplate(items[i], items, this.model.fields);
                    this.element.append(subItem);
                }
            }
        },
        /**
      * Render Section For Menu template		
      * @private
      */
        _menuTemplate: function (item, tableData, mapper) {
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr("class", 'e-list');
            if (item[mapper.htmlAttribute]) this._setAttributes(item[mapper.htmlAttribute], liTag);

            if (item[mapper.id]) {
                aTag = $(document.createElement('a'));                
                if (item[mapper.imageUrl] && item[mapper.imageUrl] != "") {
                    imgTag = $(document.createElement('img'));
                    imgTag.attr('src', item[mapper.imageUrl]);
                    if (item[mapper.imageAttribute]) this._setAttributes(item[mapper.imageAttribute], imgTag);
                    aTag.append(imgTag);
                }
                else if (item[mapper.spriteCssClass] && item[mapper.spriteCssClass] != "") {
                    spanTag = $(document.createElement('span'));
                    spanTag.addClass(item[mapper.spriteCssClass]);
                    aTag.append(spanTag);
                }
                aTag.append(item[mapper.text]);
                if (item[mapper.linkAttribute]) this._setAttributes(item[mapper.linkAttribute], aTag);
                if (item[mapper.url])
                    aTag.attr('href', item[mapper.url]);
                liTag.append(aTag);
            }
            if (item[mapper.id]) {
                liTag.prop("id", item[mapper.id]);
            }
            if (!ej.isNullOrUndefined(mapper["child"])) {
                this._odataFlag = true;
                if (mapper["child"]["dataSource"] instanceof ej.DataManager) {
                    var proxy = this, queryManager = ej.Query();
                    queryManager = this._columnToSelect(mapper["child"]);
                    queryManager.where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]);
                    var queryPromise = mapper["child"]["dataSource"].executeQuery(queryManager);
                    queryPromise.done(function (e) {
                        var childItems = e.result;
                        if (childItems && childItems.length > 0) {
                            var ul = $(document.createElement('ul'));
                            for (var i = 0; i < childItems.length; i++) {
                                var liItem = proxy._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                                ul.append(liItem);
                            }
                            liTag.append(ul);
                            $(liTag).children('a').addClass('aschild');
                            if ($(liTag).parent().hasClass('e-menu') &&(proxy.model.showRooltLevelArrows))                           
                                    $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
                            else if(proxy.model.showSubLevelArrows) 
                               $(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");    
                        }
                    });   
                }
                else {
                    var childItems = ej.DataManager(mapper["child"]["dataSource"]).executeLocal(ej.Query().where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]));
                    if (childItems && childItems.length > 0) {
                        var ul = $(document.createElement('ul'));
                        for (var i = 0; i < childItems.length; i++) {
                            var liItem = this._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
                            ul.append(liItem);
                        }
                        liTag.append(ul);
                    }
                }
            }
            else if (!this._odataFlag) {
                var childItems = ej.DataManager(mapper["dataSource"]).executeLocal(ej.Query().where(mapper["parentId"], ej.FilterOperators.equal, item[mapper.id]));
                if (childItems && childItems.length > 0) {
                    var ul = ej.buildTag('ul');
                    for (var i = 0; i < childItems.length; i++) {
                        var liItem = this._menuTemplate(childItems[i], mapper["dataSource"], mapper);
                        ul.append(liItem);
                    }
                    liTag.append(ul);
                }
            }
            return liTag;
        },
        /**
        * To configure the Attributes of Menu items
        * @private
        */
        _setAttributes: function (data, element) {
            for (var key in data) {
				if(key == "class")
					element.addClass(data[key]);
				else
                	element.attr(key, data[key]);
            }
        },
        /**
        * To configure the Top and Bottom Level Arrows	
        * @private
        */
        _addArrow: function (topArrows, bottomArrows) {
            if (topArrows)
                this.element.find('>li.e-list:has("> ul")').children('a,span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list:has("> ul")').children('a,span').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

            if (bottomArrows)
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else {
                this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").children('span.e-icon').remove();
            }

        },
        /**
         * To initialize the Menu		
		 * @private
         */
        _intializeMenu: function () {
            if (this.model.height != 0) this._setHeight(this.model.height);
            if (this.model.width != 0) this._setWidth(this.model.width);
            if (this.model.menuType == "contextmenu")
                this.model.openOnClick = false;
            if (this.model.openOnClick) {
                this._hoverOpen = false;
                this._hoverClose = false;
            }
        },
        /**
        * To configure the Orientation of Menu	
        * @private
		*/
        _setOrientation: function (val) {
            if (val == "horizontal") {
                this.element.removeClass("e-vertical e-horizontal").addClass("e-horizontal");
            } else {
                this.element.removeClass("e-horizontal e-vertical").addClass("e-vertical");
            }
        },
        /**
        * To configure the height		
        * @private
        */
        _setHeight: function (value) {
            this.element.height(value);
        },
        /**
        * To configure the width		
        * @private
        */
        _setWidth: function (value) {
            this.element.width(value);
        },
        /**
        * To enable or disable the Right to Left behaviour 			
        * @private
        */
        _setRTL: function (isRTL) {
            if (isRTL) {
                this.element.removeClass("e-rtl").addClass("e-rtl");
                this.model.subMenuDirection = "left";
            } else {
                this.element.removeClass("e-rtl");
                this.model.subMenuDirection = "right";
            }
        },
        /**
        * To enable or disable the AnimationType while Hover or Click an Menu items		
        * @private
        */
        _setAnimation: function (value) {
            value === "none" ? (this._showAnim = "none", this._hideAnim = "none") : (this._showAnim = "slideDown", this._hideAnim = "slideUp");
        },
        /**
        * To configure the control status	
        * @private
        */
        _controlStatus: function (value) {
            //disable status
            value != true ? this.disable() : this.enable();
        },
        /**
        * To configure enableCenterAlign of Menu items.		
        * @private
        */
        _centerAlign: function (enableCenterAlign) {
            if (this.model.orientation == "horizontal" && enableCenterAlign)
                this.element.css('text-align', 'center');
            else if (this.model.orientation == "horizontal") this.element.css('text-align', 'inherit');
        },
        _columnToSelect: function (mapper) {
            var column = [], queryManager = ej.Query();
            if (ej.isNullOrUndefined(mapper.query)) {
                for (var col in mapper) {
                    if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
                        column.push(mapper[col]);
                }
                if (column.length > 0)
                    queryManager.select(column);
                if (!this.model.fields["dataSource"].dataSource.url.match(mapper.tableName + "$"))
                    !ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
            }
            else
                queryManager = mapper.query;
            return queryManager;
        },
        /**
        * To Find maximum z-index in the document	
        * @private
        */
        //Gets the maximum z-index in the document
        _max_zindex: function () {
            var parents, bodyEle, maxZ;
            if (this.model.menuType == "contextmenu") {
                parents = $(this._targetElement).parents();
                parents.push(this._targetElement);
            }
            else
                parents = $(this.element).parents();
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });
            maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;

        },

        _recursiveFunction: function (items, menuText) {
            var context = this;
            var isFound = false;
            $.each(items, function (key, value) {
                if (value.Text == menuText) {
                    context.selectedItem = value;
                    isFound = true;
                    return false;
                }
                else if (value.ChildItems != null) {
                    context._recursiveFunction(value.ChildItems, menuText);
                }
                if (isFound)
                    return false;
            });
        },
        /**
        * Render section for Context Menu Template	
        * @private
        */
        _contextMenu_Template: function () {
            var oldWrapper = $(".e-menu-wrap #"+this.element.context.id).get(0);
            if (oldWrapper)
                $(oldWrapper.parentElement).remove();
            this.model.orientation = "vertical";
            this._hideAnimation(this.element, this._hideAnim);
            this.element.addClass(this.model.cssClass + " e-context");
            $("body").append(this.element);
            this.wrapper.insertBefore(this.element);
            this.wrapper.append(this.element);
        },
        /**
        * To close currently visible Menu items	
        * @private
        */
        _closeMenu: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
        },

        _onMenuIntent: function (element, obj, canOpen) {
            obj._delayMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == true && canOpen) {
                    var showanim = obj._showAnim;
                    var hideanim = obj._hideAnim;
                    var showSpeed = obj._showSpeed;
                    var hideSpeed = obj._hideSpeed;
                    obj._show(element, showanim, hideanim);
                }
            }, this._showSpeed);
        },
        /**
         * To hide Menu items 
		 * @private
         */
        _onHide: function (element, obj, canHide) {
            obj._delaySubMenuHover = window.setTimeout(function () {
                if (obj._mouseOver == false && canHide) {
                    var id = obj._id;
                    var hideanim = obj._hideAnim;
                    var hideSpeed = obj._hideSpeed;
                    obj._closeAll();
                }

            }, obj._hideSpeed);
        },
        /**
        * To configure Sub Menu Position 
        * @private
        */
        _subMenuPos: function (element, direction) {
            var parentPos = $(this.wrapper).parent().offset();
            var pos = $(element).offset();
            var posLeft = pos.left - parentPos.left;
            var subMenu = $('ul:first', element);
            var menuWidth = $(element).outerWidth();
            if (pos == null || pos == undefined)
                return false;
            var submenuWidth = subMenu.outerWidth();
            var left = document.documentElement.clientWidth + $(document).scrollLeft();
            if (this.model.menuType == "normalmenu") {
                if ($(element.parentNode).is(this.element)) {
                    if (this.model.orientation == "horizontal")
                        subMenu.css("top", $(element).outerHeight() + "px");
                    else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth))
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                    else {
                        subMenu.css("left", ($(element).outerWidth() + 4) + "px");
                    }
                } else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth)) {
                    subMenu.css("left", -(submenuWidth + 4) + "px");
                }
            }
            else {
                left -= (pos.left + (2 * submenuWidth) + 4);
                if (left < 0) {
                    var menuLeftPos = (submenuWidth == null) ? "-206.5px" : "-" + (submenuWidth + 5) + "px";
                    subMenu.css("left", menuLeftPos);
                }
                else {
                    if (subMenu.parent('li.e-list').parent('ul').width() && direction == "right") {
                        subMenu.css("left", (subMenu.parent('li.e-list').parent('ul').width() + 4) + "px");
                    }
                    else if (pos.left > submenuWidth)
                        subMenu.css("left", -(submenuWidth + 4) + "px");
                }
            }
        },

        /**
        * To configure the custom theme for Menu using cssClass property		
        * @private
        */
        _setSkin: function (skin) {
            if (this.model.menuType == "normalmenu") {
                if (this.model.orientation == "horizontal") {
                    this.element.removeClass(this.model.cssClass + " e-horizontal");
                    this.element.addClass(skin + " e-horizontal");
                } else {
                    this.element.removeClass(this.model.cssClass + " e-vertical");
                    this.element.addClass(skin + " e-vertical");
                }

            } else {
                this.element.removeClass(this.model.cssClass + " e-context");
                this.element.addClass(skin + " e-context");
            }
        },
        /**
        * To configure seperator for Menu items		
        * @private
        */
        _setSeparator: function (separator) {
            if (separator)
                this.element.addClass("e-separator");
            else this.element.removeClass("e-separator");
        },
        /**
         * Wiring the events to Context Menu 	
		 * @private
         */
        _contextMenuEvents: function (action) {
            this[action]($(this.model.contextMenuTarget), "mouseup taphold", this._ContextMenuHandler);
            this [action](this.element, "contextmenu", this._onDefaultPreventer);
            this[action]($(this.model.contextMenuTarget), "contextmenu", this._onDefaultPreventer);
            this [action]($(document), "mousedown", this._onContextClose);
            this[action]($(document), "keydown", this._onKeyDownHandler);
        },
        /**
        * To show the Menu items		
        * @private
        */
        _show: function (element, showanim, hideanim) {
            var siblingElement;
            var sibling = $('> ul', element);
            sibling.attr({ "aria-hidden": false });
            this._hideAnimation($(element).siblings().find(' > ul:visible'), hideanim);
            if (!($.inArray(this._disabledMenuItems, element) > -1)) {
                if (sibling.css('display') != "none") {
                    siblingElement = this.model.openOnClick ? $(sibling) : sibling.children().find('> ul');
                    this._hideAnimation(siblingElement, hideanim);
                }
                else $('> ul', element).children().find('> ul').hide();
                this._subMenuPos(element, this.model.subMenuDirection);
                sibling.css({ "z-index": this._max_zindex() + 1 });
                if ($('> ul', element).css('display') != 'block' && !$(element).hasClass("e-disable-item")) 
                    this._showAnimation(sibling, showanim);
            }
        },
        /**
        * To close all visible Menu items		
        * @private
        */
        _closeAll: function () {
            this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
            this._hideAnimation(this.element.find('> ul:visible'), this._hideAnim);
        },
        /**
        * To show the Menu items with animationType		
        * @private
        */
        _showAnimation: function (element, anim) {
            switch (anim) {
                case "slideDown":
                    element.slideDown(this.model.enableAnimation?200:0, "easeOutQuad"); break;
                case "none":
                    element.css("display","block"); break;
            }
        },
        /**
        * To hide the Menu items with animationType		
        * @private
        */
        _hideAnimation: function (element, anim) {
            switch (anim) {
                case "slideUp":
                    $(element).attr({ "aria-hidden": true });
                    element.slideUp(this.model.enableAnimation?100:0, "easeOutQuad"); break;
                case "none":
                    element.css("display","none"); break;
            }
        },

        _removeValue: function (text, disableList) {
            var $browInfo = ej.browserInfo(), elementText;
            $browInfo.version === "8.0" && $browInfo.name === "msie" ? elementText = text[0].outerText : elementText = text[0].textContent;
            var count = $(disableList).length, i = 0;
            var childEle = $(disableList).find('>a').length == 0 ? $(disableList).find('>span') : $(disableList).find('>a');
            while (i <= count)
            {
                if ($(childEle[i]).text() === elementText)
                    return i;
                    i++;
            }
        },
		/**
        * To create sub level Menu items when insert a menu item dynamically	
        * @private
        */
		_createSubLevelItem:function(target,element){
			var ulTag;
			ulTag = $(document.createElement('ul'));
			ulTag.append(element);
			target.append(ulTag);
			target.attr({ 'role': 'menu', 'aria-haspopup': 'true' });
			target.addClass("e-haschild");
			this.element.find('li:has("> ul")').find('> a,>span').addClass('aschild e-arrow-space');
			this._insertArrows(ulTag);		
		},	
		/**
        * To insert arrows to Menu items when insert a menu item dynamically	
        * @private
        */
		_insertArrows:function(ulTag){
		if (this.model.showRooltLevelArrows)
                ulTag.find('>a,>span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else 
                ulTag.find('>a,>span').removeClass("e-arrow-space").find('>span.e-icon').remove();
				
            if (this.model.showSubLevelArrows)
                ulTag.parent('li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrows")).addClass("e-arrow-space");
            else 
                ulTag.parent('li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").find('>span.e-icon').remove();
		},
		/**
        * To create a Menu items when insert a menu item dynamically	
        * @private
        */
		_createMenuItem:function(item){
            var liTag, aTag, imgTag, spanTag;
            liTag = $(document.createElement('li'));
            liTag.attr({"class":'e-list',"role":"menuitem"});
            if (item["htmlAttribute"]) this._setAttributes(item["htmlAttribute"], liTag);
            if (item["text"] && item["text"] != "") {
                aTag = $(document.createElement('a'));
                if (item["imageUrl"] && item["imageUrl"] != "") {
                    imgTag = $(document.createElement('img'));
                    imgTag.attr('src', item["imageUrl"]);
                    if (item["imageAttribute"]) this._setAttributes(item["imageAttribute"], imgTag);
                    aTag.append(imgTag);
                }
                else if (item["spriteCssClass"] && item["spriteCssClass"] != "") {
                    spanTag = $(document.createElement('span'));
                    spanTag.addClass(item["spriteCssClass"]);
                    aTag.append(spanTag);
                }
                aTag.append(item["text"]);
                if (item["linkAttribute"]) this._setAttributes(item["linkAttribute"], aTag);
                if (item["url"])
                    aTag.attr('href', item["url"]);
                liTag.append(aTag);
            }
            if (item["id"]) {
                liTag.prop("id", item["id"]);
            }
            return liTag;
		},
		/**
        * To find out each the item and their target element from item collection and tatrget element collection.	
        * @private
        */
		_insertNode:function(itemCollection,targetNode,operation){
			var item=0,targetList=0,target=0,targetCollection=[];
			typeof (targetNode) ==="string" ? targetCollection.push(this.element.find(targetNode)):typeof (targetNode) ==="undefined" ?targetCollection.push("default"):targetCollection.push(targetNode);
			for(targetList=0;targetList<targetCollection.length;targetList++){
				for(target=0;target<targetCollection[targetList].length;target++)
					for(item=0;item<itemCollection.length;item++)
						this._addItem(itemCollection[item],targetCollection[targetList][target],operation);
		   }
		},
		/**
        * To insert the menu items at their respective place.
        * @private
        */
		_addItem:function(item,target,operation){
				var element,targetElement;
				this._wireEvents("_off");
		        element = this._createMenuItem(item);
				target = target === "default" ? $("#"+item["parentId"]):$(target);
				switch(operation){
				case "insert":
					targetElement= target.children('ul');
					targetElement.length != 0 ? targetElement.append(element):this._createSubLevelItem(target,element);
					break;
				case "insertBefore":
					element.insertBefore(target);
					break;
				case "insertAfter":
					element.insertAfter(target);
					break;
					}
			this._wireEvents("_on");
		},
		/**
        * To remove the root level element while all child level elements are deleted	
        * @private
        */
		_removeItem:function(item){
		  if(item.siblings('li').length == 0 ){
					item.closest("ul").siblings('a.aschild').removeClass("aschild e-arrow-space").children('span.e-icon').remove();
					!item.closest("ul").hasClass("e-menu")?item.closest("ul").remove():item.remove();}
			else
					item.remove();
		},

        //-------------------------Public Methods---------------------------------------------//
		/**
       * Insert the menu item as child of target node.
       * @alias insert
       * @return jQuery
       * @param {ArrayObject}  item  Information about Menu item.
       * @param {string | Object}  target   Selector of target node or Object of target node.
      
       * @example 
         * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       *	var menuObj = $("#menu").data("ejMenu");
       *	//To insert menu item 
       *	menuObj.insert([{
	   *          id:"More",
	   *        text:"More"
	   *		}],"#Home");
      * &lt;/script&gt;
       * @example 
         * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To insert menu item 
       * $("#menu").ejMenu("insert",[{
	   *          id:"More",
	   *        text:"More"
	   *		}],"#Home");
      * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */
		insert:function(item,target){
			this._insertNode(item,target,"insert");
		},	
              /**
       * Insert the menu item before the target node.
       * @alias insertBefore
       * @return jQuery
       * @param {ArrayObject}  item  Information about Menu item.
       * @param {string | Object}  target   Selector of target node or Object of target node.
      
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       *	var menuObj = $("#menu").data("ejMenu");
       *	//To insert menu item 
       *	menuObj.insertBefore([{
	   *          id:"More",
	   *        text:"More"
	   *		}],"#Home");
      * &lt;/script&gt;
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To insert menu item 
       * $("#menu").ejMenu("insertBefore",[{
	   *          id:"More",
	   *        text:"More"
	   *		}],"#Home");
      * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */				
		insertBefore:function(item,target){
			this._insertNode(item,target,"insertBefore");
		},
		/**
       * Insert the menu item after the target node.
       * @alias insertAfter
       * @return jQuery
       * @param {ArrayObject}  item  Information about Menu item.
       * @param {string | Object}  target   Selector of target node or Object of target node.
      
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       *	var menuObj = $("#menu").data("ejMenu");
       *	//To insert menu item 
       *	menuObj.insertAfter([{
	   *          id:"More",
	   *        text:"More"
	   *		}],"#Home");
     * &lt;/script&gt;
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To insert menu item 
       * $("#menu").ejMenu("insertAfter",[{
	   *          id:"More",
	   *        text:"More"
	   *		}],"#Home");
     * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */	
		insertAfter:function(item,target){
			this._insertNode(item,target,"insertAfter");
		},
		/**
       * Remove Menu item.
       * @alias remove
       * @return jQuery
       * @param {ArrayObject | ArrayString}  target   Selector of target node or Object of target node.
      
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       * var menuObj = $("#menu").data("ejMenu");
       * //To remove menu item 
       * menuObj.remove(["#Home"]);
       * &lt;/script&gt;
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To remove menu item 
       * $("#menu").ejMenu("remove",["#Home"]);
       * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */
		remove:function(targetCollection){
		var target=0,innerTarget=0;   
			 for(target=0;target<targetCollection.length;target++){
				targetCollection[target] = typeof(targetCollection[target]) === "string" ? (this.element.find(targetCollection[target])):targetCollection[target];
					for(innerTarget=0;innerTarget<targetCollection[target].length;innerTarget++)
					(targetCollection[target][innerTarget].tagName === "LI" || targetCollection[target][innerTarget].tagName === "UL")? this._removeItem($(targetCollection[target][innerTarget])):targetCollection[target][innerTarget].remove();
			}
		},	
     /**
       * Shows the Context Menu .
       * @alias showContextMenu
       * @return jQuery
       * @param {number}  locationX  x co-ordinate position of context menu. 
       * @param {number}  locationY   y co-ordinate position of context menu. 
       * @param {object}  targetElement  target element 
       * @param {object}  event name of the event
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       *	var menuObj = $("#menu").data("ejMenu");
       *	//To show context menu
       *	menuObj.ShowContextMenu();
       * &lt;/script&gt;
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To show context menu
       * $("#menu").ejMenu("ShowContextMenu");
       * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */
        //Displays the context menu
        _showContextMenu: function (locationX, locationY, targetElement, e) {
            this._closeMenu();
            this._eventArgs = e;
            if (this._trigger("beforeOpen", { target: targetElement })) return false;
            if (this._preventContextOpen) {
                if (!ej.isNullOrUndefined(targetElement))
                    this._targetElement = targetElement;
                else if (!ej.isNullOrUndefined(target))
                    this._targetElement = target;
                else
                    this._targetElement = this.element;
                this.element.css({ "left": locationX, "top": locationY });
                this.element.css({ "z-index": this._max_zindex() + 1 });
                this._showAnimation(this.element, this._showAnim);
                this._isContextMenuOpen = true;
               
                    this._trigger("open", { target: targetElement });
            }
            return false;
        },
      /**
       * Hides the Context Menu control.
       * @alias hideContextMenu
       * @return jQuery
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       *	var menuObj = $("#menu").data("ejMenu");
       *	//To hide context menu
       *	menuObj.hideContextMenu();
       * &lt;/script&gt;
       * @example 
       * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To hide context menu
       * $("#menu").ejMenu("hideContextMenu");
       * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */
        //Hides the context Menu
        _hideContextMenu: function (e) {
            this._closeMenu();
            this.element.find(".e-mhover").removeClass("e-mhover");
            this.element.find(".e-mfocused").removeClass("e-mfocused");
            this._hideAnimation(this.element, this._hideAnim);
            this._isContextMenuOpen = false;
           
            this._trigger("close", $.extend({ events: e }, e));
        },
        /**
       * Specifies the Menu Item to be disabled by using the Menu Item Text.
       * @alias disableItem 
       * @return jQuery
	   * @param {string} itemtext  Specifies the Menu Item Text to be disabled. 
       * @example 
        * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //initialize the menu object
       *	var menuObj = $("#menu").data("ejMenu");
       *	//To disable Menu item using item text
       *	menuObj.disableItem("Home");
       * &lt;/script&gt;
       * @example 
        * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
       * //To disable Menu item using item text
       * $("#menu").ejMenu("disableItem","Home");
       * &lt;/script&gt;
       * @memberof ejMenu
       * @instance
        */
        //To Disable menu item 
        disableItem: function (itemToDisable) {
           var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToDisable; });
            if (isMenuItem.length > 0 && !($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().addClass("e-disable-item").attr({ "aria-disabled": true });
				isMenuItem.parent().find('>a.aschild span.e-icon.e-arrows').addClass("e-disable");
                this._disabledMenuItems.push(isMenuItem.parent()[0]);
            }
        },
         /**
        * Specifies the Menu Item to be disabled by using the Menu Item Id.
		* @alias disableItembyID
		* @return jQuery
		* @param {string|number} itemid  Specifies the Menu Item id to be disabled 
		* @example 
    * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //initialize the menu object
		*	var menuObj = $("#menu").data("ejMenu");
		*	//To disable Menu item using item id
		*	menuObj.disableItemByID("More");
    * &lt;/script&gt;
		* @example 
    * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //To disable Menu item using item id
		* $("#menu").ejMenu("disableItemByID","More");
    * &lt;/script&gt;
		* @memberof ejMenu
		* @instance
        */
        //To disable menu item by id
        disableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToDisable = this.element.find("#" + itemId) ? this.element.find("#" + itemId)[0] : undefined;
                if (itemToDisable && !($.inArray(itemToDisable, this._disabledMenuItems) > -1)) {
                    $(itemToDisable).addClass("e-disable-item").attr({ "aria-disabled": true });
					$(itemToDisable).find('>a.aschild span.e-icon.e-arrows').addClass("e-disable");
                    this._disabledMenuItems.push(itemToDisable);
                }
            }
        },

       
        /**
        *Specifies the Menu Item to be enabled by using the Menu Item Text.
		* @alias enableItem
		* @return jQuery
		* @param {string} itemtext  Specifies the Menu Item Text to be enabled.
		* @example 
     * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //initialize the menu object
		*	var menuObj = $("#menu").data("ejMenu");
		*	//To enable Menu item using item text
		* menuObj.disableItem("Home");
        * menuObj.disableItem("Search Jobs");
		*	menuObj.enableItem("Search Jobs");
     * &lt;/script&gt;
		* @example 
     * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22}); 
		* //To enable Menu item using item text
        * $("#menu").ejMenu("disableItem","Home");
        * $("#menu").ejMenu("disableItem","Search Jobs");
		* $("#menu").ejMenu("enableItem","Search Jobs");
     * &lt;/script&gt
		* @memberof ejMenu
		* @instance
        */
        //To enable menu item 
        enableItem: function (itemToEnable) {
            var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () { return $.trim($(this).text()) === itemToEnable; });
            if (isMenuItem.length > 0 && ($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
                isMenuItem.parent().removeClass("e-disable-item").attr({ "aria-disabled": false });
				isMenuItem.parent().find('>a.aschild span.e-icon.e-arrows').removeClass("e-disable");
                var index = this._removeValue(isMenuItem, this._disabledMenuItems);
                this._disabledMenuItems.splice(index, 1);
            }
        },
         /**
        *Specifies the Menu Item to be enabled by using the Menu Item Id.
		* @alias enableItembyID
		* @return jQuery
		* @param {string|number} itemid  Specifies the Menu Item id to be enabled. 
		* @example 
     * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //initialize the menu object
		*	var menuObj = $("#menu").data("ejMenu");
		*	//To enable Menu item using item id
		* menuObj.disable();
		*	menuObj.enableItemByID("More");
     * &lt;/script&gt;
		* @example 
     * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //To enable Menu item using item id
		*  $("#menu").ejMenu("disable");
		* $("#menu").ejMenu("enableItemByID","More");
     * &lt;/script&gt;
		* @memberof ejMenu
		* @instance
        */
        //To enable menu item by id
        enableItemByID: function (itemId) {
            if (itemId && itemId != "") {
                var itemToEnable = this.element.find("#" + itemId)[0];
                if (itemToEnable && ($.inArray(itemToEnable, this._disabledMenuItems) > -1)) {
                    $(itemToEnable).removeClass("e-disable-item").attr({ "aria-disabled": false });
					$(itemToEnable).find('>a.aschild span.e-icon.e-arrows').removeClass("e-disable");
                    for(var i = this._disabledMenuItems.length - 1; i >= 0; i--) {
                        if(this._disabledMenuItems[i].id == itemId) {
                           this._disabledMenuItems.splice(i, 1);
                        }
                    }
                }
            }
        },
       /**
        * Disables the Menu control.
		* @alias disable
		* @return jQuery
		* @example 
     * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //initialize the menu object
		*	var menuObj = $("#menu").data("ejMenu");
		*	//To disable Menu control
		*	menuObj.disable();
    * &lt;/script&gt;
		* @example 
     * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //To disable Menu control
		* $("#menu").ejMenu("disable");
    * &lt;/script&gt;
		* @memberof ejMenu
		* @instance
        */
        //To disable menu
        disable: function () {
            this.model.enabled = false;
            var menuItemCollection = this.element.find('>li[class!=e-separator]');
            var proxy = this;
            $.each(menuItemCollection, function (key, value) {
                $(value).addClass("e-disable-item").attr({ "aria-disabled": true });
				$(value).find('>a.aschild span.e-icon.e-arrows').addClass("e-disable");
                proxy._disabledMenuItems.push(value);
            });
        },
        /**
        * Enables the Menu control.
		* @alias enable
		* @return jQuery
		* @example 
    * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22,}); 
		* //initialize the menu object
		*	var menuObj = $("#menu").data("ejMenu");
		*	//To enable Menu control
		*	menuObj.enable();
     * &lt;/script&gt;
		* @example 
    * &lt;ul id="menu"&gt;
                      * &lt;li id="Home"&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/li&gt;
                      * &lt;li&gt;&lt;a&gt;Search Jobs&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Advanced Search&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Company&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Category&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Location&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Skills&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs by Designation&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                      * &lt;/li&gt;
                      * &lt;li id="Post Resume"&gt;&lt;a&gt;Post Resume&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Job Seeker"&gt;&lt;a&gt;JobSeeker Login&lt;/a&gt;&lt;/li&gt;
                      * &lt;li id="Fast Forward"&gt;&lt;a&gt;Fast Forward&lt;/a&gt;
                         * &lt;ul&gt;
                            * &lt;li&gt;&lt;a&gt;Resume writing&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Certification&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Resume Spotlight&lt;/a&gt;&lt;/li&gt;
                            * &lt;li&gt;&lt;a&gt;Jobs4u&lt;/a&gt;&lt;/li&gt;
                         * &lt;/ul&gt;
                       * &lt;/li&gt;
                       * &lt;li id="More"&gt;&lt;a&gt;More&lt;/a&gt;
                          * &lt;ul&gt;
                             * &lt;li&gt;&lt;a&gt;Mobile&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Pay check&lt;/a&gt;&lt;/li&gt;
                             * &lt;li&gt;&lt;a&gt;Blog&lt;/a&gt;&lt;/li&gt;
                          * &lt;/ul&gt;
                        * &lt;/li&gt;
                    * &lt;/ul&gt;
   
       * <br> 
       * &lt;script&gt;
        * $("#menu").ejMenu({height:22}); 
		* //To enable Menu control
		* $("#menu").ejMenu("enable");
     * &lt;/script&gt;
		* @memberof ejMenu
		* @instance
        */
        //To enable menu
        enable: function () {
            this.model.enabled = true;
            var menuItemCollection = this.element.find('li.e-disable-item');
            $.each(menuItemCollection, function (key, value) {
                $(value).removeClass("e-disable-item").attr({ "aria-disabled": false });
				$(value).find('>a.aschild span.e-icon.e-arrows').removeClass("e-disable");
            });
            this._disabledMenuItems.pop(this._disabledMenuItems);
        },

        show: function (locationX, locationY, targetElement, e) {
            /// <summary>This will set hide function of toolbar </summary>
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu") 
                this._showContextMenu(locationX, locationY, targetElement, e);
              else
                this.element.css("display","block");
        },

        hide: function (e) {
            /// <summary>This will set hide function of toolbar </summary>
            if (!this.model.enabled) return false;
            if (this.model.menuType == "contextmenu")
                this._hideContextMenu(e);
            else
            {
                this._closeMenu();
                this.element.css("display", "none");
            }
        },
        
        //--------- ---------------------------------------------------//
        /**
        * Wiring the events to menu control		
        * @private
        */
        /* Register all the events at initialize*/
        _wireEvents: function (action) {
            this [action](this.element.find("li.e-list"), "mouseout", this._mouseOutHandler);
            this [action](this.element.find("li.e-list"), "mouseover", this._mouseOverHandler);
            this [action](this.element.find("li.e-list"), "click", this._onClickHandler);    
            this [action](this.element, "keydown", this._onKeyDownHandler);
            this [action](this.element, "focus", this._OnFocusHandler);
            this [action](this.element, "blur", this._OnFocusOutHandler);
            if (this.model.menuType == "contextmenu" && $(this.model.contextMenuTarget)[0] != null) {
                this._contextMenuEvents(action);
            }
            if (this.model.menuType != "contextmenu") {
                this [action]($(document), "click", this._onDocumentClick);
            }

        },

        //--------------------------------Handlers--------------------------

        /**
         * Section to track the mouse over event		
		 * @private
         */
        // handles the Mouseover event
        _mouseOverHandler: function (event) {
            var element,itemId="";
            this.element.find(".e-mhover").removeClass("e-mhover e-mfocused");
			event.currentTarget= $(event.target).closest("li")[0];
			if (!$(event.currentTarget).hasClass('e-disable-item'))
                $(event.currentTarget).addClass("e-mhover e-mfocused");
                if (event.stopPropagation)
                    event.stopPropagation();
                if (typeof (this._delaySubMenuHover) !== 'undefined') {
                    clearTimeout(this._delaySubMenuHover);
                }
                if (typeof (this._delaySubMenuHover) !== 'undefined') {
                    clearTimeout(this._delayMenuHover);
                }
                this._mouseOver = true;
                this._isMenuOpen = true;
                if ($(event.currentTarget.parentNode.parentNode).is(this.element)) {
                    this._isSubMenuOpen = false;
                }
                else {
                    this._isSubMenuOpen = true;
                }
                if (event.currentTarget.nodeName == "LI" && !$(event.currentTarget).hasClass('e-separator'))
                    element = event.currentTarget;
                else if (event.currentTarget.parentNode) {
                    if (event.currentTarget.parentNode.nodeName == "LI" && !$(event.currentTarget.parentNode).hasClass('e-separator'))
                        element = event.currentTarget.parentNode;
                    else
                        return false;
                }
                else {
                    event.preventDefault();
                    return false;
                }
                this._onMenuIntent(element, this, this._hoverOpen);
                if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                    var menuText = $(element).children('a,span').text();
					itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id:"";
                    var eventArgs = { "text": menuText, "element": element, "event": event ,"ID":itemId};

                    this._trigger("mouseover", $.extend({ events: eventArgs }, eventArgs));
                }
        },
        /**
        * Section to track the mouse out event		
        * @private
        */
        // handles the Mouseout event
        _mouseOutHandler: function (event) {
            var element,itemId = "";
                $(event.currentTarget).removeClass("e-mhover e-mfocused");
                if (event.stopPropagation)
                    event.stopPropagation();
                if (typeof (this._delaySubMenuHover) !== 'undefined') {
                    clearTimeout(this._delaySubMenuHover);
                }
                if (typeof (this._delaySubMenuHover) !== 'undefined') {
                    clearTimeout(this._delayMenuHover);
                }
                this._mouseOver = false;
                this._isMenuOpen = false;

                if (event.currentTarget.nodeName == "LI" && !$(event.currentTarget).hasClass('e-separator'))
                    element = event.currentTarget;
                else if (event.currentTarget.parentNode) {
                    if (event.currentTarget.parentNode.nodeName == "LI" && !$(event.currentTarget.parentNode).hasClass('e-separator'))
                        element = event.currentTarget.parentNode;
                    else
                        return false;
                }
                else {
                    event.preventDefault();
                    return false;
                }
                this._onHide(element, this, this._hoverClose);
                if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                    var menuText = $(element).children('a,span').text();		
					itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id:"";
                    var eventArgs = {  "text": menuText, "element": element, "event": event,"ID":itemId };
                   
                    this._trigger("mouseout", $.extend({ events: eventArgs }, eventArgs));
                }
        },
        /**
         * Section For handle click action.
		 * @private
         */
        _onClickHandler: function (event) {
            event.stopPropagation();
            var element,itemId="";
            this._isFocused = true;
            var openOnClickStart = false;
            if (!$(event.target).closest("li").hasClass('e-separator') && !$(event.target).closest("li").hasClass('e-disable-item') && $(event.target).closest("li").length > 0) {
                element = $(event.target).closest("li")[0];
            }
            else {
                event.preventDefault();
                return false;
            }
            if ($(event.target).is("a") && $(element).find(">a,>span").hasClass('aschild') && this.model.openOnClick) {
                this._isFocused = false;
            }
            if (!this._hoverOpen && $(element).find(">a,>span").hasClass('aschild') ) {
                this._show(element, this._showAnim, this._hideAnim);
                this._hoverOpen = false;
                openOnClickStart = true;
            }
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                //Check if Context Menu, then hide the context menu firing the events
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen) {
                        this._hideAnimation(this.element, this._hideAnim);
                        this._isContextMenuOpen = false;
                        
                        this._trigger("close", $.extend({ events: event }, event));
                    }
                }
                if (!openOnClickStart) {
                    //                    if (window.navigator.appName == "Microsoft Internet Explorer")
                    //                        this._mouseOutHandler(event, true);
                    //                    else
                    if (!$(element).find(">a,>span").hasClass("aschild")) {
                        this._closeMenu();
                        if (this.model.openOnClick)
                            this._hoverOpen = false;
                    }
                }
                var menuText = $(element).children('a,span').text();
				var parent = $(element).closest("ul").parent("li");                
                if(parent.length!=0)
                {
                    parentId = parent.attr("id");
                    parentText=parent.children('a,span').text();
                }
                else
                {
                    parentId = $(element).attr("id");
                    parentText=menuText;
                }	
				itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id:"";
                var eventArgs = { "text": menuText, "element": element, "event": event, "selectedItem": this.selectedItem,"ID":itemId,"parentId":parentId,"parentText":parentText };            
                this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                this.selectedItem = null;
            }
        },

        /**
       * Section to watch the key down action.		
       * @private
       */
        _onKeyDownHandler: function (e) {
            if(this.model.menuType == "contextmenu" && !this._isContextMenuOpen)
                return;
            var element,itemId="", hoverElement = this.element.find(".e-mhover"), focusedElement = this.element.find(".e-mfocused");
	     // tab key
            if (e.keyCode == 9) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
            else if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)
                e.preventDefault();
            //key down
            if (e.keyCode == 40) {
                if (this.model.orientation != "horizontal" && this.element.find(".e-mhover").length > 0) {
                    focusedElement.removeClass("e-mfocused");
                    if (hoverElement.next().hasClass("e-separator"))
                        hoverElement.next().next().addClass("e-mfocused");
                    else if (hoverElement.is(':last-child')) {
                        hoverElement.siblings().first().addClass("e-mfocused");
                    }
                    else
                        hoverElement.next().addClass("e-mfocused");
                }
                else {
                    if (this.model.menuType == "contextmenu")
                        this.element.find("li").first().addClass("e-mfocused e-mhover");
                }
                if (this.model.orientation == "horizontal" && this.element.find(">li.e-mhover").children("ul").length > 0) {
                    this._show(hoverElement[0], this._showAnim, this._hideAnim);
                    hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                }
                else {
                    if (hoverElement.is(':last-child')) {
                        hoverElement.removeClass("e-mhover").siblings().first().addClass("e-mhover");
                    }
                    else if (hoverElement.next().hasClass("e-separator"))
                        hoverElement.removeClass("e-mhover").next().next().addClass("e-mhover");
                    else {
                        hoverElement.removeClass("e-mhover").next().addClass("e-mhover");
                    }
                }
            }
            //key right
            if (e.keyCode == 39) {
                //for root level li
                if (this.model.orientation == "horizontal" && this.element.find(">li.e-list").hasClass("e-mhover")) {
				
                    if (hoverElement.is(":last-child")) {
					
                        hoverElement.removeClass("e-mhover e-mfocused");
                        if (this.element.find("li.e-list").first().hasClass("e-separator")) this.element.find("li.e-list").first().next().addClass("e-mhover e-mfocused");
                        else this.element.find("li.e-list").first().addClass("e-mhover e-mfocused");
                    }
                    else if (hoverElement.next().hasClass("e-separator")) {
					
                        hoverElement.removeClass("e-mhover e-mfocused").next().next().addClass("e-mhover e-mfocused");
                    }
                    else {
					
                        hoverElement.removeClass("e-mhover e-mfocused").next().addClass("e-mhover e-mfocused");
                    }
                }
                else if (this.element.find("li.e-mhover").children("ul").length > 0) {
                    this._show(hoverElement[0], this._showAnim, this._hideAnim);
                    hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                }
                else if (hoverElement.children("ul").length <= 0) {
                    this.element.find(".e-mfocused >ul , .e-mfocused >ul li.e-list >ul").hide();
                    hoverElement.removeClass("e-mhover");
                    if (focusedElement.next().hasClass("e-separator")) {
                        focusedElement.removeClass("e-mfocused").next().next().addClass("e-mhover e-mfocused");

                    } else if (focusedElement.next().length <= 0) {
                        focusedElement.removeClass("e-mfocused").siblings().first().addClass("e-mhover e-mfocused");
                    } else focusedElement.removeClass("e-mfocused").next().addClass("e-mhover e-mfocused");
                }
            }
            //key up
            if (e.keyCode == 38) {
                if (this.model.orientation != "horizontal" && this.element.find(".e-mhover").length > 0) {
                    hoverElement.children("ul").hide();
                    focusedElement.removeClass("e-mfocused");
                    if (hoverElement.prev().hasClass("e-separator"))
                        hoverElement.prev().prev().addClass("e-mfocused");
                    else if (hoverElement.is(':first-child')) {
                        hoverElement.siblings().last().addClass("e-mfocused");
                    }
                    else
                        hoverElement.prev().addClass("e-mfocused");
                }
                else {
                    if (this.model.menuType == "contextmenu")
                    this.element.find("li").last().addClass("e-mfocused e-mhover");
                }
                if (hoverElement.is(':first-child')) {
                    hoverElement.removeClass("e-mhover e-mfocused").siblings().last().addClass("e-mhover");
                }
                else if (hoverElement.prev().hasClass("e-separator"))
                    hoverElement.removeClass("e-mhover").prev().prev().addClass("e-mhover");
                else
                    hoverElement.removeClass("e-mhover").prev().addClass("e-mhover");

            }
            //Key left
            if (e.keyCode == 37) {
                //for root level li
                if (this.model.orientation == "horizontal" && this.element.find(">li.e-list").hasClass("e-mhover")) {
                    if (hoverElement.is(":first-child")) {
                        hoverElement.removeClass("e-mhover e-mfocused");
                        if (this.element.find(">li.e-list").last().hasClass("e-separator"))
                            this.element.find(">li.e-list").last().prev().addClass("e-mhover e-mfocused");
                        else
                            this.element.find(">li.e-list").last().addClass("e-mhover e-mfocused");
                    }
                    else if (hoverElement.prev().hasClass("e-separator")) {
                        hoverElement.removeClass("e-mhover e-mfocused").prev().prev().addClass("e-mhover e-mfocused");
                    }
                    else {
                        hoverElement.removeClass("e-mhover e-mfocused").prev().addClass("e-mhover e-mfocused");
                    }
                }
                else if (this.element.find("li.e-mhover")) {
                    if (!hoverElement.parent().hasClass("e-context")) {
                    this._hideAnimation(hoverElement.parent(), this._hideAnim);
                    hoverElement.parent().closest("li.e-list").addClass("e-mhover");
                    hoverElement.removeClass("e-mhover");
                }
                }
                else {
                    this._hideAnimation(hoverElement, this._showAnim, this._hideAnim);
                    hoverElement.removeClass("e-mhover").parent().addClass("e-mhover");
                }
            }
            if (e.keyCode == 13) {
                        var menuText = $(hoverElement).children('a,span').text();
                        itemId = !ej.isNullOrUndefined($(hoverElement)[0]) ? $(hoverElement)[0].id : "";
                        var eventArgs = { "menuId": this.element[0].id, "menuText": menuText, "selectedItem": focusedElement, "itemId": itemId };
                if (this.model.menuType == "contextmenu") {
                    if (this._isContextMenuOpen && hoverElement.length > 0 && !focusedElement.hasClass("e-disable-item")) {
                        if (this.model.click)
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
                        this.selectedItem = null;
                        this._hideContextMenu(e);
                    }
                } else {
                    if (hoverElement.length > 0 && !hoverElement.hasClass("e-disable-item")) {
                        if ($(hoverElement).find(">a,>span").hasClass('aschild')) {
                            this._show(hoverElement[0], this._showAnim, this._hideAnim);
                            hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
                        }
                        else {
                this.element.find(".e-mhover >a,.e-mhover >span ").focus();
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
            }
                        if (ej.isNullOrUndefined($(hoverElement).find(">a").attr("href")))
                            this._trigger("click", $.extend({ events: eventArgs }, eventArgs));
            }
            }
            }
            if (e.keyCode == 27) {
                if (this.model.menuType == "contextmenu")
                    this._hideContextMenu(e);
                else
                this._closeAll();
            }
            if (e.target.nodeName == "DIV" && $(e.target).children().is(this.element))
                element = $(e.target).children()[0];
            else if (e.target.nodeName == "LI" && !$(e.target).hasClass('e-separator'))
                element = e.target;
            else if (e.target.parentNode) {
                if (e.target.parentNode.nodeName == "LI" && !$(e.target.parentNode).hasClass('e-separator'))
                    element = e.target.parentNode;
            }
            else
                return false;
            if (!($.inArray(element, this._disabledMenuItems) > -1)) {
                var menuText = $(element).children('a,span').text();
				
			   itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id:"";
                var eventArgs = { "text": menuText, "element": element, "event": e,"ID":itemId };
                
                this._trigger("keydown", $.extend({ events: eventArgs }, eventArgs));
            }
            this._isFocused = false;
        },
        /**
         * Section For handle Focus action.
		 * @private
         */
        _OnFocusHandler: function (event) {
            if (!this.element.find(">li:first").hasClass("e-disable-item") && this._isFocused && this.element.find(".e-mhover").length == 0) {
                this.element.find(">li:first").addClass("e-mhover e-mfocused");
            }
            else this._isFocused = true;
        },
        /**
         * Section For handle FocusOut action.
		 * @private
         */
        _OnFocusOutHandler: function () {
            if (!this._isFocused) {
                this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
                this._closeAll();
            }
            this._isFocused = true;
        },
        /**
        * Section For handle Click action on Document 
        * @private
        */
        _onDocumentClick: function (event) {
            if (this.model.openOnClick)
                this._hoverOpen = false;
            if (!$(event.target).parents("ul.e-menu").is(this.element)) {
                this._isFocused = false;
                this._OnFocusOutHandler();
            }
        },
        /**
        * Section For handle the context menu event 
        * @private
        */
        //handles the context menu event
        _ContextMenuHandler: function (e) {
            var isRightClick = false;
            if (e.type == "taphold")
                isRightClick = true;
            else if (e.button)
                isRightClick = (e.button == 2);
            else if (e.which)
                isRightClick = (e.which == 3); //for Opera
            var targetElement = e.target;
            if (isRightClick) {
                var evt = e;
                if (e.type == "taphold") {
                    if (e.options.type == "touchstart") evt = e.options.touches[0];
                    else evt = e.options;
                }
                var locationX = (evt.clientX + this.element.width() < $(window).width()) ? evt.pageX : evt.pageX - this.element.width();
                var locationY = (evt.clientY + this.element.height() < $(window).height()) ? evt.pageY : evt.pageY - this.element.height();
                var bodyPos = $("body").css("position") != "static" ? $("body").offset() : { left: 0, top: 0 };
                locationX -= bodyPos.left, locationY -= bodyPos.top;
                var showSpeed = this._showSpeed;
                this._showContextMenu(locationX, locationY, targetElement, e);
            }
            else {
                if (this._isContextMenuOpen) {
                    var hideanim = this._hideAnim;
                    var hideSpeed = this._hideSpeed;
                    this._hideContextMenu(hideanim, hideSpeed, e);
                }
            }
        },
        /**
         * Section For handles preventing the default (browser's) context menu
		 * @private
         */
        //handles preventing the default (browser's) context menu
        _onDefaultPreventer: function (e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        },
        /**
         * Section For handles context close on document click
		 * @private
         */
        //handles context close on document click
        _onContextClose: function (e) {
            var proxy = this;
            if (this._isContextMenuOpen) {
                var isRightClick = false;
                if (e.button)
                    isRightClick = (e.button == 2);
                else if (e.which)
                    isRightClick = (e.which == 3); //for Opera
                if ($(e.target).is(this.model.contextMenuTarget) || $(e.target).parents().is(this.model.contextMenuTarget) || $(e.target).parents(".e-context").is(this.element))
                    isRightClick = true;
                else
                    isRightClick = false;
                if (!isRightClick) {
					var hideanim = this._hideAnim;
					var hideSpeed = this._hideSpeed;
					this._hideContextMenu(hideanim, hideSpeed, e);                    
                    var parentElements = $(e.target).parents();
                    $.each(parentElements, function (index, value) {
                        if (value.id == proxy._ContextTargetId) {
                            return;
                        }
                    });

                }
            }
        }

    });

    /**
	 * Enum for Menu type	 
	 * @enum {string}
	 * @global 
	 */
    ej.MenuType = {
        /**  support for list of items appears as normal menu in horizontal or vertical direction. */
        NormalMenu: "normalmenu",
        /**  support for list of items appears as menu when right clicked on target area, thereby preventing browser’s default right click.. */
        ContextMenu: "contextmenu"
    };
    /**
	 * Enum for Sub Menu Popup direction	 
	 * @enum {string}
	 * @global 
	 */
    ej.Direction = {
        /**  support for Render sub menu popup in left direction. */
        Left: "left",
        /**  support for Render sub menu popup in Right direction. */
        Right: "right"
    };
    /**
	 * Enum for animationType	 
	 * @enum {string}
	 * @global 
	 */
    ej.AnimationType = {
        /**  support for disable the AnimationType while hover or click an menu items. */
        None: "none",
        /**  support for enable the AnimationType while hover or click an menu items. */
        Default: "default"
    };

    //mentions the recursive type of child
    //ej.Menu.prototype.defaults.fields.child = ej.Menu.prototype.defaults.fields;
    //ej.Menu.prototype.dataTypes.fields.child = ej.Menu.prototype.dataTypes.fields;

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

    ej.widget("ejPager", "ej.Pager", {
        _rootCSS: "e-pager",
        validTags: ["div"],
        // default model
        defaults: {
            pageSize: 12,
            pageCount: 10,
            currentPage: 1,
            enableExternalMessage: false,
            externalMessage:"",
            enableQueryString:false,
            locale: "en-US",
            masterObject: null,
            click: null,
            enableRTL: false,
            totalRecordsCount: null,
            totalPages: null,
            customText:""
        },

        // constructor function
        _init: function () {
            this._initPrivateProperties();
            this.model.enableQueryString && this._queryStringValue();
            this.renderPager();
            this._wireEvents();
        },
        _initPrivateProperties: function () {
            this._links = [];
            this._$prev = null;
            this._$first = null;
            this._$PP = null;
            this._$NP = null;
            this._lastNP = false;
            this._lastpageCount = null;
            this._$last = null;
            this._$next = null;
            this._prevPageNo = null;
        },
        _wireEvents: function () {
            if (this.model.click != undefined)
                this._on(this.element, "click", this._pagerClickHandler);

        },
        renderPager: function () {
            var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {}, { unselectable: "on" });
            var $parentMsgBar = ej.buildTag('div.e-parentmsgbar');
            this._renderPagerContainer($pagerContainer);
            this._renderMsgBar($parentMsgBar);
            this.element.append($pagerContainer).append($parentMsgBar).addClass(this.model.enableRTL ? "e-pager e-rtl" : "e-pager");
            this.model.enableExternalMessage && this._renderPagerMessage();
        },
        _queryStringValue: function () {
            var results = new RegExp('[\\?&]page=([^&#]*)').exec(window.location.href);
            !results ? this.model.currentPage = 1 : this.model.currentPage = parseInt(results[1] || 1);
        },
        _renderPagerMessage: function () {
            var $messageDiv = ej.buildTag('div.e-pagermessage');
            if (this.model.externalMessage.toString().length)
                $messageDiv.html(this.model.externalMessage);
            else
                $messageDiv.hide();
            this.element.append($messageDiv);
        },
        _renderPagerContainer: function ($pagerContainer) {
            //Update pager styles here for next versions
            this._renderBackwardButton($pagerContainer);
            this._renderpreviousPager($pagerContainer);
            this._renderNumericItem($pagerContainer);
            this._renderForwardPager($pagerContainer);
            this._renderForwardButton($pagerContainer);
        },
        _renderMsgBar: function ($ParentMsgBar) {
            var $msgBar = ej.buildTag('span', String.format(this._getLocalizedLabels("pagerInfo"), this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
            $ParentMsgBar.append($msgBar);
            $ParentMsgBar.css("text-align", ej.TextAlign.Right);
        },
        _renderpreviousPager: function ($pagerContainer) {
            this._$PP = ej.buildTag('a.e-link e-nextprevitemdisabled e-disable e-spacing e-PP', "...", {}, { title: this._getLocalizedLabels("previousPagerTooltip") , role:"link" });
            $pagerContainer.append(this._$PP);
        },
        _renderForwardPager: function ($pagerContainer) {
            this._$NP = ej.buildTag('a.e-link e-NP e-numericitem e-spacing e-default', "...", {}, { title: this._getLocalizedLabels("nextPagerTooltip"), role: "link" });
            $pagerContainer.append(this._$NP);
        },
        _renderBackwardButton: function ($pagerContainer) {
            this._$first = ej.buildTag('div.e-first e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, { unselectable: "on", title: this._getLocalizedLabels("firstPageTooltip") });
            this._$prev = ej.buildTag('div.e-prev e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, { unselectable: "on", title: this._getLocalizedLabels("previousPageTooltip") });
            $pagerContainer.append(this._$first);
            $pagerContainer.append(this._$prev);
        },
        _renderNumericItem: function ($pagerContainer) {
            var $numericContainer = ej.buildTag('div.e-numericcontainer e-default', "", {}, { unselectable: "on", id: "NumericContainer" });
            this._renderNumericLinks($numericContainer,this.model.pageCount);
            $pagerContainer.append($numericContainer);
        },
        _renderNumericLinks: function ($numericContainer) {
            $numericContainer.empty();
            for (var page = 1; page <= this.model.pageCount; page++) {
                var $link = ej.buildTag('a.e-link', this.model.customText + page, {}, { role: "link" }).addClass("e-numericitem e-spacing e-default");
                if (page == this.model.currentPage)
                    $link.removeClass("e-default").addClass("e-currentitem e-active");
                $numericContainer.append($link);
            }
            this._links = $numericContainer.children();
        },
        _renderForwardButton: function ($pagerContainer) {
            this._$next = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, { unselectable: "on", title: this._getLocalizedLabels("nextPageTooltip") });
            this._$last = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, { unselectable: "on", title: this._getLocalizedLabels("lastPageTooltip") });
            $pagerContainer.append(this._$next);
            $pagerContainer.append(this._$last);

        },
        _applyCss: function () {
            if (this.model.currentPage > 1) {
                this._$prev.removeClass("e-prevpagedisabled").removeClass("e-disable").addClass("e-prevpage e-default");
                this._$first.removeClass("e-firstpagedisabled").removeClass("e-disable").addClass("e-firstpage e-default");
            } else {
                this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
                this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
            }
            (this.model.currentPage > this.model.pageCount) ?
                 (this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default")) : (this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default"));

            if (parseInt(this._links[0].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount > this.model.totalPages)
                this._lastNP = true;
            else
                this._lastNP = false;

            if (this._lastNP == false)
                this._$NP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
            else
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");

            this._lastpageCount = this.model.totalPages % this.model.pageCount;
            if (this._lastpageCount == 0)
                this._lastpageCount = this.model.pageCount;
            if (this.model.currentPage > (this.model.totalPages - this._LastpageCount)) {
                this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            }
            if (this.model.currentPage == this.model.totalPages || this.model.totalRecordsCount == 0) {
                this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
                this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            } else {
                this._$last.addClass("e-lastpage e-default").removeClass("e-lastpagedisabled").removeClass("e-disable");
                this._$next.addClass("e-nextpage e-default").removeClass("e-nextpagedisabled").removeClass("e-disable");
            }
            if (this._links.length) {
                this._links.removeClass("e-currentitem").removeClass("e-active").addClass("e-default");
                $(this._links[(this.model.currentPage - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-currentitem e-active");
                $(this._links[(this._prevPageNo - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-numericitem e-active");
            }
            if (this.model.pageSize >= (this.model.totalRecordsCount / this.model.pageCount) && this._$PP != null && this._$PP.length != 0) {
                this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
                this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
            }
        },
        _SetTotalPages: function () {
            this.model.totalPages = (this.model.totalRecordsCount % this.model.pageSize == 0) ? (this.model.totalRecordsCount / this.model.pageSize) : (parseInt(this.model.totalRecordsCount / this.model.pageSize, 10) + 1);
        },
        _refreshNumericItem: function () {
            if (this._links.length != 0 && this._links != null) {
                this.model.currentPage = this.model.totalPages == 1 ? 1 : this.model.currentPage;
                if (this.model.currentPage > this.model.totalPages && this.model.totalPages != 0)
                    this.model.currentPage = this.model.totalPages;
                var _pagerTarget = parseInt(this.model.currentPage / this.model.pageCount, 10);
                if (this.model.currentPage % this.model.pageCount == 0)
                    if (_pagerTarget > 0)
                        _pagerTarget = _pagerTarget - 1;
                this._links.css("display", "none");
                for (var i = 0; i < this.model.pageCount; i++) {
                    var start = (_pagerTarget * this.model.pageCount) + 1 + i;
                    if (start <= this.model.totalPages) {
                        this._links[i].style.display = '';
                        $(this._links[i]).html(this.model.customText + start);
                    }
                }
            }
        },
        _refreshPagerInfo: function () {
            if (this.model.totalRecordsCount == 0)
                this.model.currentPage = 0;
            this.element.find("span").text(String.format(this._getLocalizedLabels("pagerInfo"), this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
        },
        _refreshExternalMessage: function () {
            if (this.model.externalMessage.toString().length)
                this.element.find(".e-pagermessage").empty().html(this.model.externalMessage).show();
            else
                this.element.find(".e-pagermessage").hide();
        },
        refreshPager: function () {
            this._SetTotalPages();
            this._refreshNumericItem();
            this._refreshPagerInfo();
            this._applyCss();
            this.model.enableExternalMessage && this._refreshExternalMessage();
            if (this.model.enableRTL)
                this.element.addClass("e-rtl");
            else
                this.element.removeClass("e-rtl");
        },

        _kDownHandler: function (e) {
            var code;
            if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
            else if (e.which) code = e.which; // ns4 and opera
            else code = e.charCode;
            e.target = null;
            if (this.model.masterObject.checkKey("firstPage", code, e))
                e.target = this._$first;
            else if (this.model.masterObject.checkKey("previousPager", code, e))
                e.target = this._$PP;
            else if (this.model.masterObject.checkKey("previousPage", code, e))
                e.target = this._$prev;
            else if (this.model.masterObject.checkKey("lastPage", code, e))
                e.target = this._$last;
            else if (this.model.masterObject.checkKey("nextPager", code, e))
                e.target = this._$NP;
            else if (this.model.masterObject.checkKey("nextPage", code, e))
                e.target = this._$next;
            else
                return false;
            this._pagerClickHandler(e);
        },

        _pagerClickHandler: function (e) {
            this._prevPageNo = this.model.currentPage;
            var $target = $(e.target);
            if ($.inArray(e.target, this._links) != -1) {
                this.model.currentPage = parseInt(e.target.innerHTML.replace(this.model.customText,""), 10);

            }
            else if ($target.hasClass("e-nextpage") && $target.hasClass("e-nextpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 0) {
                    this.model.currentPage++;
                    if (this._links != undefined && this._links.length != 0)
                        this.model.currentPage = parseInt(this._links[0].innerHTML, 10) + this.model.pageCount;
                    if (parseInt(this._links[this.model.pageCount - 1].innerHTML, 10) + this.model.pageCount >= this.model.totalPages)
                        this._lastNP = true;
                }
                else
                    this.model.currentPage++;
            }
            else if ($target.hasClass("e-prevpage") && $target.hasClass("e-prevpagedisabled") != true) {
                if (this.model.currentPage % this.model.pageCount == 1)
                    this._lastNP = false;
                this.model.currentPage--;
                if (this.model.currentPage < 0) { this.model.currentPage = 0; }
            }
            else if ($target.hasClass("e-lastpage") && $target.hasClass("e-lastpagedisabled") != true) {
                this._LastpageCount = this.model.totalPages % this.model.pageCount;
                (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                this.model.currentPage = this.model.totalPages;
                this._lastNP = true;
            }
            else if ($target.hasClass("e-firstpage") && $target.hasClass("e-firstpagedisabled") != true) {
                this.model.currentPage = 1;
                this._lastNP = false;
            }
            else if ($target.hasClass("e-NP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt(this._links[0].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount;
                if (parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText,""), 10) + this.model.pageCount >= this.model.totalPages) {
                    this._lastNP = true;
                    if ((this.model.totalRecordsCount - this.model.pageSize) < this.model.pageSize)
                        this._LastpageCount = this.model.totalRecordsCount - this.model.pageSize;
                    else
                        this._LastpageCount = ((this.model.totalRecordsCount / this.model.pageSize) % this.model.pageCount);
                    (this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
                    if (this._links != undefined)
                        this.model.currentPage = parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText,""), 10) + 1;
                }
            }
            else if ($target.hasClass("e-PP") && $target.hasClass("e-nextprevitemdisabled") != true) {
                if (this._links != undefined)
                    this.model.currentPage = parseInt(this._links[0].innerHTML, 10) - this.model.pageCount;
                this._lastNP = false;
            }
            this.goToPage(this.model.currentPage,e);
            return false;
        },
        goToPage: function (pageIndex,event) {
            if (pageIndex != this.model.currentPage)
                this._prevPageNo = this.model.currentPage;
            if (this._prevPageNo !== pageIndex && (pageIndex >= 1 && pageIndex <= this.model.totalPages)) {
                this.model.currentPage = pageIndex;
                this.model.enableQueryString && this._updateQueryString(this.model.currentPage);
                this._trigger("click", { "currentPage": pageIndex });
            }
            else
                this._trigger("click", { "currentPage": pageIndex, "event": event });

        },
        _updateQueryString: function (value) {
            var _newUrl = this._getUpdatedURL(window.location.href, "page", value);
            if (history.pushState) {
                window.history.pushState({ path: _newUrl }, '', _newUrl);
            }
            else
                window.location.href = _newUrl;
        },

        _getUpdatedURL: function (uri, key, value) {
            var re = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
            if (uri.match(re)) {
                return uri.replace(re, '$1' + key + "=" + value + '$2');
            } else {
                var hash = '';
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.indexOf('#') !== -1) {
                    hash = uri.replace(/.*#/, '#');
                    uri = uri.replace(/#.*/, '');
                }
                return uri + separator + key + "=" + value + hash;
            }
        },
        _getLocalizedLabels: function (property) {
            return (ej.Pager.locale[this.model.locale] === undefined || ej.Pager.locale[this.model.locale][property] === undefined) ? ej.Pager.locale["en-US"][property] : ej.Pager.locale[this.model.locale][property];
        },
        _setFirst: true,
        _setModel: function (options) {
            for (var prop in options) {
                switch (prop) {
                    case "pageCount":
                        this._renderNumericLinks(this.element.find("#NumericContainer"));
                        break;
                }
            }
            this.refreshPager();
        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {
            this.element.empty().removeClass("e-pager");
        }
    });
    ej.Pager.locale = {};
    ej.Pager.locale["en-US"] = {
        pagerInfo: "{0} of {1} pages ({2} items)",
        firstPageTooltip: "Go to first page",
        lastPageTooltip: "Go to last page",
        nextPageTooltip: "Go to next page",
        previousPageTooltip: "Go to previous page",
        nextPagerTooltip: "Go to next Pager",
        previousPagerTooltip: "Go to previous Pager"
    };

})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    // ejSlider is the plugin name 
    // "ej.Slider" is "namespace.className" will hold functions and properties

    /**
    * @namespace ej
	* @class ejSlider
	* @requires jQuery
    * @requires jquery.easing.1.3.js
    * @requires ej.core.js
    * @requires ej.slider.js
	* @classdesc Custom Design for Html Slider control.
	* @example 
	* &lt;div id="slider"&gt; &lt;/div&gt; <br> 
	* &lt;script&gt; <br>
	* // Create Slider <br>
    * $('#slider').ejSlider(); <br>
	* &lt;/script&gt; <br>
	*/

    ej.widget("ejSlider", "ej.Slider", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span"],
        _rootCSS: "e-slider",
        _setFirst: false,

        // default model
        defaults: {
            /**
                     * Specifies the orientation of the slider.See {@link orientation}
                     * @default ej.orientation.Horizontal
                     * @type {enum}
                     * @example
                     * &lt;div id="slider"&gt; &lt;/div&gt; <br>
                     * &lt;script&gt;
                     * //To set orientation API value during initialization
                     * $("#slider").ejSlider({ orientation: ej.Orientation.Vertical});
                     * &lt;/script&gt;
                     * @memberof ejSlider
                     * @instance
                     */
            orientation: "horizontal",
            /**		
			* Specifies the animation behaviour of the slider.	
			* @default true
			* @type {boolean}
			* @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set enableAnimation API value during initialization  
			* 	$("#slider").ejSlider({ enableAnimation: false});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            enableAnimation: true,
            /**
			* Specifies the animationSpeed of the slider.
			* @default 500
			* @type {number}
			* @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set animationSpeed API value during initialization  
			* $("#slider").ejSlider({ animationSpeed: 500});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            animationSpeed: 500,
            /**
			* Specifies the showTooltip to shows the current Slider value, while moving the Slider handle of the slider.	
			* @default true
			* @type {boolean}
			* @example 
            *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set showTooltip API value during initialization  
			* 	$("#slider").ejSlider({ showTooltip: true});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            showTooltip: true,
            /**		
			* Specify the CSS class to slider to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set cssClass API value during initialization  
			* 	$("#slider").ejSlider({ cssClass: "gradient-lime"});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            cssClass: "",
            /**		
			* Specifies the rounded corner behaviour for slider.
			* @default false
			* @type {boolean}
			* @example
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set showRoundedCorner API value during initialization  
			* 	$("#slider").ejSlider({ showRoundedCorner: true});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            showRoundedCorner: false,
            /**
			* Specifies the readOnly of the slider.
			* @default false
			* @type {boolean}
			* @example
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set readOnly API value during initialization  
			* 	$("#slider").ejSlider({ readOnly: true});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            readOnly: false,
            /**
			* Specifies the Right to Left Direction of the slider.
			* @default false
			* @type {boolean}
			* @example 
          *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set enableRTL API value during initialization  
			* 	$("#slider").ejSlider({ enableRTL: false});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            enableRTL: false,
            /**
			* Specifies the starting value of the slider.
			* @default 0
			* @type {number}
			* @example 
            *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set minValue API value during initialization  
			* 	$("#slider").ejSlider({ minValue: 0});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            minValue: 0,
            /**
			* Specifies the ending value of the slider.	
			* @default 100
			* @type {number}
			* @example
           *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set maxValue API value during initialization  
			* 	$("#slider").ejSlider({ maxValue: 60});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            maxValue: 100,
            /**
			* Specifies the sliderType of the slider.
			* @default ej.SliderType.Default
			* @type {enum}
			* @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set sliderType API value during initialization
			* $("#slider").ejSlider({ sliderType: ej.SliderType.Default});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            sliderType: "default",
            /**
			* Specifies the value of the slider.
			* @default 0
			* @type {number}
			* @example
           *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set value API  during initialization
			* 	$("#slider").ejSlider({ value: 60});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            value: null,
            /**
			* Specifies the values of the range slider.
			* @default [minValue,maxValue]
			* @type {array}
			* @example
            *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set values API during initialization
			* 	$("#slider").ejSlider({ values: [30,60]});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            values: null,
            /**
			* Specifies the incremental step value of the slider.
			* @default 1
			* @type {number}
			* @example
          *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set incrementStep API value during initialization  
			* 	$("#slider").ejSlider({ incrementStep: 2});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            incrementStep: 1,
            /**
			* Specifies the height of the slider.
			* @default 14
			* @type {String}
			* @example
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set height API value during initialization  
			* 	$("#slider").ejSlider({ height: 14});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            height: null,
            /**
			* Specifies the width of the slider.
			* @default 100%
			* @type {String}
			* @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set width API value during initialization
			* 	$("#slider").ejSlider({ width: "300px"});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            width: null,
            /**		
			* Specifies the state of the slider.
			* @default true
			* @type {boolean}
			* @example
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set enabled API value during initialization  
			* 	$("#slider").ejSlider({ enabled: false});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            enabled: true,
            /**
			* Specifies the major (large) and minor (small) ticks of the slider.	
			* @default false
			* @type {boolean}
			* @example
          *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set enabled API value during initialization
			* 	$("#slider").ejSlider({ showScale: false});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            showScale: false,
            /**		
			* Specifies the distance between two major (large) ticks from the scale of the slider.	
			* @default 10
			* @type {number}
			* @example
            *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set largeStep API value during initialization  
			* 	$("#slider").ejSlider({ largeStep: 2});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            largeStep: 10,
            /**
			* Specifies the distance between two minor (small) ticks from the scale of the slider.	
			* @default 1
			* @type {number}
			* @example
            *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set smallStep API value during initialization  
			* 	$("#slider").ejSlider({ smallStep: 2});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            smallStep: 1,
            /**
			* Specifies the showSmallTicks of the slider.
			* @default true
			* @type {boolean}
			* @example
            *&lt;/br&gt;
			*&lt;/br&gt;
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set showSmallTicks API value during initialization  
			* 	$("#slider").ejSlider({ showSmallTicks: false});
            * &lt;/script&gt; 
			* @memberof ejSlider
			* @instance
			*/
            showSmallTicks: true,
            /**
			* Specify the enablePersistence to slider to save current model value to browser cookies for state maintains	
			* @default false
			* @type {boolean}
			* @example
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			* //To set enablePersistence API value during initialization  
			* 	$("#slider").ejSlider({ enablePersistence: false});
            * &lt;/script&gt;
			* @memberof ejSlider
			* @instance
			*/
            enablePersistence: false,

            // Events
            /**     
			 * Fires when Slider control is started successfully.
			 * @event
			 * @name ejSlider#start 	
			 * @param {Object} argument Event parameters from slider control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {number}  argument.sliderIndex returns current handle number or index	
			 * @param {string}  argument.id returns slider id	
			 * @param {object}  argument.model returns the slider model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the slider value			 			
			 * @example 
             * &lt;div id="slider"&gt; &lt;/div&gt; <br>
             * &lt;script&gt;
			 * //start event for slider control
             * $("#slider").ejSlider({
             *    start: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejSlider
			 * @instance
			 */
            start: null,
            /**     
			 * Fires when Slider control is stopped successfully.
			 * @event
			 * @name ejSlider#stop 	
			 * @param {Object} argument Event parameters from slider control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {number}  argument.sliderIndex returns current handle number or index	
			 * @param {string}  argument.id returns slider id	
			 * @param {object}  argument.model returns the slider model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the slider value			 			
			 * @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
			 * //stop event for slider control
             * $("#slider").ejSlider({
             *    stop: function (args) {}
             * });
            * &lt;/script&gt;
			 * @memberof ejSlider
			 * @instance
			 */
            stop: null,
            /**     
			 * Fires when Slider control is sliding successfully.
			 * @event
			 * @name ejSlider#slide 	
			 * @param {Object} argument Event parameters from slider control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {number}  argument.sliderIndex returns current handle number or index	
			 * @param {string}  argument.id returns slider id	
			 * @param {object}  argument.model returns the slider model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the slider value			 			
			 * @example 
             * &lt;div id="slider"&gt; &lt;/div&gt; <br>
             * &lt;script&gt;
			 * //slide event for slider control
             * $("#slider").ejSlider({
             *    slide: function (args) {}
             * });
            * &lt;/script&gt;
            * @memberof ejSlider
			 * @instance
			 */
            slide: null,
            /**     
			 * Fires when Slider control value is changed successfully.
			 * @event
			 * @name ejSlider#change 	
			 * @param {Object} argument Event parameters from slider control     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {number}  argument.sliderIndex returns current handle number or index	
			 * @param {string}  argument.id returns slider id	
			 * @param {object}  argument.model returns the slider model	
			 * @param {string}  argument.type returns the name of the event				 
			 * @param {number}  argument.value returns the slider value			 			
			 * @example 
             * &lt;div id="slider"&gt; &lt;/div&gt; <br>
             * &lt;script&gt;
			 * //change event for slider control
             * $("#slider").ejSlider({
             *    change: function (args) {}
             * });
            * &lt;/script&gt;
			 * @memberof ejSlider
			 * @instance
			 */
            change: null,
            /**     
            * Fires when Slider control has been created successfully.
            * @event
            * @name ejSlider#create	
            * @param {Object} argument Event parameters from slider control     
            * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.         
            * @param {object}  argument.model returns the slider model	
            * @param {string}  argument.type returns the name of the event                 
            * @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
            * //create event for slider control
            * $("#slider").ejSlider({
            *    create: function (args) {}
            * });
           * &lt;/script&gt;
            * @memberof ejSlider
            * @instance
            */
            create: null,
            /**     
            * Fires when Slider control has been destroyed successfully.
            * @event
            * @name ejSlider#destroy	
            * @param {Object} argument Event parameters from slider control     
            * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.         
            * @param {object}  argument.model returns the slider model	
            * @param {string}  argument.type returns the name of the event                 
            * @example 
            * &lt;div id="slider"&gt; &lt;/div&gt; <br>
            * &lt;script&gt;
            * //destroy event for slider control
            * $("#slider").ejSlider({
            *    destroy: function (args) {}
            * });
           * &lt;/script&gt;
            * @memberof ejSlider
            * @instance
            */
            destroy: null
        },
        /**
         * Specify the data types for default properties 
		 * @private
         */
        dataTypes: {
            orientation: "enum",
            enableAnimation: "boolean",
            animationSpeed: "number",
            cssClass: "string",
            showRoundedCorner: "boolean",
            readOnly: "boolean",
            enableRTL: "boolean",
            minValue: "number",
            maxValue: "number",
            sliderType: "enum",
            incrementStep: "number",
            enabled: "boolean",
            showScale: "boolean",
            largeStep: "number",
            smallStep: "number",
            showSmallTicks: "boolean",
            enablePersistence: "boolean"
        },

        observables: ["value", "values"],
        value: ej.util.valueFunction("value"),
        values: ej.util.valueFunction("values"),
        /**
        * To enable the slider  
		* @return jQuery
		* @example 
		* &lt;div id="slider"&gt; &lt;/div&gt; <br> 
		* &lt;script&gt;
		* $("#slider").ejSlider();
		* // Create slider control
		* var sliderObj = $("#slider").data("ejSlider");
		* sliderObj.enable(); // enable the slider control
		* &lt;/script&gt;
		* @example 
		* &lt;div id="slider"&gt; &lt;/div&gt; <br> 
		* &lt;script&gt;
		* $("#slider").ejSlider();
		* // enable the slider control
		* $("#slider").ejSlider("enable");
		* &lt;/script&gt;
		*@memberof ejSlider
		* @instance
        */
        enable: function () {
            if (!this.model.enabled) {
                this.model.enabled = true;
                if (this.wrapper) this.wrapper.removeClass("e-disable");
                this.element.removeClass("e-disable");
                this._wireEvents();
            }
        },
        /**
        * To disable the slider  
		* @return jQuery
		* @example 
		* &lt;div id="slider"&gt; &lt;/div&gt; <br> 
		* &lt;script&gt;
		* $("#slider").ejSlider();
		* // Create slider control
		* var sliderObj = $("#slider").data("ejSlider");
		* sliderObj.disable(); // disable the slider control
		* &lt;/script&gt;
		* @example 
		* &lt;div id="slider"&gt; &lt;/div&gt; <br> 
		* &lt;script&gt;
		* $("#slider").ejSlider();
		* // disable the slider control
		* $("#slider").ejSlider("disable");
		* &lt;/script&gt;
		*@memberof ejSlider
		* @instance
        */
        disable: function () {
            if (this.model.enabled) {
                this.model.enabled = false;
                if (this.wrapper) this.wrapper.addClass("e-disable");
                this.element.addClass("e-disable");
                this._unWireEvents();
            }
        },
        /**
         * To check whether the value and its type.		
		 * @private
         */
        _validateValue: function (value) {
            if (value == null || value == "") value = this.model.minValue;
            else if (typeof value === "string") value = parseFloat(value);

            if (this._isNumber(value))
                this.value(value);
            else if (!this._isNumber(this.value()))
                this.value(this.model.minValue);

            if (this.model.sliderType != "range") this._setValue();
        },
        /**
         * To check whether and configure the range slider value.		
		 * @private
         */
        _validateRangeValue: function (value) {
            if (value == null) value = new Array(this.model.minValue, this.model.maxValue);
            else if (typeof value === "string") {
                var vals = value.split(",");
                if (vals.length > 1) value = new Array(parseFloat(vals[0]), parseFloat(vals[1]));
            }

            if (typeof value === "object" && this._isNumber(value[0]) && this._isNumber(value[1]))
                this.values(new Array(value[0], value[1]));
            else if (!(typeof this.values() === "object" && this._isNumber(this.values()[0]) && this._isNumber(this.values()[1])))
                this.values(new Array(this.model.minValue, this.model.maxValue));

            if (this.model.sliderType == "range") this._setRangeValue();
        },
        /**
         * To check whether slider starting and ending value .		
		 * @private
         */
        _validateStartEnd: function () {
            if (isNaN(this.model.minValue)) this.model.minValue = 0;
            if (isNaN(this.model.maxValue)) this.model.maxValue = 100;
        },
        /**
         * To check whether slider value type.		
		 * @private
         */
        _isNumber: function (number) {
            return typeof number === "number" && !isNaN(number);
        },
        /**
         * To enable or disable the rounded corner behaviour 		
		 * @private
         */
        _outerCorner: function (boolean) {
            if (boolean) this._roundedCorner();
            else this._sharpedCorner();
        },
        /**
         * To configure the custom theme for slider using cssClass property		
		 * @private
         */
        _changeSkin: function (skin) {
            this.element.removeClass(this.model.cssClass).addClass(skin);
            if (this.model.showScale)
                this.ul.removeClass(this.model.cssClass).addClass(skin);
        },
        /**
        * To get value from slider handle
		* @return jQuery
		* @example 
		* &lt;div id="slider"&gt; &lt;/div&gt; <br>
		* &lt;script&gt;
		* $("#slider").ejSlider();
		* // Create Editors
		* var sliderObj = $("#slider").data("ejSlider");
		* sliderObj.getValue(); // getValue the slider handle
		* &lt;/script&gt;
		 @example 
		* &lt;div id="slider"&gt; &lt;/div&gt; <br> 
		* &lt;script&gt;
		* $("#slider").ejSlider();
		* // get value from slider handle
		* $("#slider").ejSlider("getValue");
		* &lt;/script&gt;
		* @memberof ejSlider
		* @instance
         */
        getValue: function () {
            /// <summary>Returns the Slider value.</summary>
            return this._getHandleValue();
        },
        /**
         * To initialize the slider		
		 * @private
         */
        // constructor function
        _init: function () {
            this._initialize();
            this._render();
        },
        /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */
        _setModel: function (options) {
            if (!this.model.enabled && ej.isNullOrUndefined(options["enabled"])) return false;

            if (!ej.isNullOrUndefined(options["minValue"]) || !ej.isNullOrUndefined(options["maxValue"])) {
                if (this._isNumber(options["minValue"])) this.model.minValue = options["minValue"];
                else options["minValue"] = this.model.minValue;

                if (this._isNumber(options["maxValue"])) this.model.maxValue = options["maxValue"];
                else options["maxValue"] = this.model.maxValue;

                if (this.model.sliderType == "range" && options["values"] == undefined) this._setRangeValue();
                else if (this.model.sliderType != "range" && options["value"] == undefined) this._setValue();
            }

            var option;
            for (option in options) {
                switch (option) {
                    case "value":
                        this._validateValue(ej.util.getVal(options[option]));
                        break;
                    case "values":
                        this._validateRangeValue(ej.util.getVal(options[option]));
                        break;
                    case "height": this.model.height = options[option]; this._setDimension();
                        if (this.model.showScale) this._scaleAlignment();
                        break;
                    case "width": this.model.width = options[option]; this._setDimension();
                        if (this.model.showScale) this._scaleAlignment();
                        break;
                    case "enabled": this._disabled(!options[option]); break;
                    case "showRoundedCorner": this._outerCorner(options[option]); break;
                    case "enableRTL": this.model.enableRTL = options[option]; this._checkRTL();
                        options[option] = this.model.enableRTL;
                        break;
                    case "cssClass": this._changeSkin(options[option]); break;
                    case "showScale": this._renderScale(options[option]); break;
                    case "orientation":
                        var t = this.model.height;
                        this.model.height = this.model.width;
                        this.model.width = t;
                    case "sliderType":
                        this._sliderOptions(option, options[option]); break;
                    case "smallStep":
                    case "largeStep":
                    case "showSmallTicks":
                    case "minValue":
                    case "maxValue":
                        this._scaleOptions(option, options[option]); break;
                }
            }
        },
        /**
         * To configure destroy of the slider control.		
		 * @private
         */
        _destroy: function () {
            if (this.model.showScale) this._destroyScale();
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            this.element.removeClass("e-widget e-box " + this.model.cssClass).empty();
        },
        /**
         * To initialize the slider control position		
		 * @private
         */
        _initialize: function () {
            this.target = this.element[0];
            this.horDir = "left";
            this.verDir = "bottom";
            this._isFocused = false;
        },
        /**
         * Render Section For DifferentTypes		
		 * @private
         */
        _render: function () {
            this.wrapper = ej.buildTag("div.e-slider-wrap " + this.model.cssClass + "#" + this.target.id + "_wrapper", { tabindex: "0", role: "slider" })
                .insertAfter(this.element);
            this.wrapper.append(this.element);

            this.element.addClass("e-widget e-box " + this.model.cssClass);
            if (this.model.sliderType != "default") {
                this.header = ej.buildTag("div.e-range");
                this.element.append(this.header);
                if (this.model.sliderType == "range") {
                    this.secondHandle = this._createHandle();
                }
            }
            this.firstHandle = this._createHandle();
            this._setOrientation();
            this._setDimension();
            this._insertHiddenField();
            this._checkProperties();
            this._setSliderValue();
        },
        /**
         * Render Section For scale		
		 * @private
         */
        _renderScale: function (showScale) {
            if (showScale) {
                var width = "width", orien = "h";
                if (this.model.orientation == "vertical") {
                    width = "height";
                    orien = "v";
                }

                var _smallStep = this.model.smallStep;
                if (!this.model.showSmallTicks) {
                    if (this.model.largeStep > 0)
                        _smallStep = this.model.largeStep;
                    else
                        _smallStep = this.model.maxValue - this.model.minValue;
                }
                else if (_smallStep <= 0)
                    _smallStep = this.model.incrementStep;
                var count = Math.abs(this.model.maxValue - this.model.minValue) / _smallStep;

                this.ul = ej.buildTag("ul.e-scale e-" + orien + "-scale " + this.model.cssClass);
                this.wrapper.append(this.ul);

                var li, start = this.model.minValue, left = 0, tickWidth = 100 / count;
                if (orien == "v") start = this.model.maxValue;
                for (var i = 0; i <= count; i++) {
                    li = ej.buildTag("li.e-tick", "", {}, { "title": start });
                    li.css(width, tickWidth + "%");

                    if (start % this.model.largeStep == 0) {
                        var span = ej.buildTag("span.e-tick-value", "" + start);
                        li.addClass("e-large").append(span);
                    }
                    this.ul.append(li);

                    if (orien == "h") start += _smallStep;
                    else start -= _smallStep;
                    left += _smallStep;
                }

                this.ul.children().first().addClass("e-first-tick").css(width, (tickWidth / 2) + "%");
                this.ul.children().last().addClass("e-last-tick").css(width, (tickWidth / 2) + "%");

                this._scaleAlignment();
            }
            else this._destroyScale();
        },
        _destroyScale: function () {
            this.ul.remove();
            this.ul = null;
        },
        /**
         * To configure tick value position		
		 * @private
         */
        _tickValuePosition: function () {
            var width = (this.model.orientation == "vertical") ? "height" : "width";
            var left = (this.model.orientation == "vertical") ? "top" : "left";

            var firstTick = this.ul.find(".e-tick.e-first-tick");
            var first = firstTick.find(".e-tick-value");
            var other = this.ul.find(".e-tick.e-large:not(.e-first-tick)").find(".e-tick-value");

            tickWidth = firstTick[width]() * 2;
            first.css(left, -first[width]() / 2);
            other.css(left, (tickWidth - other[width]()) / 2);
        },
        /**
         * To configure scale alignment in slider		
		 * @private
         */
        _scaleAlignment: function () {
            this._tickValuePosition();

            var smallTick = 12, largeTick = 20, half = largeTick / 2;
            var height = "height", top = "top", orien = "h";
            if (this.model.orientation == "vertical") {
                height = "width";
                top = "right";
                orien = "v";
            }
            // scale
            this.ul.css(top, -(this.wrapper[height]() + half));
            if (orien == "v") this.ul.css("top", -this.wrapper.height()).css(top, half);
            this.ul[height](this.wrapper[height]() + largeTick);
            // small-ticks
            var topSize = -(largeTick - smallTick) / 2;
            if (this.model.largeStep == null && orien != "v") topSize = -topSize;
            this.ul.find(".e-tick:not(.e-large)").css(height, this.wrapper[height]() + smallTick).css(top, topSize);
            // tick-values   // 4 - distance between tick value and tick
            if (orien == "v") this.ul.children(".e-large").find(".e-tick-value").css("right", this.wrapper.width() + largeTick + 4);
        },
        /**
         * To create handle for slider		
		 * @private
         */
        _createHandle: function () {
            handle = ej.buildTag("a.e-handle e-select", "", {}, { "aria-label": "drag", "tabindex": 0, role: "slider", "aria-valuemin": this.model.minValue, "aria-valuemax": this.model.maxValue });
            this.element.append(handle);
            return handle;
        },
        /**
         * To configure dimension for slider		
		 * @private
         */
        _setDimension: function () {
            if (this.model.height) this.wrapper.height(this.model.height);
            if (this.model.width) this.wrapper.width(this.model.width);
            this._setHandleSize();
            this._handleAlignment(this.model.enableRTL);
        },
        /**
         * To configure scale alignment in slider		
		 * @private
         */
        _insertHiddenField: function () {
            this._hidden = ej.buildTag("input", "", {},
                { "type": "hidden", "name": this.element[0].id }).val(this._getHandleValue());
            this.element.append(this._hidden);
        },
        /**
         * To configure properties of the slider		
		 * @private
         */
        _checkProperties: function () {
            if (!this.model.enabled) {
                if (this.wrapper) this.wrapper.addClass("e-disable");
                else this.element.addClass("e-disable");
            }
            else this._wireEvents();

            if (this.model.showScale) this._renderScale(true);
            if (this.model.enableRTL) this._checkRTL();
            if (this.model.showRoundedCorner) this._roundedCorner();
        },
        /**
         * To configure the rounded corner behaviour 		
		 * @private
         */
        _roundedCorner: function () {
            this.element.addClass("e-corner-all");
            this.element.children(".e-handle").addClass("e-corner-all");
        },
        /**
         * To configure the shaped corner behaviour 		
		 * @private
         */
        _sharpedCorner: function () {
            this.element.removeClass("e-corner-all");
            this.element.children(".e-handle").removeClass("e-corner-all");
        },
        /**
         * To configure the handle alignment in slider control 		
		 * @private
         */
        _handleAlignment: function (rtl) {
            var mar = -(this.firstHandle.outerWidth() / 2) + "px", margin;
            if (this.model.orientation != "vertical") {
                if (!rtl) margin = "0 0 0 " + mar;
                else margin = "0 " + mar + " 0 0";
            }
            else {
                if (!rtl) margin = "0 0 " + mar + " 0";
                else margin = mar + " 0 0 0";
            }
            this.element.children('.e-handle').css("margin", margin);
        },
        /**
         * To check whether Right to Left Direction in slider control 		
		 * @private
         */
        _checkRTL: function () {
            if (this.model.showScale && this.model.orientation == "vertical" && this.model.enableRTL) this.model.enableRTL = false;
            var rtl = this.model.enableRTL, preDir = (this.model.orientation != "vertical") ? this.horDir : this.verDir;
            if (rtl) {
                this.wrapper.addClass("e-rtl");
                this.horDir = "right";
                this.verDir = "top";
            }
            else {
                this.wrapper.removeClass("e-rtl");
                this.horDir = "left";
                this.verDir = "bottom";
            }
            var currDir = (this.model.orientation != "vertical") ? this.horDir : this.verDir;

            if (preDir != currDir) {
                this.firstHandle.css(currDir, this.firstHandle.css(preDir)).css(preDir, "auto");;
                if (this.model.sliderType != "default") {
                    this.header.css(currDir, this.header.css(preDir)).css(preDir, "auto");
                    if (this.model.sliderType == "range")
                        this.secondHandle.css(currDir, this.secondHandle.css(preDir)).css(preDir, "auto");
                }
            }
            this._handleAlignment(rtl);
        },
        /**
         * To configure the direction orientation in slider control 		
		 * @private
         */
        _setOrientation: function () {
            if (this.model.orientation != "vertical") {
                this.wrapper.addClass("e-horizontal");
            }
            else {
                this.wrapper.addClass("e-vertical");
                this.firstHandle.css(this.verDir, "0");
            }
        },
        /**
         * To configure the handle size in slider control 		
		 * @private
         */
        _setHandleSize: function () {
            var size;
            if (this.model.orientation != "vertical")
                size = this.wrapper.height() + 4;
            else
                size = this.wrapper.width() + 4;
            this.element.find(".e-handle").height(size).width(size);
        },
        /**
         * To enable or disable the slider control state.
		 * @private
         */
        _disabled: function (boolean) {
            if (boolean) this.disable();
            else this.enable();
        },
        /**
         * To configure slider control with its options 		
		 * @private
         */
        _sliderOptions: function (prop, value) {
            this._unWireEvents();
            this._destroy();
            this.model[prop] = value;
            this._init();
        },
        /**
         * To configure the scale used in slider control 		
		 * @private
         */
        _scaleOptions: function (prop, value) {
            if (this.model.showScale) {
                this._destroyScale();
                this.model[prop] = value;
                this._renderScale(true);
            }
        },
        /**
         * To configure the showTooltip in slider control 		
		 * @private
         */
        _showTooltip: function () {
            if (this.model.showTooltip) {
                $('body .e-tooltip').remove();
                this.tooltip = ej.buildTag("div.e-tooltip " + this.model.cssClass + " e-corner-all", { role: "tooltip" });
                $("body").append(this.tooltip);
                this._setTooltipPosition();
            }
        },
        /**
         * To configure the hideTooltip slider control 		
		 * @private
         */
        _hideTooltip: function () {
            if (this.model.showTooltip)
                this.tooltip.fadeOut(800);
        },
        /**
         * To enable or disable the slider control tooltip.
		 * @private
         */
        _showhideTooltip: function (showTooltip) {
            if (this.model.showTooltip && showTooltip) {
                this._showTooltip();
                this._hideTooltip();
            }
        },
        /**
         * To configure the Tooltip position for handle slider control 		
		 * @private
         */
        _setTooltipPosition: function () {
            if (this.model.showTooltip) {
                this._updateTooltipValue();
                var top, left, remainLeft, remainTop, handle, pos, gap = 5; // gap -> distance between tooltip and slider
                handle = this._getHandle(), pos = this._getOffset(handle);

                if (this.model.orientation == "vertical") {
                    remainTop = (this.tooltip.outerHeight() - handle.outerHeight()) / 2;
                    remainLeft = handle.outerWidth() + gap;
                    top = pos.top - remainTop;
                    left = pos.left + remainLeft;
                }
                else {
                    remainLeft = (this.tooltip.outerWidth() - handle.outerWidth()) / 2;
                    remainTop = this.tooltip.outerHeight() + gap;
                    top = pos.top - remainTop;
                    left = pos.left - remainLeft;
                }
                var zindex = this._maxZindex();
                this.tooltip.css({ "top": top, "left": left, "zIndex": zindex + 1 });
            }
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },

		/**
        * To calculate the max Zindex in the document.		
        * @private
        */
        _maxZindex: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popup);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },
        /**
         * To obtain the Tooltip value from handle in slider control 		
		 * @private
         */
        _updateTooltipValue: function () {
            var one = 0, two = 1;
            if (this.model.enableRTL) { one = 1, two = 0; }
            var val = this._getHandleValue();
            if (this.model.sliderType != "range")
                this.tooltip[0].innerHTML = val;
            else
                this.tooltip[0].innerHTML = val[one] + " - " + val[two];
        },
		/**
         * To configure the slider control header width based on it's type.		
		 * @private
         */
        _increaseHeaderWidth: function (animation) {
            if (this.model.sliderType != "default") {
                var size = "width", direction = this.horDir, properties = {};
                if (this.model.orientation == "vertical") { size = "height", direction = this.verDir; }

                if (this.model.sliderType == "range") {
                    properties[size] = this.handlePos - this.handlePos2 + "%";
                    properties[direction] = this.handlePos2 + "%";
                }
                else {
                    properties[size] = this.handlePos + "%";
                    properties[direction] = 0;
                }
                if (!animation) this.header.css(properties);
                else this.header.animate(properties, this.model.animationSpeed);
            }
        },
        /**
         * To configure the value based on it's slider type
		 * @private
         */
        _setSliderValue: function () {
            this._validateStartEnd();

            if (this.model.sliderType == "range")
                this._validateRangeValue(this.values());
            else
                this._validateValue(this.value());
        },

        /**
        * Section For handle the mouse hover event on slider handle.
        * @private
        */
        _hoverOnHandle: function (evt) {
            $(evt.target).addClass("e-hover");
        },
        /**
        * Section For handle the mouse leave event on slider handle.
        * @private
        */
        _leaveFromHandle: function (evt) {
            $(evt.target).removeClass("e-hover");
        },
        /**
        * Section For handle the click event on slider handle.
        * @private
        */
        _firstHandleClick: function (evt) {
            evt.preventDefault();
            this.firstHandle.focus();
            if (this._raiseEvent("start")) return false;

            this.mouseDownPos = this.handlePos;
            if (!this.model.readOnly)
                $(document).bind(ej.eventType.mouseMove, $.proxy(this._firstHandleMove, this));
            $(document).bind(ej.eventType.mouseUp, $.proxy(this._firstHandleUp, this));
            $(document).bind("mouseleave", $.proxy(this._firstHandleUp, this));
            this._showTooltip();
        },
        /**
        * Section For handle the drag event over slider handle.
        * @private
        */
        _firstHandleMove: function (evt) {
            evt.preventDefault();
            evt = evt.type == "touchmove" ? evt.originalEvent.changedTouches[0] : evt;
            var position = { x: evt.pageX, y: evt.pageY };
            this.handlePos = this._xyToPosition(position);

            if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                this.handlePos = this.handlePos2;
            }
            if (this.handlePos != this.preHandlePos) {
                this.preHandlePos = this.handlePos;
                this.handleVal = this._positionToValue(this.handlePos);
                this._increaseHeaderWidth(false);
                this._setHandlePosition(false, false, false);
                this._setTooltipPosition();

                this._updateModelValue();
                this._raiseEvent("slide");
            }
        },
        /**
        * Section For handle the mouse up event over slider handle.
        * @private
        */
        _firstHandleUp: function (evt) {
            evt.preventDefault();
            $(document).unbind(ej.eventType.mouseMove, $.proxy(this._firstHandleMove, this));
            $(document).unbind(ej.eventType.mouseUp, $.proxy(this._firstHandleUp, this));
            $(document).unbind("mouseleave", $.proxy(this._firstHandleUp, this));
            this._hideTooltip();

            if (this.mouseDownPos != this.handlePos) this._raiseChangeEvent();
            this._raiseEvent("stop");
        },
        /**
        * Section For handle the click event on range slider second handle.
        * @private
        */
        _secondHandleClick: function (evt) {
            evt.preventDefault();
            this.secondHandle.focus();
            if (this._raiseEvent("start")) return false;

            this.mouseDownPos2 = this.handlePos2;
            if (!this.model.readOnly)
                $(document).bind(ej.eventType.mouseMove, $.proxy(this._secondHandleMove, this));
            $(document).bind(ej.eventType.mouseUp, $.proxy(this._secondHandleUp, this));
            $(document).bind("mouseleave", $.proxy(this._secondHandleUp, this));
            this._showTooltip();
        },
        /**
        * Section For handle the drag event over range slider second handle.
        * @private
        */
        _secondHandleMove: function (evt) {
            evt.preventDefault();
            evt = evt.type == "touchmove" ? evt.originalEvent.changedTouches[0] : evt;
            var position2 = { x: evt.pageX, y: evt.pageY };
            this.handlePos2 = this._xyToPosition(position2);

            if (this.handlePos2 > this.handlePos) {
                this.handlePos2 = this.handlePos;
            }
            if (this.handlePos2 != this.preHandlePos2) {
                this.preHandlePos2 = this.handlePos2;
                this.handleVal2 = this._positionToValue(this.handlePos2);
                this._increaseHeaderWidth(false);
                this._setHandlePosition(false, false, false);
                this._setTooltipPosition();

                this._updateModelValue();
                this._raiseEvent("slide");
            }
        },
        /**
        * Section For handle the mouse up event on range slider second handle.
        * @private
        */
        _secondHandleUp: function (evt) {
            evt.preventDefault();
            $(document).unbind(ej.eventType.mouseMove, $.proxy(this._secondHandleMove, this));
            $(document).unbind(ej.eventType.mouseUp, $.proxy(this._secondHandleUp, this));
            $(document).unbind("mouseleave", $.proxy(this._secondHandleUp, this));
            this._hideTooltip();

            if (this.mouseDownPos2 != this.handlePos2) this._raiseChangeEvent();
            this._raiseEvent("stop");
        },
        /**
        * Section For handle the focus in event on slider handle.
        * @private
        */
        _focusInHandle: function (evt) {
            if (!this._isFocused) {
                this._isFocused = true;
                $(evt.target).addClass("e-focus");
                if (!this.model.readOnly)
                    $(document).bind("keydown", $.proxy(this._moveHandle, this));
                this.activeHandle = $(evt.target).is(this.firstHandle) ? 1 : 2;
                this._setZindex();
            }
        },
        /**
        * Section For handle the focus out event on slider handle.
        * @private
        */
        _focusOutHandle: function (evt) {
            this._isFocused = false;
            $(evt.target).removeClass("e-focus");
            $(document).unbind("keydown", $.proxy(this._moveHandle, this));
        },
        /**
        * Section For handle the slider handle move.
        * @private
        */
        _moveHandle: function (e) {
            var oper, val, handleNo;
            handleNo = this._getHandleIndex(this.activeHandle) - 1;

            switch (e.keyCode) {
                case 37:        // Left Key
                case 40:        // Down Key
                    e.preventDefault();
                    oper = "sub";
                    break;
                case 38:        // Up Key
                case 39:         // Right Key
                    e.preventDefault();
                    oper = "add";
                    break;
                case 36:         // Home Key
                    e.preventDefault();
                    if (this._raiseEvent("start")) return false;
                    if (this.model.sliderType != "range" && this.value() != this.model.minValue) {
                        this._changeHandleValue(this.model.minValue, this.model.enableAnimation);
                    }
                    else if (this.model.sliderType == "range") {
                        val = (this.activeHandle == 2) ? this.model.minValue : this.handleVal2;
                        if (this.values()[handleNo] != val)
                            this._changeHandleValue(val, this.model.enableAnimation);
                    }
                    break;
                case 35:         // End Key
                    e.preventDefault();
                    if (this._raiseEvent("start")) return false;
                    if (this.model.sliderType != "range" && this.value() != this.model.maxValue) {
                        this._changeHandleValue(this.model.maxValue, this.model.enableAnimation);
                    }
                    else if (this.model.sliderType == "range") {
                        val = (this.activeHandle == 1) ? this.model.maxValue : this.handleVal;
                        if (this.values()[handleNo] != val)
                            this._changeHandleValue(val, this.model.enableAnimation);
                    }
                    break;
                case 27:         // Esc Key
                    e.preventDefault();
                    this._getHandle().focusout();
                    break;
            }

            if (oper == "add" || oper == "sub") {
                if (this._raiseEvent("start")) return false;
                var hVal = (this.activeHandle == 1) ? this.handleVal : this.handleVal2;
                var value = (oper == "add") ? this._add(hVal, this.model.incrementStep, true) : this._add(hVal, this.model.incrementStep, false);
                this._changeHandleValue(value, false);
            }
        },
        /**
        * Section For handle the slider handle value change.
        * @private
        */
        _changeHandleValue: function (value, animate) {
            var position = null;
            if (this.activeHandle == 1) {
                this.handleVal = this._checkHandleValue(value);
                this.handlePos = this._checkHandlePosition(this.handleVal);

                if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                    this.handlePos = this.handlePos2;
                    this.handleVal = this.handleVal2;
                }
                if (this.handlePos != this.preHandlePos)
                    position = this.preHandlePos = this.handlePos;
            }
            else {
                this.handleVal2 = this._checkHandleValue(value);
                this.handlePos2 = this._checkHandlePosition(this.handleVal2);

                if (this.model.sliderType == "range" && this.handlePos < this.handlePos2) {
                    this.handlePos2 = this.handlePos;
                    this.handleVal2 = this.handleVal;
                }
                if (this.handlePos2 != this.preHandlePos2)
                    position = this.preHandlePos2 = this.handlePos2;
            }

            if (position != null) {
                this._increaseHeaderWidth(animate);
                this._setHandlePosition(animate, true, true);
            }
        },
        /**
        * Section For handle the slider bar click event.
        * @private
        */
        _sliderBarClick: function (evt) {
            if (this.model.readOnly) return false;
            if (evt.target == this.target || (this.model.sliderType != "default" && evt.target == this.header[0])) {
                evt.preventDefault();
                if (this._raiseEvent("start")) return false;
                var pos = { x: evt.pageX, y: evt.pageY },
                handlepos = this._xyToPosition(pos),
                handleVal = this._positionToValue(handlepos);

                if (this.model.sliderType == "range" && (this.handlePos - handlepos) > (handlepos - this.handlePos2)) {
                    this.handlePos2 = this.preHandlePos2 = handlepos;
                    this.handleVal2 = handleVal;
                    this.activeHandle = 2;
                }
                else {
                    this.handlePos = this.preHandlePos = handlepos;
                    this.handleVal = handleVal;
                    this.activeHandle = 1;
                }

                this._getHandle().focus();
                if (this.model.sliderType != "default") this._increaseHeaderWidth(this.model.enableAnimation);
                this._setHandlePosition(this.model.enableAnimation, true, true);
            }
        },
        /**
        * To configure the slider handle position.
        * @private
        */
        _setHandlePosition: function (animation, showTooltip, changeEvt) {
            var Handle = this._getHandle(), proxy = this, properties = {}, pos, val, direction;
            pos = (this.activeHandle == 1) ? this.handlePos : this.handlePos2;
            val = (this.activeHandle == 1) ? this.handleVal : this.handleVal2;
            Handle.attr("aria-label", val);
            direction = (this.model.orientation == "vertical") ? this.verDir : this.horDir;
            properties[direction] = pos + "%";

            if (!animation) {
                Handle.css(properties);
                this._showhideTooltip(showTooltip);
                if (changeEvt) this._raiseChangeEvent();
            }
            else Handle.animate(properties, this.model.animationSpeed, function () {
                proxy._showhideTooltip(showTooltip);
                if (changeEvt) proxy._raiseChangeEvent();
            });
        },
        /**
        * Section For handle the X,Y co-ordinate position for slider.
        * @private
        */
        _xyToPosition: function (position) {
            if (this.model.minValue == this.model.maxValue)
                return 100;
            if (this.model.orientation != "vertical") {
                var left = position.x - this.element.offset().left,
                num = this.element.width() / 100,
                val = (left / num);
            }
            else {
                var top = position.y - this.element.offset().top,
                num = this.element.height() / 100,
                val = 100 - (top / num);
            }
            val = this._stepValueCalculation(val);
            if (val < 0) val = 0;
            else if (val > 100) val = 100;
            if (this.model.enableRTL) return 100 - val;
            return val;
        },
        /**
        * Section For handle the slider handle value updation.
        * @private
        */
        _updateValue: function () {
            this.handleVal = this._checkHandleValue(this.value());
            this.handlePos = this._checkHandlePosition(this.handleVal);
            this.preHandlePos = this.handlePos;
            this.activeHandle = 1;
        },
        /**
        * Section For handle the slider handle operations.
        * @private
        */
        _setValue: function () {
            this._updateValue();

            this._increaseHeaderWidth(this.model.enableAnimation);
            this._setHandlePosition(this.model.enableAnimation, false, false);
        },
        /**
        * Section For handle slider range values.
        * @private
        */
        _updateRangeValue: function () {
            var values = this.values();
            this.handleVal = this._checkHandleValue(values[1]);
            this.handleVal2 = this._checkHandleValue(values[0]);
            this.handlePos = this._checkHandlePosition(this.handleVal);
            this.handlePos2 = this._checkHandlePosition(this.handleVal2);

            if (this.handlePos < this.handlePos2) {
                this.handlePos = this.handlePos2;
                this.handleVal = this.handleVal2;
            }
            this.preHandlePos = this.handlePos;
            this.preHandlePos2 = this.handlePos2;
        },
        /**
        * To configure slider range values.
        * @private
        */
        _setRangeValue: function () {
            this._updateRangeValue();
            this._increaseHeaderWidth(this.model.enableAnimation);
            this.activeHandle = 1;
            this._setHandlePosition(this.model.enableAnimation, false, false);
            this.activeHandle = 2;
            this._setHandlePosition(this.model.enableAnimation, false, false);
        },
        /**
         * To Check whether slider handle position.
		 * @private
         */
        _checkHandlePosition: function (value) {
            if (this.model.minValue == this.model.maxValue)
                return 100;
            var handle = this._tempStartEnd();
            if (value >= handle.start && value <= handle.end)
                value = (100 * (value - this.model.minValue)) / (this.model.maxValue - this.model.minValue);
            else if (value < handle.start) value = 0;
            else value = 100;
            return value;
        },
        /**
         * To Check whether slider handle values.
		 * @private
         */
        _checkHandleValue: function (value) {
            if (this.model.minValue == this.model.maxValue)
                return this.model.minValue;
            var handle = this._tempStartEnd();
            if (value < handle.start) value = handle.start;
            else if (value > handle.end) value = handle.end;
            return value;
        },
        /**
         * To configure slider starting and ending values.
		 * @private
         */
        _tempStartEnd: function () {
            if (this.model.minValue > this.model.maxValue)
                return {
                    start: this.model.maxValue,
                    end: this.model.minValue
                };
            else
                return {
                    start: this.model.minValue,
                    end: this.model.maxValue
                };
        },
        /**
         * To configure slider values based on slider handle present position.
		 * @private
         */
        _positionToValue: function (pos) {
            var diff = this.model.maxValue - this.model.minValue,
            val = this._round(diff * pos / 100),
            total = this._add(val, this.model.minValue, true);
            return total;
        },
        /**
         * To obtained active slider handle value.
		 * @private
         */
        _getHandle: function () {
            return (this.activeHandle == 1) ? this.firstHandle : this.secondHandle;
        },
        /**
         * To obtained slider handle index value.
		 * @private
         */
        _getHandleIndex: function (no) {
            if (this.model.sliderType == "range" && no == 1)
                return 2;
            return 1;
        },
        /**
         * To obtained slider handle values based on it's type.
		 * @private
         */
        _getHandleValue: function () {
            if (this.model.sliderType == "range") return [this.handleVal2, this.handleVal];
            else return this.handleVal;
        },
        /**
         * To configure the slider value based on it's type.
		 * @private
         */
        _updateModelValue: function () {
            var value = this._getHandleValue();
            if (this.model.sliderType == "range") this.values(value);
            else this.value(value);
            this._hidden.val(value);
        },
        /**
         * To configure slider value.
		 * @private
         */
        _add: function (a, b, addition, precision) {
            var x = Math.pow(10, precision || 3), val;
            if (addition) val = (Math.round(a * x) + Math.round(b * x)) / x;
            else val = (Math.round(a * x) - Math.round(b * x)) / x;
            return val;
        },
        /**
         * To configure slider value as rounded.
		 * @private
         */
        _round: function (a) {
            var _f = this.model.incrementStep.toString().split(".");
            return _f[1] ? parseFloat(a.toFixed(_f[1].length)) : Math.round(a);
        },
        /**
         * To configure slider change event.
		 * @private
         */
        _raiseChangeEvent: function () {
            this._updateModelValue();
            this._raiseEvent("change");
        },
        /**
         * Render section for raising event in slider .
		 * @private
         */
        _raiseEvent: function (name) {
           
                return this._trigger(name, {
                    id: this.target.id,
                    value: this._getHandleValue(),
                    sliderIndex: this._getHandleIndex(this.activeHandle)
                });
            
            
        },
        /**
         * To configure slider handle z-index value.
		 * @private
         */
        _setZindex: function () {
            if (this.model.sliderType == "range") {
                if (this.activeHandle == 1) {
                    this.firstHandle.css("z-index", 2);
                    this.secondHandle.css("z-index", 1);
                }
                else {
                    this.firstHandle.css("z-index", 1);
                    this.secondHandle.css("z-index", 2);
                }
            }
        },
        /**
         * To obtained slider handle value based on incrementStep value.
		 * @private
         */
        _stepValueCalculation: function (value) {
            if (this.model.incrementStep == 0) this.model.incrementStep = 1;
            var percentStep = this.model.incrementStep / ((this.model.maxValue - this.model.minValue) / 100);
            var remain = value % Math.abs(percentStep);
            if (remain != 0) {
                if ((percentStep / 2) > remain) value -= remain;
                else value += Math.abs(percentStep) - remain;
            }
            return value;
        },

        //-------------------- Event Wire-up -------------------------//
        /**
         * Wiring the events to slider control		
		 * @private
         */
        _wireEvents: function () {
            this._on(this.element, "mousedown", this._sliderBarClick);
            this._on(this.firstHandle, ej.eventType.mouseDown, this._firstHandleClick);
            this._on(this.firstHandle, "mouseenter", this._hoverOnHandle);
            this._on(this.firstHandle, "mouseleave", this._leaveFromHandle);
            this._on(this.firstHandle, "focus", this._focusInHandle);
            this._on(this.firstHandle, "focusout", this._focusOutHandle);

            if (this.model.sliderType == "range") {
                this._on(this.secondHandle, ej.eventType.mouseDown, this._secondHandleClick);
                this._on(this.secondHandle, "mouseenter", this._hoverOnHandle);
                this._on(this.secondHandle, "mouseleave", this._leaveFromHandle);
                this._on(this.secondHandle, "focus", this._focusInHandle);
                this._on(this.secondHandle, "focusout", this._focusOutHandle);
            }
        },
        //-------------------- Event Wire-up -------------------------//
        /**
         * unWiring the events from slider control.		
		 * @private
         */
        _unWireEvents: function () {
            this._off(this.element, "mousedown");
            this._off(this.firstHandle, ej.eventType.mouseDown);
            this._off(this.firstHandle, "mouseenter");
            this._off(this.firstHandle, "mouseleave");
            this._off(this.firstHandle, "focus");
            this._off(this.firstHandle, "focusout");

            if (this.model.sliderType == "range") {
                this._off(this.secondHandle, ej.eventType.mouseDown);
                this._off(this.secondHandle, "mouseenter");
                this._off(this.secondHandle, "mouseleave");
                this._off(this.secondHandle, "focus");
                this._off(this.secondHandle, "focusout");
            }
        }
    });
    /**
	 * Enum for slider type.	 
	 * @enum {string}
	 * @global 
	 */
    ej.SliderType = {
        /**  support for slider control to select a single value. */
        Default: "default",
        /**  support for slider control to select a single value considered from start value to current handle. */
        MinRange: "minrange",
        /**  support for slider control to select a range of value between the two handles. */
        Range: "range"
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
       * @namespace ej
       * @class ejSplitButton
       * @requires jQuery
       * @requires jquery.easing
       * @requires ej.core.js
       * @requires ej.data.js
       * @requires ej.splitbutton.js
       * @requires ej.menu.js
       * @requires ej.checkbox.js
   
       * @classdesc The Split button allows you to perform an action using clicking the button and choosing extra options from the dropdown button. The Split button also can display both text and images. 
       * @example 
       *&lt;button id="sbutton"&gt;File&lt;/button&gt;
       *&lt;ul id="target"&gt;
       *    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
       *    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
       *    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
       *&lt;/ul&gt;
       * &lt;script&gt;
       * // simple control creation
       *  $("#sbutton").ejSplitButton({targetID:"target",width:100});
       * &lt;/script&gt;
       */

    // Example plugin creation code
    // ejSample is the plugin name 
    // "ej.Sample" is "namespace.className" will hold functions and properties

    ej.widget("ejSplitButton", "ej.SplitButton", {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        validTags: ["button"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-splitbutton",

        // default model
        defaults: {
            /// <summary>This Contains default property of Split button </summary>
            /**		
			* Specifies the size of the Button.	See {@link ButtonSize}
			* @default ej.ButtonSize.Normal
			* @type {String | Enum}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set size API value during initialization  
			* 	$("#sbutton").ejSplitButton({ targetID:"target",width:100, size: ej.ButtonSize.Mini});			
			  * &lt;/script&gt;
			 * @memberof ejSplitButton
			* @instance
			*/
            size: "normal",
            /**		
			* Specifies the width of the Split Button.
			* @default “28” pixel
			* @type {String | Number}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set width API value during initialization  
			* $("#sbutton").ejSplitButton({  targetID: "target",width:100 });			
			  * &lt;/script&gt;
			 * @memberof ejSplitButton
			* @instance
			*/
            width: "",
            /**		
			* Specifies the height of the Split Button.
			* @default “28” pixel
			* @type {String | Number}
			* @example
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt; 
			* //To set height API value during initialization  
			* $("#sbutton").ejSplitButton({  targetID: "target",width:100,height: 28 });			 
			  * &lt;/script&gt;
			 * @memberof ejSplitButton
			* @instance
			*/
            height: "",
            /**		
			*Specifies the disabling of Split Button if enabled is set to false.
			* @default true
			* @type {Boolean}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set enabled API value during initialization  
			* $("#sbutton").ejSplitButton({  targetID: "target",width:100,enabled:  true });		
			  * &lt;/script&gt;
			
			 * @memberof ejSplitButton
			* @instance
			*/
            enabled: true,
            /**		
			*Specifies the text content for Split Button while initialization.
			* @default ""
			* @type {String}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set text API value during initialization  
			* $("#sbutton").ejSplitButton({  targetID: "target",width:100, text: "New" });		 
			  * &lt;/script&gt;
			 * @memberof ejSplitButton
			* @instance
			*/
            text: null,
            /**		
			*Specifies the contentType of the Split Button.See {@link ContentType}
			* @default ej.ContentType.TextOnly
			* @type {String | Enum}
			* @example
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt; 
			* //To set contentType API value during initialization  
			* $("#sbutton").ejSplitButton({ targetID: "target",width:100, contentType:  ej.ContentType.TextOnly}); 
			  * &lt;/script&gt;
			 * @memberof ejSplitButton
			* @instance
			*/
            contentType: "textonly",
            /**		
			*Specifies the imagePosition of the Split Button.See {@link imagePositions}
			* @default ej.ImagePosition.ImageRight
			* @type {String | Enum}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set imagePositions API value during initialization  
			* $("#sbutton").ejSplitButton({targetID: "target",width:100, contentType: ej.ContentType.TextAndImage,
            *   imagePosition: ej.ImagePosition.ImageRight,prefixIcon:"e-uiLight e-icon e-handup"});
			  * &lt;/script&gt;
			* @memberof ejSplitButton
			* @instance
			*/
            imagePosition: "imageleft",
            /**
            *Specifies the buttonMode like Split or Dropdown Button.See {@link ButtonMode}
            * @default ej.ButtonMode.Split
            * @type {String | Enum}
            * @example 
            *&lt;button id="sbutton"&gt;File&lt;/button&gt;
            *&lt;ul id="target"&gt;
            *    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
            *    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
            *    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
            *&lt;/ul&gt;
            * &lt;script&gt;
            * //To set buttonMode API value during initialization  
            * $("#sbutton").ejSplitButton({targetID: "target",width:100, contentType: ej.ContentType.TextAndImage,
            *   buttonMode: ej.ButtonMode.Dropdown, prefixIcon:"e-uiLight e-icon e-handup"});
            * &lt;/script&gt;
            * @memberof ejSplitButton
            * @instance
            */
            buttonMode: "split",
            /**
            *Specifies the arrowPosition of the Split or Dropdown Button.See {@link arrowPosition}
            * @default ej.ArrowPosition.Right
            * @type {String | Enum}
            * @example 
            *&lt;button id="sbutton"&gt;File&lt;/button&gt;
            *&lt;ul id="target"&gt;
            *    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
            *    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
            *    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
            *&lt;/ul&gt;
            * &lt;script&gt;
            * //To set arrowPosition API value during initialization  
            * $("#sbutton").ejSplitButton({targetID: "target",width:100, contentType: ej.ContentType.TextAndImage,
            *   buttonMode: ej.ButtonMode.Dropdown, arrowPosition: ej.ArrowPosition.Left, prefixIcon:"e-uiLight e-icon e-handup"});
            * &lt;/script&gt;
            * @memberof ejSplitButton
            * @instance
            */
            arrowPosition: "right",
            /**		
			*Specifies the list content for Split Button while initialization
			* @default ""
			* @type {String}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;

			* //To set targetID API value during initialization  
			* $("#sbutton").ejSplitButton({targetID:"target",width:100 });
			  * &lt;/script&gt;
			* @memberof ejSplitButton
			* @instance
			*/
            targetID: null,
            /**		
			*Specifies the showRoundedCorner property for Split Button while initialization.
			* @default false
			* @type {String}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set showRoundedCorner API value during initialization  
			* $("#sbutton").ejSplitButton({ targetID:"target",width:100,showRoundedCorner: true});
			  * &lt;/script&gt;
			* @memberof ejSplitButton
			* @instance
			*/
            showRoundedCorner: false,
            /**		
			*Specifies the image content for Split Button while initialization.
			* @default ""
			* @type {String}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set prefixIcon API value during initialization  
			* $("#sbutton").ejSplitButton({targetID: "target",width:100,contentType: "imageonly",prefixIcon:"e-uiLight e-icon e-handup" });
			 
			  * &lt;/script&gt;
 			* @memberof ejSplitButton
			* @instance
			*/
            prefixIcon: null,
            /**		
			*Specifies the image content for Split Button while initialization.
			* @default ""
			* @type {String}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set suffixIcon API value during initialization  
			* $("#sbutton").ejSplitButton({targetID:"target",width:100,contentType:"imageboth",prefixIcon:"e-uiLight e-icon-handup",suffixIcon:"e-uiLight e-icon-padlockclosed"});
			* &lt;/script&gt;
			* @memberof ejSplitButton
			* @instance
			*/
            suffixIcon: null,
            /**		
			*Set the root class for Split Button control theme
			* @default ""
			* @type {String}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set cssClass API value during initialization  
			* $("#sbutton").ejSplitButton({targetID: "target",width:100,cssClass: "gradient-lime"});
			  * &lt;/script&gt;
 			* @memberof ejSplitButton
			* @instance
			*/
            cssClass: "",
            /**		
			*Specifies the enableRTL property for Split Button while initialization.
			* @default false
			* @type {Boolean}
			* @example 
			*&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			* //To set enableRTL API value during initialization  
			* $("#sbutton").ejSplitButton({targetID: "target",width:100,enableRTL : true});
			  * &lt;/script&gt;
 			* @memberof ejSplitButton
			* @instance
			*/
            enableRTL: false,
            /**     
			 * Fires after Split Button control is created.
			 * @event
			 * @name ejSplitButton#create		
			 * @param {Object} argument Event parameters from button     
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the splite button model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			 * //create event for split button
             * $("#sbutton"). ejSplitButton ({
             	targetID: "target",width:100,
             *      create: function (args) {}
             * });
               * &lt;/script&gt;
			 * @memberof ejSplitButton
			 * @instance
			 */
            create: null,
            /**     
			 * Fires when Button control is clicked successfully
			 * @event
			 * @name ejSplitButton#click		
			 * @param {Object} argument Event parameters from split button     
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the split button model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object} argument.target  returns the target of the current object.
			 * @param {boolean}  argument.status return the button state
			 * @example 
			 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			 * //click event for split button
             * $("#sbutton"). ejSplitButton ({
             	targetID: "target",width:100,
             *      click: function (args) {}
             * });
               * &lt;/script&gt;
			 * @memberof ejSplitButton
			 * @instance
			 */
            click: null,
            /**     
			 * Fires when a menu item is Hovered in successfully
			 * @event
			 * @name ejSplitButton#itemMouseOver		
			 * @param {Object} argument Event parameters from split button     
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the split button model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object} argument.event.element  returns the clicked menu item element
			 * @param {object} argument.event returns the event
			 * @param {String}  argument.event.ID  return the menu item id
			 * @param {String}  argument.event.Text  return the clicked menu item text
			 * @example 
			 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			 * //itemMouseOver event for split button
             * $("#sbutton"). ejSplitButton ({
             	targetID: "target",width:100,
             *      itemMouseOver: function (args) {}
             * });
               * &lt;/script&gt;
			 * @memberof ejSplitButton
			 * @instance
			 */
            itemMouseOver: null,
            /**     
			 * Fires when a menu item is Hovered out successfully
			 * @event
			 * @name ejSplitButton#itemMouseOut		
			 * @param {Object} argument Event parameters from split button     
			 * @param {boolean}  argument.cancel returns the cancel option value
			 * @param {object}  argument.model returns the split button model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object} argument.event.element  returns the clicked menu item element
			 * @param {object} argument.event returns the event
			 * @param {String}  argument.event.ID  return the menu item id
			 * @param {String}  argument.event.Text  return the clicked menu item text
			 * @example 
			 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
	*&lt;ul id="target"&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
	*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
	*&lt;/ul&gt;
	* &lt;script&gt;
			 * //itemMouseOut event for split button
             * $("#sbutton"). ejSplitButton ({
             	targetID: "target",width:100,
             *      itemMouseOut: function (args) {}
             * });
               * &lt;/script&gt;
			 * @memberof ejSplitButton
			 * @instance
			 */
            itemMouseOut: null,
            /**     
            * Fires when a menu item is clicked successfully
            * @event
            * @name ejSplitButton#itemSelected		
            * @param {Object} argument Event parameters from split button     
            * @param {boolean}  argument.cancel returns the cancel option value
            * @param {object}  argument.model returns the split button model
            * @param {string}  argument.type returns the name of the event
            * @param {object} argument.event.element  returns the clicked menu item element
            * @param {object} argument.selectedItem - returns the selected item
            * @param {String}  argument.event.menuId  return the menu id
            * @param {String}  argument.event.menuText  return the clicked menu item text
            * @example 
            *&lt;button id="sbutton"&gt;File&lt;/button&gt;
   *&lt;ul id="target"&gt;
   *    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
   *    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
   *    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
   *&lt;/ul&gt;
   * &lt;script&gt;
            * //itemSelected event for split button
            * $("#sbutton"). ejSplitButton ({
               targetID: "target",width:100,
            *      itemSelected: function (args) {}
            * });
              * &lt;/script&gt;
            * @memberof ejSplitButton
            * @instance
            */
            itemSelected: null,
            /**     
            * Fires when the Split Button is destroyed successfully
            * @event
            * @name ejSplitButton#destroy		
            * @param {Object} argument Event parameters from  split button     
            * @param {boolean}  argument.cancel returns the cancel option value
            * @param {object}  argument.model returns the split button model
            * @param {string}  argument.type returns the name of the event
            * @example 
            *&lt;button id="sbutton"&gt;File&lt;/button&gt;
   *&lt;ul id="target"&gt;
   *    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
   *    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
   *    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
   *&lt;/ul&gt;
   * &lt;script&gt;
            * //destroy event for split button
            * $("#sbutton"). ejSplitButton ({
               targetID: "target",width:100,
            *      destroy: function (args) {}
            * });
            * &lt;/script&gt;
            * @memberof ejSplitButton
            * @instance
            */
            destroy: null
        },
        //Data Types
        dataTypes: {
            size: "string",
            enabled: "boolean",
            showRoundedCorner: "boolean",
            text: "string",
            contentType: "enum",
            imagePosition: "enum",
            buttonMode: "enum",
            arrowPosition: "enum",
            targetID: "string",
            prefixIcon: "string",
            suffixIcon: "string",
            cssClass: "string",
            enableRTL: "boolean"
        },
        // sample public function
        /**
        * To disable the split button  
		* @return jQuery
        * @example 
		 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
		*&lt;ul id="target"&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
		*&lt;/ul&gt;
		* &lt;script&gt;
		* //To Disable the Split Button control.		
		* $("#sbutton").ejSplitButton({targetID: "target",width:100});
		* var SptObj=$("#sbutton").data("ejSplitButton");
        * SptObj.disable();
		* &lt;/script&gt;
		* @example 
		 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
		*&lt;ul id="target"&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
		*&lt;/ul&gt;
		* &lt;script&gt;
		* //To Disable the Split Button control.		
		* $("#sbutton").ejSplitButton({targetID: "target",width:100});
		* $("#sbutton").ejSplitButton("disable");
		* &lt;/script&gt;
		*@memberof ejSplitButton
		* @instance
        */
        disable: function () {
            /// <summary>This function is  used to Disable the Split button Object</summary>
            this.element.addClass("e-disable");
            if (this.contstatus) {
                $("#" + this.model.targetID).ejMenu('hide');
                this.contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off($(document), "mousedown", this._documentClick);
            }
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this.dropbutton.addClass("e-disable").attr("aria-disabled", true);
            this.model.enabled = false;
        },
        /**
        * To Enable the split button  
		* @return jQuery
        * @example 
		 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
		*&lt;ul id="target"&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
		*&lt;/ul&gt;
		* &lt;script&gt;
		* //To Enable the Split Button control.		
		* $("#sbutton").ejSplitButton({targetID: "target",width:100});
		* var SptObj=$("#sbutton").data("ejSplitButton");
        * SptObj.enable();
		* &lt;/script&gt;
		* @example 
		 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
		*&lt;ul id="target"&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
		*&lt;/ul&gt;
		* &lt;script&gt;
		* //To Enable the Split Button control.		
		* $("#sbutton").ejSplitButton({targetID: "target",width:100});
		* $("#sbutton").ejSplitButton("enable");
		* &lt;/script&gt;
		*@memberof ejSplitButton
		* @instance
        */
        enable: function () {
            /// <summary>This function is  used to Enable the Split button Object</summary>
            this.element.removeClass("e-disable");
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this.dropbutton.removeClass("e-disable").attr("aria-disabled", false);
            this.model.enabled = true;
        },
        // constructor function
        /**
         * Create the split button widget
		 * @private
         */
        _init: function () {
            this._cloneElement = this.element.clone();
            this._initialize();
            this._controlStatus(this.model.enabled);
            this._wireEvents();
        },
        // all events bound using this._on will be unbind automatically
        /**
        * destroy the split button widget
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
        * @example 
		 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
		*&lt;ul id="target"&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
		*&lt;/ul&gt;
		* &lt;script&gt;
		* //To Destroy the Split Button control.		
		* $("#sbutton").ejSplitButton({targetID: "target",width:100});
		* var SptObj=$("#sbutton").data("ejSplitButton");
        * SptObj.destroy();
		* &lt;/script&gt;
		* @example 
		 *&lt;button id="sbutton"&gt;File&lt;/button&gt;
		*&lt;ul id="target"&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Open..&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Save&lt;/a&gt;&lt;/li&gt;
		*    &lt;li&gt;&lt;a href="#"&gt;Delete&lt;/a&gt;&lt;/li&gt;
		*&lt;/ul&gt;
		* &lt;script&gt;
		* // to destroy the button		
		* $("#sbutton").ejSplitButton({targetID: "target",width:100});	
		* $("#sbutton").ejSplitButton("destroy");
		* &lt;/script&gt;
		* @memberof ejSplitButton
		* @instance
         */
        _destroy: function () {
            /// <summary>This function is  used to destroy the Split button Object</summary>
            this.splitwrap.removeClass("e-drop");
            this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
            this.element.removeClass(this.model.cssClass + " e-select e-corner-left e-btn e-disable e-split-btn e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop e-left-btn e-txt e-corner-right e-corner-bottom e-corner-top e-corner-all").empty();
            this.element.append(this._cloneElement.text());
            this.element.insertAfter(this.wrapper);
            this.wrapper.remove();
            $("#" + this.model.targetID).ejMenu('destroy');
            //this has to be worked out in Menu
            $("#" + this.model.targetID).insertAfter(this.element);
            this._off(this.element, "click", this._btnMouseClick);
        },
        /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */
        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "width":
                        this._splitbtnWidth(options[option]);
                        break;
                    case "height":
                        this._splitbtnHeight(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "buttonMode":
                        this._setButtonMode(options[option]);
                        break;
                    case "arrowPosition":
                        this._setArrowPosition(options[option]);
                        break;
                    case "text":
                        this._setText(options[option]);
                        break;
                    case "prefixIcon":
                        this._setMajorIcon(options[option]);
                        break;
                    case "suffixIcon":
                        this._setMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "targetID":
                        this._setTargetId(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        $("#" + this.model.targetID).ejMenu({ enableRTL: options[option] });
                        break;
                    case "itemMouseOver":
                        $("#" + this.model.targetID).ejMenu({ mouseOver: options[option] });
                        break;
                    case "itemMouseOut":
                        $("#" + this.model.targetID).ejMenu({ mouseOut: options[option] });
                        break;
                    case "itemSelected":
                        $("#" + this.model.targetID).ejMenu({ click: options[option] });
                        break;
                }
            }
        },
        /**
         * To configure the button text		
		 * @private
         */
        _setText: function (val) {
            /// <summary>This will set Text property of split button </summary>
            if (this.model.contentType == ej.ContentType.TextOnly) {
                if (this.model.buttonMode == ej.ButtonMode.Split)
                    this.element.html(val);
                else {
                    this.element.empty();
                    this.imgtxtwrap = val;
                    if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Top)
                        this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    else
                        this.element.append(this.imgtxtwrap, this.btnimgwrap);
                }
            } else {
                this.textspan.html(val);
            }
        },
        /**
         * To configure button's prefix image		
		 * @private
         */
        _setMajorIcon: function (val) {
            /// <summary>This will set Major Icon property of split button </summary>
            this.majorimgtag.removeClass(this.model.prefixIcon);
            this.majorimgtag.addClass(val);
        },
        /**
         * To configure button's suffix image		
		 * @private
         */
        _setMinorIcon: function (val) {
            /// <summary>This will set Minor Icon property of split button </summary>
            this.minorimgtag.removeClass(this.model.suffixIcon);
            this.minorimgtag.addClass(val);
        },
        _setTargetId: function (val) {
            this.model.targetID = val;
            this._renderContxtMenu();
        },
        /**
         * To configure button contents type		
		 * @private
         */
        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.element.empty();
                this.model.contentType = val;
                this._renderButtonContent();
            }
        },
        /**
         * To configure images position inside the button		
		 * @private
         */
        _setImagePosition: function (val) {
            if (val == ej.ImagePosition.ImageRight || val == ej.ImagePosition.ImageLeft || val == ej.ImagePosition.ImageBottom || val == ej.ImagePosition.ImageTop) {
                if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                    this.element.empty();
                    this.model.imagePosition = val;
                    this._renderButtonContent();
                }
            }
        },
        /**
         * To configure buttonMode of the button
         * @private
         */
        _setButtonMode: function (val) {
            if (val == ej.ButtonMode.Split || val == ej.ButtonMode.Dropdown) {
                if (val != this.model.buttonMode) {
                    this._destroy();
                    this.model.buttonMode = val;
                    this._init();
                }
            }
        },
        /**
         * To configure arrow position inside the button
         * @private
         */
        _setArrowPosition: function (val) {
            if (val == ej.ArrowPosition.Right || val == ej.ArrowPosition.Left || val == ej.ArrowPosition.Bottom || val == ej.ArrowPosition.Top) {
                if ((this.model.buttonMode == ej.ButtonMode.Dropdown) && (val != this.model.arrowPosition)) {
                    this.model.arrowPosition = val;
                    this.element.empty();
                    this._setSize(this.model.size);
                    this.element.removeClass("e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop");
                    this._renderButtonContent();
                }
                else if ((this.model.buttonMode == ej.ButtonMode.Split) && (val != this.model.arrowPosition)) {
                    this.model.arrowPosition = val;
                    this._setSize(this.model.size);
                    this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
                    this._setRTL(this.model.enableRTL);
                }
            }
        },
        /**
         * To enable or disable the Right to Left behaviour 		
		 * @private
         */
        _setRTL: function (val) {
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropdownimg.removeClass("e-up-arrow").addClass("e-down-arrow");
                switch (this.model.arrowPosition) {
                    case ej.ArrowPosition.Right:
                        this.innerWrap.addClass("e-splitarrowright");
                        break;
                    case ej.ArrowPosition.Left:
                        this.innerWrap.addClass("e-splitarrowleft");
                        break;
                    case ej.ArrowPosition.Bottom:
                        this.innerWrap.addClass("e-splitarrowbottom");
                        break;
                    case ej.ArrowPosition.Top:
                        this.innerWrap.addClass("e-splitarrowtop");
                        this.dropdownimg.addClass("e-up-arrow").removeClass("e-down-arrow");
                        break;
                }
                val == true ? this.splitwrap.addClass("e-rtl e-btnrtl") : this.splitwrap.removeClass("e-rtl e-btnrtl");
            }
            else
                val == true ? this.splitwrap.addClass('e-rtl') : this.splitwrap.removeClass('e-rtl');
            this.model.enableRTL = val;
            this._roundedCorner(this.model.showRoundedCorner);
        },
        /**
         * To enable or disable the rounded corner behaviour 		
		 * @private
         */
        _roundedCorner: function (value) {
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.element.removeClass('e-corner-left e-corner-right e-corner-bottom e-corner-top');
                this.dropbutton.removeClass('e-corner-left e-corner-right e-corner-bottom e-corner-top');
                if (value) {
                    if (this.model.enableRTL) {
                        switch (this.model.arrowPosition) {
                            case ej.ArrowPosition.Right:
                                this.element.addClass("e-corner-right");
                                this.dropbutton.addClass("e-corner-left");
                                break;
                            case ej.ArrowPosition.Left:
                                this.element.addClass("e-corner-left");
                                this.dropbutton.addClass("e-corner-right");
                                break;
                            case ej.ArrowPosition.Bottom:
                                this.element.addClass("e-corner-top");
                                this.dropbutton.addClass("e-corner-bottom");
                                break;
                            case ej.ArrowPosition.Top:
                                this.element.addClass("e-corner-bottom");
                                this.dropbutton.addClass("e-corner-top");
                                break;
                        }
                    }
                    else {
                        switch (this.model.arrowPosition) {
                            case ej.ArrowPosition.Right:
                                this.element.addClass("e-corner-left");
                                this.dropbutton.addClass("e-corner-right");
                                break;
                            case ej.ArrowPosition.Left:
                                this.element.addClass("e-corner-right");
                                this.dropbutton.addClass("e-corner-left");
                                break;
                            case ej.ArrowPosition.Bottom:
                                this.element.addClass("e-corner-top");
                                this.dropbutton.addClass("e-corner-bottom");
                                break;
                            case ej.ArrowPosition.Top:
                                this.element.addClass("e-corner-bottom");
                                this.dropbutton.addClass("e-corner-top");
                                break;
                        }
                    }
                }
            }
            else
                value == true ? this.element.addClass('e-corner-all') : this.element.removeClass('e-corner-all');
        },
        /**
         * To configure enable/disable the splitbutton	
		 * @private
         */
        _controlStatus: function (value) {
            //disable status
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },
        /**
        * To configure the custom theme for button using cssClass property		
        * @private
        */
        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass);
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropbutton.removeClass(this.model.cssClass);
                this.dropbutton.addClass(skin);
            }
            this.element.addClass(skin);
            $('#' + this.model.targetID).ejMenu('option', 'cssClass', skin);
        },
        /**
         * To initialize the button		
		 * @private
         */
        _initialize: function () {
            /// <summary>This function is  used to Initialize the Split button Object</summary>
            if (this.element.is("button")) {
                this._render();
            } else {
                this.element.removeClass("e-splitbutton");//need to change in src level
            }
            this._timeout = null;
        },
        /*Render Section For DifferentTypes*/
        /**
         * Render Section For DifferentTypes		
		 * @private
         */
        _render: function () {
            /// <summary>This function is  used to Render the Split button Object</summary>
            this.element.addClass(this.model.cssClass + " e-btn e-select e-split-btn").attr("role", "button");
            if ((this.model.text == null) || (this.model.text == "")) {
                this.model.text = this.element.text();
            }
            else
                this.element.attr("aria-describedby", this.model.text);
            if (this.model.buttonMode != ej.ButtonMode.Split && this.model.buttonMode != ej.ButtonMode.Dropdown)
                this.model.buttonMode = ej.ButtonMode.Split;
            if (this.model.arrowPosition != ej.ArrowPosition.Right && this.model.arrowPosition != ej.ArrowPosition.Left && this.model.arrowPosition != ej.ArrowPosition.Bottom && this.model.arrowPosition != ej.ArrowPosition.Top)
                this.model.arrowPosition = ej.ArrowPosition.Right;
            this.element.empty();
            /*Creating Wrapper*/
            this.splitwrap = (this.model.buttonMode == ej.ButtonMode.Split ? ej.buildTag('span.e-split e-widget') : ej.buildTag('span.e-split e-drop e-widget'));
            this.splitwrap.insertBefore(this.element);
            this.innerWrap = ej.buildTag('span.e-in-wrap e-box e-padding');
            this.splitwrap.append(this.innerWrap);
            this.wrapper = this.splitwrap;
            /*DropDown Image*/
            this.dropdownimg = ej.buildTag('span.e-icon e-down-arrow');
            this.btnimgwrap = ej.buildTag('div.e-split-btn-div');
            this.btnimgwrap.append(this.dropdownimg);
            /*Split Button*/
            if (this.model.buttonMode == ej.ButtonMode.Split) {
                this.dropbutton = ej.buildTag('button.e-split-btn e-btn e-select ' + this.model.cssClass + ' e-drp-btn#' + this.element[0].id + 'drpbtn', "", {}, { type: "button","data-role":"none" });
                this.dropbutton.append(this.btnimgwrap);
                this.dropbutton.insertAfter(this.element);
                if (this.model.contentType == ej.ContentType.TextOnly)
                    this.dropbutton.addClass("e-btn-txt");
                else
                    this.dropbutton.addClass("e-rht-btn");
            }
            /*width and height setting*/
            this._setSize(this.model.size);
            this.element.addClass("e-left-btn");
            this._renderButtonContent();
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this.innerWrap.append(this.element);
            else
                this.innerWrap.append(this.element, this.dropbutton);
            /*Rendering Context menu*/
            this._renderContxtMenu();
            this._roundedCorner(this.model.showRoundedCorner);
            this._setRTL(this.model.enableRTL);
        },
        /**
         * Render section for button content
		 * @private
         */
        _renderButtonContent: function () {
            /*Image and Text*/
            this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
            this.majorimgtag = ej.buildTag('span.e-icon ' + this.model.prefixIcon);
            this.minorimgtag = ej.buildTag('span.e-icon ' + this.model.suffixIcon);
            this.imgtxtwrap = ej.buildTag('div');
            /*Rendering Option*/
            if (this.model.contentType == ej.ContentType.TextAndImage) {
				switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                    	this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
                    case ej.ImagePosition.ImageLeft:
                    	this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
                    case ej.ImagePosition.ImageBottom:
                        this.majorimgtag.css("display","inline-table");
                    	this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
                    case ej.ImagePosition.ImageTop:
                        this.majorimgtag.css("display","inline-table");
                    	this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
                }
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.majorimgtag);
            } else {
                this.element.addClass("e-txt");
                this.imgtxtwrap = this.model.text;
            }
            if (this.model.buttonMode == ej.ButtonMode.Dropdown)
                this._renderDropdownArrow();
            else
                this.element.append(this.imgtxtwrap);
        },
        /**
         * Render section for dropdown button arrow position
         * @private
         */
        _renderDropdownArrow: function () {
            this.btnimgwrap.css("position","absolute");
            this.dropdownimg.removeClass("e-up-arrow").addClass("e-down-arrow");
            switch (this.model.arrowPosition) {
                case ej.ArrowPosition.Right:
                    this.element.addClass("e-droparrowright");
                    this.element.append(this.imgtxtwrap, this.btnimgwrap);
                    break;
                case ej.ArrowPosition.Left:
                    this.element.addClass("e-droparrowleft");
                    this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    break;
                case ej.ArrowPosition.Bottom:
                    this.element.addClass("e-droparrowbottom");
                    this.element.append(this.imgtxtwrap, this.btnimgwrap);
                    break;
                case ej.ArrowPosition.Top:
                    this.element.addClass("e-droparrowtop");
                    this.dropdownimg.addClass("e-up-arrow").removeClass("e-down-arrow");
                    this.element.append(this.btnimgwrap, this.imgtxtwrap);
                    break;
            }
        },
        /*Height of the splitButton*/
        /**
         * To configure size of the button		
		 * @private
         */
        _setSize: function (val) {
            var ht = this.model.height, wd = this.model.width;
            switch (val) {
                case "mini":
                    if (ht == "") ht = "28px";
                    if (wd == "") wd = "63px";
                    this._splitbtnHeight(ht);
                    this._splitbtnWidth(wd);
                    this.element.css('font-size', '12px');
                    break;
                case "small":
                    if (ht == "") ht = "32px";
                    if (wd == "") wd = "89px";
                    this._splitbtnHeight(ht);
                    this._splitbtnWidth(wd);
                    this.element.css('font-size', '13px');
                    break;
                case "medium":
                    if (ht == "") ht = "36px";
                    if (wd == "") wd = "113px";
                    this._splitbtnHeight(ht);
                    this._splitbtnWidth(wd);
                    this.element.css('font-size', '14px');
                    break;
                case "large":
                    if (ht == "") ht = "40px";
                    if (wd == "") wd = "130px";
                    this.element.css('font-size', '15px');
                    this._splitbtnHeight(ht);
                    this._splitbtnWidth(wd);
                    break;
                default:
                    this._splitbtnHeight(ht);
                    this._splitbtnWidth(wd);
                    break;
            }
            if (this.model.arrowPosition == ej.ArrowPosition.Bottom && this.model.height == "")
                this._splitbtnHeight(this.splitwrap.height() + (this.model.buttonMode == ej.ButtonMode.Dropdown ? 15 : 24));  // 15px added the height of the wrapper due to Arrow positioned in bottom
            else if (this.model.arrowPosition == ej.ArrowPosition.Top && this.model.height == "")
                this._splitbtnHeight(this.splitwrap.height() + (this.model.buttonMode == ej.ButtonMode.Dropdown ? 10 : 24));  // 10px added the height of the wrapper due to Arrow positioned in top
        },
        /**
         * To configure height for the split button		
		 * @private
         */
        _splitbtnHeight: function (val) {
            if ((val == "") || (val == null)) val = '30px';
            this.splitwrap.css("height", val);
        },
        /*Width of the splitButton*/
        /**
         * To configure width for the split button		
		 * @private
         */
        _splitbtnWidth: function (val) {
            this.splitwrap.css("width", val);
        },
        /*Context menu Rendering*/
        /**
         * Render section for Context menu Rendering	
		 * @private
         */
        _renderContxtMenu: function () {
            $("#" + this.model.targetID).ejMenu({
                menuType: ej.MenuType.ContextMenu,
                openOnClick: false,
                contextMenuTarget: "",
                fields: this.model.fields,
                showArrow: true,
                cssClass: this.model.cssClass,
                enableRTL: this.model.enableRTL,
                mouseover: $.proxy(this._itemMouseOver, this),
                mouseout: $.proxy(this._itemMouseOut, this),
                click: $.proxy(this._itemClick, this)
            });
        },
        /**
         * Section For handle the item click event for the split button
		 * @private
         */
        _itemClick: function (args) {
            args = { status: this.model.enabled,ID: args.ID, text: args.text};
            this.contstatus = false;
            this.element.unbind("click", $.proxy(this._hidecontext, this));
            this._off($(document), "mousedown", this._documentClick);
            this._trigger("itemSelected", args);
        },
        /**
         * Section For handle the item MouseOver event for the split button
		 * @private
         */
        _itemMouseOver: function (args) {
            this._trigger("itemMouseOver", args);
        },
        /**
         * Section For handle the item MouseOut event for the split button
		 * @private
         */
        _itemMouseOut: function (args) {
            this._trigger("itemMouseOut", args);
        },
        /*-----------------------Event Handlers -----------------------------------------*/
        /**
         * Wiring the events to button control		
		 * @private
         */
        _wireEvents: function () {
            /// <summary>This function is  used to Apply Events in the Split button Object</summary>
            /*element*/
            this._on(this.element, "click", this._btnMouseClick);
            this._on(this.element, "mousedown", this._btnMouseDown);

            /*DrpBTN*/
            if (this.model.buttonMode == ej.ButtonMode.Split)
                this._on(this.dropbutton, "click", this._btnMouseClick);
            /*DocClk*/
            this._on($(document), "mousedown", this._docrhtclk);
        },
        /*EVENT functionalities*/
        /**
         * Section For handle the click event
		 * @private
         */
        _btnMouseClick: function (e) {
            var args, targetElement, posleft;
            if (!$(e.currentTarget).hasClass("e-disable")) {
                if (e.currentTarget.id != this.element[0].id + "drpbtn" && this.model.buttonMode == ej.ButtonMode.Split) {
                    args = { status: this.model.enabled };
                    this._trigger("click", args);
                } else {
                    /*Context Menu Functionality*///need to write enableRTL
                    //the getXYpos method is created to calculate position for context menu
                    targetElement = (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
                    position = this._getXYpos(e);
                    if (this.contstatus) {
                        this._hidecontext(e);
                    } else {
                        posleft = position.x - ($("#" + this.model.targetID).outerWidth() - (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerWidth() : this.element.outerWidth()));
                        if (this.model.enableRTL)
                            position.x = (posleft < $("#" + this.model.targetID).outerWidth()) ? position.x : posleft;
                        else
                            position.x = (position.x + $("#" + this.model.targetID).outerWidth() < $(window).width()) ? position.x : posleft;
                        $("#" + this.model.targetID).ejMenu('show', position.x, position.y, targetElement, e);
                        this.contstatus = true;
                        this.element.bind("click", $.proxy(this._hidecontext, this));
                    }
                }
                if (this.contstatus)
                    this._on($(document), "mousedown", this._documentClick);
            }
        },
        _getXYpos:function(e)
        {
            var btnpos, btnposx, btnposy, poscur = 1, postop;
            btnpos = this._getOffset(this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
            btnposx = btnpos.left;
            postop = this.model.arrowPosition == ej.ArrowPosition.Top ? (btnpos.top - $("#" + this.model.targetID).outerHeight() + 1) : (this.model.buttonMode == ej.ButtonMode.Split ? (btnpos.top + this.dropbutton.outerHeight()) : (btnpos.top + this.element.outerHeight())) - poscur;//1px added to top due to element border-top as none
            btnposy = (postop < 0) ? (btnpos.top + (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerHeight() + this.element.outerHeight() : this.element.outerHeight()) - poscur) : postop;
            return { x: btnposx, y: btnposy };
        },
        _getOffset: function (ele) {
            var pos = ele.offset();
            if ($("body").css("position") != "static") {
                var bodyPos = $("body").offset();
                pos.left -= bodyPos.left;
                pos.top -= bodyPos.top;
            }
            return pos;
        },

        /**
         * Section For handle mouse down action.
		 * @private
         */
        _btnMouseDown: function (e) {
            if (!$(e.currentTarget).hasClass("e-disable")) {
                this._docrhtclk(e);
            }
        },
        /**
         * Section For handle hidecontext action.
		 * @private
         */
        _hidecontext: function (e) {
            if (($(e.target).is(this.element) || $(e.target).is(this.dropbutton) || $(e.target).is(this.textspan) || $(e.target).is(this.imgtxtwrap) || $(e.target).is(this.dropdownimg) || $(e.target).is(this.btnimgwrap) || !$(e.target).is(this.majorimgtag) || !$(e.target).is(this.minorimgtag)) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($("#" + this.model.targetID))) {
                $("#" + this.model.targetID).ejMenu('hide', e);
                this.contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off($(document), "mousedown", this._documentClick);
            }
        },
        /**
         * Section For handle on document click action.
		 * @private
         */
        _documentClick: function (e) {
            if (!$(e.target).is(this.element) && !$(e.target).is(this.dropbutton) && !$(e.target).is(this.textspan) && !$(e.target).is(this.imgtxtwrap) && !$(e.target).is(this.dropdownimg) && !$(e.target).is(this.btnimgwrap) && !$(e.target).is(this.majorimgtag) && !$(e.target).is(this.minorimgtag) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($("#" + this.model.targetID))) {
                $("#" + this.model.targetID).ejMenu('hide', e);
                this.contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off($(document), "mousedown", this._documentClick);
            }
        },
        /**
         * Section For handle document right click action.
		 * @private
         */
        _docrhtclk: function (e) {
            var isRightClick, targetElement;
            isRightClick = false;
            if (e.button) {
                isRightClick = (e.button == 2);
            } else if (e.which) {
                isRightClick = (e.which == 3); //for Opera
            }
            targetElement = e.target;
            if (isRightClick) {
                e.preventDefault();
            }
        },
        /**/
    });
    /**
	 * Enum for button content mode.	 
	 * @enum {string}
	 * @global 
	 */
    ej.ContentType = { TextOnly: "textonly", ImageOnly: "imageonly", ImageBoth: "imageboth", TextAndImage: "textandimage", ImageTextImage: "imagetextimage" };
    /**
	 * Enum for Button positioning	 
	 * @enum {string}
	 * @global 
	 */
    ej.ImagePosition = { ImageRight: "imageright", ImageLeft: "imageleft", ImageTop: "imagetop", ImageBottom: "imagebottom" };
    /**
	 * Enum for various button sizes	 
	 * @enum {string}
	 * @global 
	 */
    ej.ButtonSize = { Mini: "mini", Small: "small", Medium: "medium", Large: "large" };
    /**
     * Enum for ButtonMode.
     * @enum {string}
     * @global 
     */
    ej.ButtonMode = { Split: "split", Dropdown: "dropdown" };
    /**
     * Enum for Button Arrow positioning.
     * @enum {string}
     * @global 
     */
    ej.ArrowPosition = { Right: "right", Left: "left", Top: "top", Bottom: "bottom" };
})(jQuery, Syncfusion);;
/*!
*  filename: ej.togglebutton.js
*  version : 12.1
*  Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html Button elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
	
	/**
    * @namespace ej
	* @class ejToggleButton
	* @requires jQuery
	* @requires ej.togglebutton.js
    * @requires ej.checkbox.js
	* @classdesc The Toggle Button allows you to perform the toggle option by using checked and unchecked state. This Toggle Button can be helpful to user to check their states. The Toggle Button control displays both text and images.
	* @example 
	* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
	* // Create ToggleButton <br>
    * $('#toggle').ejToggleButton({defaultText:"Play",activeText:"Pause"}); 	<br>	
	* &lt;/script&gt; <br>
	*/    

    // Example plugin creation code
    // ejSample is the plugin name 
    // "ej.Sample" is "namespace.className" will hold functions and properties

    ej.widget("ejToggleButton", "ej.ToggleButton", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-togglebutton",

        // default model
        defaults: {
            /// <summary>This Contains default property of toggle button </summary>
			/**		
			* Specifies the size of the ToggleButton.	See {@link ButtonSize}
			* @default ej.ButtonSize.Normal
			* @type {enum}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
			* &lt;script&gt; <br>
			* //To set size API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",size: ej.ButtonSize.Mini});					 			 	
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/		
            size: "normal",           
            /**		
			* Specifies the type of the ToggleButton.	See {@link ButtonType}
			* @default ej.ButtonType.Button
			* @type {enum}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
			* &lt;script&gt; <br>
			* //To set type API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",type:ej.ButtonType.Submit});					 			 	
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            type: "button",
			/**		
			* Specifies the width of the ToggleButton.
			* @default 100pixel
			* @type {String}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* //To set width API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",width: "100px" });						
				
	* &lt;/script&gt; <br>			
			* @memberof ejToggleButton
			* @instance
			*/
			width: "",
			
			/**		
			* Specifies the height of the ToggleButton.
			* @default 28pixel
			* @type {String}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* //To set height API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",height: "28px" });						
		
	* &lt;/script&gt;		
			* @memberof ejToggleButton
			* @instance
			*/
            height: "",
			
            /**		
			* Specifies the state of the ToggleButton.
			* @default true
			* @type {boolean}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>

			* //To set enabled API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",enabled: true });						
					
			* &lt;/script&gt; <br>		
			* @memberof ejToggleButton
			* @instance
			*/
            enabled: true,
			/**		
			* Specifies the toggleState of the ToggleButton.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* //To set toggleState API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",toggleState: false });	
            * &lt;/script&gt; <br>	
			* @memberof ejToggleButton
			* @instance
			*/
            toggleState: false,
			/**		
			* Specifies the defaultText of the ToggleButton.
			* @default null
			* @type {string}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* //To set defaultText API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});						
			* &lt;/script&gt; <br>		
			* @memberof ejToggleButton
			* @instance
			*/
			defaultText: null,
			
			/**		
			* Specifies the preventToggle of the ToggleButton.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* //To set preventToggle API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",preventToggle: false});						
			* &lt;/script&gt; <br>		
			* @memberof ejToggleButton
			* @instance
			*/
			preventToggle: false,
			/**		
			* Specifies the activeText of the ToggleButton.
			* @default null
			* @type {string}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	        * &lt;script&gt; <br>
			* //To set activeText API value during initialization  
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});							
	        * &lt;/script&gt; <br>	
			* @memberof ejToggleButton
			* @instance
			*/
            activeText: null,
			/**		
			* Specifies the contentType of the ToggleButton. See {@link ContentType}
			* @default ej.ContentType.TextOnly
			* @type {enum}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	        * &lt;script&gt; <br>
			* // Set the button contentType on initialization. 			
			* 	$("#toggle").ejToggleButton({ defaultText:"Play",activeText:"Pause",contentType : ej.ContentType.TextOnly });			 
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            contentType: "textonly",
			/**		
			*  Specifies the image position of the ToggleButton. This image position is applicable only with the textandimage contentType property. The images can be positioned in both imageLeft and imageRight options. See {@link imagePositions}
			* @default ej.ImagePosition.ImageLeft
			* @type {enum}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* // Set the image position for toggle button during initialization. 			
			* 	$("#toggle").ejToggleButton(
            * {
            *    contentType: ej.ContentType.TextAndImage,
            *    imagePosition: ej.ImagePosition.ImageRight,
            *    defaultText:"Play",activeText:"Pause",
            *    defaultPrefixIcon: "e-mediaplay e-uiLight",
            *    activePrefixIcon: "e-mediapause e-uiLight"
            * });			
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            imagePosition: "imageleft",
			/**		
			* Specify the rounded corner to Togglebutton
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* // Set the rounded corner during initialization. 			
			* 	$("#toggle").ejToggleButton({ defaultText:"Play",activeText:"Pause",showRoundedCorner : true });			 
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            showRoundedCorner: false,
			/**					
			* Specify the enablePersistence to Togglebutton to save current model value to browser cookies for state maintains
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* // Set the rounded corner during initialization. 			
			* 	$("#toggle").ejToggleButton({ defaultText:"Play",activeText:"Pause",enablePersistence : true });			 
			* &lt;/script&gt; <br>
			
			* @memberof ejToggleButton
			* @instance
			*/
            enablePersistence: false,
			/**		
			* Specify the CSS class to toggle button to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* // Set the CSS class during initialization. 			
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",cssClass : "gradient-lime" });			 
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            cssClass: "",
			/**		
			* Specify the defaultPrefixIcon to toggle button to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* // Set the defaultPrefixIcon during initialization. 			
			* 	$("#toggle").ejToggleButton({ 
            *    defaultText:"Play",activeText:"Pause",
            *    contentType: "textandimage",
            *    defaultPrefixIcon: "e-mediaplay e-uiLight",
            *    activePrefixIcon: "e-mediapause e-uiLight",
            *  });			
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            defaultPrefixIcon: null,
			/**		
			* Specify the defaultSuffixIcon to toggle button to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
			* &lt;script&gt; <br>
			* // Set the defaultSuffixIcon during initialization. 			
			*  $("#toggle").ejToggleButton({ 
            *    defaultText:"Play",activeText:"Pause",
            *    contentType: "textandimage",
            *    defaultSuffixIcon: "e-mediaplay e-uiLight",
            *    activeSuffixIcon: "e-mediapause e-uiLight",
            *  });			
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            defaultSuffixIcon: null,
			/**		
			* Specify the activePrefixIcon to toggle button to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			*
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
			* &lt;script&gt; <br>
			* // Set the activePrefixIcon during initialization. 			
			* 	$("#toggle").ejToggleButton({ 
            *    defaultText:"Play",activeText:"Pause",
            *    contentType: "textandimage",
            *    defaultPrefixIcon: "e-mediaplay e-uiLight",
            *    activePrefixIcon: "e-mediapause e-uiLight",
            *  });			
			* &lt;/script&gt; 
			* @memberof ejToggleButton
			* @instance
			*/
            activePrefixIcon: null,
			/**		
			* Specify the activeSuffixIcon to toggle button to achieve custom theme.
			* @default ""
			* @type {string}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			* // Set the activeSuffixIcon during initialization. 			
			* 	$("#toggle").ejToggleButton({ 
            *    contentType: "imageboth",
            *    defaultSuffixIcon: "e-mediaplay e-uiLight",
            *    activeSuffixIcon: "e-mediapause e-uiLight",
            *  });			
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            activeSuffixIcon: null,
			/**		
			* Specify the Right to Left Direction to Togglebutton
			* @default false
			* @type {boolean}
			* @example 
			* &lt;input id="toggle" type="checkbox" /&gt; <br> 	
			* &lt;script&gt; <br>
			* // Set the enableRTL during initialization. 			
			* 	$("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause",enableRTL : true });			 
			* &lt;/script&gt; <br>
			* @memberof ejToggleButton
			* @instance
			*/
            enableRTL: false,
			/**     
			 * Fires when ToggleButton control is created successfully.
			 * @event
			 * @name ejToggleButton#create 	
			 * @param {Object} argument Event parameters from toggle button     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {object}  argument.model returns the toggle button model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example 
			 * &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			 * //create event for toggle button
             * $("#toggle").ejToggleButton({
             *    defaultText:"Play",activeText:"Pause",
             *    create: function (args) {}
             * });   
             * &lt;/script&gt; <br>   
			 * @memberof ejToggleButton
			 * @instance
			 */
            create: null,
			/**     
			 * Fires when ToggleButton control is clicked successfully.
			 * @event
			 * @name ejToggleButton#click 	
			 * @param {Object} argument Event parameters from toggle button     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {boolean}  argument.isChecked return the toggle button checked state
			 * @param {object}  argument.model returns the toggle button model
			 * @param {boolean}  argument.status return the toggle button state			 
			 * @param {string}  argument.type returns the name of the event			 			
			 * @example 
			 * &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			 * //click event for toggle button
             * $("#toggle").ejToggleButton({
             * defaultText:"Play",activeText:"Pause",
             *    click: function (args) {}
             * }); 
             * &lt;/script&gt; <br>     
			 * @memberof ejToggleButton
			 * @instance
			 */
            click: null,
			/**     
			 * Fires when ToggleButton control state is changed successfully.
			 * @event
			 * @name ejToggleButton#change 	
			 * @param {Object} argument Event parameters from toggle button     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {boolean}  argument.isChecked return the toggle button checked state
			 * @param {object}  argument.model returns the toggle button model		
			 * @param {string}  argument.type returns the name of the event			 			
			 * @example 
			 * &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			 * //change event for toggle button
             * $("#toggle").ejToggleButton({
             *    defaultText:"Play",activeText:"Pause",
             *    change: function (args) {}
             * });  
             * &lt;/script&gt; <br>    
			 * @memberof ejToggleButton
			 * @instance
			 */
            change: null,
			/**     
			 * Fires when ToggleButton control is destroyed successfully.
			 * @event
			 * @name ejToggleButton#destroy 	
			 * @param {Object} argument Event parameters from toggle button     
			 * @param {boolean}  argument.cancel if the event should be cancelled; otherwise, false.
			 * @param {object}  argument.model returns the toggle button model		
			 * @param {string}  argument.type returns the name of the event			 			
			 * @example 
			 * &lt;input id="toggle" type="checkbox" /&gt; <br> 	
	* &lt;script&gt; <br>
			 * //destroy event for toggle button
             * $("#toggle").ejToggleButton({
             *    defaultText:"Play",activeText:"Pause",
             *    destroy: function (args) {}
             * });  
             * &lt;/script&gt; <br>    
			 * @memberof ejToggleButton
			 * @instance
			 */
            destroy: null
        },
		/**
         * Specify the data types for default properties 
		 * @private
         */
        //Data Types
        dataTypes: {
            size: "string",
            type: "enum",
            enabled: "boolean",
            showRoundedCorner: "boolean",
            toggleState: "boolean",
			preventToggle: "boolean",
            defaultText: "string",
            activeText: "string",
            contentType: "enum",
            imagePosition: "enum",
            defaultPrefixIcon: "string",
            defaultSuffixIcon: "string",
            activePrefixIcon: "string",
            activeSuffixIcon: "string",
            cssClass: "string",
            enableRTL: "boolean",
            enablePersistence: "boolean"
        },
		/**
        * To disable the toggle button  
		* @return jQuery
		* @example 
		* &lt;input id="toggle" type="checkbox" / &gt; <br> 
		* &lt;script&gt;
		* // Create toggle button
		* $("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});
		* var toggleObj = $("#toggle").data("ejToggleButton");
		* toggleObj.disable(); // disable the toggle button
		* &lt;/script&gt;
		* @example 
		* &lt;input id="toggle" type="checkbox" / &gt; <br> 
		* &lt;script&gt;
		* // disable the toggle button
		* $("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});
		* $("#toggle").ejToggleButton("disable");	
		* &lt;/script&gt;
		*@memberof ejToggleButton
		* @instance
        */
        // sample public function
        disable: function () {
            /// <summary>This Contains disable functionality to wire with the toggle button </summary>
            this.buttontag.addClass("e-disable").attr({ "aria-disabled": true });
            this.model.enabled = false;
        },
		/**
        * To enable the toggle button  
		* @return jQuery
		* @example 
		* &lt;input id="toggle" type="checkbox" / &gt; <br> 
		* &lt;script&gt;
		* // Create toggle button
		* $("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});
		* var toggleObj = $("#toggle").data("ejToggleButton");
		* toggleObj.enable(); // enable the toggle button
		* &lt;/script&gt;
		* @example 
		* &lt;input id="toggle" type="checkbox" / &gt; <br> 
		* &lt;script&gt;
		* // enable the toggle button
		* $("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});
		* $("#toggle").ejToggleButton("enable");	
		* &lt;/script&gt;
		*@memberof ejToggleButton
		* @instance
        */
        enable: function () {
            /// <summary>This Contains enable functionality to wire with the toggle button </summary>
            if (this.buttontag.hasClass("e-disable")) {
                this.buttontag.removeClass("e-disable").attr({ "aria-disabled": false });
                this.model.enabled = true;
            }
        },
		/**
         * Create the toggle button widget
		 * @private
         */	
        // constructor function
        _init: function () {
            /// <summary>This function contains initialization </summary>
            this._initialize();
            this._controlStatus(this.model.enabled);
            this._wireEvents();
        },
		/**
        * To destroy the toggle button  
		* @alias destroy
		* @return jQuery
		* @example 
		* &lt;input id="toggle" type="checkbox" / &gt; <br> 
		* &lt;script&gt;
		* // Create toggle button
		* $("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});
		* var toggleObj = $("#toggle").data("ejToggleButton");
		* toggleObj.destroy(); // destroy the toggle button
		* &lt;/script&gt;
		* @example 
		* &lt;input id="toggle" type="checkbox" / &gt; <br> 
		* &lt;script&gt;
		* // destroy the toggle button
		* $("#toggle").ejToggleButton({defaultText:"Play",activeText:"Pause"});
		* $("#toggle").ejToggleButton("destroy");	
		* &lt;/script&gt;
		*@memberof ejToggleButton
		* @instance
        */
        _destroy: function () {
            /// <summary>This Contains destroy of toggle button </summary>
            this.element.unwrap();
            this.element.removeClass('e-chkbx-hidden');
            this.labelFinder.empty();
            this.labelFinder.text(this.model.defaultText);
        },
		 /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */
        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {
                    case "size":
                        this._setSize(options[option]);
                        break;
                    case "type":
                        this._settype(options[option]);
                        break;
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "contentType":
                        this._setContentType(options[option]);
                        break;
                    case "imagePosition":
                        this._setImagePosition(options[option]);
                        break;
                    case "defaultText":
                        this._setDefaultText(options[option]);
                        break;
                    case "activeText":
                        this._setActiveText(options[option]);
                        break;
                    case "defaultPrefixIcon":
                        this._setDefaultMajorIcon(options[option]);
                        break;
                    case "defaultSuffixIcon":
                        this._setDefaultMinorIcon(options[option]);
                        break;
                    case "activePrefixIcon":
                        this._setActiveMajorIcon(options[option]);
                        break;
                    case "activeSuffixIcon":
                        this._setActiveMinorIcon(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "toggleState":
                        this._tglevaluestatus(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
                    case "enableRTL":
                        this._setRTL(options[option]);
                        break;
                }
            }
        },
		/**
         * To configure size of the toggle button		
		 * @private
         */	 
        _setSize: function (val) {
            this.buttontag.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
            this.buttontag.addClass("e-btn-" + val);
        },

        _settype: function (val) {
            this.model.type = val;            
        },

		/**
         * To configure height of the toggle button		
		 * @private
         */	
        _setHeight: function (val) {
            /// <summary>This will set Text property of toggle button </summary>
            this.buttontag.css('height', val);
        },
		/**
         * To configure width of the toggle button		
		 * @private
         */	
        _setWidth: function (val) {
            /// <summary>This will set Text property of toggle button </summary>
            this.buttontag.css('width', val);
        },
		/**
         * To configure default text to the toggle button		
		 * @private
         */	
        _setDefaultText: function (val) {
            /// <summary>This will set Text property of toggle button </summary>
            if (this.model.contentType == ej.ContentType.TextOnly) {
                this.buttontag.html(val);
            } else {
                this.defaulttxtspan.html(val);
            }
        },
		/**
         * To configure active text to the toggle button		
		 * @private
         */	
        _setActiveText: function (val) {
            /// <summary>This will set Text property of toggle button </summary>
            if (this.model.toggleState) {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.buttontag.html(val);
                } else {
                    this.defaulttxtspan.html(val);
                }
            }
        },
		/**
         * To configure default major icon of the toggle button		
		 * @private
         */	
        _setDefaultMajorIcon: function (val) {
            /// <summary>This will set Major Icon property of toggle button </summary>
            this.defMainIcon.removeClass(this.model.defaultPrefixIcon);
            this.defMainIcon.addClass(val);
        },
		/**
         * To configure default minor icon of the toggle button		
		 * @private
         */	
        _setDefaultMinorIcon: function (val) {
            /// <summary>This will set Minor Icon property of toggle button </summary>
            this.defMiniIcon.removeClass(this.model.defaultSuffixIcon);
            this.defMiniIcon.addClass(val);
        },
		/**
         * To configure active major icon of the toggle button		
		 * @private
         */	
        _setActiveMajorIcon: function (val) {
            /// <summary>This will set Major Icon property of toggle button </summary>
            if (this.model.toggleState) {
                this.defMainIcon.removeClass(this.model.activePrefixIcon);
                this.defMainIcon.addClass(val);
            }
        },
		/**
         * To configure active minor icon of the toggle button		
		 * @private
         */	
        _setActiveMinorIcon: function (val) {
            /// <summary>This will set Minor Icon property of toggle button </summary>
            if (this.model.toggleState) {
                this.defMiniIcon.removeClass(this.model.activeSuffixIcon);
                this.defMiniIcon.addClass(val);
            }
        },
		/**
         * To configure content type of the toggle button		
		 * @private
         */	
        _setContentType: function (val) {
            if (val != this.model.contentType) {
                this.buttontag.empty();
                this.model.contentType = val;
                this._renderButtonContent();
            }
        },
		/**
         * To configure image position of the toggle button		
		 * @private
         */	
        _setImagePosition: function (val) {
            if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
                this.buttontag.empty();
                this.model.imagePosition = val;
                this._renderButtonContent();
            }
        },
		 /**
         * To enable or disable the Right to Left behaviour 		
		 * @private
         */	 
        _setRTL: function (val) {
            if (val) {
                this.buttontag.addClass("e-rtl");
            } else {
                this.buttontag.removeClass("e-rtl");
            }
        },
		 /**
         * To enable or disable the toggle button state 		
		 * @private
         */	 
        _controlStatus: function (value) {
            //disable status
            if (!value) {
                this.disable();
            } else {
                this.enable();
            }
        },
		/**
         * To configure the custom theme for toggle button using cssClass property		
		 * @private
         */	 
        _setSkin: function (skin) {
            if (this.model.cssClass != skin) {
                this.buttontag.removeClass(this.model.cssClass);
                this.buttontag.addClass(skin);
            }
        },
		/**
         * To initialize the toggle button		
		 * @private
         */	 
        _initialize: function () {
            /// <summary>This Contains initialize of toggle button </summary>
            if (this.element.is('[type = "checkbox"]')) {
                this._render();
            } else {
                this.element.removeClass("e-togglebutton");//need to change in source level
            }
        },
		 /**
         * Render Section For DifferentTypes		
		 * @private
         */	
        /*Render Section For DifferentTypes*/
        _render: function () {
            /// <summary>This Contains rendering of toggle button </summary>
            var predecessor, labelSelector;
            /*Determine Button Type*/
            this.element.addClass('e-chkbx-hidden e-tbtn');

            /*Finding the label element in the dom*/
            predecessor = this.element.parents().last();
            labelSelector = "label[for='" + this.element[0].id + "']";
            this.labelFinder = predecessor.find(labelSelector);
            if (!this.labelFinder.length) {
                this.labelFinder = ej.buildTag('label', "Button", {}, { "for": this.element[0].id });
                this.labelFinder.insertAfter(this.element);
            }
            if ((this.model.defaultText == null) || (this.model.defaultText == "")) {
                this.model.defaultText = this.labelFinder.text();
            }
            this.labelFinder.empty();
            this.wrapper = $('<span id="' + this.element[0].id + '-wrapper" class="e-tbtn-wrap e-widget"></span>');
            $(this.element).wrap(this.wrapper);
            this.labelFinder.insertAfter(this.element);
            this.buttontag = ej.buildTag('button.e-togglebutton e-btn e-tbtn ' + this.model.cssClass + ' e-select', "", {}, { "role": "button", "tabindex": 0, "type":this.model.type, "data-role":"none" });//need to change in source level
            this.labelFinder.append(this.buttontag);
            /*Initializing the content*/
            if (ej.util.isNullOrUndefined(this.model.activeText)) {
                this.model.activeText = this.model.defaultText;
            }
            if (ej.util.isNullOrUndefined(this.model.activePrefixIcon)) {
                this.model.activePrefixIcon = this.model.defaultPrefixIcon;
            }
            if (ej.util.isNullOrUndefined(this.model.activeSuffixIcon)) {
                this.model.activeSuffixIcon = this.model.defaultSuffixIcon;
            }
            /*Height Width*/
            this._setSize(this.model.size);
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
            this._setRTL(this.model.enableRTL);
            this._renderButtonContent();
            this._tglevaluestatus(this.model.toggleState);
            this._roundedCorner(this.model.showRoundedCorner);
        },
		/**
         * Render Section For toggle button content
		 * @private
         */	
        _renderButtonContent: function () {
            /*Image and Text*/
            this.imgtxtwrap = ej.buildTag('div');
            /*Text Content*/
            this.defaulttxtspan = ej.buildTag('span.e-btntxt' + '#' + this.element[0].id + 'textstatic', this.model.defaultText);
            /*Image Content*/
            if (this.model.contentType.indexOf("image") > -1) {
                this.defMainIcon = ej.buildTag('span.e-icon ' + this.model.defaultPrefixIcon + '#' + this.element[0].id + 'mainiconstatic');
                this.defMiniIcon = ej.buildTag('span.e-icon ' + this.model.defaultSuffixIcon + '#' + this.element[0].id + 'miniconstatic');
            }
            /*Rendering Option*/
            if (this.model.contentType == ej.ContentType.TextAndImage) {
				switch (this.model.imagePosition) {
                    case ej.ImagePosition.ImageRight:
                    	this.imgtxtwrap.append(this.defaulttxtspan, this.defMainIcon);
						break;
					case ej.ImagePosition.ImageLeft:
                    	this.imgtxtwrap.append(this.defMainIcon, this.defaulttxtspan);
						break;
					case ej.ImagePosition.ImageBottom:	
						this.defMainIcon.attr("style","display:inherit");
                    	this.imgtxtwrap.append(this.defaulttxtspan, this.defMainIcon);
						break;
                	case ej.ImagePosition.ImageTop:
						this.defMainIcon.attr("style","display:inherit");
                    	this.imgtxtwrap.append(this.defMainIcon, this.defaulttxtspan);
						break;
                }
				this.buttontag.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageTextImage) {
                this.imgtxtwrap.append(this.defMainIcon, this.defaulttxtspan, this.defMiniIcon);
                this.buttontag.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageOnly) {
                this.imgtxtwrap.append(this.defMainIcon);
                this.buttontag.append(this.imgtxtwrap);
            } else if (this.model.contentType == ej.ContentType.ImageBoth) {
                this.imgtxtwrap.append(this.defMainIcon, this.defMiniIcon);
                this.buttontag.append(this.imgtxtwrap);
            } else {
                this.buttontag.addClass("e-txt");
                this.buttontag.text(this.model.defaultText);
            }
            /**/
        },
		/**
         * To check whether Status of Toggle Button
		 * @private
         */	
        _tglevaluestatus: function (value) {
            /*Checking Status of Toggle Button*/
            if (value) {
                this._toggleButtonStatus(value);
                this.element.attr("checked", "checked");
            } else {
                this._toggleButtonStatus(value);
                this.element.removeAttr("checked");
            }
        },
		/**
         * To enable or disable the rounded corner behaviour 		
		 * @private
         */	
        _roundedCorner: function (value) {
            value == true ? this.buttontag.addClass('e-corner-all') : this.buttontag.removeClass('e-corner-all');
        },
        /*-----------------------Event Handlers -----------------------------------------*/
		 /**
         * Wiring the events to toggle button control		
		 * @private
         */	
        _wireEvents: function () {
            /// <summary>This Contains Events to wire with the toggle button </summary>

            this._on(this.buttontag, "click", this._tglebtnclicked);
        },
		 /**
         * Section For handle the click event
		 * @private
         */	
        _tglebtnclicked: function (e) {
		if (!this.model.preventToggle) {
            var position, end, version = 0;
            if (navigator.userAgent.search("MSIE") > 0) {
                position = navigator.userAgent.search("MSIE") + 5;
                end = navigator.userAgent.search("; Windows");
                version = navigator.userAgent.substring(position, end);
            }
            if (!this.buttontag.hasClass("e-disable")) {
                if (!this.model.toggleState) {
                    this.model.toggleState = true;
                    if ((window.navigator.appName == "Microsoft Internet Explorer") && (version == "8.0")) {
                        this._tglevaluestatus(this.model.toggleState);
                    } else {
                        this._toggleButtonStatus(this.model.toggleState);
                    }
                } else {
                    this.model.toggleState = false;
                    if ((window.navigator.appName == "Microsoft Internet Explorer") && (version == "8.0")) {
                        this._tglevaluestatus(this.model.toggleState);
                    } else {
                        this._toggleButtonStatus(this.model.toggleState);
                    }
                }
            }
            this._trigger("click", { "isChecked": this.model.toggleState, status: this.model.enabled });
        }
		},
		 /**
         * Section For handle the toggle button status
		 * @private
         */	
        _toggleButtonStatus: function (buttonstatus) {
            if (buttonstatus) {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.buttontag.html(this.model.activeText);
                } else {
                    this.defaulttxtspan.html(this.model.activeText);
                    this.defMainIcon.removeClass(this.model.defaultPrefixIcon).addClass(this.model.activePrefixIcon);
                    this.defMiniIcon.removeClass(this.model.defaultSuffixIcon).addClass(this.model.activeSuffixIcon);
                }
                this.buttontag.addClass("e-active").attr("aria-pressed", true);
            } else {
                if (this.model.contentType == ej.ContentType.TextOnly) {
                    this.buttontag.html(this.model.defaultText);
                } else {
                    this.defaulttxtspan.html(this.model.defaultText);
                    this.defMainIcon.removeClass(this.model.activePrefixIcon).addClass(this.model.defaultPrefixIcon);
                    this.defMiniIcon.removeClass(this.model.activeSuffixIcon).addClass(this.model.defaultSuffixIcon);
                }
                this.buttontag.removeClass("e-active").attr("aria-pressed", false);
            }
            this._trigger('change', { "isChecked": this.model.toggleState });
        },

    });
	/**
	 * Enum for toggle button content mode.	 
	 * @enum {string}
	 * @global 
	 */
    ej.ContentType = { 
			/**  Supports only for text content only */
			TextOnly: "textonly", 
			/** Supports only for image content only */
			ImageOnly: "imageonly", 
			/** Supports image for both ends of the button */
			ImageBoth: "imageboth", 
			/** Supports image with the text content */
			TextAndImage: "textandimage", 
			/** Supports image with both ends of the text */
			ImageTextImage: "imagetextimage" 
			};
	
	/**
	 * Enum for toggle button positioning	 
	 * @enum {string}
	 * @global 
	 */
    ej.ImagePosition = { 
			/**  support for aligning text in left and image in right. */
			ImageRight: "imageright", 
			/**  support for aligning text in right and image in left. */
			ImageLeft: "imageleft", 
			/**  support for aligning text in bottom and image in top. */
			ImageTop: "imagetop", 
			/**  support for aligning text in top and image in bottom. */
			ImageBottom: "imagebottom"
			};
	/**
	 * Enum for various toggle button sizes	 
	 * @enum {string}
	 * @global 
	 */
    ej.ButtonSize = { 
			/**  Creates button with inbuilt default size height, width specified */
			Normal : "normal",
			/**  Creates button with inbuilt mini size height, width specified */
			Mini: "mini", 
			/**  Creates button with inbuilt small size height, width specified */
			Small: "small",
			/**  Creates button with inbuilt medium size height, width specified */
			Medium:"medium", 
			/**  Creates button with inbuilt large size height, width specified */
			Large: "large" };
			
    ej.ButtonType = {
        /**  Creates button with button type as button */
        Button: "button",
        /**  Creates button with button type as reset */
        Reset: "reset",
        /**  Creates button with button type as submit */
        Submit: "submit"
      
    };
})(jQuery, Syncfusion);;;
/*!
*  filename: ej.toolbar.js
*  version : 12.1
*  Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Toolbar elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
/**
    * @namespace ej
	* @class ejToolbar
	* @requires jQuery
	* @requires jquery-1.10.2.min.js
    * @requires ej.core.js
    * @requires ej.data.js
    * @requires ej.toolbar.js
	* @classdesc Custom Design for Toolbar control.
	* @example 
	* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
	* // Create Toolbar
    *  $("#toolbar1").ejToolbar();	
	* &lt;/script&gt;
	*/
    // Example plugin creation code
    // ejSample is the plugin name 
    // "ej.Sample" is "namespace.className" will hold functions and properties

    ej.widget("ejToolbar", "ej.Toolbar", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["div", "span"],
        _ignoreOnPersist: ["fields", "dataSource", "query", "create", "click", "itemHover", "itemLeave", "destroy"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-toolbar",

        // default model
        defaults: {
            /// <summary>This Contains default property of toolbar </summary>
			/**		
			* Specifies the height of the Toolbar.
			* @default 28
			* @type {number}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* //To set height API value during initialization  
			* 	$("#toolbar1").ejToolbar({ height: 30 });					 
			* &lt;/script&gt;
			 * @memberof ejToolbar
			* @instance
			*/
            height: "",
			/**		
			* Specifies the width of the Toolbar.
			* @default 100
			* @type {number}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* //To set width API value during initialization  
			* 	//To set width API value 
			* 	$("#toolbar1").ejToolbar({ width: 30 });	
			* &lt;/script&gt;
			* @instance
			*/
            width:"",
			/**		
			* Specifies the Toolbar control state.
			* @default true
			* @type {boolean}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // Enable Toolbar on initialization. 
			* 	//To set enabled API value 
			* 	$("#toolbar1").ejToolbar({ enabled:  true });			
			* &lt;/script&gt;
			 * @memberof ejToolbar
			* @instance
			*/
            enabled: true,
			/**		
			* Specifies the to show or hide.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // Hide Toolbar on initialization. 
			* 	//To set hide API value 
			* 	$("#toolbar1").ejToolbar({  hide: true });			
			* &lt;/script&gt;
			 * @memberof ejToolbar
			* @instance
			*/
            hide: false,
			/**		
			* Specifies the to enableSeparator.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* //specifies enableSeparator Toolbar on initialization. 
			* 	//To set enableSeparator API value 
			* 	$("#toolbar1").ejToolbar({enableSeparator:true});			 
			* &lt;/script&gt;
			 * @memberof ejToolbar
			* @instance
			*/
            enableSeparator: false,
			/**		
			* Specifies the to toolbar orientation.See {@link orientation}
			* @default Horizontal
			* @type {Enum | String}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // Specifies orientation of  Toolbar on initialization. 
			* 	//To set orientation API value 
			* 	$("#toolbar1").ejToolbar({ orientation: ej.Orientation.Horizontal }); 
			* &lt;/script&gt;
			 * @memberof ejToolbar
			* @instance
			*/
            orientation: "horizontal",
			/**		
			* Specifies enableRTL property for the Toolbar during initialization.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // to set enableRTL Toolbar on initialization. 
			* 	//To set enableRTL API value 
			* 	$("#toolbar1").ejToolbar({ enableRTL: false });			 
			* &lt;/script&gt;
			* @memberof ejToolbar
			* @instance
			*/
            enableRTL: false,
            /**		
			* Enables/Disables the responsive support for RTE control toolbar items during the window resizing time.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // to set isResponsive Toolbar on initialization. 
			* 	//To set isResponsive API value 
			* 	$("#toolbar1").ejToolbar({ isResponsive: true });			 
			* &lt;/script&gt;
			* @memberof ejToolbar
			* @instance
			*/
            isResponsive: false,
			/**		
			* Specifies showRoundedCorner property for the Toolbar during initialization.
			* @default false
			* @type {boolean}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // to set showRoundedCorner for Toolbar on initialization. 
			* 	//To set showRoundedCorner API value 

			* 	$("#toolbar1").ejToolbar({ showRoundedCorner: true });			 
			* &lt;/script&gt;
			 * @memberof ejToolbar
			* @instance
			*/
            showRoundedCorner: false,
				/**		
			* Specifies dataSource value for the Toolbar during initialization.
			* @default null
			* @type {ObjectArray}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // to set dataSource value during initialization. 
			* 	//To set dataSource  API value 
			* 	items = [{ edid: "1", spriteCssClass: "editTools cursor", text: "Cursor" },
			*{ edid: "2", spriteCssClass: "editTools select", text: "Select" },
			*{ edid: "3", spriteCssClass: "editTools move", text: "Move" },
			*{ edid: "4", spriteCssClass: "editTools rectselect", text: "Rectangle Select" }];

			*$("#toolbar1").ejToolbar({ dataSource:  items}); 
			* &lt;/script&gt;
			* @memberof ejToolbar
			* @instance
			*/
            dataSource: null,
				/**		
			* Specifies Specifies the query to retrieve the data from the online server. The query is used only when the online dataSource is used.
			* @default null
			* @type {object}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // To set query API value on initialization. 
			* 	//To set query API value.
			* 	// DataManager creation.
			* var dataManger = ej.DataManager({
			* url: "http://mvc.syncfusion.com/Services/Northwnd.svc/"
			*});
			*  // Query creation.
			*var query = ej.Query()
			*		.from("Orders").take(6);
			*			$("#toolbar1").ejToolbar(
			*                {
            *              dataSource: dataManger,
            *               query: query
            *         });
			* &lt;/script&gt;
			* @memberof ejToolbar
			* @instance
			*/
            query: null,
				/**		
			* Specifies the mapping fields for the data items of the Toolbar
			* @default null
			* @type {string}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // To set fields API value during initialization. 
			* 	//To set the fields API value.
			* 	items = [{ edid: "1", spriteCssClass: "editTools cursor", text: "Cursor" },
			*  { edid: "2", spriteCssClass: "editTools select", text: "Select" },
			*  { edid: "3", spriteCssClass: "editTools move", text: "Move" },
			*  { edid: "4", spriteCssClass: "editTools rectselect", text: "Rectangle Select"
			*  }];
			*$("#toolbar1").ejToolbar(
			*		{
			*			dataSource:  items,
			*           fields:  { id: "empid",spriteCssClass: "spriteCss"}
            *         });
			* &lt;/script&gt;
			* @memberof ejToolbar
			* @instance
			*/
            fields: /** @lends ejToolbar# */ {
				/**		
                 * Defines id for the tag.
				 * @alias ejToolbar#fields->id
				 * @type String
                 */
                id:"id",
				/**		
                 * Defines the tooltip text for the tag.
				 * @alias ejToolbar#fields->tooltipText
				 * @type String
                 */
                tooltipText:"tooltipText",
				/**		
                 * Defines the imageURL for the image location. 
				 * @alias ejToolbar#fields->imageUrl
				 * @type String
                 */
                imageUrl:"imageUrl",
				/**		
                 * Defines the text content for the tag.
				 * @alias ejToolbar#fields->text
				 * @type String
                 */
                 text:"text",
				/**		
                 * Defines the image attributes such as height, width, styles and so on.
				 * @alias ejToolbar#fields->imageAttributes
				 * @type String
                 */
                imageAttributes:"imageAttributes",
				/**		
                 * Defines the sprite css for the image tag.
				 * @alias ejToolbar#fields->spriteCssClass
				 * @type String
                 */
                spriteCssClass:"spriteCSS",
				/**		
                 * Defines the html attributes such as id, class, styles for the item.
				 * @alias ejToolbar#fields->htmlAttributes
				 * @type Object
                 */
                htmlAttributes: "htmlAttributes",
				group: null
            },
			/**		
			* Sets the root class for Toolbar control theme
			* @default ""
			* @type {string}
			* @example 
			* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			* // Sets the root class for Toolbar control theme on initialization. 
			* 	//To set the cssClass API value.
			* 	$("#toolbar1").ejToolbar({cssClass: "gradient-lime"});
			 * &lt;/script&gt;
			* @memberof ejToolbar
			* @instance
			*/
            cssClass: "",
			/**     
			 * Fires after Toolbar control is created.
			 * @event
			 * @name ejToolbar#create		
			 * @param {Object} argument Event parameters from Toolbar    
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the Toolbar model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 * &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			 * //create event for Toolbar
             *  $("#toolbar1").ejToolbar({
			 *  create: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejToolbar
			 * @instance
			 */		
            create: null,
			/**     
			 * Fires after Toolbar control is clicked.
			 * @event
			 * @name ejToolbar#click		
			 * @param {Object} argument Event parameters from Toolbar    
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the Toolbar model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object} argument.target  returns the target of the current object.
			 * @param {object} argument.currentTarget returns the target of the current object. 
			 * @param {boolean}  argument.status return the Toolbar state
			 * @example 
			 * &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			 * //create event for Toolbar
             *  $("#toolbar1").ejToolbar({
			 *  click: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejToolbar
			 * @instance
			 */	
            click: null,
					/**     
			 * Fires after Toolbar control is itemHovered.
			 * @event
			 * @name ejToolbar#itemHover		
			 * @param {Object} argument Event parameters from Toolbar    
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the Toolbar model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object} argument.target  returns the target of the current object.
			 * @param {object} argument.currentTarget returns the target of the current object. 
			 * @param {boolean}  argument.status return the Toolbar state
			 * @example 
			 * &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			 * //itemHover event for Toolbar
             *  $("#toolbar1").ejToolbar({
			 *  itemHover: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejToolbar
			 * @instance
			 */
            itemHover: null,
			/**     
			 * Fires after Toolbar control is itemLeave.
			 * @event
			 * @name ejToolbar#itemLeave		
			 * @param {Object} argument Event parameters from Toolbar    
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the Toolbar model
			 * @param {string}  argument.type returns the name of the event
			 * @param {object} argument.target  returns the target of the current object.
			 * @param {object} argument.currentTarget returns the target of the current object. 
			 * @param {boolean}  argument.status return the Toolbar state
			 * @example 
			 * &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			 * //itemLeave event for Toolbar
             *  $("#toolbar1").ejToolbar({
			 *  itemLeave: function (args) {}
             * });
            * &lt;/script&gt;
			 * @memberof ejToolbar
			 * @instance
			 */
            itemLeave: null,
				 /**    
			 * Fires when the Toolbar is destroyed successfully.
			 * @event
			 * @name ejToolbar#destroy 	
			 * @param {Object} argument Event parameters from Toolbar    
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the Toolbar model
			 * @param {string}  argument.type returns the name of the event
			 * @example 
			 * &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
			 * //destroy event for Toolbar

             * $("#toolbar1").ejToolbar({
             *    destroy: function (args) {}
             * });
             * &lt;/script&gt;
			 * @memberof ejToolbar
			 * @instance
			 */
            destroy: null

        },
		/**
         * Specify the data types for default properties 
		 * @private
         */
        //Data Types
        dataTypes: {           
            enabled: "boolean",
            hide: "boolean",
            enableSeparator: "boolean",
            orientation: "enum",
            enableRTL: "boolean",
            showRoundedCorner: "boolean",
            isResponsive: "boolean",
            dataSource: "data",
            query: "data",
            fields: "data",
            cssClass: "string"
        },

        // sample public function
		/**
        * To hide the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
    *&lt;ul&gt;
    *    &lt;li id="Left" title="Left"&gt;
    *        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
    *   &lt;/li&gt;
    *    &lt;li id="Center" title="Center"&gt;
    *        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Right" title="Right"&gt;
    *        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Justify" title="Justify"&gt;
    *        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
    *&lt;ul&gt;
    *    &lt;li id="Bold" title="Bold"&gt;
    *        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="Italic" title="Italic"&gt;
    *        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="StrikeThrough" title="Strike Through"&gt;
    *        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *    &lt;li id="UndeLine" title="UnderLine"&gt;
    *        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
    *    &lt;/li&gt;
    *&lt;/ul&gt;
	*&lt;/div&gt;
	* &lt;script&gt;
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		* $("#toolbar1").ejToolbar("hide");// to hide the toolbar
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        hide: function () {
            /// <summary>This will set hide function of toolbar </summary>
            if (!this.model.enabled) return false;
            this.element.css("display", "none");
        },
		/**
        * To show the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		* 	$("#toolbar1").ejToolbar();
		* $("#toolbar1").ejToolbar("show");// to show the toolbar
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        show: function () {
            /// <summary>This will set show function of toolbar </summary>
            if (!this.model.enabled) return false;
            this.element.css("display", "inline-block");
        },
		
		/**
         * Create the Toolbar widget
		 * @private
         */		 

        // constructor function
        _init: function () {
            /// <summary>This will set initialization of toolbar </summary>
            if (this.model.dataSource != null) {
                this._generateTemplate();
            }
            this._initialize();

        },
		 /**
         * To configure the properties at runtime using SetModel		
		 * @private
         */	
        _setModel: function (options) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(options["enabled"])) return false;
            var option;
            for (option in options) {
                switch (option) {
                    case "height":
                        this._setHeight(options[option]);
                        break;
                    case "width":
                        this._setWidth(options[option]);
                        break;
                    case "enabled":
                        this._controlStatus(options[option]);
                        break;
                    case "isResponsive":
                        this.model.isResponsive = options[option];
                        if (this.model.isResponsive) {
                            this._responsiveLayout();
                        } else
                            this._removeResponsive();
                        break;
                    case "hide":
                        this._controlVisibleOptions(options[option]);
                        break;
                    case "orientation":
                        this._setOrientation(options[option]);
                        break;
                    case "enableRTL":
                        this._enableRTL(options[option]);
                        break;
                    case "showRoundedCorner":
                        this._roundedCorner(options[option]);
                        break;
                    case "cssClass":
                        this._setSkin(options[option]);
                        break;
				    case "fields":
                    case "query":
                    case "dataSource":
                       this._refreshTagItems(option, options[option]);
                        break;
                }
            }
        },
		_refreshTagItems:function(key,value){
				this.model[key] = value;
				this.element.empty();
                this._generateTemplate();
				this._initialize();
		},
		/**
         * To configure the height		
		 * @private
         */	 
        _setHeight: function (val) {
            /// <summary>This will set Text property of button </summary>
            this.element.css('height',val);
        },
		/**
         * To configure the width		
		 * @private
         */	 
        _setWidth: function (val) {
            /// <summary>This will set Text property of button </summary>
            this.element.css('width',val);
        },
		/**
         * To configure the orientation		
		 * @private
         */	
        _setOrientation: function (value) {
            /// <summary>This will set orientation of toolbar </summary>
            if (value != ej.Orientation.Vertical) {
                this.element.removeClass(this.model.cssClass);
                this.element.addClass("e-toolbarspan " + this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-vertical");
                this.itemsContainer.addClass("e-ul e-horizontal");
                //this.items.removeClass("e-vertical");
                //this.items.addClass("e-horizontal");

            } else {
                this.element.removeClass("e-toolbarspan " + this.model.cssClass);
                this.element.addClass(this.model.cssClass);
                this.itemsContainer.removeClass("e-ul e-horizontal");
                this.itemsContainer.addClass("e-ul e-vertical");
                //this.items.removeClass("e-horizontal");
                //this.items.addClass("e-vertical");
            }
            this.items.children("img").addClass("e-align e-spriteimg");
            this.items.children("span").addClass("e-align e-spriteimg");
            this.items.children("div").addClass("e-align e-spriteimg");
            this.items.addClass("e-tooltxt");
        },
        /**
         * To handle the window resize
         * @private
         */
        _reSizeHandler: function () {
            this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width()-1; // -1 for IE8 get exact width of an element no border and margin
            if(this.isResized && this._liTemplte.children().length > 0){
                $(this.element).append(this._liTemplte.children());
                this._renderToolbarSeparator();
                this._liTemplte.addClass("e-display-none");
                this.contstatus = false;
            }
            this._liWidth = this._spanWidth;
            this._spantag.removeClass("e-display-block").addClass("e-display-none");
            for(var i=0; i<this.itemsContainer.length; i++){
                this._liWidth += $(this.itemsContainer[i]).outerWidth(true);
                if(this._liWidth > this._elementWidth){
                    if(!this._spantag.hasClass("e-display-block"))
                        this._spantag.removeClass("e-display-none").addClass("e-display-block");
                    this._spantag.css("float",(this.model.enableRTL ? "left" : "right"));
                    $(this.itemsContainer[i]).addClass('e-separator');
                    this._liTemplte.append(this.itemsContainer[i]);                    
                }
            }
            this.isResized = true;
        },
        /**
         * To handle the overflow items of toolbar is dispalyed as context menu 
         * @private
         */
        _btnMouseClick: function (e) {
            var args, btnpos, btnposx, btnposy, targetElement, poscur = 1;
            if (!$(e.currentTarget).hasClass("e-disable")) {
                /*Context Menu Functionality*///need to write enableRTL
                targetElement = $("#" + this.element[0].id + "_target");
                btnpos = $("#" + this.element[0].id + "_target").offset();
                btnposx = btnpos.left - poscur;
                if($(this._liTemplte).width() + btnposx > $(window).width())
                    btnposx = $(window).width() - $(this._liTemplte).width() - 3; // 3px difference between popup right and window right side
                btnposy = btnpos.top + this.element.outerHeight(true) - poscur - 2; // 2px alignment in responsive image position from top
                if (this.contstatus) {
                    this._liTemplte.addClass("e-display-none");
                    this.contstatus = false;
                } else {
                    if (this.model.enableRTL) {
                        this._liTemplte.removeClass("e-display-none");
                        this._liTemplte.css({"top":btnposy+"px","left":btnposx+"px"});
                        this.contstatus = true;
                    } else {   
                        this._liTemplte.removeClass("e-display-none");
                        this._liTemplte.css({"top":btnposy+"px","left":btnposx+"px"});
                        this.contstatus = true;
                    }
                    this.element.bind("click", $.proxy(this._hidecontext, this));
                }
                if (this.contstatus)
                    this._on($(document), "mouseup", this._documentClick);
            }
        },
        /**
         * Section For handle hidecontext action.
         * @private
         */
        _hidecontext: function (e) {
            if (!$(e.target).is($("#" + this.element[0].id + "_target"))) {
                this._liTemplte.addClass("e-display-none");
                this.contstatus = false;
                this.element.unbind("click", $.proxy(this._hidecontext, this));
                this._off($(document), "mouseup", this._documentClick);
            }
        },
        /**
         * Section For handle on document click action.
         * @private
         */
        _documentClick: function (e) {
            if (!$(e.target).is($("#" + this.element[0].id + "_target")) && !($(e.target).closest("div#" +this.element[0].id + "_hiddenlist").length != 0 || $(e.target).parents().hasClass("e-ddl-popup"))) {
                this._liTemplte.addClass("e-display-none");
                this.contstatus = false;
                this._off($(document), "mouseup", this._documentClick);
            }
        },
		/**
         * To configure the custom theme for Toolbar using cssClass property			
		 * @private
         */	
        _setSkin: function (skin) {
            this.element.removeClass(this.model.cssClass);
            this.itemsContainer.removeClass(this.model.cssClass);
            this.items.removeClass(this.model.cssClass);
            this.element.addClass(skin);
            this.itemsContainer.addClass(skin);
            this.items.addClass(skin);
        },
		/**
        * destroy the Toolbar widget
		* all events bound using this._on will be unbind automatically and bring the control to pre-init state.
		* @alias destroy
		* @return jQuery
		* @example 
	   * &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		* &lt;script&gt;
		* //Initialize the Toolbar object.
		*$("#toolbar1").ejToolbar();
		* var toolbarObj = $("#toolbar1").data("ejToolbar");
        *  toolbarObj.destroy();       //Calls the destroy method of the Toolbar.
		* &lt;/script&gt;
				
		* @memberof ejToolbar
		* @instance
         */	 
        _destroy: function () {
            /// <summary>This will destroy toolbar </summary>
            this.element.removeClass("e-widget e-horizontal " + this.model.cssClass);
            this.element.removeClass("e-vertical " + this.model.cssClass);
            this.itemsContainer.removeClass("e-horizontal " + this.model.cssClass);
            this.itemsContainer.removeClass("e-vertical " + this.model.cssClass);
            this.items.removeClass("e-horizontal " + this.model.cssClass);
            this.items.removeClass("e-vertical " + this.model.cssClass);
        },
		/**
         * To initialize the ToolBar		
		 * @private
         */	 
        _initialize: function () {
            /// <summary>This will initialize the toolbar </summary>
            /*Rendering the controls*/
            $(this.element).attr({ "role": "toolbar", "tabindex": "0" });
            var liList = $($(this.element).children()).find("li");
            this._focusEnable = true;
            this._renderControl();
            this._responsiveLayout();
            this._wireEvents();
        },
        _responsiveLayout:function()
        {            
            this._roundedCorner(this.model.showRoundedCorner);
            if(this.model.isResponsive && (this.model.orientation == "horizontal")){
                this._spantag = $("<span id='" + this.element[0].id + "_target' class='e-icon e-toolbar-res-arrow e-rel-position e-display-block'></span>");
                this._spantag.appendTo(this.element);
                this._spanWidth = this._spantag.outerWidth(true) + 8; // 8px from right of span 
                this._liTemplte = $("<div id='" + this.element[0].id + "_hiddenlist' class='e-responsive-toolbar e-display-none e-abs-position "+$(this.element)[0].className+"'></div>");
                this.isResized = false;
                this._reSizeHandler();
                this._liTemplte.insertAfter(this.element);
            }
            this._on($("#" + this.element[0].id + "_target"), "click", this._btnMouseClick);
            this._wireResizing();
            this._controlVisibleOptions(this.model.hide);
            this._enableRTL(this.model.enableRTL);
            this._controlStatus(this.model.enabled);
        },
        _removeResponsive:function()
        {            
            $(this._spantag).remove();
            var list = $(this._liTemplte).children('ul');
            $(this._liTemplte).remove();
            $(this.element).append(list);
            this.itemsContainer = this.element.children("ol,ul");           
            this.items = this.itemsContainer.children('li');
            this._off(this.items, "mouseup");
            this._off(this.items, "mousedown");
            this._off(this.element);
            this._wireEvents();
            this._wireResizing();            
        },
		/**
         * To configure controlVisibleOption to show/hide the toolbar		
		 * @private
         */	
        _controlVisibleOptions: function (value) {
            /*Enable Disable Option*/
            value != false ? this.hide() : this.show();
        },
		/**
         * To configure controlStatus ie., to enable/disable the toolbar	
		 * @private
         */	
        _controlStatus: function (value) {
            //disable status
            value != true ? this.disable() : this.enable();
        },
		 /**
         * To enable or disable the rounded corner behaviour for the toolbar		
		 * @private
         */	
        _roundedCorner: function (value) {
            value != false ? this.element.addClass('e-corner-all') : this.element.removeClass('e-corner-all');
        },
		/**
         * To generate Template for the ToolBar control		
		 * @private
         */	
        _generateTemplate: function () {
            var proxy = this, queryPromise;
            this.element.css("visibility","hidden");
            if (this.model.dataSource instanceof ej.DataManager) {
                queryPromise = this.model.dataSource.executeQuery(this.model.query);
                queryPromise.done(function (e) {
                    if (proxy.model.fields.group) {
                        proxy._generateGroup(e.result);
                    }
                    else {
                        proxy.itemsSource = e.result;
                        proxy.element.append(proxy._generateTagitems());
                    }
                    proxy._initialize();
                    proxy.element.css("visibility", "visible");
                });
            } else {
                if (this.model.fields.group) {
                    proxy._generateGroup(proxy.model.dataSource);
                }
                else {
                    proxy.itemsSource = proxy.model.dataSource;
                    proxy.element.append(proxy._generateTagitems());
                }
                proxy.element.css("visibility", "visible");
            }
        },
        _generateGroup:function(value)
        {
            var proxy = this;
            var y = -1;
            var groupArray = [];
            for (var i = 0; i < value.length; i++) {
                if (this._isNewGroup(value[i].group, groupArray)) {
                    groupArray[++y] = value[i].group;
                    var index = -1;
                    proxy.itemsSource = [];
                    for (var x = i; x < value.length; x++) {
                        if (value[i].group == value[x].group) {
                            proxy.itemsSource[++index] = value[x];
                        }
                    }
                    proxy.element.append(proxy._generateTagitems());
                }
            }
            
        },
        _isNewGroup: function (value, group) {
            if (!group)
                return true;
            for (var i = 0; i < group.length; i++) {
                if (value == group[i])
                    return false;
            }
            return true;
        },
        //
		/**
         * Render Section For Toolbar	
		 * @private
         */			
        _renderControl: function () {
            /// <summary>This will render the toolbar </summary>
            this.element.addClass("e-widget");
            this._renderToolbarItems();
            this._setOrientation(this.model.orientation);
            this._renderToolbarSeparator();
            this._setHeight(this.model.height);
            this._setWidth(this.model.width);
        },
		/**
         * Render Section For ToolbarItems	
		 * @private
         */	
        _renderToolbarItems: function () {
            this.target = this.element[0];
            this.itemsContainer = this.element.children("ol,ul");
            this.itemsContainer.children("ol,ul").remove();
            this.items = this.itemsContainer.children('li');
            for (var i = 0; i < this.items.length; i++) {
                if (ej.isNullOrUndefined($(this.items[i]).attr("title")))
                    $(this.items[i]).attr("aria-label", this.items[i].id);
            }
            this._liCount = this.items.length;
        },
		/**
         * To generate Tag items for the ToolBar control		
		 * @private
         */	
        _generateTagitems: function () {
            var list, i;
            list = this.itemsSource;
            this.ultag = ej.buildTag('ul');
            for (i = 0; i < list.length; i++) {
                this.ultag.append(this._generateLi(list[i]));
            }
            return this.ultag;
        },
		/**
         * To generate Li  for the ToolBar control		
		 * @private
         */	
        _generateLi: function (toolbarItem) {
            var litag, imgtag, divtag, i;
            litag = ej.buildTag('li');
            if (toolbarItem[this.model.fields.id])
                litag.attr('id', toolbarItem[this.model.fields.id]);
            if (toolbarItem[this.model.fields.tooltipText])
                litag.attr('title', toolbarItem[this.model.fields.tooltipText]);
            if ((toolbarItem[this.model.fields.imageUrl]) && (toolbarItem[this.model.fields.imageUrl] != "")) {
                //Creating the image tag
                imgtag = ej.buildTag('img.e-align', '', {}, { 'src': toolbarItem[this.model.fields.imageUrl], 'alt': toolbarItem[this.model.fields.text] });
                if ((toolbarItem[this.model.fields.imageAttributes]) && (toolbarItem[this.model.fields.imageAttributes] != "")) {
                    for (i = 0; i < toolbarItem[this.model.fields.imageAttributes].length; i++) {
                        $.each(toolbarItem[this.model.fields.imageAttributes][i], function (index, element) {
                            imgtag.attr(index, element);
                        });
                    }
                }
                litag.append(imgtag);
            }
            if ((toolbarItem[this.model.fields.spriteCssClass]) && (toolbarItem[this.model.fields.spriteCssClass] != "")) {
                //Creating the Sprite image tag
                divtag = ej.buildTag('div.e-align ' + toolbarItem[this.model.fields.spriteCssClass] + ' e-spriteimg');
                litag.append(divtag);
            }
            if ((toolbarItem[this.model.fields.text]) && (toolbarItem[this.model.fields.text] != "")) {
                //Creating text Content inside the  tag
                litag.append(toolbarItem[this.model.fields.text]);
            }
            if ((toolbarItem[this.model.fields.htmlAttributes]) && (toolbarItem[this.model.fields.htmlAttributes] != "")) {
                for (i = 0; i < toolbarItem[this.model.fields.htmlAttributes].length; i++) {
                    $.each(toolbarItem[this.model.fields.htmlAttributes][i], function (index, element) {
                        litag.attr(index, element);
                    });
                }
            }
            return litag;
        },
	    /**
         * To renderToolbarSeparator for the ToolBar control		
		 * @private
         */	
        _renderToolbarSeparator: function () {
            /// <summary>This will render toolbar items </summary>
            /*Adding separator to each group of elements*/
            var i;
            if (this.model.enableSeparator) {
                for (i = 0; i < this.itemsContainer.length - 1; i++) {
                        $(this.itemsContainer[i]).addClass("e-separator");
                }
                if (this.model.enableRTL) {
                    if (this.itemsContainer.length == 1) {
                        for (i = 1; i < this.itemsContainer[0].children.length; i++) {
                            if (!this.model.fields.group || !this.model.dataSource || !this.model.dataSource[i].group)
                                $(this.itemsContainer[0].children[i]).addClass("e-separator");
                        }
                    }
                }
                else {
                    if (this.itemsContainer.length == 1) {
                        for (i = 0; i < this.itemsContainer[0].children.length - 1; i++) {
                            if (!this.model.fields.group || !this.model.dataSource || !this.model.dataSource[i].group)
                                $(this.itemsContainer[0].children[i]).addClass("e-separator");
                        }
                    }
                }
                
            }
        },
		/**
         * To enableRTL for the ToolBar control		
		 * @private
         */	
        _enableRTL: function (value) {
            if (value) {
                this.element.addClass('e-rtl');
                this.items.addClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.addClass('e-comnrtl');
                }
            } else {
                this.element.removeClass('e-rtl');
                this.items.removeClass('e-comnrtl');
                if (this.model.orientation == ej.Orientation.Horizontal) {
                    this.itemsContainer.removeClass('e-comnrtl');
                }
            }
            this.model.enableRTL = value;
            this._renderToolbarSeparator();
        },
			/**
        * To disable an item the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		* $("#toolbar1").ejToolbar("disableItem",$("li")[3]);// to disable the third item in the toolbar
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        //Disables the toolbarItem of given index
        disableItem: function (lielement) {
            /// <summary>This will disable toolbar item </summary>
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) {
                return;
            }
            if (!current.hasClass("e-disable")) {
                current.attr("aria-disabled", true).removeAttr("aria-label");
                this._addOverlay(current);
            }
        },
        //Enables the toolbarItem of given index
				/**
        * To enable an item the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		* $("#toolbar1").ejToolbar("enableItem",$("li")[3]);// to enable the third item in the toolbar
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        enableItem: function (lielement) {
            /// <summary>This will enable toolbar item </summary>
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) {
                return;
            }
            current.removeClass("e-disable").attr("aria-disabled", false);
            this._removeOverlay(current);
        },
        //Disables the toolbarItem of given index
			/**
        * To Disable the Toolbar item by item id in the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("disableItemByID","left"); //Disable the Toolbar item by item id
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        disableItemByID: function (liid) {
            /// <summary>This will disable toolbar item by id </summary>
            var lielement;
            lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) {
                return;
            }
            this.disableItem(lielement);
        },
			/**
        * To Disable the Toolbar item by item id in the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("enableItemByID","left"); //Disable the Toolbar item by item id
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        enableItemByID: function (liid) {
            /// <summary>This will disable toolbar item by id </summary>
            var lielement;
            lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) {
                return;
            }
            this.enableItem(lielement);
        },
        //Disables all the toolbar item
		
			/**
        * To Disable all item in the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("disable"); //Disable all item in the Toolbar
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        disable: function () {
            /// <summary>This will disable all toolbar items </summary>
            if ($(this.element).attr("aria-disabled") == "true") return false;
            $(this.element).attr("aria-disabled", true).removeAttr("aria-label");
            this._addOverlay(this.items)
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.addClass("e-disable");
            this.model.enabled = false;
        },
        _addOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                if (!$(element[i]).hasClass('e-disable')) {
                    $(element[i]).addClass('e-disable');
                    var ele = ej.buildTag("div.e-item-overlay");                    
                    $(element[i]).append(ele);
                }
            }
        },
        _removeOverlay: function (element) {
            for (var i = 0; i < element.length; i++) {
                $(element[i]).children(".e-item-overlay").remove();
            }
        },
        //Enables all the toolbar item
		/**
        * To enable all item in the Toolbar 		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("enable"); //enable all item in the Toolbar
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        enable: function () {
            /// <summary>This will enable all toolbar items </summary>
            this.items.removeClass("e-disable");
            if ($(this.element).attr("aria-disabled") == "false") return false;
            this._removeOverlay(this.items);
            $(this.element).attr("aria-disabled", false);
            if (this.model.isResponsive && (this.model.orientation == "horizontal"))
                this._spantag.removeClass("e-disable");
            this.model.enabled = true;
        },
        //Selects the toolbarItem of given object
		/**
        * To Select the Toolbar item		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("selectItem",$("li")[3]);//Select the Toolbar item.
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        selectItem: function (lielement) {
            /// <summary>This will select a toolbar item </summary>
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) {
                return;
            }
            if (!current.hasClass("e-disable")) {
                current.removeClass("e-active");
                current.addClass("e-active");
            }
        },
        //Deselects the toolbarItem of given object
			/**
        * To Deselect the Toolbar item		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
        *$("#toolbar1").ejToolbar("selectItem",$("li")[3]);//Select the Toolbar item.
		*$("#toolbar1").ejToolbar("deselectItem",$("li")[3]); //Deselect the Toolbar item.
		* &lt;/script&gt;

		* @memberof ejToolbar
		* @instance
         */
        deselectItem: function (lielement) {
            /// <summary>This will deselect toolbar item </summary>
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) {
                return;
            }
            if (!current.hasClass("e-disable")) {
                current.removeClass("e-active");
            }
        },

        //Selects the toolbarItem of given ID
		/**
        * To Select the Toolbar item by id	
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("selectItemByID","left");//Select the Toolbar item by id.
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        selectItemByID: function (liid) {
            /// <summary>This will select an toolbar item by id </summary>
            var lielement;
            lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) {
                return;
            }
            this.selectItem(lielement);
        },
        //Deselects the toolbarItem of given ID
		/**
        * To Deselect the Toolbar item by id		
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
        *$("#toolbar1").ejToolbar("selectItemByID","left");//Select the Toolbar item by id.
		*$("#toolbar1").ejToolbar("deselectItemByID","left"); // To Deselect the Toolbar item by id.
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        deselectItemByID: function (liid) {
            /// <summary>This will deselect an toolbar item by id. </summary>
            var lielement;
            lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) {
                return;
            }
            this.deselectItem(lielement);
        },
        //Remove the toolbarItem of given object
		/**
        * To Remove the Toolbar item	
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("removeItem",$("li")[3]); // Remove the Toolbar item
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        removeItem: function (lielement) {
            /// <summary>This will remove the toolbar item </summary>
            if (!this.model.enabled) return false;
            var current = $(lielement);
            if ((current == null) || (current.length <= 0)) {
                return;
            }
            current.remove();
        },
				/**
        * To Remove the Toolbar item by id	
		* @return jQuery
		* @example 
		* &lt;div id="toolbar1"&gt;
		*&lt;ul&gt;
		*    &lt;li id="Left" title="Left"&gt;
		*        &lt;div class="ToolbarItems LeftAlign_tool"&gt;&lt;/div&gt;
		*   &lt;/li&gt;
		*    &lt;li id="Center" title="Center"&gt;
		*        &lt;div class="ToolbarItems CenterAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Right" title="Right"&gt;
		*        &lt;div class="ToolbarItems RightAlign_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Justify" title="Justify"&gt;
		*        &lt;div class="ToolbarItems Justify_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		* 	&lt;/ul&gt;
		*	&lt;ul&gt;
		*    &lt;li id="Bold" title="Bold"&gt;
		*        &lt;div class="ToolbarItems Bold_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="Italic" title="Italic"&gt;
		*        &lt;div class="ToolbarItems Italic_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="StrikeThrough" title="Strike Through"&gt;
		*        &lt;div class="ToolbarItems StrikeThrough_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*    &lt;li id="UndeLine" title="UnderLine"&gt;
		*        &lt;div class="ToolbarItems Underline_tool"&gt;&lt;/div&gt;
		*    &lt;/li&gt;
		*&lt;/ul&gt;
		*&lt;/div&gt;
		* &lt;script&gt;
		*$("#toolbar1").ejToolbar();
		*$("#toolbar1").ejToolbar("removeItemByID","left"); // Remove the Toolbar item by id
		* &lt;/script&gt;
		* @memberof ejToolbar
		* @instance
         */
        //Remove the toolbarItem of given ID
        removeItemByID: function (liid) {
            /// <summary>This will remove the toolbar item by ID </summary>
            var lielement;
            lielement = this.itemsContainer.find("li#" + liid);
            if ((lielement == null) || (lielement.length <= 0)) {
                return;
            }
            this.removeItem(lielement);
        },
        _wireResizing: function () {
            (this.model.isResponsive && (this.model.orientation == "horizontal")) ? $(window).bind('resize', $.proxy(this._reSizeHandler, this)) : $(window).unbind('resize', $.proxy(this._reSizeHandler, this))
        },
        /*-----------------------Event Handlers -----------------------------------------*/
        /*
		 * Wiring the events to ToolBar control		
		 * @private
         */		
        _wireEvents: function () {
            /// <summary>This will wire events for toolbar item </summary>
            var args;
            this._on(this.element, "focus", this._focusElement);
            this._on(this.element, "blur", this._targetBlur);
            this._on(this.items, "mouseenter", this._onItemHover);
            this._on(this.items, "mousedown", this._onItemClick);
            this._on(this.items, "mouseup", this._onItemClick);
            this._on(this.items, "mouseleave", this._onItemLeave);
          //this._on(this.items, "keyup", this._OnKeyUp);
          //this._on(this.items, "keydown", this._OnKeyDown);
        },
		 /**
         * Section For handle the Item hover event
		 * @private
         */	
        _onItemHover: function (e) {
            var currentItem = e.currentTarget, targetItem = e.target;
            if (!$(currentItem).hasClass("e-disable")) {
                this.items.removeClass("e-hover");
                $(currentItem).addClass("e-hover");
                args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemHover", args);
            }
        },
		 /**
         * Section For handle the Item click event
		 * @private
         */	
        _onItemClick: function (e) {
            if ($(e.currentTarget).hasClass('e-disable')) return false;
            var currentItem = e.currentTarget, targetItem = e.target;
            if (e.type == "mousedown") {
                this._focusEnable = false; 
                $(e.currentTarget).addClass('e-active');
            }
            else if (e.type == "mouseup") {
                $(e.currentTarget).removeClass('e-active');
                if (!$(currentItem).hasClass("e-disable")) {
                    args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                    this._activeItem = $(e.currentTarget).index();
                    this._trigger("click", args);
                }
            }
        },
		 /**
         * Section For handle the Mouse Leave on item event
		 * @private
         */	
        _onItemLeave: function (e) {
            var currentItem = e.currentTarget, targetItem = e.target;
            if (!$(currentItem).hasClass("e-disable")) {
                $(currentItem).removeClass("e-hover");
                args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled };
                this._trigger("itemLeave", args);
            }
        },
		 /**
         * Section to watch the  key down event
		 * @private
         */	
        _OnKeyDown: function (e) {
            this._focusEnable = true;
            this.e = e;
            var itemsLength = this.items.length - 1, activeItem;
            switch (e.keyCode) {
                case 38: //Up
                    e.preventDefault();
                    this._removeListHover();
                    if ((this._activeItem < 0) || (this._activeItem == null) || (this._activeItem > itemsLength))
                        this._activeItem = 0;
                    else if (this._activeItem == 0)
                        this._activeItem = itemsLength;
                    else
                        this._activeItem -= 1;
                    this._beforeListHover();
                    break;
                case 40: //Down
                    e.preventDefault();
                    this._removeListHover();
                    if ((this._activeItem > itemsLength) || (this._activeItem == null) || (this._activeItem < 0))
                        this._activeItem = itemsLength;
                    else if (this._activeItem == itemsLength)
                        this._activeItem = 0;
                    else
                        this._activeItem += 1;
                    this._beforeListHover();
                    break;
                case 37: //Left
                    e.preventDefault();
                    this._removeListHover();
                    if ((this._activeItem < 0) || (this._activeItem == null) || (this._activeItem > itemsLength))
                        this._activeItem = 0;
                    else if (this._activeItem == 0)
                        this._activeItem = itemsLength;
                    else
                        this._activeItem -= 1;
                    this._beforeListHover();
                    break;
                case 39: //Right
                    e.preventDefault();
                    this._removeListHover();
                    if ((this._activeItem > itemsLength) || (this._activeItem == null) || (this._activeItem < 0))
                        this._activeItem = itemsLength;
                    else if (this._activeItem == itemsLength)
                        this._activeItem = 0;
                    else
                        this._activeItem += 1;
                    this._beforeListHover();
                    break;
                case 13: //enter key
                    break;
                case 32: //space key
                    break;
                case 33: //pup
                    e.preventDefault();
                    this._removeListHover();
                    this._activeItem = 0;
                    this._beforeListHover();
                    break;
                case 34: //pdwn
                    e.preventDefault();
                    this._removeListHover();
                    this._activeItem = itemsLength;
                    this._beforeListHover();
                    break;
                case 35: //endkey
                    e.preventDefault();
                    this._removeListHover();
                    this._activeItem = itemsLength;
                    this._beforeListHover();
                    break;
                case 36: //Home key
                    e.preventDefault();
                    this._removeListHover();
                    this._activeItem = 0;
                    this._beforeListHover();
                    break;
            }
        },
		 /**
         * Section to watch the  KeyUp event
		 * @private
         */	
        _OnKeyUp: function (e) {
            this.e = e;
            var itemsLength = this.items.length, activeItem;
            switch (e.keyCode) {
                case 38: //Up
                    break;
                case 40: //Down
                    break;
                case 37: //Left
                    break;
                case 39: //Right
                    break;
                case 13: //enter key
                    activeItem = this._getActiveItem();
                    if ($(e.target).is("div")) {
                        var currentItem = this._getTargetItem(), targetItem = this._getTargetItem();
                    } else {
                        var currentItem = $(e.target).closest("li")[0], targetItem = e.target;
                    }
                    if (!$(currentItem).hasClass("e-disable")) {
                        args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled, event: this.e };
                        this._trigger("click", args);
                        this._removeListHover();
                    }
                    break;
                case 32: //space key
                    activeItem = this._getActiveItem();
                    if ($(e.target).is("div")) {
                        var currentItem = this._getTargetItem(), targetItem = this._getTargetItem();
                    } else {
                        var currentItem = $(e.target).closest("li")[0], targetItem = e.target;
                    }
                    if (!activeItem.hasClass("e-disable")) {
                        args = { currentTarget: currentItem, target: targetItem, status: this.model.enabled, event: this.e };
                        this._trigger("click", args);
                        this._removeListHover();
                    }
                    break;
                case 33: //pup
                    break;
                case 34: //pdwn
                    break;
                case 35: //endkey
                    break;
                case 36: //Home key
                    break;
                case 27:         // Esc Key
                    this.element.focusout();
                    this._removeListHover();
                    break;
                case 9:
                    this._activeItem = 0;
                    this._beforeListHover();
                    break;
            }
        },
		 /**
         * Section For handle to remove class after hover event
		 * @private
         */	
        _removeListHover: function () {
            $(this.items).removeClass("e-hover");
        },
        /**
         * Section For handle hover event before add hover event class
         * @private
         */
        _beforeListHover: function(){
            activeItem = this._getActiveItem();
            if (!activeItem.hasClass("e-disable")) {
                this._addListHover();
            }
        },
		/**
         * Section For handle to add class for hover event
		 * @private
         */	
        _addListHover: function () {
            var activeItem = this._getActiveItem();
            activeItem.addClass("e-hover");
            //activeItem[0].scrollIntoView(false);
            activeItem.focus();
        },
		/**
         *  To get the ActiveItem		
		 * @private
         */	 
        _getActiveItem: function () {
            return $($(this.items)[this._activeItem]);
        },
		/**
         * To get the TargetItem		
		 * @private
         */	 
        _getTargetItem: function () {
            return $(this.items)[this._activeItem];
        },
		/**
         * Section For handle Blur event
		 * @private
         */	
        _targetBlur: function (e) {
            e.preventDefault();
            this.element.focusout();
            this._removeListHover();
            this.element.removeClass("e-focus");
            this._off(this.element, "keyup", this._OnKeyUp);
            this._off(this.element, "keydown", this._OnKeyDown);
            // this._isFocused = false;
            /* Raise focusOut Event*/
           
                this._trigger("focusOut");
        },
		/**
         * Section For handle Focus event
		 * @private
         */	
        _focusElement: function (e) {
            this.element.addClass("e-focus");
            this._on(this.element, "keyup", this._OnKeyUp);
            this._on(this.element, "keydown", this._OnKeyDown);

            if (!this._focusEnable) {
                this._focusEnable = true;
                return;
            }
            this._removeListHover();
            this._activeItem = 0;
            this._beforeListHover();
        },
    });

})(jQuery, Syncfusion);


;
/**
* @fileOverview Plugin to style the Html Radial Menu elements
* @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
    * @namespace ej
    * @class ejRadialMenu
    * @requires jQuery
    * @requires ej.core
    * @requires ej.unobtrusive
    * @requires ej.data
    * @requires ej.touch
    * @classdesc Custom Design for Html radialmenu control.
    * @example
    * // Create radialmenu in obtrusive way
    * &lt;script&gt; 
    * $(function(){
    * $("#defaultradialmenu").ejRadialMenu(); 
    * });
    * &lt;/script&gt;
    * &lt;div &gt;
    * &lt;br /&gt;
    * &lt;p&gt;
    * Syncfusion is the enterprise technology partner of choice for Windows development
    * &lt;/p&gt;
    * &lt;/div&gt;  
    * &lt;div id="defaultradialmenu"&gt;
    * &lt;ul&gt;
    * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
    * data-ej-text="social"&gt;&lt;/li&gt;
    * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
    * data-ej-text="music"&gt;&lt;/li&gt;
    * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
    * data-ej-text="direction"&gt;&lt;/li&gt;
    * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
    * data-ej-text="message"&gt;&lt;/li&gt;
    * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
    * data-ej-text="browser"&gt;&lt;/li&gt;
    * &lt;/ul&gt;
    * &lt;/div&gt;
    */
    ej.widget("ejRadialMenu", "ej.RadialMenu", {
        _rootCSS: "e-radialmenu",
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        _setFirst: true,
        // default model
        defaults: {
            /**		
            * Renders the Image for Radial using Class.
            * @default e-radialimage
            * @type {string}
            * @example 
            * // Set Radialmenu Image on initialization. 
            * //To set image API  
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejRadialMenu({ "imageClass":"e-radialimage" });	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu Image, after initialization:
            * &lt;script&gt;
            * // Gets the Image API.		
            *  $("#radialmenu").ejRadialMenu ("option", "imageClass");			
            * // Sets the Width API
            * $("#radialmenu").ejRadialMenu ("option", "imageClass", "e-radialimage");            
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            imageClass: "e-radialimage",
            /**		
            * Renders the back button Image for Radial using class.
            * @default e-backimage
            * @type {string}
            * @example 
            * // Set Radialmenu back button Image on initialization. 
            * //To set back button image API 
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejRadialMenu({ "backImageClass":"e-backimage" });	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu back button Image, after initialization:
            * &lt;script&gt;
            * // Gets the back button Image API.		
            * $("#defaultradialmenu").ejRadialMenu ("option", "backImageClass");			
            * // Sets the Width API
            * $("#defaultradialmenu").ejRadialMenu ("option", "backImageClass", "e-backimage");            
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            backImageClass: "e-backimage",
            /**		
            * To show the Radial while clicking given target element.
            * @default null
            * @type {string}
            * @example 
            * // Set Radialmenu targetelementid on initialization. 
            * //To set targetelementid API 
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejRadialMenu({ "targetElementId":"target" });	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu targetelementid, after initialization:
            * &lt;script&gt;
            * // Gets the targetelementid API.		
            * $("#defaultradialmenu").ejRadialMenu ("option", "targetElementId");			
            * // Sets the Width API
            * $("#defaultradialmenu").ejRadialMenu ("option", "targetElementId", "target");            
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            targetElementId: null,
            /**    
            * Event triggers when the mouse down happens.
            * @event
            * @name ejRadialMenu#mouseDown 	
            * @param {Object} argument Event parameters from Radialmenu     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Radialmenu model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * //MouseDown event for Radialmenu
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#defaultradialmenu").ejRadialMenu({
            *   mousedown: function (args) { //handle the event
            * }
            * });         
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            mouseDown: null,
            /**    
            * Event triggers when the mouse up happens.
            * @event
            * @name ejRadialMenu#mouseUp 	
            * @param {Object} argument Event parameters from Radialmenu     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Radialmenu model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * //MouseUp event for Radialmenu
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#defaultradialmenu").ejRadialMenu({
            *   mouseup: function (args) { //handle the event
            * }
            * });         
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            mouseUp: null,
            /**    
            * Event triggers when we select an item.
            * @event
            * @name ejRadialMenu#select 	
            * @param {Object} argument Event parameters from Radialmenu     
            * @param {boolean} argument.cancel if the event should be canceled; otherwise, false.
            * @param {Object} argument.model returns the Radialmenu model
            * @param {string} argument.type returns the name of the event
            * @param {object} argument.item returns the item of element
            * @param {String} argument.itemName returns the name of item
            * @example 
            * //select event for Radialmenu
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $("#defaultradialmenu").ejRadialMenu({
            *   select: function (args) { //handle the event
            * }
            * });         
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            select: null,
            /**		
            * To show the Radial in intial render.
            * @default false
            * @type {boolean}
            * @example 
            * // Set Radialmenu autoOpen on initialization. 
            * //To set autoOpen API 
            * &lt;div &gt;
            * &lt;br /&gt;
            * &lt;p&gt;
            * Syncfusion is the enterprise technology partner of choice for Windows development
            * &lt;/p&gt;
            * &lt;/div&gt;  
            * &lt;div id="defaultradialmenu"&gt;
            * &lt;ul&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
            * data-ej-text="social"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
            * data-ej-text="music"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
            * data-ej-text="direction"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
            * data-ej-text="message"&gt;&lt;/li&gt;
            * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
            * data-ej-text="browser"&gt;&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;/div&gt;
            * &lt;script&gt;
            * $(function () {
            * $("#defaultradialmenu").ejRadialMenu({ "autoOpen":true });	
            * });
            * &lt;/script&gt;
            * @example 
            * //Get or set the Radialmenu autoOpen, after initialization:
            * &lt;script&gt;
            * // Gets the autoOpen API.		
            * $("#defaultradialmenu").ejRadialMenu ("option", "autoOpen");			
            * // Sets the Width API
            * $("#defaultradialmenu").ejRadialMenu ("option", "autoOpen", true);            
            * &lt;/script&gt;
            * @memberof ejRadialMenu
            * @instance
            */
            autoOpen: false
        },
        dataTypes: {
            autoOpen: "boolean"
        },
        _init: function () {
            if (!(ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)) {
                this._initialization();
                this._prefix = "e-";
                this._renderRadial();
                this._wireEvents();
            }
        },
        /**
        * Render the Radialmenu control
        * @private
        */
        _renderRadial: function () {
            this._radial = ej.buildTag("div.e-radial e-abs " + this.model.imageClass + "").css({ "left": this._startXY - 22 + "px", "top": this._startXY - 22 + "px" });
            this._radialContainer = ej.buildTag("div.e-rel").css({ "height": this.model.width, "width": this.model.width });
            this.element.append(this._radialContainer.append(this._radial)).addClass("e-radialmenu e-overlow e-user-select");
            this.model.autoOpen ? this.show() : this.hide();
            this._renderRadialMenu();
            this._arcOver = $.proxy(this._arcOverHandler, this);
            this._itemOver = $.proxy(this._itemOverHandler, this);
            var childArc = this._childArcGroup.children(),
                polygon = this._polygonGroup.children(),
                group = this._menuItemsGroup.children(),
                path = this._menuItemsPaths.children(),
                arcPath = this._menuItemsArcGroup.children();
            ej.listenEvents([childArc, childArc, polygon], ["mouseenter", "mouseleave", "mouseenter"], [this._arcOver, this._arcOver, this._arcOver], false);
            ej.listenEvents([group, path, path, arcPath, arcPath], ["mouseenter", "mouseenter", "mouseleave", "mouseenter", "mouseleave"], [this._itemOver, this._itemOver, this._itemOver, this._itemOver, this._itemOver], false);
        },
        /**
        * To wire the events for Radial Menu	
        * @private
        */
        _wireEvents: function () {
            this._radialClick = $.proxy(this._radialClickHandler, this);
            this._targetClick = $.proxy(this._targetClickHandler, this);
            this._mouseDown = $.proxy(this._mouseDownHandler, this);
            this._mouseUp = $.proxy(this._mouseUpHandler, this);
            ej.listenEvents([this._radial, this._radialSVGDiv, this._radialSVGDiv, $(document)], [ej.endEvent(), ej.startEvent(), ej.endEvent(), ej.endEvent()], [this._radialClick, this._mouseDown, this._mouseUp, this._targetClick], false);
        },
        _radialClickHandler: function (e) {
            if (this._radial.hasClass("e-backarrow")) {
                this._radial.removeClass("e-backarrow " + this.model.backImageClass + "").addClass(this.model.imageClass);
                if (this.model.enableAnimation) {
                    this._menuChildSVGDiv.removeClass("e-scaleshow").addClass("e-scalehide");
                    setTimeout(function () { $("#menuchildsvgdiv.e-abs").remove(); }, 150);
                    setTimeout(function () { $("#radialchildsvgdiv.e-abs").removeClass("e-scalehide e-displaynone").addClass("e-scaleshow"); }, 200);
                }
                else {
                    this._menuChildSVGDiv.remove();
                    this._radialChildSVGDiv.removeClass("e-displaynone");
                }
            }
            else {
                if (this._radialCircleSVGDiv.hasClass("e-displaynone")) {
                    if (this.model.enableAnimation) {
                        this._radialCircleSVGDiv.removeClass("e-displaynone e-radialhide").addClass("e-radialshow");
                        this._radialChildSVGDiv.removeClass("e-displaynone e-radialhide").addClass("e-radialshow");
                    }
                    else {
                        this._radialCircleSVGDiv.removeClass("e-displaynone");
                        this._radialChildSVGDiv.removeClass("e-displaynone");
                    }
                }
                else {
                    if (this.model.enableAnimation) {
                        this._radialCircleSVGDiv.removeClass("e-radialshow").addClass("e-radialhide");
                        this._radialChildSVGDiv.removeClass("e-radialshow e-scaleshow").addClass("e-radialhide");
                        setTimeout(function () { $("#radialcirclesvgdiv.e-abs").addClass("e-displaynone"); $("#radialchildsvgdiv.e-abs").addClass("e-displaynone"); }, 160);
                    }
                    else {
                        this._radialCircleSVGDiv.addClass("e-displaynone");
                        this._radialChildSVGDiv.addClass("e-displaynone");
                    }
                }
            }
            this._childTarget = false;
        },
        /**
        * To configure Menu Mouse Down handler
        * @private
        */
        _mouseDownHandler: function (e) {
            this._eventAction(e);
            if (this._event && this.model.mouseDown)
                this._trigger("mouseDown", this._data);
            this._event = false;
        },
        /**
        * To configure Menu Mouse Up handler
        * @private
        */
        _mouseUpHandler: function (e) {
            var targetEle = $(e.target);
            if (targetEle.attr("class") == "e-active" || e.target.tagName == "polygon") {
                this._index = parseInt(targetEle.attr("index"))
                this._renderRadialChildMenu(this._index);
                this._childTarget = true;
                var group = this._childItemsGroup.children(),
                    path = this._childItemsPaths.children(),
                    arcPath = this._childItemArcGroup.children();
                ej.listenEvents([group, path, path, arcPath, arcPath], ["mouseenter", "mouseleave", "mouseenter", "mouseleave", "mouseenter"], [this._itemOver, this._itemOver, this._itemOver, this._itemOver, this._itemOver], false);
            }
            this._eventAction(e);
            if (this._event && this.model.mouseUp)
                this._trigger("mouseUp", this._data);
            if (this._event && this.model.select)
                this._trigger("select", this._data);
            this._event = false;
        },
        _eventAction: function (e) {
            var targetEle = $(e.target);
            if (targetEle.attr("class") == "e-itembgcolor" || targetEle.attr("class") == "e-default") {
                var index = targetEle.index(),
                    text = !this._childTarget ? $(this._menuItemsGroup.children()[targetEle.index()]).text() : $(this._childItemsGroup.children()[targetEle.index()]).text();
                this._event = true;
                this._data = !this._childTarget ? { index: index, text: text } : { index: this._index, childIndex: index, text: text };
            }
            else if (e.target.tagName == "text" || e.target.tagName == "image") {
                var index = targetEle.parent().index(),
                    text = targetEle.parent().text();
                this._event = true;
                this._data = !this._childTarget ? { index: index, text: text } : { index: this._index, childIndex: index, text: text };
            }
        },
        _radialChildAnimate: function () {
            setTimeout(function () {
                $("#radialchildsvgdiv.e-abs").removeClass("e-scalehide e-scaleshow").addClass("e-displaynone");
            }, 150);
        },
        _arcOverHandler: function (e) {
            var targetEle = $(e.target),
                index = parseInt(targetEle.attr("index")),
                targetGroupEle = $('#childarcgroup path[index=' + index + ']');
            if (e.type == "mouseenter") {
                if (targetEle.attr("class") == "e-childdefault")
                    targetEle.attr("class", "e-active");
                else
                    targetGroupEle.attr("class", "e-active");
            }
            else {
                if (targetEle.attr("class") == "e-active")
                    targetEle.attr("class", "e-childdefault");
                else
                    targetGroupEle.attr("class", "e-childdefault");
            }
        },
        _itemOverHandler: function (e) {
            var index = $(e.currentTarget).index();
            var targetEle = !this._childTarget ? $(this._menuItemsArcPaths.children()[index]) : $(this._childItemsArcPaths.children()[index]);
            if (e.type == "mouseenter")
                targetEle.attr("class", "e-childdefault");
            else
                targetEle.attr("class", "e-arcbgcolor");
        },
        _targetClickHandler: function (e) {
            var targetEle = $(e.target), x = e.clientX, y = e.clientY, width, height,
                radialTarget = $("#" + this.model.targetElementId + ""),
                menuTarget = $(targetEle.closest("div.e-radialmenu")).length,
                menuState = $("#radialcirclesvgdiv.e-abs").hasClass("e-displaynone");
            if (this.model.targetElementId) {
                width = radialTarget.width();
                height = radialTarget.height();
            }
            else {
                width = window.innerWidth;
                height = window.innerHeight;
            }
            if (menuTarget == 0 && $(targetEle.closest(radialTarget)).length == 0 && this.model.targetElementId) {
                menuState ? this.hide() : this.menuHide();
            }
            else if ($(targetEle.closest("div.e-radial")).length == 0 && menuState) {
                var left = x > width - this.model.width / 2 ? width - this.model.width : (x > this.model.width / 2 ? x - this.model.width / 2 : 0),
                    top = y > height - this.model.width / 2 ? height - this.model.width : (y > this.model.width / 2 ? y - this.model.width / 2 : 0);
                this.model.autoOpen ? this.show() : this.hide();
                this.element.css({ "position": "absolute", "top": top + "px", "left": left + "px" });
            }
            else if (menuTarget == 0)
                this.menuHide();
        },
        // public methods
        /**
        * To Show the redialmenu 
        * @return jQuery
        * @example 
        * &lt;div &gt;
        * &lt;br /&gt;
        * &lt;p&gt;
        * Syncfusion is the enterprise technology partner of choice for Windows development
        * &lt;/p&gt;
        * &lt;/div&gt;  
        * &lt;div id="defaultradialmenu"&gt;
        * &lt;ul&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
        * data-ej-text="social"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
        * data-ej-text="music"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
        * data-ej-text="direction"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
        * data-ej-text="message"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
        * data-ej-text="browser"&gt;&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;/div&gt;
        * @example 
        * &lt;script&gt;
        * $("#defaultradialmenu").ejRadialMenu ("show");
        * &lt;/script&gt;
        * @memberof ejRadialMenu
        * @instance
        */
        show: function () {
            this.element.removeClass("e-displaynone");
        },
        /**
        * To hide the redialmenu 
        * @return jQuery
        * @example 
        * &lt;div &gt;
        * &lt;br /&gt;
        * &lt;p&gt;
        * Syncfusion is the enterprise technology partner of choice for Windows development
        * &lt;/p&gt;
        * &lt;/div&gt;  
        * &lt;div id="defaultradialmenu"&gt;
        * &lt;ul&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
        * data-ej-text="social"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
        * data-ej-text="music"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
        * data-ej-text="direction"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
        * data-ej-text="message"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
        * data-ej-text="browser"&gt;&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;/div&gt;
        * @example 
        * &lt;script&gt;
        * $("#defaultradialmenu").ejRadialMenu ("hide");
        * &lt;/script&gt;
        * @memberof ejRadialMenu
        * @instance
        */
        hide: function () {
            this.element.addClass("e-displaynone");
        },
        /**
        * To hide the redialmenu items
        * @return jQuery
        * @example 
        * &lt;div &gt;
        * &lt;br /&gt;
        * &lt;p&gt;
        * Syncfusion is the enterprise technology partner of choice for Windows development
        * &lt;/p&gt;
        * &lt;/div&gt;  
        * &lt;div id="defaultradialmenu"&gt;
        * &lt;ul&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/social.png"
        * data-ej-text="social"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/music.png" 
        * data-ej-text="music"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/direction.png" 
        * data-ej-text="direction"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/message.png" 
        * data-ej-text="message"&gt;&lt;/li&gt;
        * &lt;li data-ej-imageurl="../themes/sample/radialmenu/browser.png" 
        * data-ej-text="browser"&gt;&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;/div&gt;
        * @example 
        * &lt;script&gt;
        * $("#defaultradialmenu").ejRadialMenu ("menuHide");
        * &lt;/script&gt;
        * @memberof ejRadialMenu
        * @instance
        */
        menuHide: function () {
            if ($("#menuchildsvgdiv.e-abs").length != 0) {
                this._radial.removeClass("e-backarrow " + this.model.backImageClass + "").addClass(this.model.imageClass);
                if (this.model.enableAnimation) {
                    this._radialCircleSVGDiv.removeClass("e-radialshow e-radialhide e-scaleshow e-scalehide").addClass("e-displaynone");
                    this._radialChildSVGDiv.removeClass("e-radialshow e-radialhide e-scaleshow e-scalehide").addClass("e-displaynone");
                    this._menuChildSVGDiv.removeClass("e-scaleshow").addClass("e-radialhide");
                    setTimeout(function () { $("#menuchildsvgdiv.e-abs").removeClass("e-radialhide").remove(); }, 150);
                }
                else {
                    this._radialCircleSVGDiv.addClass("e-displaynone");
                    this._radialChildSVGDiv.addClass("e-displaynone");
                    this._menuChildSVGDiv.remove();
                }
            }
            else {
                if (this.model.enableAnimation) {
                    this._radialCircleSVGDiv.removeClass("e-radialshow").addClass("e-radialhide");
                    this._radialChildSVGDiv.removeClass("e-radialshow e-scaleshow").addClass("e-radialhide");
                    setTimeout(function () {
                        $("#radialcirclesvgdiv.e-abs").addClass("e-displaynone").removeClass("e-radialshow e-radialhide e-scaleshow e-scalehide");
                        $("#radialchildsvgdiv.e-abs").addClass("e-displaynone").removeClass("e-radialshow e-radialhide e-scaleshow e-scalehide");
                    }, 160);
                }
                else {
                    this._radialCircleSVGDiv.addClass("e-displaynone");
                    this._radialChildSVGDiv.addClass("e-displaynone");
                }
            }
        }
    });
    $.extend(true, ej.RadialMenu.prototype, ej.RadialMenuBase.prototype);
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin provides support to display color picker within your web page and allows to pick the color.
* @copyright Copyright Syncfusion Inc. 2001 - 2014. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.3 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/
(function ($, ej, undefined) {
    /**
  * @namespace ej
  * @classdesc Custom Design for Html color picker control.
  * @class ejColorPicker
  * @param {object} options - settings for color picker
  * @requires jQuery
  * @requires jquery.easing.1.3.js
  * @requires ej.core.js
  * @requires ej.colorpicker.js
  * @requires ej.button.js
  * @requires ej.splitbutton.js
  * @requires ej.menu.js
  * @requires ej.slider.js
  * @example   
  * &lt;input type="text" id="colorPick"/&gt; <br> 
  * &lt;script&gt;
  * // Create Color picker
  * $('#colorPick').ejColorPicker({ value: "#278787" });
  * &lt;/script&gt;
  */
    ej.widget("ejColorPicker", "ej.ColorPicker", {
        _rootCSS: "e-colorpicker",
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        validTags: ["input", "div"],
        _setFirst: false,

        // default model
        defaults: {

            //colorpicker  
            /**		
			* This property allows to enable or disable the opacity slider in the color picker control
			* @default true
			* @type {boolean}
			* @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set enableOpacity API during initialization  
            * $('#colorPick').ejColorPicker({ value: "#278787", enableOpacity: false });
            * &lt;/script&gt;
			* @memberof ejColorPicker
			* @instance
			*/
            enableOpacity: true,
            /**		
           * This property allows to change the opacity value .The selected color opacity will be adjusted by using this opacity value.
           * @default 100
           * @type {number}
           * @example   
           * &lt;input type="text" id="colorPick"/&gt; <br> 
           * &lt;script&gt;
           * //To set opacityValue API during initialization  
           * $('#colorPick').ejColorPicker({ value: "#278787", opacityValue: 20 });
           * &lt;/script&gt;
           * @memberof ejColorPicker
           * @instance
           */
            opacityValue: 100,

            //colorpalette
            /**		
           * Specifies the number of columns to be displayed color palette model.
           * @default 10
           * @type {number}
           * @example   
           * &lt;input type="text" id="colorPick"/&gt; <br> 
           * &lt;script&gt;
           * //To set columns API during initialization  
           * $('#colorPick').ejColorPicker({ value: "#278787", modelType: "palette", columns: 5});
           * &lt;/script&gt;
           * @memberof ejColorPicker
           * @instance
           */
            columns: 10,
            //colorpalette
            /**		
           * Specifies the palette type to be displayed at initial time in palette model.There two types of palette model availabale in colorpicker control. See {@link Palette}
           * @default  ej.ColorPicker.Palette.BasicPalette
           * @type {enum}
           * @example   
           * &lt;input type="text" id="colorPick"/&gt; <br> 
           * &lt;script&gt;
           * //To set palette API during initialization 
           * $('#colorPick').ejColorPicker({ value: "#278787", modelType: "palette", palette: "basicpalette"});
           * &lt;/script&gt;
           * @memberof ejColorPicker
           * @instance
           */
            palette: "basicpalette",

            /**		
           * This property allows to define the custom colors in the palette model.Custom palettes are created by passing a comma delimited string of HEX values or an array of colors.
           * @default  empty
           * @type {data}
           * @example   
           * &lt;input type="text" id="colorPick"/&gt; <br> 
           * &lt;script&gt;
           * //To set custom API during initialization
           * $('#colorPick').ejColorPicker({ value: "#278787", modelType: "palette", palette: "custompalette", custom: ["ffffff", "ffccff", "ff99ff", "ff66ff", "ff33ff", "ff00ff", "ccffff", "ccccff"]});
           * &lt;/script&gt;
           * @memberof ejColorPicker
           * @instance
           */
            custom: [],

            /**		
          * This property allows to define the preset model to be rendered initially in palette type.It consists of 12 different types of presets. Each presets have 50 colors. See {@link Presets}
          * @default  ej.ColorPicker.Presets.Basic
          * @type {enum}
          * @example   
          * &lt;input type="text" id="colorPick"/&gt; <br> 
          * &lt;script&gt;
          * //To set presetType API during initialization 
          * $('#colorPick').ejColorPicker({ value: "#278787", modelType: "palette", presetType: "vintage"});
          * &lt;/script&gt;
          * @memberof ejColorPicker
          * @instance
          */
            presetType: "basic",

            //common API's
            /**		
            * Specifies the model type to be rendered initially in the colorpicker control. There are three different types of model type availabale in colorpicker control.  See {@link ModelType} 
            * @default  ej.ColorPicker.ModelType.Default
            * @type {enum}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set modelType API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787", modelType: "palette"});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            modelType: "default",
            /**		
            * This property allows to provides live preview support for current cursor selection color and selected color.
            * @default  true
            * @type {boolean}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set showPreview API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787", showPreview: false});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            showPreview: true,
            /**		
            * Specifies the color value for colorpicker control, the value is in hexadecimal form with prefix of "#".
            * @default  null
            * @type {string}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set value API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787"});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            value: null,
            /**		
            * This property allows to embed the popup in the order of DOM element flow . When we set the value as true, the colorpicker popup is always in visible state. 
            * @default  false
            * @type {boolean}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set displayInline API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",  displayInline: true});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            displayInline: false,
            /**		
            * The colorpicker control allows to define the customized text to displayed in button elements. Using the property to achieve the customized culture values. 
            * @default buttonText.apply= "Apply",  buttonText.cancel= "Cancel"
            * @type {string}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set buttonText API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",   buttonText: {apply: "Set", cancel: "Close" }});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            buttonText: {
                apply: "Apply",
                cancel: "Cancel"
            },
            /**		
            * This property allows to define the customized text or content to displayed when mouse over the following elements. This property also allows to use the culture values.
            * @default 
            * tooltipText: {
              *  switcher: "Switcher",
               * addbutton: "Add Color",
               * basic: "Basic",
               * monochrome: "Mono Chrome",
               * flatcolors: "Flat Color",
               * seawolf: "Sea Wolf",
               * webcolors: "Web Colors",
               * sandy: "Sandy",
               * pinkshades: "Pink Shades",
               * misty: "Misty",
               * citrus: "Citrus",
               * vintage: "Vintage",
               * moonlight: "Moon Light",
               * candycrush: "Candy Crush",
               * currentcolor: "Current Color",
               * selectedcolor: "Selected Color"
            * }
            * @type {object}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set tooltipText API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",   tooltipText: { switcher: "Switch",  currentcolor: "New Color", selectedcolor: "Old Color" }});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            tooltipText: {
                switcher: "Switcher",
                addbutton: "Add Color",
                basic: "Basic",
                monochrome: "Mono Chrome",
                flatcolors: "Flat Color",
                seawolf: "Sea Wolf",
                webcolors: "Web Colors",
                sandy: "Sandy",
                pinkshades: "Pink Shades",
                misty: "Misty",
                citrus: "Citrus",
                vintage: "Vintage",
                moonlight: "Moon Light",
                candycrush: "Candy Crush",
                currentcolor: "Current Color",
                selectedcolor: "Selected Color"
            },
            /**		
            * This property allows to store the color values in custom list.The colorpicker will keep up to 11 colors in a custom list.By clicking the add button, the selected color from picker or palette will get added in the recent color list.  
            * @default false
            * @type {boolean}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set showRecentColors API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",   showRecentColors: true});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            showRecentColors: false,
            /**		
            * Specifies the toolIcon to be disaplyed in dropdown control color area.
            * @default null
            * @type {string}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set toolIcon API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",  toolIcon: "e-fontcolor-icon"});
            * &lt;/script&gt;
            * &lt;style&gt;
            * .e-colorwidget .e-tool .e-fontcolor-icon:before
            * {
            * content: "\e632";
            * margin-top: 9px;
            * font-size: 10px;
            * margin-left: 5px;
            * }
            * &lt;/style&gt;
            * @memberof ejColorPicker
            * @instance
            */
            toolIcon: null,
            /**		
            * This property allows you to customize its appearance using user-defined CSS and custom skin options such as colors and backgrounds.
            * @default emptyString
            * @type {string}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set cssClass API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",  cssClass : "gradient-lime"});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            cssClass: "",
            /**		
            * This property allows to change the control in enabled or disabled state.
            * @default true
            * @type {boolean}
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //To set enabled API during initialization
            * $('#colorPick').ejColorPicker({ value: "#278787",  enabled: false});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            enabled: true,

            //Events
            /**     
			 * Fires after Color value has been changed sucessfully.If the user want to perform any operation after the color value changed then the user can make use of this change event. 
			 * @event
			 * @name ejColorPicker#change
			 * @param {Object} argument Event parameters from color picker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the color picker model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.value return the changed color value
			 * @example   
             * &lt;input type="text" id="colorPick"/&gt; <br> 
             * &lt;script&gt;
			 * //change event for color picker
             * $('#colorPick').ejColorPicker({              
             * value: "#278787", 
             * change: function (args) {
			 * // Write a code block to perform operation after changing the color.
			 * }
             *});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            change: null,
            /**     
			 * Fires after Color value has been selected sucessfully. If the user want to perform any operation after the color value selected then the user can make use of this select event. 
			 * @event
			 * @name ejColorPicker#select
			 * @param {Object} argument Event parameters from color picker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the color picker model
			 * @param {string}  argument.type returns the name of the event
			 * @param {string}  argument.value return the selected color value
			 * @example   
             * &lt;input type="text" id="colorPick"/&gt; <br> 
             * &lt;script&gt;
			 * //select event for color picker
             * $('#colorPick').ejColorPicker({              
             * value: "#278787", 
             * select: function (args) {
			 * // Write a code block to perform operation after selecting the color.
			 * }
             *});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            select: null,
            /**     
			 * Fires after opening the color picker popup
			 * @event
			 * @name ejColorPicker#open
			 * @param {Object} argument Event parameters from color picker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the color picker model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example   
             * &lt;input type="text" id="colorPick"/&gt; <br> 
             * &lt;script&gt;
			 * //open event for color picker
             * $('#colorPick').ejColorPicker({              
             * value: "#278787", 
             * open: function (args) {
			 * // Write a code block to perform operation after opening the color picker popup.
			 * }
             *});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            open: null,
            /**     
			 * Fires after closing the color picker popup.
			 * @event
			 * @name ejColorPicker#close
			 * @param {Object} argument Event parameters from color picker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the color picker model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example   
             * &lt;input type="text" id="colorPick"/&gt; <br> 
             * &lt;script&gt;
			 * //close event for color picker
             * $('#colorPick').ejColorPicker({              
             * value: "#278787", 
             * close: function (args) {
			 * // Write a code block to perform operation after closing the color picker popup.
			 * }
             *});
             * &lt;/script&gt;
             * @memberof ejColorPicker
             * @instance
             */
            close: null,
            /**     
			 * Fires after Color picker control is created. If the user want to perform any operation after the color picker control creation then the user can make use of this create event. 
			 * @event
			 * @name ejColorPicker#create		
			 * @param {Object} argument Event parameters from color picker     
			 * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			 * @param {object}  argument.model returns the color picker model
			 * @param {string}  argument.type returns the name of the event			 
			 * @example   
             * &lt;input type="text" id="colorPick"/&gt; <br> 
             * &lt;script&gt;
			 * //create event for color picker
             * $('#colorPick').ejColorPicker({              
             * value: "#278787", 
             * create: function (args) {
			 * // Write a code block to perform operation after creating the color picker.
			 * }
             *});
            * &lt;/script&gt;
            * @memberof ejColorPicker
            * @instance
            */
            create: null,
            /**     
            * Fires after Color picker control is destroyed. If the user want to perform any operation after the color picker control destroyed then the user can make use of this destroy event. 
            * @event
            * @name ejColorPicker#destroy		
            * @param {Object} argument Event parameters from color picker     
            * @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
            * @param {object}  argument.model returns the color picker model
            * @param {string}  argument.type returns the name of the event            
            * @example   
            * &lt;input type="text" id="colorPick"/&gt; <br> 
            * &lt;script&gt;
            * //create event for color picker
            * $('#colorPick').ejColorPicker({              
            * value: "#278787", 
            * destroy: function (args) {
            * // Write a code block to perform operation after creating the color picker.
            * }
            *});
           * &lt;/script&gt;
           * @memberof ejColorPicker
           * @instance
           */
            destroy: null,
        },
        datetypes: {
            columns: "number",
            modelType: "enum",
            palette: "enum",
            presetType: "enum",
            cssClass: "string",
            opacityValue: "number",
            displayInline: "boolean",
            showRecentColors: "boolean",
            enabled: "boolean",
            showPreview: "boolean",
            enableOpacity: "boolean",
            buttonText: "data",
            custom: "data"
        },

        observables: ["value"],
        value: ej.util.valueFunction("value"),

        _setModel: function (jsondata) {
            if (!(this.model.enabled) && ej.isNullOrUndefined(jsondata["enabled"])) return false;
            for (var key in jsondata) {
                switch (key) {
                    //colorpicker API's                    
                    case "enableOpacity":
                        this.model.enableOpacity = jsondata[key];
                        this._previewSlider(this.model.enableOpacity);
                        break;
                    case "opacityValue":
                        if (this.model.enableOpacity) {
                            this.model.opacityValue = jsondata[key];
                            this._changeAlpha();
                            this._opacity.option('value', this.model.opacityValue);
                            this._updateValue();
                            break;
                        } else return false;
                        //ColorPalette API's
                    case "custom":
                        this.model.custom = jsondata[key];
                        this._reInitialize();
                        break;
                    case "palette":
                        this.model.palette = jsondata[key];
                        this._reInitialize();
                        break;
                    case "columns":
                        this.model.columns = jsondata[key];
                        this._reInitialize();
                        break;
                    case "presetType":
                        this.model.presetType = jsondata[key];
                        if (ej.isNullOrUndefined(Colors[this.model.presetType])) return false;
                        else
                            this._reInitialize();
                        break;
                        //common API's
                    case "value":
                        this.setValue(ej.util.getVal(jsondata[key]));
                        break;
                    case "modelType":
                        this.model.modelType = jsondata[key];
                        this.model.modelType == "default" ? this._defaultRender() : this._reInitialize();
                        break;
                    case "tooltipText":
                        this._toolTipText(jsondata[key]);
                        break;
                    case "showPreview":
                        this.model.showPreview = jsondata[key];
                        this._previewPane(this.model.showPreview);
                        break;
                    case "buttonText":
                        this._buttonText(jsondata[key]);
                        break;
                    case "displayInline":
                        this._setDisplayInline(jsondata[key]);
                        break;
                    case "cssClass":
                        this.model.cssClass = jsondata[key];
                        break;
                    case "enabled":
                        this.model.enabled = jsondata[key];
                        this._enabled(this.model.enabled);
                        break;
                    case "showRecentColors":
                        this.model.showRecentColors = jsondata[key];
                        this._previewColor(this.model.showRecentColors);
                        break;
                }
            }
        },
        _defaultRender: function () {
            this._pickerType();
            this.PaletteWrapper = this._layoutType(this.model.palette);
            this.PaletteWrapper.addClass('e-hide');
            if (this.model.displayInline && !this.element.is('input'))
                this._footer.removeClass('e-hide');
            this.popupList.prepend(this.PaletteWrapper);
        },
        _pickerType: function () {
            this._modelType = "picker";
            this.PaletteWrapper.removeAttr('style');
            this.PaletteWrapper.addClass('e-hide');
            this._gradient.removeClass('e-hide');
            this._gradient.fadeIn(200);
            this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            this._switcher.removeAttr('class');
            this._switcher.addClass('e-color-image e-pickerModel');
            this._switch = true;
            this._rgbValue();
            this._hueGradient();
            this._updateUI();
            this._templateWrapper.find('#' + this._id + "hsv").ejButton("enable");
            this._switchEvents();
            this._unSwitchEvents();
            this._hideUnBindEvents();
            this._showBindEvents();
            this.model.modelType == "default" ? this._changeTag.removeClass('e-hide') : this._changeTag.addClass('e-hide');
            this.popupList.prepend(this._gradient);
        },
        _paletteType: function () {
            this._gradient.removeAttr('style');
            this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
            this.PaletteWrapper.removeClass('e-hide');
            this.PaletteWrapper.fadeIn(200);
            this._templateWrapper.find('#' + this._id + "hsv").ejButton("disable");
            this._switch = false;
            this._disableHSVButton();
            this._cellSelect();
            this._switchEvents();
            this._unSwitchEvents();
            this.model.modelType == "default" ? this._changeTag.removeClass('e-hide') : this._changeTag.addClass('e-hide');
            this._splitObj.option('prefixIcon', 'e-color-image e-' + this.model.presetType);
            this.popupList.prepend(this.PaletteWrapper);
        },
        _reInitialize: function () {
            this._destroyPalette(false);
        },
        _destroyPalette: function (presets) {
            if (this.model.modelType == "default" || this.model.modelType == "picker" || this.model.modelType == "palette")
                this.PaletteWrapper.remove();
            if (presets || this._temp != this.model.columns && this.model.palette !== "custompalette") this.PaletteWrapper = this._presetType(this._presetsId);
            else if (this.model.modelType == "palette") {
                this._modelType = "palette";
                this.PaletteWrapper = this._layoutType(this.model.palette);
                this._hideUnBindEvents();
                this._showBindEvents();
            }
            if (this.model.modelType == "picker") {
                this._pickerType();
                if (this.model.displayInline && !this.element.is('input'))
                    this._footer.addClass('e-hide');
            }
            else if (this.model.modelType == "palette") {
                this._gradient.addClass('e-hide');
                this._paletteType();
                presets || this.model.palette == "custompalette" ? "" : this._splitObj.option('prefixIcon', 'e-color-image e-' + this.model.presetType);
            }
            else if (this.model.modelType == "default")
                if (this._modelType == "palette") {
                    this.PaletteWrapper = this._layoutType(this.model.palette);
                    this._gradient.addClass('e-hide');
                    this._paletteType();
                }
            this._temp = this.model.columns;
            if (this.model.palette == "custompalette" || this.model.modelType == "picker")
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
            else
                this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
        },
        _previewColor: function (color) {
            if (color) {
                this._swatchesArea.fadeIn(200);
                this._bindRecentEvent();
            }
            else {
                this._swatchesArea.fadeOut(200);
                this._unBindRecentEvent();
            }
        },
        _buttonText: function (data) {
            $.extend(this.model.buttonText, data);
            this._buttonTag.html(this.model.buttonText.apply);
            this._cancelTag.html(this.model.buttonText.cancel);
        },
        _toolTipText: function (data) {
            $.extend(this.model.tooltipText, data);
            this._addTitleText();
        },
        _previewPane: function (showPreview) {
            showPreview ? this._previewTag.removeClass("e-hide") : this._previewTag.addClass("e-hide");
        },
        _previewSlider: function (slider) {
            slider ? this._opacity.enable() : this._opacity.disable();
        },
        _destroy: function () {
            if (this.isPopupOpen) this.hide();
            this.popupContainer.remove();
            if (this.wrapper) {
                this.element.insertAfter(this.wrapper);
                this.wrapper.remove();
                $('#' + this._id + "_Presets").parent('.e-menu-wrap').remove();
            }
            if (this.element.is("input")) this.element.attr('type', 'text');
            this.element.removeClass('e-colorpicker e-input');
        },
        _init: function () {
            this._browser = ej.browserInfo();
            this._isFocused = false;
            this.isPopupOpen = false;
            this._dataBind = false;
            this._modelType = "picker";
            this.model.palette === "basicpalette" ? this._presetsId = "e-presets30" : "";
            this._renderControl();
            this.model.palette === "custompalette" ? this._presetTag.parents('.e-split.e-widget').addClass('e-hide') : "";
            this.popupContainer.find('button.e-presets').ejSplitButton({ targetID: this._id + "_Presets" });
            if (this.value()) {
                this._setValue(this.value());
                if (this._switch) this._rgbValue();
                this._alphaGradient(this.value());
            }
            else {
                this._colorSlider.option('value', parseInt(this._hsv.h));
                this._opacity.option('value', this.model.opacityValue);
            }
            this._hsvValue();
            this._alphaGradient(this.RGBToHEX(this.rgb))
            this._hueGradient();
            this._addTitleText();
            this._temp = this.model.columns;
        },
        _renderControl: function () {
            this._createWrapper();
            this._renderPopupPanelWrapper();
            this._renderPopupElement();
            this._selectedButton = this._groupTag.find('.e-click');
            this._setDisplayInline(this.model.displayInline);
            this._previewPane(this.model.showPreview);
            this._previewColor(this.model.showRecentColors);
            if (this._switch) this._previewSlider(this.model.enableOpacity);
            this._wireEvents();
            this._switchEvents();
        },

        _createWrapper: function () {
            if (this.element.is("input")) {
                this.element.addClass('e-input');
                this.spanElement = ej.buildTag("span.e-selected-color");     //style
                this.wrapper = ej.buildTag("span.e-colorwidget e-picker e-widget " + this.model.cssClass + "#" + this._id + "Wrapper").attr({ 'tabindex': '0', "aria-expanded": false, "aria-haspopup": true, "aria-owns": this._id + "_popup" });
                this.container = ej.buildTag("span.e-in-wrap e-box");
                this.drpbtnspan = ej.buildTag("span.e-icon e-down-arrow", "", {}, { "aria-label": "select" });
                this.dropdownbutton = ej.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, { "role": "button" }).append(this.drpbtnspan);
                this.iconWrapper = ej.buildTag("span.e-tool-icon " + this.model.toolIcon);
                this.container.insertAfter(this.element);
                if (!ej.isNullOrUndefined(this.model.toolIcon)) {
                    this.iconWrapper.append(this.spanElement);
                    this.container.addClass('e-tool');
                    this.container.append(this.iconWrapper);
                }
                else
                    this.container.append(this.spanElement);
                this.container.append(this.element, this.dropdownbutton);
                this.wrapper.insertBefore(this.container);
                this.wrapper.append(this.container);
                this.element.attr({ 'type': 'hidden' }).val(this.value())
            }
            this._checkNameAttr();
        },
        _addTitleText: function () {
            this._switcher.attr('title', this.model.tooltipText.switcher);
            this._spanTag.attr('title', this.model.tooltipText.addbutton);
            this._presetLi.find("#e-presets00").attr('title', this.model.tooltipText.webcolors);
            this._presetLi.find("#e-presets01").attr('title', this.model.tooltipText.vintage);
            this._presetLi.find("#e-presets02").attr('title', this.model.tooltipText.seawolf);
            this._presetLi.find("#e-presets10").attr('title', this.model.tooltipText.sandy);
            this._presetLi.find("#e-presets11").attr('title', this.model.tooltipText.pinkshades);
            this._presetLi.find("#e-presets12").attr('title', this.model.tooltipText.moonlight);
            this._presetLi.find("#e-presets20").attr('title', this.model.tooltipText.monochrome);
            this._presetLi.find("#e-presets21").attr('title', this.model.tooltipText.misty);
            this._presetLi.find("#e-presets22").attr('title', this.model.tooltipText.flatcolors);
            this._presetLi.find("#e-presets30").attr('title', this.model.tooltipText.basic);
            this._presetLi.find("#e-presets31").attr('title', this.model.tooltipText.candycrush);
            this._presetLi.find("#e-presets32").attr('title', this.model.tooltipText.citrus);
            this._currentTag.attr('title', this.model.tooltipText.currentcolor);
            this._previousTag.attr('title', this.model.tooltipText.selectedcolor);
        },
        _renderPopupPanelWrapper: function () {
            this.popupContainer = ej.buildTag("div.e-colorpicker e-box e-popup e-widget " + this.model.cssClass + "#" + this._id + "_popup", "", { "role": "grid", "aria-readonly": "true", "tabIndex": 0, "style": "visibility:hidden" });
            $('body').append(this.popupContainer);

            this.popupList = ej.buildTag("div.e-popupWrapper");
            //render color area
            this._gradient = ej.buildTag("div.e-container");
            //gradient Area            
            this._colorArea = ej.buildTag("div.e-hsv-color");
            this._gradientArea = ej.buildTag("div.e-hsv-gradient")//style
            this._handleArea = ej.buildTag("div.e-draghandle e-color-image").attr({ 'tabindex': '0' });
            this._colorArea.append(this._gradientArea, this._handleArea);
            //slider area
            this._picker = ej.buildTag("div.e-gradient");
            this._hueSlider = ej.buildTag("div.e-widget e-hue e-state-default#" + this._id + "hue");
            this._alphaSlider = ej.buildTag("div.e-widget e-opacity e-state-default#" + this._id + "alpha");
            this._picker.append(this._hueSlider, this._alphaSlider);
            //gradient and slider container            
            this._gradient.append(this._colorArea, this._picker);
            //first level block design       
            this.popupList.append(this._gradient);

            //second block
            this._footerBlock = ej.buildTag("div.e-footerContainer");
            //container for code switcher and input element
            this._templateWrapper = ej.buildTag("div.e-buttons");

            //buttons area
            this._groupTag = ej.buildTag("div.e-groupButton");

            this._formEle = ej.buildTag("div.e-form");
            this._rgb = ej.buildTag("button.e-rgbButton e-click#" + this._id + "rgba","", {}, { type: "button" });
            this._hexCode = ej.buildTag("button.e-hexButton#" + this._id + "hex","", {}, { type: "button" });
            this._hsva = ej.buildTag("button.e-hsvButton#" + this._id + "hsv","", {}, { type: "button" });
            this._groupTag.append(this._rgb, this._hexCode, this._hsva);

            //input area
            this._codeEditor = ej.buildTag("div.e-codeeditor");
            this._inputTag = ej.buildTag("input.e-color-code", "", {}, { "type": "text", 'tabindex': '0', "maxLength": "22" });
            this._codeEditor.append(this._inputTag);

            this._formEle.append(this._groupTag, this._codeEditor);
            //container for preview area
            this._previewTag = ej.buildTag("div.e-preview").attr({ 'tabindex': '0' });
            this._currentTag = ej.buildTag("div.e-current").attr({ 'tabindex': '0' });
            this._previousTag = ej.buildTag("div.e-previous").attr({ 'tabindex': '0' });
            this._previewTag.append(this._currentTag, this._previousTag);

            this._templateWrapper.append(this._formEle, this._previewTag);

            //swatches area
            this._swatchesArea = ej.buildTag("div.e-color-labels");
            var blockCount = 11;     //No.of blocks for save the selected colors
            this._divTag = ej.buildTag("div.e-recent-color");
            this._addTag = ej.buildTag('div.e-colorblock e-block');
            this._spanTag = ej.buildTag('div.e-color e-color-image e-add');
            this._addTag.append(this._spanTag)
            this._divTag.append(this._addTag);
            for (var count = 0; count < blockCount; count++) {
                this._liTag = ej.buildTag('div.e-colorblock e-block');
                var spanTag = ej.buildTag('div.e-color e-color-image e-empty');
                this._liTag.append(spanTag);
                this._divTag.prepend(this._liTag);
            }
            this._swatchesArea.append(this._divTag);

            //footer area             

            this._footer = ej.buildTag('div.e-footer');
            this._swatches = ej.buildTag('div.e-element');
            this._changeTag = ej.buildTag('div.e-switcher');
            this._switcher = ej.buildTag('div.e-color-image');
            this._presetTag = ej.buildTag('button.e-presets#' + this._id + "-split");
            this._presets = ej.buildTag('div');
            this._buttonTag = ej.buildTag("button.e-applyButton","", {}, { type: "button" });
            this._cancelTag = ej.buildTag("button.e-cancelButton","", {}, { type: "button" });
            this._changeTag.append(this._switcher);
            this._presetTag.append(this._presets);
            this._swatches.append(this._changeTag, this._presetTag);
            this._footer.append(this._swatches, this._buttonTag, this._cancelTag);

            this._footerBlock.append(this._templateWrapper, this._swatchesArea, this._footer);


            //for this design purpose                                   

            this.PaletteWrapper = this._layoutType(this.model.palette);
            this.popupList.append(this.PaletteWrapper, this._footerBlock);
            this._presetContainer = ej.buildTag('ul.e-presetWrapper' + "#" + this._id + "_Presets", "", {}, { "style": "top:87px" });
            this._presetLi = ej.buildTag('li.e-item');
            this._presetLi.append(this._renderPresets());
            this._presetContainer.append(this._presetLi);
            this.popupList.append(this._presetContainer);
            this.popupContainer.append(this.popupList);

            //IE Support
            if (this._browser.name = "msie" && (this._browser.version == "9.0" || this._browser.version == "8.0"))
                this._hueSlider.addClass('e-color-image e-filter');
            else
                this._hueSlider.addClass('e-common');
        },
        _colorPresetsClick: function (e) {
            this._presetsId = e.currentTarget.id;
            if (this._presetsId === "e-presets00") this.model.presetType = "webcolors";
            else if (this._presetsId === "e-presets01") this.model.presetType = "vintage";
            else if (this._presetsId === "e-presets02") this.model.presetType = "seawolf";
            else if (this._presetsId === "e-presets10") this.model.presetType = "sandy";
            else if (this._presetsId === "e-presets11") this.model.presetType = "pinkshades";
            else if (this._presetsId === "e-presets12") this.model.presetType = "moonlight";
            else if (this._presetsId === "e-presets20") this.model.presetType = "monochrome";
            else if (this._presetsId === "e-presets21") this.model.presetType = "misty";
            else if (this._presetsId === "e-presets22") this.model.presetType = "flatcolors";
            else if (this._presetsId === "e-presets30") this.model.presetType = "basic";
            else if (this._presetsId === "e-presets31") this.model.presetType = "candycrush";
            else if (this._presetsId === "e-presets32") this.model.presetType = "citrus";
            this._splitObj.option('prefixIcon', 'e-color-image e-' + this.model.presetType);
            this._destroyPalette(true, false);
        },

        _renderPresets: function () {
            var tableDiv = ej.buildTag("div.e-presets-table");
            var spanTag = ej.buildTag("span.e-presetHeader");
            spanTag.html("Swatches");
            tableDiv.append(spanTag);
            var color = 0, hexCode, rowDiv;
            for (var row = 0; row < 4 ; row++) {
                rowDiv = ej.buildTag("ul.e-tablerow");
                for (var col = 0; col < 3 ; col++) {
                    tableCell = ej.buildTag("li.e-color-image e-preset-row" + "#" + "e-presets" + [row] + [col]);
                    tableCell.appendTo(rowDiv);
                }
                rowDiv.appendTo(tableDiv);
            }
            return tableDiv;
        },
        _renderPopupElement: function () {
            var proxy = this;
            this._hsv =
            {
                h: 360, s: 100, v: 100
            };
            this._templateWrapper.find('#' + this._id + "rgba").ejButton({ text: "RGBA", type: "button" });
            this._templateWrapper.find('#' + this._id + "hex").ejButton({ text: "HEX", type: "button" });
            this._templateWrapper.find('#' + this._id + "hsv").ejButton({ text: "HSVA", type: "button" });
            this._applyObj = this.popupContainer.find('button.e-applyButton').ejButton({ text: this.model.buttonText.apply, type: "button" }).data('ejButton');
            this._cancelObj = this.popupContainer.find('button.e-cancelButton').ejButton({ text: this.model.buttonText.cancel, type: "button" }).data('ejButton');
            this._splitObj = this.popupContainer.find('#' + this._id + "-split").ejSplitButton({ size: "normal", showRoundedCorner: true, contentType: "imageonly" }).data('ejSplitButton');
            this._presetTag.parents('.e-split.e-widget').css({ "height": "27px" });
            this.model.custom.length == 0 ? this._splitObj.option('prefixIcon', "e-color-image e-" + this.model.presetType) : "";
            this._splitObj._getXYpos = function (e) {
                $("#" + this.model.targetID).ejMenu({ animationType: "none" });
                $("#" + this.model.targetID).ejMenu('hide', e);
                btnpos = this.dropbutton.offset();
                btnposx = btnpos.left - this.dropbutton.prev().outerWidth() - 1;
                btnposy = (btnpos.top - $("#" + this.model.targetID).outerHeight()) - 1;
                return { x: btnposx, y: btnposy }
            }
            this._colorSlider = this.popupContainer.find("#" + this._id + "hue").ejSlider({ orientation: "Vertical", minValue: 0, maxValue: 360, change: function (e) { proxy._changeHue(e); }, slide: function (e) { proxy._changeHue(e); } }).data('ejSlider');
            this._opacity = this.popupContainer.find("#" + this._id + "alpha").ejSlider({ value: this.model.opacityValue, orientation: "Vertical", incrementStep: 5, value: 100, change: function (e) { proxy._changeAlpha(e); }, slide: function (e) { proxy._changeAlpha(e); } }).data('ejSlider');
            this._colorSlider.firstHandle.css({ "height": "13px", "margin": "0px 0px -12px -2px", "width": "13px" });
            this._opacity.firstHandle.css({ "height": "13px", "margin": "0px 0px -12px -2px", "width": "13px" });
            this.popupContainer.css({ "visibility": "visible", "display": "none" });
            if (this.model.modelType == "picker") {
                this._modelType = "picker";
                this._gradient.removeClass('e-hide');
                this._changeTag.addClass('e-hide');
                this.PaletteWrapper.addClass('e-hide');
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                this._switch = true;
            } else if (this.model.modelType == "palette") {
                this._modelType = "palette"
                this._changeTag.addClass('e-hide');
                this._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
                this.PaletteWrapper.removeClass('e-hide');
                this._gradient.addClass('e-hide');
                this._templateWrapper.find('#' + this._id + "hsv").ejButton("disable");
                this._switch = false;
            } else if (this.model.modelType == "default") {
                this._modelType = "picker";
                this._gradient.removeClass('e-hide');
                this._switcher.addClass('e-pickerModel');
                this.PaletteWrapper.addClass('e-hide');
                this._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                this._switch = true;
            }
        },
        _layoutType: function (type) {
            if (typeof type === "string" && type == "basicpalette")
                this._collection = this._paletteGenerate(Colors[this.model.presetType], this.model.columns);
            else if (typeof type === "string" && type == "custompalette" && this.model.modelType == "palette")
                this._collection = this._paletteGenerate(this.model.custom, this.model.columns);
            type == "custompalette" ? this._collection.addClass('e-custom') : "";
            return this._collection;
        },
        _presetType: function (type) {
            if (type === "e-presets00") this._collection = this._paletteGenerate(Colors.webcolors, this.model.columns);
            else if (type === "e-presets01") this._collection = this._paletteGenerate(Colors.vintage, this.model.columns);
            else if (type === "e-presets02") this._collection = this._paletteGenerate(Colors.seawolf, this.model.columns);
            else if (type === "e-presets10") this._collection = this._paletteGenerate(Colors.sandy, this.model.columns);
            else if (type === "e-presets11") this._collection = this._paletteGenerate(Colors.pinkshades, this.model.columns);
            else if (type === "e-presets12") this._collection = this._paletteGenerate(Colors.moonlight, this.model.columns);
            else if (type === "e-presets20") this._collection = this._paletteGenerate(Colors.monochrome, this.model.columns);
            else if (type === "e-presets21") this._collection = this._paletteGenerate(Colors.misty, this.model.columns);
            else if (type === "e-presets22") this._collection = this._paletteGenerate(Colors.flatcolors, this.model.columns);
            else if (type === "e-presets30") this._collection = this._paletteGenerate(Colors.basic, this.model.columns);
            else if (type === "e-presets31") this._collection = this._paletteGenerate(Colors.candycrush, this.model.columns);
            else if (type === "e-presets32") this._collection = this._paletteGenerate(Colors.citrus, this.model.columns);
            return this._collection;
        },
        _paletteGenerate: function (colors, columns) {
            var color;
            this._PresetTable = ej.buildTag("div.e-palette-color").attr({ "role": "presentation" });
            this._tag = ej.buildTag("div.e-row");
            for (color = 0; color < colors.length; color++) {
                if (color && color % columns == 0)
                    this._tag = ej.buildTag("div.e-row");
                this._td = ej.buildTag("div.e-item").attr({ 'role': 'gridcell', "aria-label": "#" + $.trim(colors[color]), "value": "#" + $.trim(colors[color]), "style": "background-color:" + "#" + $.trim(colors[color]), "tabindex": "0" });
                this._tag.append(this._td);
                this._PresetTable.append(this._tag);
            }
            return this._PresetTable;
        },
        _checkNameAttr: function () {
            if (!this.element.attr("name"))
                this.element.attr({ "name": this.element[0].id });
        },
        _enabled: function (bool) {
            bool ? this.enable() : this.disable();
        },
        _setDisplayInline: function (isDisplayInline) {
            this.model.displayInline = isDisplayInline;
            if (isDisplayInline && this.element.is("input")) {
                this.popupContainer.insertAfter(this.wrapper);
                this._setPopupPosition();
            }
            else if (isDisplayInline) {
                this.element.append(this.popupContainer);
                this.popupContainer.find('button.e-applyButton').css({ "display": "none" });
                this.popupContainer.find('button.e-cancelButton').css({ "display": "none" });
                this._footer.css({ "display": "none" });
            }
            else {
                this.popupContainer.css('display', 'none');
                $('body').append(this.popupContainer);
                this._isOpen = false;
                this._bindIconClick();
                this._isFocused = false;
                this.isPopupOpen = false;
                this.wrapper.removeClass("e-focus");
            }
            if (isDisplayInline) {
                this.show();
                if (this.element.is("input")) this._off($(this.dropdownbutton), "mousedown", this._iconClick);
            }
        },
        _bindIconClick: function () {
            var count = $._data($(this.dropdownbutton)[0], "events");
            ej.isNullOrUndefined(count) ? this._on(this.dropdownbutton, "mousedown", this._iconClick) : count.mousedown.length == 0 ? this._on(this.dropdownbutton, "mousedown", this._iconClick) : "";
        },
        _unBindIconClick: function () {
            this._off(this.dropdownbutton, "mousedown", this._iconClick);
        },
        _setPopupPosition: function () {
            var elementObj = this.wrapper;
            var pos = elementObj.offset(),
            left = pos.left,
            totalHeight = elementObj.outerHeight(),
            border = (totalHeight - elementObj.height()) / 2,
            maxZ = this._getZindexPartial();
            this.popupContainer.css({
                "left": left + 3 + "px",
                'position': 'absolute',
                "top": pos.top + totalHeight - border + 3 + "px",
                "z-index": maxZ
            });
        },
        _getZindexPartial: function () {
            var parents = this.element.parents(), bodyEle;
            bodyEle = $('body').children(), index = bodyEle.index(this.popupList);
            bodyEle.splice(index, 1);
            $(bodyEle).each(function (i, ele) { parents.push(ele); });

            var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
                if ($(e).css('position') != 'static')
                    return parseInt($(e).css('z-index')) || 1;
            }));
            if (!maxZ || maxZ < 10000) maxZ = 10000;
            else maxZ += 1;
            return maxZ;
        },
        _setValue: function (value) {
            var color;
            this.value(value);
            if (value) {
                color = this._HexToHSV(value);
                this._oldValue = this.rgb;
                if (this._switch) {
                    this._valueOperation();
                    this._colorSlider.option('value', parseInt(this._hsv.h));
                }
                this._inputTagValue(this._selectedButton);
                if (this.element.is("input")) this._updateValue();
                if (!this._switch) {
                    this._updateUI();
                    this.element.val(this.value());
                }
            }
        },
        setValue: function (code) {
            this._setValue(code);
            this._hueGradient();
            this._trigger("change", { value: this.value() });
        },
        /**
       * Enable the color picker control
       * @return jQuery
       
       * @example   
       * &lt;input type="text" id="colorPick"/&gt; <br> 
       * &lt;script&gt;
       * // Create Color picker
       * $('#colorPick').ejColorPicker({ value: "#278787" });
       * // Create ColorPicker instance
       * var colorObj = $("#colorPick").data("ejColorPicker");
       * colorObj.enable(); // enables the colorPicker
       * &lt;/script&gt; 
       
       * @example   
       * &lt;input type="text" id="colorPick"/&gt; <br> 
       * &lt;script&gt;
       * // Create Color picker
       * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // enable the colorPicker
       * $("#colorPick").ejColorPicker("enable");
       * &lt;/script&gt;       
       
       * @memberof ejColorPicker
       * @instance
       */
        enable: function () {
            if (this.wrapper.hasClass("e-disable")) {
                this.wrapper.removeClass("e-disable");
            if (this.container.hasClass("e-disable")) 
                this.container.removeClass('e-disable');
                this.popupList.removeClass('e-disable');
                this.dropdownbutton.removeClass('e-disable');
                var temp = this._switch;
                this._switch = true;
                this._cancelObj.enable();
                this._colorSlider.enable();
                this._opacity.enable();
                this._splitObj.enable();
                this._applyObj.enable();
                this._wireEvents();
                this._switchEvents();
                this._switch = temp;
                $(this._inputTag).removeAttr('readonly');
                this._on(this.dropdownbutton, "mousedown", this._iconClick);
                if (this._switcher.hasClass('e-paletteModel')) {
                    this._on($(document), "keydown", this._keyDown);
                    this._on(this._collection, "mousedown", this._onSelect);
                } else
                    this._on($(document), "keydown", this._onKeyDown);

            }
        },
        /**
        * Disables the color picker control
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* colorObj.disable(); // disables the colorPicker
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
         * // disables the colorPicker
        * $("#colorPick").ejColorPicker("disable");
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        disable: function () {
            if (!this.wrapper.hasClass("e-disable")) {
                this.wrapper.addClass("e-disable");
            if (!this.container.hasClass("e-disable"))
                this.container.addClass('e-disable');
                this.popupList.addClass('e-disable');
                this.dropdownbutton.addClass('e-disable');
                var temp = this._switch;
                this._switch = false;
                this._cancelObj.disable();
                this._colorSlider.disable();
                this._opacity.disable();
                this._splitObj.disable();
                this._applyObj.disable();
                this._unWireEvents();
                this._unSwitchEvents();
                this._switch = temp;
                this._unBindIconClick();
                $(this._inputTag).attr('readonly', 'readonly');
                if (this._switcher.hasClass('e-paletteModel')) {
                    this._off($(document), "keydown", this._keyDown);
                    this._off(this._collection, "mousedown", this._onSelect);
                } else
                    this._off($(document), "keydown", this._onKeyDown);
            }
            if (this.isPopupOpen && !this.model.displayInline)
                this.hide();
        },
        /**
        * Gets the selected color in RGB format
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* var color=colorObj.getColor(); // gets the selected color in RGB format
        * alert("Red="+color.r+", Green="+color.g+", Blue="+color.b);
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
         * // gets the selected color in RGB format
        * var color=$("#colorPick").ejColorPicker("getColor");
        * alert("Red="+color.r+", Green="+color.g+", Blue="+color.b);
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        getColor: function () {
            return this.rgb;
        },
        /**
        * Gets the selected color value as string
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* alert(colorObj.getValue()); // gets the selected color value as string
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
         * // gets the selected color value as string
        * alert($("#colorPick").ejColorPicker("getValue"));
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        getValue: function () {
            return this.value();
        },
        _alphaGradient: function (value) {
            var browser = ej.browserInfo();
            var value = ej.isNullOrUndefined(value) ? "#000000" : value;
            if (browser.name == "mozilla")
                this.popupList.find("#" + this._id + "alpha").attr({ "style": "background:-moz-linear-gradient(center top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if ((browser.name == "msie") && (browser.version == "9.0" || browser.version == "8.0"))
                this.popupList.find("#" + this._id + "alpha").attr({ "style": "filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=" + value + ", endColorstr='#ffffff',GradientType=0 );" });
            else if (browser.name == "msie")
                this.popupList.find("#" + this._id + "alpha").attr({ "style": "background:-ms-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if (browser.name == "chrome" || browser.name == "safari")
                this.popupList.find("#" + this._id + "alpha").attr({ "style": "background:-webkit-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            else if (browser.name == "opera")
                this.popupList.find("#" + this._id + "alpha").attr({ "style": "background:-o-linear-gradient(top," + value + ",#fff) repeat scroll 0 0 rgba(0, 0, 0, 0);" });
            if (browser.name == "msie" && browser.version == "8.0")
                this.popupList.find("#" + this._id + "alpha").children(".e-handle").css({ "background": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
        },
        _hueGradient: function () {
            var temp = this._hsv;
            var value = { h: this._hsv.h, s: 100, v: 100 };
            this.popupList.find("#" + this._id + "hue").children(".e-handle").css({ "background": this._formRGB(this.HSVToRGB(value)) });
            this._hsv = temp;
        },
        _changeEvent: function () {
            var colorCode;
            if (this._change) {
                colorCode = this.RGBToHEX(this.rgb);
                this._alphaGradient(colorCode);
                this._trigger("change", { value: colorCode });
            }
        },
        _selectEvent: function () {
            this.value(this.RGBToHEX(this.rgb));
            if (this.element.is("input")) this._updateValue();
            if (this._previousColor !== this.value()) {
                this.element.attr({ 'value': this.value() })
                this._trigger("select", { value: this.value() });
            }
        },
        _changeHue: function (e) {
            this._hsv.h = Math.round(e.value);
            this._hueGradient();
            this._hsvValue();
            this._changeEvent();
        },
        _changeAlpha: function (e) {
            this.rgb.a = ej.isNullOrUndefined(e) ? this.model.opacityValue / 100 : e.value / 100;
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._currentTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                this.popupList.find("#" + this._id + "alpha").children(".e-handle").css({ "background": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            }
            else {
                this._currentTag.css("background-color", this._formRGBA(this.rgb));
                this.popupList.find("#" + this._id + "alpha").children(".e-handle").css({ "background": this._formRGBA(this.rgb) });
            }
            this._inputTagValue(this._selectedButton);
        },
        _updateValue: function () {
            if (this._browser.name = "msie" && this._browser.version == "8.0") this.spanElement.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            else this.spanElement.css({ "background-color": this._formRGBA(this.rgb) });
        },
        _wireEvents: function () {
            if (this.element.is('input')) {
                this._on(this.wrapper, "blur", this._targetBlur);
                this._on(this.wrapper, "focus", this._targetFocus);
                this._on(this.wrapper, "keydown", this._popupShown);
            }
            this._on(this._cancelTag, "click", this.hide);
            this._on(this._changeTag, "click", this._switchModel);
            this._on(this._groupTag, "click", this._groupButton);
            this._on(this._addTag, "click", this._addColor);
            this._on(this._buttonTag, "click", this._buttonClick);
            this._on(this._presetContainer.find("li.e-preset-row"), "mousedown", this._colorPresetsClick);

        },
        _unWireEvents: function () {
            if (!this.model.displayInline && !this.element.is('input')) {
                this._off(this.wrapper, "blur", this._targetBlur);
                this._off(this.wrapper, "focus", this._targetFocus);
                this._off(this.wrapper, "keydown", this._popupShown);
            }
            this._off(this._cancelTag, "click", this.hide);
            this._off(this._changeTag, "click", this._switchModel);
            this._off(this._groupTag, "click", this._groupButton);
            this._off(this._addTag, "click", this._addColor);
            this._off(this._buttonTag, "click", this._buttonClick);
            this._off(this._presetContainer.find("li.e-preset-row"), "mousedown", this._colorPresetsClick);
        },
        _popupShown: function (e) {
            if (e.altKey && e.keyCode == 40) { this._showHidePopup(); return false; }
        },
        _recentColor: function (e) {
            this._divTag.find('.e-select').removeClass('e-select').addClass('e-block');
            var hexCode = e.target.attributes.value;
            var rgbCode = e.target.attributes.style;
            if (ej.isNullOrUndefined(hexCode) || ej.isNullOrUndefined(rgbCode)) { this._change = false; return false; }
            $(e.target.parentNode).addClass('e-select').removeClass('e-block');
            var alpha = rgbCode.value.replace(/^(background-color:rgb|background-color:rgba)\(/, '').replace(/\)$/, '').replace(/\s/g, '').split(',');
            this._opacity.option('value', parseFloat(alpha[3]) * 100);
            this.rgb.a = parseFloat(alpha[3]);
            this._HexToHSV(hexCode.value)
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
            this._colorSlider.option('value', parseInt(this._hsv.h));
            this._hueGradient();
            this._changeEvent();
            if (!this.model.displayInline || this.element.is("input"))
                this.wrapper.focus();
        },

        _handleClick: function (e) {
            e.preventDefault();
            this.mouseDownPos = this._handlePos;
            this._gradientArea.bind("mousemove", $.proxy(this._handleMovement, this));
            $(document).bind("mouseup", $.proxy(this._handleUp, this));
        },
        _handleMove: function (e) {
            $(this._handleArea).focus();
            this._handleMovement(e);
        },
        _handleMovement: function (e) {
            //value 100 used to specify the highest value of s and v.
            //the value 146 specify the gradient area height
            //the value 152 specify the gradient area width
            if (!this.model.enabled) return false;
            if (!this.model.displayInline || this.element.is("input"))
                this.wrapper.focus();
            this._hsv.v = parseInt(100 * (this._gradientArea.height() - Math.max(0, Math.min(this._gradientArea.height(), (e.pageY - this._gradientArea.offset().top)))) / this._gradientArea.height(), 10);
            this._hsv.s = parseInt(100 * (Math.max(0, Math.min(this._gradientArea.width(), (e.pageX - this._gradientArea.offset().left)))) / this._gradientArea.width(), 10);
            this._hsvValue();
            this._change = true;
            this._changeEvent();
        },
        _handleUp: function () {
            $(document).unbind('mouseup', this._handleUp);
            this._gradientArea.unbind('mousemove', this._handleMovement);
            return false;
        },
        _handlePosition: function () {
            this._handlePos = this._handleArea ? {
                left: parseInt(this._gradientArea.width() * this._hsv.s / 100, 10) + "px",
                top: parseInt(this._gradientArea.height() * (100 - this._hsv.v) / 100, 10) + "px"
            } : "";
            this._handleArea.css({ "left": this._handlePos.left, "top": this._handlePos.top });
        },
        _addColor: function () {
            this._previousColor = this.value();
            var collection = this._divTag.find('> div');
            value = this._selectedButton.html() != "HSVA" ? this._inputTag.val() : this._formRGBA(this.HSVToRGB(this._hsv));
            if (value !== "" && this._change) {
                if (this.model.showRecentColors && collection.length <= 12) {
                    $($(collection)[collection.length - 2]).remove();
                    this._generateLi();
                }
            }
            if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
        },
        _buttonClick: function (e) {
            this._change = true;
            this._previousColor = this.value();
            var value = this._inputTag.val(), collection = this._divTag.find('div');
            this.model.opacityValue = this.rgb.a * 100;
            this.value(this.RGBToHEX(this.rgb));
            this._updatePreviewColor();
            if (this.model.displayInline && this.element.is("input") || !this.model.displayInline) {
                this._selectEvent();
                this._change ? this.hide() : "";
                this.wrapper.focus();
            }
            this._opacity.option('value', this.model.opacityValue);
        },
        _generateLi: function () {
            this._liTag = ej.buildTag('div.e-colorblock e-block').attr({ "value": this.RGBToHEX(this.rgb), "tabindex": "0" });
            var spanTag = ej.buildTag('div.e-color e-set').attr({ "value": this.RGBToHEX(this.rgb), "title": this.RGBToHEX(this.rgb) });
            if (this._browser.name = "msie" && this._browser.version == "8.0") spanTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });                
            else spanTag.css({ "background-color": this._formRGBA(this.rgb) });                            
            this._liTag.append(spanTag);
            this._divTag.prepend(this._liTag);
        },
        _colorCodeValue: function (e) {
            var newValue = "", codeValue = this._inputTag.val(), color, value, code, count;
            value = $.trim(codeValue);
            value.length == 5 ? this._inputTag.removeClass('e-error') : "";
            if ((e.shiftKey && e.keyCode >= 35 && e.keyCode <= 40) || (e.ctrlKey && (e.keyCode == 88 || e.keyCode == 86)) || e.keyCode == 190)
                this._keyPressFlag = 1;
            else if ((!e.crtlKey && !e.shiftKey) && ((e.keyCode >= 65 && e.keyCode < 71) || (e.keyCode >= 35 && e.keyCode <= 40) || (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == 13 || e.keyCode == 8 || e.keyCode == 46 || e.type === "blur"))
                this._keyPressFlag = 1;
            else this._keyPressFlag = 0;
            if (this.model.enableOpacity && (e.keyCode == 188 || e.keyCode == 71 || e.keyCode == 82) || (e.shiftKey && (e.keyCode == 57 || e.keyCode == 48)))
                this._keyPressFlag = 1;
            if (this._keyPressFlag == 1) {
                this._inputTag.removeClass('e-error');
                if (e.keyCode === 13 || e.type === "blur") {
                    this._inputTag.removeClass('e-error');
                    var regex = /^\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/;
                    code = value.match(regex);
                    if (!ej.isNullOrUndefined(code)) {
                        if (code[1].length === 3) {
                            for (count = 0; count < code[1].length; count++) {
                                newValue += code[1][count] + code[1][count];
                            }
                        }
                        else if (code[1].length === 6)
                            newValue = code[1];
                        value = this.hexCodeToRGB("#" + newValue);
                        this._inputTag.val("#" + newValue);
                        this.rgb = this.HSVToRGB(this.RGBToHSV(value));
                        this._change = true;
                    }
                    else {
                        var rgbRegex = /^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
                        code = value.match(rgbRegex);
                        if (!ej.isNullOrUndefined(code)) {
                            this._rgbaColor(code);
                        }
                        else {
                            var hsvRegex = /^hsva?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
                            code = value.match(hsvRegex);
                            if (!ej.isNullOrUndefined(code)) {
                                this._hsvColor(code);
                            }
                            else {
                                //this._inputTag.addClass('e-error');
                                this._showAlert();
                                this._change = false;
                                return false;
                            }
                        }
                    }
                    if (this._change) {
                        this._valueOperation();
                        this._colorSlider.option('value', parseInt(this._hsv.h));
                        this._hueGradient();
                        this._inputTag.removeClass("e-error");
                    }
                }
            }
            else {
                if (e.keyCode != 9)
                    e.preventDefault();
                if (!e.shiftKey && !e.ctrlKey)
                    this._showAlert();
            }
        },
        _rgbaColor: function (code) {
            var rgb = {}, color, newValue;
            if (code[0].split('(')[0] == "rgba" && !ej.isNullOrUndefined(code[4])) {
                rgb.r = code[1]; rgb.g = code[2]; rgb.b = code[3]; rgb.a = code[4];
            }
            else if (code[0].split('(')[0] == "rgb" && ej.isNullOrUndefined(code[4])) {
                rgb.r = code[1]; rgb.g = code[2]; rgb.b = code[3]; rgb.a = this.rgb.a;
                this._inputTag.val("rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + rgb.a + ")");
            }
            else {
                this._inputTag.addClass('e-error');
                this._change = false;
                return false;
            }
            this.rgb.a = parseFloat(rgb.a);
            newValue = this.RGBToHEX(rgb);
            this._HexToHSV(newValue);
            this._inputTag.removeClass("e-error");
            this._change = true;
        },
        _hsvColor: function (code) {
            var hsv = {};
            if (!ej.isNullOrUndefined(code[4])) {
                hsv.h = code[1]; hsv.s = code[2]; hsv.v = code[3]; hsv.a = code[4];
            }
            else {
                this._inputTag.addClass('e-error');
                this._change = false;
                return false;
            }
            this.rgb.a = parseFloat(hsv.a);
            this.rgb = this.HSVToRGB(hsv);
            this._inputTag.removeClass("e-error");
            this._change = true;
        },
        _showAlert: function () {
            var ptr = this;
            this._inputTag.addClass("e-error").attr('aria-invalid', "true").animate({ Opacity: 1 }, 700, null, function () {
                $(ptr._inputTag).removeClass("e-error").attr('aria-invalid', "false");
            });
        },
        _iconClick: function (e) {
            e.preventDefault();
            this._showHidePopup();
            this.wrapper.focus();
        },
        _showHidePopup: function () {
            if (this.model.displayInline) return false;
            if (!this.isPopupOpen)
                this.show();
            else {
                this.hide();
                this.wrapper.focus();
            }
        },
        /**
        * Hides the colorpicker popup, if in opended state.
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* colorObj.hide(); // hide the colorpicker popup
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
         * // hide the colorpicker popup
        * $("#colorPick").ejColorPicker("hide");
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        hide: function () {
            if (!this.isPopupOpen || this.model.displayInline) return false;
            this.isPopupOpen = false;
            this._dataBind = false;
            this.wrapper.focus();
            this.popupContainer.slideUp(200, "easeOutQuad");
            if (!this.model.displayInline)
                this._off($(document), "mousedown", this._onDocumentClick);
            this._off(this._inputTag, "keydown", this._colorCodeValue);
            this._off(this._inputTag, "blur", this._colorCodeValue);
            this._modelType == "palette" ? this._off($(document), "keydown", this._keyDown) : this._off($(document), "keydown", this._onKeyDown);
            this._trigger("close");
        },
        /**
        * Open the colorpicker popup.
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* colorObj.show(); // open the colorpicker popup
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
         * // open the colorpicker popup
        * $("#colorPick").ejColorPicker("show");
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        show: function () {
            if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
            if (this.isPopupOpen || !this.model.enabled) return false;
            this.isPopupOpen = true;
            if (this.model.modelType == "palette") this._cellSelect();
            this._previousColor = this.value();
            this.popupContainer.children().find('.e-focus').removeClass('e-focus');
            if (!this.model.displayInline) this._setPopupPosition();
            var proxy = this;
            this.popupContainer.slideDown(200, "easeOutQuad", function () {
                proxy.isFocused = true;
                if (!proxy.model.displayInline)
                    proxy._on($(document), "mousedown", proxy._onDocumentClick);
            });
            if (!this._dataBind)
                this._modelType == "palette" ? this._on($(document), "keydown", this._keyDown) : this._on($(document), "keydown", this._onKeyDown);
            this._on(this._inputTag, "keydown", this._colorCodeValue);
            this._on(this._inputTag, "blur", this._colorCodeValue);
            this._trigger("open");
            this._dataBind = true;
        },
        _showBindEvents: function () {
            this._modelType == "palette" ? this._on($(document), "keydown", this._keyDown) : this._on($(document), "keydown", this._onKeyDown);
        },
        _hideUnBindEvents: function () {
            this._off($(document), "keydown");
            this._modelType == "palette" ? this._off($(document), "keydown", this._onKeyDown) : this._off($(document), "keydown", this._keyDown);
        },
        _switchEvents: function () {
            if (this._switch) {
                this._on(this._gradientArea, "mousedown", this._handleMove);
                this._on(this._handleArea, "mousedown", this._handleClick);
                this._on(this._gradientArea, "mousedown", this._handleClick);
            }
            else {
                this._on(this._collection, "mousedown", this._onSelect);
            }
        },
        _unSwitchEvents: function () {
            if (!this._switch) {
                this._off(this._gradientArea, "mousedown", this._handleMove);
                this._off(this._handleArea, "mousedown", this._handleClick);
                this._off(this._gradientArea, "mousedown", this._handleClick);
            }
            else {
                this._off(this._collection, "mousedown", this._onSelect);
            }
        },
        _groupButton: function (e) {
            if ($(e.target).hasClass('e-disable')) return false;
            if ($(e.target).hasClass("e-button")) {
                var element = this._groupTag.find('.e-btn.e-select');
                this._inputTagValue($(e.target));
                this._selectedButton.html() !== "HEX" ? this._inputTag.attr('maxLength', '22') : this._inputTag.attr('maxLength', '7');
                this._groupTag.find('.e-click').removeClass('e-click');
                $(e.target).addClass('e-click');
            }
        },
        _inputTagValue: function (type) {
            if (type.html() == "RGBA") this._inputTag.val(this._formRGBA(this.rgb));
            else if (type.html() == "HEX") this._inputTag.val(this.RGBToHEX(this.rgb));
            else if (type.html() == "HSVA") {
                if (this.model.modelType != "palette")
                    this._inputTag.val("hsva(" + Math.round(this._hsv.h) + "," + Math.round(this._hsv.s) + "," + Math.round(this._hsv.v) + "," + this.rgb.a + ")");
            }
            this._selectedButton = type;
        },
        _bindRecentEvent: function () {
            this._on(this._divTag, "click", this._recentColor);
        },
        _unBindRecentEvent: function () {
            this._off(this._divTag, "click", this._recentColor);
        },
        _handlePlacement: function (prop, value, bool) {
            var hsv = this._hsv;
            hsv[prop] += value * (bool ? 1 : 3);
            if (hsv[prop] < 0) { hsv[prop] = 0; }
            prop === "s" ? this._hsv.s = hsv[prop] : this._hsv.v = hsv[prop];
            this._hsvValue();
            this._changeEvent();
        },
        _onKeyDown: function (e) {
            if (!this.model.enabled) return false;
            var key = e.keyCode, active;
            this._change = true;
            if (e.shiftKey && key == 9) {
                active = document.activeElement;
                $(active).hasClass('e-draghandle') ? this._focusWrapper(e) : "";
            }
            if ((!e.altKey && !e.shiftKey)) {
                switch (key) {
                    case 39:
                        if (e.target.className === "e-draghandle e-color-image" || (this.element.is('input') && e.target == this.wrapper[0])) {
                            e.preventDefault();
                            this._handlePlacement("s", 1, e.ctrlKey);
                        }
                        break;
                    case 38:
                        if (e.target.className === "e-draghandle e-color-image" || (this.element.is('input') && e.target == this.wrapper[0])) {
                            e.preventDefault();
                            this._handlePlacement("v", 1, e.ctrlKey);
                        }
                        break;
                    case 37:
                        if (e.target.className === "e-draghandle e-color-image" || (this.element.is('input') && e.target == this.wrapper[0])) {
                            e.preventDefault();
                            this._handlePlacement("s", -1, e.ctrlKey);
                        }
                        break;
                    case 40:
                        if (e.target.className === "e-draghandle e-color-image" || (this.element.is('input') && e.target == this.wrapper[0])) {
                            e.preventDefault();
                            this._handlePlacement("v", -1, e.ctrlKey);
                        }
                        break;
                    case 13:
                        e.preventDefault();
                        this._buttonClick(e);
                        break;
                    case 27:        // Esc Key
                        e.preventDefault();
                        this.hide();
                        break;
                    case 9:
                        active = document.activeElement;
                        $(active).hasClass('e-colorwidget') ? this._focusPopup(e) : "";
                        break;
                }
            }
        },
        _focusPopup: function (e) {
            $(this._handleArea).focus();
            e.preventDefault();
        },
        _focusWrapper: function (e) {
            $(this.wrapper).focus();
            e.preventDefault();
        },
        _onDocumentClick: function (e) {
            if (!$(e.target).is(this.popupContainer) && !$(e.target).parents(".e-colorpicker").is(this.popupContainer) &&
              !$(e.target).is(this.wrapper) && !$(e.target).parents(".e-colorpickerwidget").is(this.wrapper) && !$(e.target).parents('.e-presetWrapper').is(this._presetContainer)) {
                this.hide();
                this._isFocused = false;
                this.wrapper.removeClass('e-focus');
            }
        },
        _range: function (range, value) {
            if (value === "") return value = 0;
            else if (value > range) return range;
            else return value;
        },
        _hsvValue: function () {
            var colorCode, hsv;
            this._change = true;
            this._hsv.v = this._hsv.v >= 100 ? 100 : this._hsv.v;
            this._hsv.s = this._hsv.s >= 100 ? 100 : this._hsv.s;
            this.hsv = this._hsv;
            this.rgb = this.HSVToRGB(this.hsv);
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
        },
        _formRGB: function (value) {
            if (!ej.isNullOrUndefined(value)) return "rgb(" + value.r + "," + value.g + "," + value.b + ")";
        },
        _formRGBA: function (value) {
            if (!ej.isNullOrUndefined(value)) return "rgba(" + value.r + "," + value.g + "," + value.b + "," + value.a + ")";
        },
        _rgbValue: function (e) {
            var rgbColor, colorCode;
            value = this._HexToRGB(this.value());
            if (!ej.isNullOrUndefined(value)) {
                this.rgb = value;
                this._change = true;
                this.HSVToRGB(this.RGBToHSV(this.rgb));
                this._colorSlider.option('value', parseInt(this._hsv.h));
                this._opacity.option('value', this.rgb.a * 100);
            }
            this._valueOperation();
            this._inputTagValue(this._selectedButton);
        },
        _valueOperation: function () {
            this._handlePosition();
            this._alphaGradient(this.value());
            this._inputTag.removeClass("e-error");
            this._updateUI();
        },
        _HexToHSV: function (hex) {
            return this.HSVToRGB(this.RGBToHSV(this._HexToRGB(hex)));
        },
        _HexToRGB: function (hex) {
            if (!ej.isNullOrUndefined(hex)) {
                var reg = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$", hex, validate = hex.match(reg);
                if (ej.isNullOrUndefined(validate)) { this._change = false; return false; }
                if (validate[1].length == 3)
                    hex = "#" + validate[1][0] + validate[1][0] + validate[1][1] + validate[1][1] + validate[1][2] + validate[1][2];
                this._change = true;
                hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                value = ej.isNullOrUndefined(this.rgb) ? this.model.opacityValue / 100 : this.rgb.a;
                return this.rgb = { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF), a: value };
            }
        },
        /**
       * Convert color value from RGB to HSV
       * @return jQuery
       
       * @example   
       * &lt;input type="text" id="colorPick"/&gt; <br> 
       * &lt;script&gt;
       * // Create Color picker
       * $('#colorPick').ejColorPicker({ value: "#278787" });
       * // Create ColorPicker instance
       * var colorObj = $("#colorPick").data("ejColorPicker");
       * var color=colorObj.RGBToHSV({r:39,g:135,b:135}); // Convert color value from RGB to HSV
       * alert("H="+color.r+", S="+color.g+", V="+color.b);
       * &lt;/script&gt; 
       
       * @example   
       * &lt;input type="text" id="colorPick"/&gt; <br> 
       * &lt;script&gt;
       * // Create Color picker
       * $('#colorPick').ejColorPicker({ value: "#278787" });
       * // Convert color value from RGB to HSV        
       * var color=$("#colorPick").ejColorPicker("RGBToHSV","{r:39,g:135,b:125}");
       * alert("H="+color.r+", S="+color.g+", V="+color.b);
       * &lt;/script&gt;       
       
       * @memberof ejColorPicker
       * @instance
       */
        RGBToHSV: function (rgb) {
            var hsv = { h: 0, s: 0, v: 0 };
            var min = Math.min(rgb.r, rgb.g, rgb.b);
            var max = Math.max(rgb.r, rgb.g, rgb.b);
            var differ = max - min;
            hsv.v = max;
            hsv.v *= 100 / 255;
            if (differ === 0) {
                this._hsv = hsv;
                return hsv;
            }
            hsv.s = max != 0 ? 255 * differ / max : 0;
            if (hsv.s != 0) {
                if (rgb.r == max) hsv.h = (rgb.g - rgb.b) / differ;
                else if (rgb.g == max) hsv.h = 2 + (rgb.b - rgb.r) / differ;
                else hsv.h = 4 + (rgb.r - rgb.g) / differ;
            } else hsv.h = -1;
            hsv.h *= 60;
            if (hsv.h < 0) hsv.h += 360;
            hsv.s *= 100 / 255;
            this._hsv = hsv;
            return hsv;
        },
        /**
        * Convert color value from HSV to RGB
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* var color=colorObj.HSVToRGB({h:230,s:98,v:98}); // Convert color value from HSV to RGB
        * alert("Red="+color.r+", Green="+color.g+", Blue="+color.b);
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Convert color value from HSV to RGB        
        * var color=$("#colorPick").ejColorPicker("HSVToRGB","{h:230,s:98,v:98}");
        * alert("Red="+color.r+", Green="+color.g+", Blue="+color.b);
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        HSVToRGB: function (hsv) {
            var rgb = {};
            var h = Math.round(hsv.h);
            var s = Math.round(hsv.s * 255 / 100);
            var v = Math.round(hsv.v * 255 / 100);
            if (s == 0) {
                rgb.r = rgb.g = rgb.b = v;
            } else {
                var t1 = v;
                var t2 = (255 - s) * v / 255;
                var t3 = (t1 - t2) * (h % 60) / 60;
                if (h == 360) h = 0;
                if (h < 60) { rgb.r = t1; rgb.b = t2; rgb.g = t2 + t3 }
                else if (h < 120) { rgb.g = t1; rgb.b = t2; rgb.r = t1 - t3 }
                else if (h < 180) { rgb.g = t1; rgb.r = t2; rgb.b = t2 + t3 }
                else if (h < 240) { rgb.b = t1; rgb.r = t2; rgb.g = t1 - t3 }
                else if (h < 300) { rgb.b = t1; rgb.g = t2; rgb.r = t2 + t3 }
                else if (h < 360) { rgb.r = t1; rgb.g = t2; rgb.b = t1 - t3 }
                else { rgb.r = 0; rgb.g = 0; rgb.b = 0 }
            }
            this._hsv = hsv;
            var value = ej.isNullOrUndefined(this.rgb) ? this.model.opacityValue / 100 : this.rgb.a;
            return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b), a: value }
        },
        _HSVToHex: function (hsv) {
            return this.RGBToHEX(this.HSVToRGB(hsv));
        },
        _toHEX: function (rgb) {
            if (rgb.indexOf("#") !== -1) return rgb;
            rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
            return "#" + this._hex(rgb[1]) + this._hex(rgb[2]) + this._hex(rgb[3]);
        },

        //Process the rgb object values to color code
        /**
        * Convert color value from RGB to HEX
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* alert(colorObj.RGBToHEX(colorObj.getColor())); // Convert color value from RGB to HEX
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
         * // Convert color value from RGB to HEX
        * alert($("#colorPick").ejColorPicker("RGBToHEX",colorObj.getColor()));
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        RGBToHEX: function (rgb) {
            if (!ej.isNullOrUndefined(rgb))
                return "#" + this._hex(rgb.r) + this._hex(rgb.g) + this._hex(rgb.b);
        },
        _hex: function (x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        },
        _colorValue: function (value) {
            this._color = value.indexOf("#") != -1 ? this.hexCodeToRGB(value) : "";
            return "rgb(" + this._color.r + ", " + this._color.g + ", " + this._color.b + ")";
        },
        //Process the color code value to RGB
        /**
        * To Convert color value from hexCode to RGB
		* @return jQuery
		
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
        * // Create ColorPicker instance
		* var colorObj = $("#colorPick").data("ejColorPicker");
		* var color=colorObj.hexCodeToRGB("#278787"); // Convert color value from hexCode to RGB
        * alert("Red="+color.r+", Green="+color.g+", Blue="+color.b);
        * &lt;/script&gt; 
        
        * @example   
        * &lt;input type="text" id="colorPick"/&gt; <br> 
        * &lt;script&gt;
        * // Create Color picker
        * $('#colorPick').ejColorPicker({ value: "#278787" });
         * // Convert color value from hexCode to RGB
        * var color=$("#colorPick").ejColorPicker("hexCodeToRGB","#278787");
        * alert("Red="+color.r+", Green="+color.g+", Blue="+color.b);
        * &lt;/script&gt;       
		
        * @memberof ejColorPicker
	    * @instance
		*/
        hexCodeToRGB: function (colorCode) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colorCode);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
                a: this.rgb.a
            } : null;
        },

        _updatePreviewColor: function () {
            if (this._browser.name = "msie" && this._browser.version == "8.0")
                this._previousTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
            else
                this._previousTag.css({ "background-color": this._formRGBA(this.rgb) });
            this._oldValue = this.rgb;
        },
        _updateUI: function () {
            var value = this._hsv;
            if (this._switch) {
                var hsv = { h: this._hsv.h, s: 100, v: 100 };
                this._gradientArea.css({ "background-color": this._colorValue(this._HSVToHex(hsv)) });
            } else this._cellSelect();
            if (this._browser.name = "msie" && this._browser.version == "8.0") {
                this._currentTag.css({ "background-color": this._formRGB(this.rgb), "filter": "alpha(opacity=" + this.rgb.a * 100 + ")" });
                this._previousTag.css({ "background-color": this._formRGB(this._oldValue), "filter": "alpha(opacity=" + this.rgb.a * 100+ ")" });
            }
            else {
                this._currentTag.css({ "background-color": this._formRGBA(this.rgb) });
                this._previousTag.css({ "background-color": this._formRGBA(this._oldValue) });
                this.popupList.find("#" + this._id + "alpha").children(".e-handle").css({ "background": this._formRGBA(this.rgb) });
            }
            this._hsv = value;
        },

        _targetFocus: function (e) {
            e.preventDefault();
            if (!this._isFocused) {
                this._isFocused = true;
                this.wrapper.addClass("e-focus");
            }
        },
        _targetBlur: function (e) {
            this._isFocused = false;
            if (!this.isPopupOpen) this.wrapper.removeClass("e-focus");
        },
        _switchModel: function () {
            this.value(this.RGBToHEX(this.rgb));
            var proxy = this;
            if (this._modelType == "palette") {
                this._modelType = "picker";
                this._switcher.removeClass("e-paletteModel").addClass("e-pickerModel");
                this.PaletteWrapper.fadeOut(300, function () {
                    proxy._presetTag.parents('.e-split.e-widget').addClass('e-hide');
                    proxy._gradient.fadeIn(300);
                });
                this._switch = true;
                this._rgbValue();
                this._hueGradient();
                this._templateWrapper.find('#' + this._id + "hsv").ejButton("enable");
            } else {
                this._modelType = "palette";
                this._switcher.removeClass("e-pickerModel").addClass("e-paletteModel");
                this._switch = false;
                this._gradient.fadeOut(300, function () {
                    proxy._presetTag.parents('.e-split.e-widget').removeClass('e-hide');
                    if (ej.isNullOrUndefined(proxy.PaletteWrapper)) {
                        proxy.PaletteWrapper = proxy._layoutType(proxy.model.palette);
                        proxy._splitObj.option('prefixIcon', 'e-color-image e-' + this.model.presetType);
                        proxy.popupList.prepend(proxy.PaletteWrapper);
                    }
                    proxy.PaletteWrapper.fadeIn(300);
                });
                this._cellSelect();
                this._disableHSVButton();
            }
            if (!this.model.displayInline || this.element.is(":input")) this.wrapper.focus();
            this._switchEvents();
            this._unSwitchEvents();
            if (this.isPopupOpen) {
                this._hideUnBindEvents();
                this._showBindEvents();
            }
        },
        _disableHSVButton: function () {
            if ($(this._groupTag.find('.e-click')).attr('id') == this._id + "hsv") {
                this._inputTagValue(this._templateWrapper.find("#" + this._id + "rgba"));
                this._templateWrapper.find("#" + this._id + "rgba").addClass('e-click');
                this._templateWrapper.find('#' + this._id + "hsv").removeClass('e-click');
            }
            this._templateWrapper.find('#' + this._id + "hsv").ejButton("disable");
        },
        //palette Block
        _cellSelect: function () {
            var code, element, proxy = this;
            this._removeClass();
            this._collection.find('.e-item').each(function () {
                code = $(this).css("background-color");
                if (code && code.replace(/ /g, '') === proxy._formRGB(proxy.rgb)) {
                    element = this;
                }
            });
            $(element).addClass("e-state-selected").attr("aria-selected", true);
        },
        _removeClass: function () {
            this._collection.find('.e-item').removeClass('e-state-selected').removeAttr("aria-selected");
        },
        _position: function (items, element, columns) {
            items = Array.prototype.slice.call(items);
            var n = items.length,
            index = items.indexOf(element);
            if (index < 0) return columns < 0 ? items[n - 1] : items[0];
            index += columns;
            return items[index < 0 ? index += n : index %= n];
        },
        _onSelect: function (e) {
            this._collection.find('.e-item').removeClass("e-state-selected").removeAttr('aria-selected');
            if (e.target.style.backgroundColor != "") {
                this._HexToRGB(this._toHEX(e.target.style.backgroundColor));
                this._updateUI();
                this._inputTagValue(this._selectedButton);
                if (!this.model.displayInline || this.element.is("input")) this.wrapper.focus();
            }
            this._changeEvent();
            e.preventDefault();
        },
        _keyDown: function (e) {
            this._change = true;
            if (!this.model.enabled) return false;
            var selected = "",
                key = e.keyCode,
                items = this._collection.find('.e-item'),
                element = items.filter(".e-state-selected").get(0),
                columnSize = this.model.columns;
            if (!e.altKey && (key == 37 || key == 38 || key == 39 || key == 40) && (e.target.className !== "e-color-code"))
                this._removeClass();
            if (e.keyCode == 9) return false;
            switch (!e.altKey && key) {
                case 40:
                    if (e.target.className !== "e-color-code") {
                        e.preventDefault();
                        selected = this._position(items, element, columnSize);
                    }
                    break;
                case 37:
                    if (e.target.className !== "e-color-code") {
                        e.preventDefault();
                        selected = this._position(items, element, -1);
                    }
                    break;
                case 38:
                    if (e.target.className !== "e-color-code") {
                        e.preventDefault();
                        selected = this._position(items, element, -columnSize);
                    }
                    break;
                case 39:
                    if (e.target.className !== "e-color-code") {
                        e.preventDefault();
                        selected = this._position(items, element, 1);
                    }
                    break;
                case 13: //Enter Key                    
                    this._collection.find('.e-item').removeClass('e-state-selected').removeAttr("aria-selected");
                    this._buttonClick(e);
                    this._updateUI();
                    this.hide();
                    if (this.model.displayInline || this.element.is("input")) this.wrapper.focus();
                    break;
                case 27:  //Esc Key
                    this.hide();
                    if (this.model.displayInline || this.element.is("input")) this.wrapper.focus();
                    break;
            }
            if (selected) {
                $(selected).addClass('e-state-selected').attr("aria-selected", true);
                this._currentTag.css({ "background-color": this._formRGB(this._HexToRGB(selected.attributes.value.value)) });
                this._inputTagValue(this._selectedButton);
                this._changeEvent();
            }
        },
    })
    /**
    * Enum for ColorPicker Palette	 
    * @enum {String}
    * @global 
    */
    ej.ColorPicker.Palette = {
        /**  Represents the basic Palette. This is default Type*/
        BasicPalette: "basicpalette",
        /**  Represents the custom Palette. User will customize the palette*/
        CustomPalette: "custompalette",
    }
    /**
    * Enum for ColorPicker ModelType	 
    * @enum {String}
    * @global 
    */
    ej.ColorPicker.ModelType = {
        /**  Color picker is a Default type*/
        Default: "default",
        /**  Represents Palette Type*/
        Palette: "palette",
        /** Represents Picker Type */
        Picker: "picker"
    }
    /**
   * Enum for ColorPicker PresetType	 
   * @enum {String}
   * @global 
   */
    ej.ColorPicker.PresetType = {
        Basic: "basic",
        MonoChrome: "monochrome",
        FlatColors: "flatcolors",
        SeaWolf: "seawolf",
        WebColors: "webcolors",
        Sandy: "sandy",
        PinkShades: "pinkshades",
        Misty: "misty",
        Citrus: "citrus",
        Vintage: "vintage",
        MoonLight: "moonlight",
        CandyCrush: "candycrush",
    }
    var Colors = {
        basic: ["ffffff", "facbcb", "fccb98", "faf39a", "fbf8cd", "a6d38b", "aadee8", "d1ecf2", "cdcae5", "eecde1", "cccbcb", "f16667", "f69668", "f8ee6b", "f7ec37", "89c987", "75cddd", "8bd3e1", "9494c8", "9494c8", "b3b2b3", "ec2024", "f7971d", "ffcb67", "f5ea14", "74bf44", "69c8c9", "46c7f4", "6666ad", "b76cab", "676767", "971b1e", "ca6828", "ca9732", "979937", "0d9948", "339898", "4857a6", "62449a", "973794", "000000", "2f1110", "973620", "663433", "343416", "183319", "023334", "22205f", "3b2f8d", "310e31"],
        monochrome: ["ffffff", "e3e3e3", "c6c6c6", "aaaaaa", "8e8e8e", "717171", "555555", "393939", "1c1c1c", "000000", "f9e6e7", "f4d0d2", "efbabc", "e9a4a7", "e48e92", "df787c", "da6267", "d44c52", "cf363c", "ca2027", "fff4ca", "ffeb9e", "fff0b4", "ffeb9e", "ffe788", "ffe272", "ffd947", "ffd531", "ffd01b", "ffcc05", "e4f4eb", "ccead9", "b4e0c7", "9cd6b5", "84cca3", "6dc190", "55b77e", "3dad6c", "25a35a", "0d9948", "e8f4f4", "d6e3eb", "c4d1e3", "b3c0da", "a1aed1", "8f9dc9", "7d8bc0", "6c7ab7", "5a68af", "4857a6"],
        flatcolors: ["7477b8", "488bca", "18b1d4", "1db369", "78c162", "acc063", "ffe84e", "f6b757", "f79853", "ed6346", "E87F3D", "E4C45D", "B7A575", "999999", "67809F", "002228", "00A578", "F9A41F", "F3770B", "D7401B", "FFCB36", "82CC2C", "36B595", "6370AD", "D4264E", "004D8E", "22A04B", "F3A414", "C77405", "F3420B", "1ABC9C", "3498DB", "9B59B6", "E67E22", "E74C3C", "3A738A", "EBD9A7", "89AD78", "FF766D", "C76160", "BF3542", "CDC5BA", "EBE3D6", "3C3C3C", "2E2E2E", "77A7FB", "E57368", "FBCB43", "34B67A", "FFFFFF"],
        seawolf: ["0EEAFF", "15A9FA", "1B76FF", "1C3FFD", "2C1DFF", "0B3C4C", "0E5066", "13647F", "127899", "1A8BB2", "74B8E8", "659EBB", "3C9FFF", "26466F", "2472FF", "0069A4", "009BF2", "004165", "49A0B4", "274C5F", "000000", "7A5848", "E0A088", "F9DEC6", "3A2A22", "DC3522", "D9CB9E", "374140", "2A2C2B", "1E1E20", "CB3937", "FE6B2C", "654E44", "6DD16F", "70FE2C", "275673", "4681A6", "FDDEC9", "F22816", "400101", "071C2F", "388494", "E6A934", "F3DB5F", "534329", "206956", "47683B", "E1BFA6", "BF7950", "903932"],
        webcolors: ["0066aa", "00bbdd", "338800", "77bb00", "ffcc99", "990c0c", "0303c9", "336699", "669933", "cccccc", "EEEEEE", "E7C36F", "F7B230", "E35B20", "000033", "7D7A74", "BD524A", "FCB200", "8CFCC2", "2ACD6B", "666666", "666553", "FFFEEC", "B2B2A4", "AAA4B2", "9CA5E3", "5A668C", "BBA469", "CFC295", "FFFFFF", "DBBF56", "2E94B3", "808080", "E96656", "14A168", "DE185B", "D8806F", "DBE186", "D8CC63", "DCC527", "4E6C89", "E2BDAD", "EC6053", "81BBAD", "DFCDA5", "453394", "66398A", "313E7D", "336694", "788E91"],
        sandy: ["c0a986", "ecd9c3", "dfc79b", "f6d58e", "ecdaad", "fff3e0", "7f6b4a", "ffd694", "7f7a70", "ccac76", "E6E2AF", "A79A71", "EFECCA", "806F4C", "2F2F2E", "997F1A", "CCB65F", "FFD291", "6B674A", "635F3A", "7F693A", "FFEBC1", "FFD275", "7F7561", "CCA85E", "D29854", "4A4034", "C9AD8D", "4A351D", "968169", "E6E39F", "9A9757", "FFFDC9", "94909A", "E2E0E6", "960010", "EB1517", "CD7C29", "9A571C", "1F7A94", "7F6826", "7F724C", "FFE499", "FFD04C", "CCA63D", "FFA669", "92FFB6", "FFF352", "E8C269", "D7E8CB"],
        pinkshades: ["F6B1C3", "F0788C", "DE264C", "BC0D35", "A20D1E", "E12256", "BB1C48", "7B132F", "3B0917", "FA2660", "FFB7B5", "9A423F", "FF6D68", "BB5855", "CC5753", "E88161", "D66C60", "C2646E", "996072", "705262", "FFA1BD", "FF8FB7", "FF82AE", "E9719B", "CC6882", "F250C7", "BF1774", "BF2696", "AC60AA", "BB90C5", "BF1553", "F20775", "F2F2F2", "A68F63", "261414", "FFFFFF", "7F3443", "FF6887", "7F3443", "CC536C", "D06AA9", "E65F41", "650017", "BC1620", "FA427E", "3B1132", "84476E", "B83D65", "E6E0E8", "FF6EE8"],
        misty: ["5C7A84", "3D5372", "7C9196", "50748A", "ADBFBF", "010735", "052159", "194073", "376B8C", "FFFFFF", "985999", "C811CC", "892EFF", "FF6852", "DBA211", "0A0D0C", "85A67C", "46593E", "BBD9AD", "202616", "BF8E63", "734327", "A66C4B", "593A2F", "BFBFBF", "8DB0B6", "1B778A", "F46C1B", "881801", "192129", "81808C", "ABAABF", "0C0E09", "6A7366", "37402F", "5D6663", "84867B", "A4A66A", "BABBB1", "20211C", "6B9695", "646E8C", "6B8196", "61787F", "648C80", "8E9FBA", "89A8C8", "799ED1", "7FAEE7", "849EBD"],
        citrus: ["FAEA41", "E7F03E", "E3C647", "FAC541", "F0AB3E", "CCCA1F", "FFF300", "FFCB0D", "FF9500", "804A00", "6A692A", "FFFCA0", "FFFFFF", "CF664E", "EFAC66", "EFF299", "F2DC6D", "F29727", "F2600C", "592202", "214001", "4F7302", "1A2601", "BCD97E", "C0D904", "AAFEFF", "359D6D", "E5FF45", "65FCCF", "ABDC4B", "42B200", "C6FF00", "F2E304", "FFB200", "FF8600", "52EC04", "04E206", "94D507", "ECE404", "E2C904", "DA321C", "FF7913", "FBD028", "C0D725", "9FC131", "547312", "ADBF26", "DEB329", "F1DB47", "E08214"],
        vintage: ["684132", "fdbe30", "eaac21", "87783c", "3e4028", "ffc706", "cd5648", "5bafa9", "828282", "363636", "424862", "fb9a63", "bfc4d5", "f6fbf4", "febc98", "657050", "FCF082", "D8D98B", "A2AB80", "4D584A", "5ADED4", "4DAAAB", "26596A", "163342", "6C98A1", "010A26", "28403B", "557359", "AEBF8A", "C7D9AD", "AFFCCB", "CB4243", "D2997E", "36857E", "4AC6BB", "28394B", "191313", "AF0A18", "DC373D", "122438", "43734A", "A6A26D", "D9B448", "BF8C2C", "734002", "26010F", "866F53", "ACBD91", "7BAB87", "546859"],
        moonlight: ["241D37", "2A233D", "322B45", "362F49", "D4BA73", "261225", "592040", "8C3063", "A64985", "73345D", "A3C8FF", "85B6FF", "000040", "213190", "050859", "FFFFFF", "6AAED9", "4184BF", "224573", "A3C8FF", "CFC496", "B3B391", "889486", "61797B", "366577", "123340", "436E73", "7B8C61", "D7D996", "F0EBB4", "CFC496", "B3B391", "889486", "61797B", "366577", "123340", "436E73", "7B8C61", "D7D996", "F0EBB4", "341F36", "D9B5E0", "9889AB", "4D4E66", "1B2129", "5CBBE3", "FCF1BC", "5C8182", "383A47", "B4F257"],
        candycrush: ["0779f4", "30da00", "fb8006", "f9d802", "a71df7", "f70200", "fd49ae", "682e07", "9b2424", "5e7693", "F9AB3B", "EF5627", "FF0000", "00A398", "803C2C", "DE5711", "FFF026", "FF0048", "14A0CC", "00B229", "FFFFBE", "F7CD99", "FF77A1", "9886E8", "97CACB", "EAEDE5", "FFD127", "FF870C", "EC4610", "9A1900", "993460", "CC1464", "C300FF", "FFFFBC", "CCB914", "FFFEE2", "B24C5F", "FF274F", "0A94CC", "679DB2", "C2FFE6", "16B271", "5FFFBC", "B2442F", "FFA190", "E89359", "FFFB75", "F36EFF", "5999E8", "73EB86"],
    }

})(jQuery, Syncfusion);;
/*!
*  filename: ej.captcha.js
*  version : 12.3
*  Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/

/**
* @fileOverview Plugin to style the Html Captcha elements
* @copyright Copyright Syncfusion Inc. 2001 - 2013. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.3 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

 (function ($, ej, undefined) {
	/**
    * @namespace ej
	* @classdesc Custom Design for Html Captcha control.
	* @class ejCaptcha
	* @param {object} options - settings for Captcha
	* @requires jQuery
	* @requires ej.core.js
    * @requires ej.captcha.js
	* @requires ej.button.js
	* @example 
	* &lt;captcha id="captcha1"&gt;Captcha&lt;/Captcha&gt; <br> 
	* &lt;script&gt;
	* // Create Captcha
    * $('#Captcha1').ejCaptcha(); 	
	* &lt;/script&gt;
	*/
       ej.widget("ejCaptcha", "ej.Captcha", {
        // widget element will be automatically set in this
        element: null,
        // user defined model will be automatically set in this
        model: null,
        validTags: ["div"],
        _setFirst: false,
        //Root Css Class
        _rootCSS: "e-captcha",

        // default model
        defaults: {
            /// <summary>This Contains default property of Captcha </summary>
			/**		
			* Specifies the target input element that will verify the Captcha.	
			* @default null
			* @type {string}
			* @example 
			* &lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set target input API value during initialization  
			* 	$("#captcha1").ejCaptcha({  targetInput: "input1"});	
			* &lt;/script&gt;
			* @memberof ejCaptcha
			* @instance
			*/	
            targetInput: "",
			/**		
			* Specifies the target button of the Captcha to validate the entered text and captcha text.	
			* @default null
			* @type {string}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;button id="button1"&gt;Submit&lt;/button&gt; <br>
			* &lt;script&gt;
			* //To set target button API value during initialization  
			* 	$("#captcha1").ejCaptcha({  targetButton: "button1"});	
			* &lt;/script&gt;
			* @memberof ejCaptcha
			* @instance
			*/	
            targetButton:"",
			/**		
			* Specifies the height of the Captcha.
			* @default 50
			* @type {number}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set height API value during initialization  
			* 	$("#captcha1").ejCaptcha({  height: 50});	
			* &lt;/script&gt;			
			* @memberof ejCaptcha
			* @instance
			*/
            height :50,
			/**		
			* Specifies the width of the Captcha.
			* @default 150
			* @type {number}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set width API value during initialization  
			* 	$("#captcha1").ejCaptcha({  width: 150});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            width :150,
			/**		
			* Specifies the character set of the Captcha that will be used to generate captcha text randomly.
			* @default "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
			* @type {string}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set character set API value during initialization  
			* 	$("#captcha1").ejCaptcha({  characterSet: "ABCD1234"});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            characterSet : "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
			/**		
			* Specifies the maximum number of characters used in the Captcha.
			* @default 8
			* @type {number}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set maximum length API value during initialization  
			* 	$("#captcha1").ejCaptcha({  maximumLength: 8});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            maximumLength :8,  
			/**		
			* Specifies the minimum number of characters used in the Captcha.
			* @default 4
			* @type {number}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set minimum length API value during initialization  
			* 	$("#captcha1").ejCaptcha({  minimumLength: 6});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            minimumLength:4,
			/**		
			* Specifies the case sensitivity for the characters typed in the Captcha.
			* @default true
			* @type {boolean}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set case sensitivity API value during initialization  
			* 	$("#captcha1").ejCaptcha({  enableCaseSensitivity: true});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            enableCaseSensitivity :true,
			/**		
			* Set the Captcha validation automatically.
			* @default false
			* @type {boolean}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set auto validation API value during initialization  
			* 	$("#captcha1").ejCaptcha({  enableAutoValidation: true});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            enableAutoValidation:false,
			/**		
			* Specifies the error message to be displayed when the Captcha mismatch.
			* @default null
			* @type {string}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set error message API value during initialization  
			* 	$("#captcha1").ejCaptcha({  customErrorMessage: "InValid Captcha"});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/			
            customErrorMessage: "",
			/**		
			* Sets the Captcha with audio support, that enables to dictate the captcha text.
			* @default false
			* @type {boolean}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set enable audio API value during initialization  
			* 	$("#captcha1").ejCaptcha({  showAudioButton: true});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
			showAudioButton:false,
			/**		
			* Sets the Captcha with a refresh button.
			* @default false
			* @type {boolean}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set enable refresh API value during initialization  
			* 	$("#captcha1").ejCaptcha({  showRefreshButton: true});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
			showRefreshButton: false,			
			/**		
			* Sets the Captcha direction as right to left alignment.
			* @default false
			* @type {boolean}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set enable RTL API value during initialization  
			* 	$("#captcha1").ejCaptcha({  enableRTL: true});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            enableRTL:false,
			/**		
			* Specifies the method to map values to Captcha.
			* @default null
			* @type {string}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set request mapper API value during initialization  
			* 	$("#captcha1").ejCaptcha({  requestMapper: "GetCurrentItem"});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            requestMapper:"",
			/**		
			* Fires when captch refresh begins.
			* @event
			* @name ejCaptcha#refreshBegin 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the Captcha model
			* @param {string}  argument.type returns the name of the event		  
			* @example
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //Refresh begin event of Captcha control 
			* 	$("#captcha1").ejCaptcha({  
				refreshBegin: function(args) {}
				});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            refreshBegin:"",
			/**		
			* Fires after captch refresh succeeded.
			* @event
			* @name ejCaptcha#refreshSuccess 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the Captcha model
			* @param {string}  argument.type returns the name of the event		  
			* @example
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //Refresh success event of Captcha control 
			* 	$("#captcha1").ejCaptcha({  
				refreshSuccess: function(args) {}
				});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            refreshSuccess:"",
			/**		
			* Fires when captch refresh fails to load.
			* @event
			* @name ejCaptcha#refreshFailure 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the Captcha model
			* @param {string}  argument.type returns the name of the event		  
			* @example
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //Refresh failure event of Captcha control 
			* 	$("#captcha1").ejCaptcha({  
				refreshFailure: function(args) {}
				});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            refreshFailure:"",
			/**		
			* Fires after captch refresh completed.
			* @event
			* @name ejCaptcha#refreshComplete 	
			* @param {boolean}  argument.cancel if the event should be canceled; otherwise, false.
			* @param {object}  argument.model returns the Captcha model
			* @param {string}  argument.type returns the name of the event		  
			* @example
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //Refresh complete event of Captcha control 
			* 	$("#captcha1").ejCaptcha({  
				refreshComplete: function(args) {}
				});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            refreshComplete: "",
			/**		
			* Specifies the method with values to be mapped in the Captcha.
			* @default null
			* @type {string}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set mapper API value during initialization  
			* 	$("#captcha1").ejCaptcha({  mapper: "GetCurrentItem"});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            mapper:"",
			/**		
			* Specifies the background apperance for the captcha.
			* @default value set as BackwardDiagonal
			* @type {enum}
			* @example 
			* &&lt;div id="captcha1"&gt;&lt;/div&gt; <br> 
			* &lt;script&gt;
			* //To set mapper API value during initialization  
			* 	$("#captcha1").ejCaptcha({  hatchStyle: "BackwardDiagonal"});	
			* &lt;/script&gt;				
			* @memberof ejCaptcha
			* @instance
			*/
            hatchStyle:"BackwardDiagonal",
        },
        /**	
    * Specify the data types for default properties 
    * @private
    */
        //Data Types
        dataTypes: {
            targetInput: "string",
            targetButton:"string",
            height :"number",
            width :"number",
            characterSet : "string",
            maximumLength :"number",             
            minimumLength:"number",            
            enableCaseSensitivity :"boolean",
            enableAutoValidation :"boolean",            
            customErrorMessage: "string",
            requestMapper: "string",
            showAudioButton: "boolean",
            showRefreshButton:"boolean",
            enableRTL:"boolean",            
            mapper:"string",
            hatchStyle:"enum",
        },
        /**
* Create the Captcha widget
* @private
*/
        _init: function () {
            /// <summary>This will initialize captcha </summary>
            this._initialize();
            this._wireEvents();
        },       
         
        /*----------------------- Private Methods-----------------------------------------*/
        //initialize the control
        _initialize: function () {         
        $("#"+ this._id + "_RefreshButton").ejButton({size: "normal", showRoundedCorner : true, contentType: "imageonly", prefixIcon: "e-captcha refreshicon",type:"button"});
        $("#"+ this._id + "_PlayAudio").ejButton({size: "normal", showRoundedCorner : true, contentType: "imageonly", prefixIcon: "e-captcha audioicon",type:"button"});
            this._control = $("#" + this._id).get(0);
			if(!this.model.targetInput)
            this.model.targetInput = this._id + "_ValidText";
            this._target  = $("#"+ this.model.targetInput).get(0);
            this._captchaImage = $("#"+ this._id + "_CaptchaImage").get(0);
            this._message = $("#"+ this._id + "_CaptchaMessage").get(0);
            this._refreshButton = $("#"+ this._id + "_RefreshButton").get(0);
            this._form = $(this._target).parents('form')[0];				
            this._audioObject = $("#"+ this._id + "_AudioObject").get(0);
            this._audioButton = $("#"+ this._id + "_PlayAudio").get(0);
            this._audioPluginObject = null;
            this._audioType = "audio/wav";                                       
            this._submitButton=$("#"+this.model.targetButton).get(0);
            if(!this._submitButton)
            this._submitButton=$("[id$="+this.model.targetButton+"]").get(0);
            this._hiddenField = $("#"+ this._id + "_Hidden").get(0);
            
            if (this._audioObject) {
                if (!this._isSupportAudio(this._audioType)) {
                    this._appendAudioPlugin();
                }
            }
        },
        //Wiring Events
        /**
* Wiring the events to Captcha control		
* @private
*/
        _wireEvents: function (val) {            
            this._FormSubmitDelegate = $.proxy(this.formSubmit, this);
            this._CaptchaRefreshDelegate = $.proxy(this.refresh, this);
            this._PlayAudioDelegate = $.proxy(this.playAudio, this);

            if (this._audioButton)
                $(this._audioButton).on('click', this._PlayAudioDelegate);
            if (this._submitButton)
                $(this._submitButton).on('click', this._FormSubmitDelegate);
            if (this._refreshButton)
                $(this._refreshButton).on('click', this._CaptchaRefreshDelegate);
        },  

        //Remove Handlers
        _unwireEvents: function () {
            if (this._audioButton)
                $(this._audioButton).unbind('click', this._PlayAudioDelegate);
            if (this._submitButton)
                $(this._submitButton).unbind('click', this._FormSubmitDelegate);
            if (this._refreshButton)
                $(this._refreshButton).unbind('click', this._CaptchaRefreshDelegate);
        },

         //Play Audio
            playAudio : function(){

                try{
                    if (this._audioPluginObject) {
                        this._audioPluginObject.Play();
                    } else {
                        if (this._audioObject && this._audioObject.play) {                           
                            this._audioObject.play();
                        }
                    }
                } catch (e) { }
            },

            //Is Support audio
            _isSupportAudio: function (type) {
                if (!document.createElement("audio").canPlayType) {
                    return false;
                } else {
                    return document.createElement("audio").canPlayType(type).match(/maybe|probably/i) ? true : false;
                }
            },
            //Append audio plugin 
            _appendAudioPlugin: function () {
                $(this._audioPluginObject).remove();
                var obj = this._createAudioPluginObject();
                this._audioObject.parentNode.appendChild(obj);
                this._audioPluginObject = $("#"+this._id + "_AudioPlugin").get(0);
            },
            //Create Audio Plugin Object
            _createAudioPluginObject : function(){
                var a = document.createElement("embed");
                a.setAttribute("id", this._id + "_AudioPlugin");
                a.setAttribute("src", this.model.audioUrl);
                a.setAttribute("name", "AudioPlugin");
                a.setAttribute("enablejavascript", "true");
                a.setAttribute("type", "audio/wav");
                a.setAttribute("autostart", "false");
                a.setAttribute("pluginspage", "http://www.apple.com/quicktime/download/");
                a.style.top = 0;
                a.style.left = 0;
                a.style.width = "0px";
                a.style.height = "0px";
                a.style.position = "absolute";
                return a;
            },

            //On ajax Success
            _onSuccess: function (captchaResult) {
                var jsonCaptcha;               
                    jsonCaptcha = JSON.parse(captchaResult);
                this._validSuccess(jsonCaptcha);               
            },

             _onSuccessAsp: function (captchaResult) {
                var jsonCaptcha;               
                    jsonCaptcha = JSON.parse(captchaResult.d);

                    this._validSuccess(jsonCaptcha);              
            },

            //To display validation message
            _displayMessages: function () {
                if (this.model.isValid)
                {
                    $("#" + this._id + "_CaptchaMessage").html("");
                }
                else
				{      
                    $("#" + this._id + "_CaptchaMessage").html(this.model.customErrorMessage);
                    $("#" + this._id + "_ValidText").addClass("error");
                }

            },
            _validSuccess: function(jsonCaptcha)
            {
			try {
                    if (this._audioPluginObject) {
                        this._audioPluginObject.Pause();
                    } else if (this._audioObject && this._audioObject.pause) {
                        this._audioObject.pause();
                    }
                } catch (e) { }

                this._captchaImage.src = jsonCaptcha.NewChallenge;
                if(this._audioObject)
                this._audioObject.src = jsonCaptcha.AudioLink;

                this.model.audioURL=jsonCaptcha.AudioLink;

                if (this._audioPluginObject) {
                    this._appendAudioPlugin();
                }

                if (jsonCaptcha.Validation == "false")
                    this.model.isValid = false;
                else
                    this.model.isValid = true;
                if (this.model.enableAutoValidation)
                    this._displayMessages(); 
				if($("#"+this._id + "_ValidText"))
                   $("#"+this._id + "_ValidText").val("");
                   this.model.encryptedCode=jsonCaptcha.Script;
                $(this._hiddenField).val(this.model.encryptedCode);
            },
           _refreshSuccess: function(jsonCaptcha)
           {
              try {
                    if (this._audioPluginObject) {
                        this._audioPluginObject.Pause();
                    } else if (this._audioObject && this._audioObject.pause) {
                        this._audioObject.pause();
                    }
                } catch (e) { }

                this._captchaImage.src = jsonCaptcha.NewChallenge;
                if (this._audioObject) {
                    this._audioObject.src = jsonCaptcha.AudioLink;
                }
                this.model.audioUrl=jsonCaptcha.AudioLink;

                if (this._audioPluginObject) {
                    this._appendAudioPlugin();
                }
                this.model.encryptedCode=jsonCaptcha.EncryptedText;
                $(this._hiddenField).val(jsonCaptcha.EncryptedText);    
           },
            //On captcha refresh ajax Success
            _onRefreshSuccess: function (captchaRefresh) {
                var jsonCaptcha;
                jsonCaptcha = JSON.parse(captchaRefresh);
                  this._refreshSuccess(jsonCaptcha)           

            },
            _onRefreshSuccessAsp: function (captchaRefresh)
            {
            var jsonCaptcha;
                jsonCaptcha = JSON.parse(captchaRefresh.d);
                this._refreshSuccess(jsonCaptcha)             
            },
  
            /*-----------------------Event Handlers -----------------------------------------*/
            //Hanldes the form submit event
            formSubmit: function(event) {
                var proxy = this;
                var data = {
                    Height: this.model.height,
                    Width: this.model.width,
                    CharacterSet: this.model.characterSet,
                    MaximumLength: this.model.maximumLength,                     
                    MinimumLength: this.model.minimumLength,
                    CaseSensitive: this.model.enableCaseSensitivity,
                    ShowRefreshButton: this.model.showRefreshButton,
                    ShowAudioButton: this.model.showAudioButton,
                    ResponseText: $(this._target).val(),
                    EncrytedText: this.model.encryptedCode,
                    Id: this._id,
                    HatchStyle:this.model.hatchStyle,
                    RequestType: "CaptchaRequest"
                };
                if (this.model.requestMapper) {
                    $.ajax({
                        type: 'Post',
                        url: this.model.requestMapper,
                        data: data,
                        dataType: "html",
                        async: false,
                        success: function(CaptchaResult) {
                            proxy._onSuccess(CaptchaResult);
                        },
                        error: function(e) {

                        }
                    });
                }
				else
                {
                    if (this.model.pathName)
                    {                   
                       $.ajax({
                        type: 'POST',
                        url: this.model.pathName+"/"+this.model.mapper,                        
                       data: '{encryptedCode: "'+this.model.encryptedCode+'",characterSet:"'+this.model.characterSet+'",height:"'+this.model.height+'",targerValue:"'+$(this._target).val()+'",minimumLength:"'+this.model.minimumLength+'",maximumLength:"'+this.model.maximumLength+'",hatchStyle:"'+this.model.hatchStyle+'"}',                        
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",         
                        async: false,
                        success: function(CaptchaResult) {
                            proxy._onSuccessAsp(CaptchaResult);
                            return;
                        },
                        error: function(e) {
                        proxy._trigger("refreshFailure");
                            return;
                        }
                    });
                    }
                   }
                //Check if invalid and stop form submit
                if (!this.model.isValid && this.model.enableAutoValidation) {
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }
            },
            //Hanlder for captcha refresh event
            refresh : function (event) {
                var proxy = this;
                var data = {
                    Height: this.model.height,
                    Width: this.model.width,
                    CharacterSet: this.model.characterSet,
                    MaximumLength: this.model.maximumLength, 
                    MinimumLength: this.model.minimumLength,                   
                    CaseSensitive: this.model.enableCaseSensitivity,
                    ResponseText: $(this._target).val(),
                    EncrytedText: this.model.encryptedCode,
                    ShowRefreshButton: this.model.showRefreshButton,
                    ShowAudioButton:this.model.showAudioButton,                 
                    Id: this._id,
                    HatchStyle:this.model.hatchStyle,
                    RequestType: "CaptchaRequest"
                };
                var handler = this.model.refreshBegin;
                var eventArgs = this.model;
                if (handler) {
                    handler(proxy, eventArgs);
                    if (eventArgs.getCancel()) {
                        return false;
                    }
                }
                if (this.model.requestMapper) {          
                    $.ajax({
                        type: 'Post',
                        url: this.model.requestMapper,
                        data: data,
                        dataType: "html",
                        async: false,
                        success: function (CaptchaRefresh) {
                            proxy._onRefreshSuccess(CaptchaRefresh);
                            proxy._trigger("refreshSuccess")
                                return;
                        },
                        error: function (errData) {                            
                            proxy._trigger("refreshFailure")
                            return;
                        },
                        complete: function (jqXHR, textStatus) {                           
                            proxy._trigger("refreshComplete")
                            return;
                        }
                    });
                }
                 else 
                 {  
                    if (this.model.pathName)
                     {
                         $.ajax({
                        type: 'POST',
                        url: this.model.pathName+"/"+this.model.mapper,                        
                        data: '{encryptedCode: "'+this.model.encryptedCode+'",characterSet:"'+this.model.characterSet+'",height:"'+this.model.height+'",targerValue:"'+$(this._target).val()+'",minimumLength:"'+this.model.minimumLength+'",maximumLength:"'+this.model.maximumLength+'",hatchStyle:"'+this.model.hatchStyle+'"}',                        
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",                   
                        success: function (CaptchaRefresh) {
                            proxy._onRefreshSuccessAsp(CaptchaRefresh);
                            proxy._trigger("refreshSuccess")
                                return;
                        },
                        error: function (errData) {                            
                            proxy._trigger("refreshFailure")
                            return;
                        },
                        complete: function (jqXHR, textStatus) {                           
                            proxy._trigger("refreshComplete")
                            return;
                        }
                    });
                   }
                 }
            } 
    })      
})(jQuery, Syncfusion);;